define(["api/SplunkVisualizationBase","api/SplunkVisualizationUtils"], function(__WEBPACK_EXTERNAL_MODULE_4__, __WEBPACK_EXTERNAL_MODULE_5__) { return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*
	 * Visualization source
	 */
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [
	        __webpack_require__(1),
	        __webpack_require__(2),
	        __webpack_require__(4),
	        __webpack_require__(5),
	        // Add required assets to this list
	        __webpack_require__(6),
	        __webpack_require__(7),
	        __webpack_require__(39)
	    ], __WEBPACK_AMD_DEFINE_RESULT__ = function(
	        $,
	        _,
	        SplunkVisualizationBase,
	        vizUtils,
	        G2,
	        d3,
	        select2
	    ) {

	        // Extend from SplunkVisualizationBase
	        return SplunkVisualizationBase.extend({

	            initialize: function() {
	                SplunkVisualizationBase.prototype.initialize.apply(this, arguments);
	                this.$el = $(this.el);
	                root = d3.select(this.el);
	                this.container = root.append("div").classed("flex-container", true);
	                this.vizPanel = this.container.append("div").classed("g2-viz", true);
	                this.chartPanel = this.vizPanel.append("div").attr("id", "chart");

	                this.controlPanel = this.container.append("div").classed("g2-control", true);
	                this.controlPanel.append("div").attr("id", "facetContainer");
	                this.controlPanel.append("div").attr("id", "geomContainer");
	                this.controlPanel.append("div").attr("id", "coordContainer");
	                this.controlPanel.append("div").attr("id", "geomAttrContainer");
	            },

	            // Optionally implement to format data returned from search. 
	            // The returned object will be passed to updateView as 'data'
	            formatData: function(data) {
	                if (data.fields.length == 0) {
	                    return undefined;
	                }

	                console.log(data);

	                let transformedData = [];
	                let fields = data.fields;
	                data.rows.map(function(row) {
	                    let item = {};
	                    for (let i = 0; i < fields.length; i++) {
	                        if ( $.isNumeric(row[i]) ) {
	                            item[fields[i].name] = parseFloat(row[i]);
	                        } else {
	                            item[fields[i].name] = row[i];
	                        }
	                        
	                    }
	                    transformedData.push(item);
	                })
	                return transformedData;
	            },

	            // Implement updateView to render a visualization.
	            //  'data' will be the data object returned from formatData or from the search
	            //  'config' will be the configuration property object
	            updateView: function(data, config) {
	                if (data == undefined) {
	                    return;
	                }
	                this._updateDataPresenting(data);
	            },

	            // Search data params
	            getInitialDataParams: function() {
	                return ({
	                    outputMode: SplunkVisualizationBase.ROW_MAJOR_OUTPUT_MODE,
	                    count: 10000
	                });
	            },

	            // Override to respond to re-sizing events
	            reflow: function() {
	                //TODO: support re-size of the chart
	            },

	            _summaryData: function(data) {
	                function isString(o) {
	                    return typeof o == "string" || (typeof o == "object" && o.constructor === String);
	                }

	                let summary = {};
	                summary.count = data.length;
	                summary.fields = [];
	                for (let p in data[0]) {
	                    let field = {};
	                    field.name = p;
	                    if (data[0][p] == null) {
	                        continue;
	                    }

	                    if (isString(data[0][p])) {
	                        field.type = "string";
	                    } else {
	                        field.type = "number";
	                    }
	                    summary.fields.push(field);
	                }

	                for (let f of summary.fields) {
	                    if (f.type == "number") {
	                        f.max = d3.max(data, x => x[f.name]);
	                        f.min = d3.min(data, x => x[f.name]);
	                        f.mean = d3.mean(data, x => x[f.name]);
	                        f.median = d3.median(data, x => x[f.name]);
	                        f.deviation = d3.deviation(data, x => x[f.name]);
	                    } else {
	                        f.values = Array.from(new Set(data.map(x => x[f.name])));
	                    }
	                }
	                return summary;
	            },

	            _hackStyle: function() {
	                // Hack the CSS style here
	                // remove the search icon which is always displayed and I dont know why
	                $(".select2-search__field").remove();
	            },

	            _updateDataPresenting: function(queryResult) {

	                const chartScriptName = "g2chart";
	                const geom = ["", "point", "path", "line", "area", "interval", "intervalStack", "polygon", "edge", "schema", "heatmap"];
	                const coord = ["", "rect", "polar", "theta", "helix"];
	                const geom_attributes = ["position", "color", "size", "shape", "opacity", "label"];
	                const querySummary = this._summaryData(queryResult);
	                const fields = querySummary.fields.map(x => x.name);

	                // initialize facet selection
	                $("#facetContainer").empty();
	                const facetSelectContainer = d3.select("#facetContainer")
	                    .append("label");

	                facetSelectContainer.text("facet");
	                facetSelectContainer.append("br");
	                const facetSelect = facetSelectContainer.append("select")
	                    .classed("select2 input-sm", true)
	                    .attr("id", "facetSelect")
	                    .attr("name", "facet");

	                $('#facetSelect').select2({
	                    data: fields,
	                    theme: "bootstrap",
	                    multiple: true,
	                    maximumSelectionLength: 2
	                });
	                $('#facetSelect').on('change', updateChart);
	                $('#facetSelect').on("select2:select", updateSelect2Order);

	                // initialize geometry selection
	                $("#geomContainer").empty();
	                const geomSelectContainer = d3.select("#geomContainer")
	                    .classed("container", true)
	                    .append("label");

	                geomSelectContainer.text("geometry");
	                geomSelectContainer.append("br");
	                const geomSelect = geomSelectContainer.append("select")
	                    .classed("select2 input-sm", true)
	                    .attr("id", "geomSelect")
	                    .attr("name", "geom");

	                $('#geomSelect').select2({
	                    data: geom,
	                    theme: "bootstrap"
	                });
	                $('#geomSelect').on('change', updateChart);
	                $('#geomSelect').on('select2:select', onSelect);
	                $('#geomSelect').on('select2:close', onClosing);

	                // initialize coord selection
	                $("#coordContainer").empty();
	                const coordSelectContainer = d3.select("#coordContainer")
	                    .classed("container", true)
	                    .append("label");

	                coordSelectContainer.text("coord");
	                coordSelectContainer.append("br");
	                const coordSelect = coordSelectContainer.append("select")
	                    .classed("select2 input-sm", true)
	                    .attr("id", "coordSelect")
	                    .attr("name", "coord");

	                $('#coordSelect').select2({
	                    data: coord,
	                    theme: "bootstrap"
	                });
	                $('#coordSelect').on('change', updateChart);

	                // initialize geometry attributes selection
	                $("#geomAttrContainer").empty();
	                const attrContainer = d3.select("#geomAttrContainer").classed("container", true).selectAll("div").data(geom_attributes)
	                    .enter().append("div").append("label");
	                attrContainer.text(d => d);
	                attrContainer.append("br");
	                attrContainer.append("select")
	                    .classed("select2 input-sm select2-multiple", true)
	                    .attr("id", d => d + "attr")
	                    .attr("name", d => d);

	                geom_attributes.map(function(attr) {
	                    if ( attr == 'position') {
	                        $('#' + attr + "attr").select2({
	                            data: fields,
	                            multiple: true,
	                            theme: "bootstrap",
	                            maximumSelectionLength: 2
	                        });
	                        $('#' + attr + "attr").on("select2:select", updateSelect2Order);
	                    } else {
	                        $('#' + attr + "attr").select2({
	                            data: fields,
	                            multiple: true,
	                            theme: "bootstrap",
	                            maximumSelectionLength: 1
	                        });
	                    }
	                    $('#' + attr + "attr").on('change', updateChart);
	                });

	                let me = this;
	                me._hackStyle();

	                function getFacet(faced, grammarScript) {
	                    let facedType = "list";
	                    let facedScript = ""
	                    grammarScript = grammarScript.replace(new RegExp(chartScriptName, 'g'), "view");
	                    if (faced.length == 2) {
	                        facedType = "rect";
	                    }
	                    let facedFields = faced.join("', '")
	                    facedScript = facedScript + `${ chartScriptName }.facet('${ facedType }', {\n`;
	                    facedScript = facedScript + `  fields: [ '${ facedFields }' ],\n`;
	                    facedScript = facedScript + `  eachView(view) {\n`;
	                    facedScript = facedScript + `    ${ grammarScript };\n`;
	                    facedScript = facedScript + `  }\n`;
	                    facedScript = facedScript + `});\n`;
	                    return facedScript
	                }

	                function getGrammar() {
	                    let grammar = {},
	                        grammarScript = chartScriptName + ".";
	                    grammar.geom = $('#geomSelect').val();
	                    grammar.coord = $('#coordSelect').val();
	                    grammar.faced = $('#facetSelect').val();
	                    geom_attributes.map(function(attr) {
	                        grammar[attr] = $('#' + attr + "attr").val();
	                    });

	                    grammarScript = grammarScript + grammar.geom + "()";
	                    try {
	                        geom_attributes.map(function(attr) {
	                            if (!grammar[attr]){
	                                return;
	                            }
	                            if (grammar[attr].length > 0) {
	                                grammarScript = grammarScript + "." + attr + "('" + grammar[attr].join("*") + "')";
	                            }
	                        });
	                    } catch (err) {
	                        // do nothing if it failed to create the grammer
	                        // TODO: should popup some error msg
	                    }


	                    if (grammar.coord) {
	                        grammarScript = chartScriptName + "." + "coord('" + grammar.coord + "');\n" + grammarScript;
	                    } else {
	                        grammarScript = grammarScript + ";";
	                    }

	                    if (grammar.faced) {
	                        if (grammar.faced.length == 1 ||
	                            grammar.faced.length == 2) {
	                            grammarScript = getFacet(grammar.faced, grammarScript);
	                        }
	                    }

	                    console.log(grammarScript)
	                    return grammarScript;
	                }

	                function updateChart() {
	                    const grammer = getGrammar();
	                    try {
	                        $("#chart").empty();
	                        let g2chart = new G2.Chart({
	                            container: 'chart',
	                            height: 600,
	                            forceFit: true
	                        });
	                        g2chart.source(queryResult);
	                        eval(grammer);
	                        g2chart.render();
	                    } catch (err) {
	                        //console.log(err);
	                    }
	                }

	                function updateSelect2Order(evt) {
	                    let element = evt.params.data.element;
	                    let $element = $(element);
	                    $element.detach();
	                    $(this).append($element);
	                    $(this).trigger("change");
	                    if (!evt.params.originalEvent) {
	                        return
	                    }
	                    evt.params.originalEvent.stopPropagation();
	                }

	                function onSelect(evt) {
	                    console.log("select2 component is selected!");
	                }

	                function onClosing(evt) {
	                    console.log("select2 component is closing!");
	                    evt.params.originalEvent.stopPropagation();
	                }
	            }
	        });
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
	 * jQuery JavaScript Library v3.3.1
	 * https://jquery.com/
	 *
	 * Includes Sizzle.js
	 * https://sizzlejs.com/
	 *
	 * Copyright JS Foundation and other contributors
	 * Released under the MIT license
	 * https://jquery.org/license
	 *
	 * Date: 2018-01-20T17:24Z
	 */
	( function( global, factory ) {

		"use strict";

		if ( typeof module === "object" && typeof module.exports === "object" ) {

			// For CommonJS and CommonJS-like environments where a proper `window`
			// is present, execute the factory and get jQuery.
			// For environments that do not have a `window` with a `document`
			// (such as Node.js), expose a factory as module.exports.
			// This accentuates the need for the creation of a real `window`.
			// e.g. var jQuery = require("jquery")(window);
			// See ticket #14549 for more info.
			module.exports = global.document ?
				factory( global, true ) :
				function( w ) {
					if ( !w.document ) {
						throw new Error( "jQuery requires a window with a document" );
					}
					return factory( w );
				};
		} else {
			factory( global );
		}

	// Pass this if window is not defined yet
	} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

	// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
	// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
	// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
	// enough that all such attempts are guarded in a try block.
	"use strict";

	var arr = [];

	var document = window.document;

	var getProto = Object.getPrototypeOf;

	var slice = arr.slice;

	var concat = arr.concat;

	var push = arr.push;

	var indexOf = arr.indexOf;

	var class2type = {};

	var toString = class2type.toString;

	var hasOwn = class2type.hasOwnProperty;

	var fnToString = hasOwn.toString;

	var ObjectFunctionString = fnToString.call( Object );

	var support = {};

	var isFunction = function isFunction( obj ) {

	      // Support: Chrome <=57, Firefox <=52
	      // In some browsers, typeof returns "function" for HTML <object> elements
	      // (i.e., `typeof document.createElement( "object" ) === "function"`).
	      // We don't want to classify *any* DOM node as a function.
	      return typeof obj === "function" && typeof obj.nodeType !== "number";
	  };


	var isWindow = function isWindow( obj ) {
			return obj != null && obj === obj.window;
		};




		var preservedScriptAttributes = {
			type: true,
			src: true,
			noModule: true
		};

		function DOMEval( code, doc, node ) {
			doc = doc || document;

			var i,
				script = doc.createElement( "script" );

			script.text = code;
			if ( node ) {
				for ( i in preservedScriptAttributes ) {
					if ( node[ i ] ) {
						script[ i ] = node[ i ];
					}
				}
			}
			doc.head.appendChild( script ).parentNode.removeChild( script );
		}


	function toType( obj ) {
		if ( obj == null ) {
			return obj + "";
		}

		// Support: Android <=2.3 only (functionish RegExp)
		return typeof obj === "object" || typeof obj === "function" ?
			class2type[ toString.call( obj ) ] || "object" :
			typeof obj;
	}
	/* global Symbol */
	// Defining this global in .eslintrc.json would create a danger of using the global
	// unguarded in another place, it seems safer to define global only for this module



	var
		version = "3.3.1",

		// Define a local copy of jQuery
		jQuery = function( selector, context ) {

			// The jQuery object is actually just the init constructor 'enhanced'
			// Need init if jQuery is called (just allow error to be thrown if not included)
			return new jQuery.fn.init( selector, context );
		},

		// Support: Android <=4.0 only
		// Make sure we trim BOM and NBSP
		rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

	jQuery.fn = jQuery.prototype = {

		// The current version of jQuery being used
		jquery: version,

		constructor: jQuery,

		// The default length of a jQuery object is 0
		length: 0,

		toArray: function() {
			return slice.call( this );
		},

		// Get the Nth element in the matched element set OR
		// Get the whole matched element set as a clean array
		get: function( num ) {

			// Return all the elements in a clean array
			if ( num == null ) {
				return slice.call( this );
			}

			// Return just the one element from the set
			return num < 0 ? this[ num + this.length ] : this[ num ];
		},

		// Take an array of elements and push it onto the stack
		// (returning the new matched element set)
		pushStack: function( elems ) {

			// Build a new jQuery matched element set
			var ret = jQuery.merge( this.constructor(), elems );

			// Add the old object onto the stack (as a reference)
			ret.prevObject = this;

			// Return the newly-formed element set
			return ret;
		},

		// Execute a callback for every element in the matched set.
		each: function( callback ) {
			return jQuery.each( this, callback );
		},

		map: function( callback ) {
			return this.pushStack( jQuery.map( this, function( elem, i ) {
				return callback.call( elem, i, elem );
			} ) );
		},

		slice: function() {
			return this.pushStack( slice.apply( this, arguments ) );
		},

		first: function() {
			return this.eq( 0 );
		},

		last: function() {
			return this.eq( -1 );
		},

		eq: function( i ) {
			var len = this.length,
				j = +i + ( i < 0 ? len : 0 );
			return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
		},

		end: function() {
			return this.prevObject || this.constructor();
		},

		// For internal use only.
		// Behaves like an Array's method, not like a jQuery method.
		push: push,
		sort: arr.sort,
		splice: arr.splice
	};

	jQuery.extend = jQuery.fn.extend = function() {
		var options, name, src, copy, copyIsArray, clone,
			target = arguments[ 0 ] || {},
			i = 1,
			length = arguments.length,
			deep = false;

		// Handle a deep copy situation
		if ( typeof target === "boolean" ) {
			deep = target;

			// Skip the boolean and the target
			target = arguments[ i ] || {};
			i++;
		}

		// Handle case when target is a string or something (possible in deep copy)
		if ( typeof target !== "object" && !isFunction( target ) ) {
			target = {};
		}

		// Extend jQuery itself if only one argument is passed
		if ( i === length ) {
			target = this;
			i--;
		}

		for ( ; i < length; i++ ) {

			// Only deal with non-null/undefined values
			if ( ( options = arguments[ i ] ) != null ) {

				// Extend the base object
				for ( name in options ) {
					src = target[ name ];
					copy = options[ name ];

					// Prevent never-ending loop
					if ( target === copy ) {
						continue;
					}

					// Recurse if we're merging plain objects or arrays
					if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
						( copyIsArray = Array.isArray( copy ) ) ) ) {

						if ( copyIsArray ) {
							copyIsArray = false;
							clone = src && Array.isArray( src ) ? src : [];

						} else {
							clone = src && jQuery.isPlainObject( src ) ? src : {};
						}

						// Never move original objects, clone them
						target[ name ] = jQuery.extend( deep, clone, copy );

					// Don't bring in undefined values
					} else if ( copy !== undefined ) {
						target[ name ] = copy;
					}
				}
			}
		}

		// Return the modified object
		return target;
	};

	jQuery.extend( {

		// Unique for each copy of jQuery on the page
		expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

		// Assume jQuery is ready without the ready module
		isReady: true,

		error: function( msg ) {
			throw new Error( msg );
		},

		noop: function() {},

		isPlainObject: function( obj ) {
			var proto, Ctor;

			// Detect obvious negatives
			// Use toString instead of jQuery.type to catch host objects
			if ( !obj || toString.call( obj ) !== "[object Object]" ) {
				return false;
			}

			proto = getProto( obj );

			// Objects with no prototype (e.g., `Object.create( null )`) are plain
			if ( !proto ) {
				return true;
			}

			// Objects with prototype are plain iff they were constructed by a global Object function
			Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
			return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
		},

		isEmptyObject: function( obj ) {

			/* eslint-disable no-unused-vars */
			// See https://github.com/eslint/eslint/issues/6125
			var name;

			for ( name in obj ) {
				return false;
			}
			return true;
		},

		// Evaluates a script in a global context
		globalEval: function( code ) {
			DOMEval( code );
		},

		each: function( obj, callback ) {
			var length, i = 0;

			if ( isArrayLike( obj ) ) {
				length = obj.length;
				for ( ; i < length; i++ ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			} else {
				for ( i in obj ) {
					if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
						break;
					}
				}
			}

			return obj;
		},

		// Support: Android <=4.0 only
		trim: function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

		// results is for internal usage only
		makeArray: function( arr, results ) {
			var ret = results || [];

			if ( arr != null ) {
				if ( isArrayLike( Object( arr ) ) ) {
					jQuery.merge( ret,
						typeof arr === "string" ?
						[ arr ] : arr
					);
				} else {
					push.call( ret, arr );
				}
			}

			return ret;
		},

		inArray: function( elem, arr, i ) {
			return arr == null ? -1 : indexOf.call( arr, elem, i );
		},

		// Support: Android <=4.0 only, PhantomJS 1 only
		// push.apply(_, arraylike) throws on ancient WebKit
		merge: function( first, second ) {
			var len = +second.length,
				j = 0,
				i = first.length;

			for ( ; j < len; j++ ) {
				first[ i++ ] = second[ j ];
			}

			first.length = i;

			return first;
		},

		grep: function( elems, callback, invert ) {
			var callbackInverse,
				matches = [],
				i = 0,
				length = elems.length,
				callbackExpect = !invert;

			// Go through the array, only saving the items
			// that pass the validator function
			for ( ; i < length; i++ ) {
				callbackInverse = !callback( elems[ i ], i );
				if ( callbackInverse !== callbackExpect ) {
					matches.push( elems[ i ] );
				}
			}

			return matches;
		},

		// arg is for internal usage only
		map: function( elems, callback, arg ) {
			var length, value,
				i = 0,
				ret = [];

			// Go through the array, translating each of the items to their new values
			if ( isArrayLike( elems ) ) {
				length = elems.length;
				for ( ; i < length; i++ ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}

			// Go through every key on the object,
			} else {
				for ( i in elems ) {
					value = callback( elems[ i ], i, arg );

					if ( value != null ) {
						ret.push( value );
					}
				}
			}

			// Flatten any nested arrays
			return concat.apply( [], ret );
		},

		// A global GUID counter for objects
		guid: 1,

		// jQuery.support is not used in Core but other projects attach their
		// properties to it so it needs to exist.
		support: support
	} );

	if ( typeof Symbol === "function" ) {
		jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
	}

	// Populate the class2type map
	jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	function( i, name ) {
		class2type[ "[object " + name + "]" ] = name.toLowerCase();
	} );

	function isArrayLike( obj ) {

		// Support: real iOS 8.2 only (not reproducible in simulator)
		// `in` check used to prevent JIT error (gh-2145)
		// hasOwn isn't used here due to false negatives
		// regarding Nodelist length in IE
		var length = !!obj && "length" in obj && obj.length,
			type = toType( obj );

		if ( isFunction( obj ) || isWindow( obj ) ) {
			return false;
		}

		return type === "array" || length === 0 ||
			typeof length === "number" && length > 0 && ( length - 1 ) in obj;
	}
	var Sizzle =
	/*!
	 * Sizzle CSS Selector Engine v2.3.3
	 * https://sizzlejs.com/
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 *
	 * Date: 2016-08-08
	 */
	(function( window ) {

	var i,
		support,
		Expr,
		getText,
		isXML,
		tokenize,
		compile,
		select,
		outermostContext,
		sortInput,
		hasDuplicate,

		// Local document vars
		setDocument,
		document,
		docElem,
		documentIsHTML,
		rbuggyQSA,
		rbuggyMatches,
		matches,
		contains,

		// Instance-specific data
		expando = "sizzle" + 1 * new Date(),
		preferredDoc = window.document,
		dirruns = 0,
		done = 0,
		classCache = createCache(),
		tokenCache = createCache(),
		compilerCache = createCache(),
		sortOrder = function( a, b ) {
			if ( a === b ) {
				hasDuplicate = true;
			}
			return 0;
		},

		// Instance methods
		hasOwn = ({}).hasOwnProperty,
		arr = [],
		pop = arr.pop,
		push_native = arr.push,
		push = arr.push,
		slice = arr.slice,
		// Use a stripped-down indexOf as it's faster than native
		// https://jsperf.com/thor-indexof-vs-for/5
		indexOf = function( list, elem ) {
			var i = 0,
				len = list.length;
			for ( ; i < len; i++ ) {
				if ( list[i] === elem ) {
					return i;
				}
			}
			return -1;
		},

		booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

		// Regular expressions

		// http://www.w3.org/TR/css3-selectors/#whitespace
		whitespace = "[\\x20\\t\\r\\n\\f]",

		// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
		identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

		// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
		attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
			// Operator (capture 2)
			"*([*^$|!~]?=)" + whitespace +
			// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
			"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
			"*\\]",

		pseudos = ":(" + identifier + ")(?:\\((" +
			// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
			// 1. quoted (capture 3; capture 4 or capture 5)
			"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
			// 2. simple (capture 6)
			"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
			// 3. anything else (capture 2)
			".*" +
			")\\)|)",

		// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
		rwhitespace = new RegExp( whitespace + "+", "g" ),
		rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

		rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
		rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

		rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

		rpseudo = new RegExp( pseudos ),
		ridentifier = new RegExp( "^" + identifier + "$" ),

		matchExpr = {
			"ID": new RegExp( "^#(" + identifier + ")" ),
			"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
			"TAG": new RegExp( "^(" + identifier + "|[*])" ),
			"ATTR": new RegExp( "^" + attributes ),
			"PSEUDO": new RegExp( "^" + pseudos ),
			"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
				"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
				"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
			"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
			// For use in libraries implementing .is()
			// We use this for POS matching in `select`
			"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
				whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
		},

		rinputs = /^(?:input|select|textarea|button)$/i,
		rheader = /^h\d$/i,

		rnative = /^[^{]+\{\s*\[native \w/,

		// Easily-parseable/retrievable ID or TAG or CLASS selectors
		rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

		rsibling = /[+~]/,

		// CSS escapes
		// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
		runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
		funescape = function( _, escaped, escapedWhitespace ) {
			var high = "0x" + escaped - 0x10000;
			// NaN means non-codepoint
			// Support: Firefox<24
			// Workaround erroneous numeric interpretation of +"0x"
			return high !== high || escapedWhitespace ?
				escaped :
				high < 0 ?
					// BMP codepoint
					String.fromCharCode( high + 0x10000 ) :
					// Supplemental Plane codepoint (surrogate pair)
					String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
		},

		// CSS string/identifier serialization
		// https://drafts.csswg.org/cssom/#common-serializing-idioms
		rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
		fcssescape = function( ch, asCodePoint ) {
			if ( asCodePoint ) {

				// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
				if ( ch === "\0" ) {
					return "\uFFFD";
				}

				// Control characters and (dependent upon position) numbers get escaped as code points
				return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
			}

			// Other potentially-special ASCII characters get backslash-escaped
			return "\\" + ch;
		},

		// Used for iframes
		// See setDocument()
		// Removing the function wrapper causes a "Permission Denied"
		// error in IE
		unloadHandler = function() {
			setDocument();
		},

		disabledAncestor = addCombinator(
			function( elem ) {
				return elem.disabled === true && ("form" in elem || "label" in elem);
			},
			{ dir: "parentNode", next: "legend" }
		);

	// Optimize for push.apply( _, NodeList )
	try {
		push.apply(
			(arr = slice.call( preferredDoc.childNodes )),
			preferredDoc.childNodes
		);
		// Support: Android<4.0
		// Detect silently failing push.apply
		arr[ preferredDoc.childNodes.length ].nodeType;
	} catch ( e ) {
		push = { apply: arr.length ?

			// Leverage slice if possible
			function( target, els ) {
				push_native.apply( target, slice.call(els) );
			} :

			// Support: IE<9
			// Otherwise append directly
			function( target, els ) {
				var j = target.length,
					i = 0;
				// Can't trust NodeList.length
				while ( (target[j++] = els[i++]) ) {}
				target.length = j - 1;
			}
		};
	}

	function Sizzle( selector, context, results, seed ) {
		var m, i, elem, nid, match, groups, newSelector,
			newContext = context && context.ownerDocument,

			// nodeType defaults to 9, since context defaults to document
			nodeType = context ? context.nodeType : 9;

		results = results || [];

		// Return early from calls with invalid selector or context
		if ( typeof selector !== "string" || !selector ||
			nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

			return results;
		}

		// Try to shortcut find operations (as opposed to filters) in HTML documents
		if ( !seed ) {

			if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
				setDocument( context );
			}
			context = context || document;

			if ( documentIsHTML ) {

				// If the selector is sufficiently simple, try using a "get*By*" DOM method
				// (excepting DocumentFragment context, where the methods don't exist)
				if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

					// ID selector
					if ( (m = match[1]) ) {

						// Document context
						if ( nodeType === 9 ) {
							if ( (elem = context.getElementById( m )) ) {

								// Support: IE, Opera, Webkit
								// TODO: identify versions
								// getElementById can match elements by name instead of ID
								if ( elem.id === m ) {
									results.push( elem );
									return results;
								}
							} else {
								return results;
							}

						// Element context
						} else {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( newContext && (elem = newContext.getElementById( m )) &&
								contains( context, elem ) &&
								elem.id === m ) {

								results.push( elem );
								return results;
							}
						}

					// Type selector
					} else if ( match[2] ) {
						push.apply( results, context.getElementsByTagName( selector ) );
						return results;

					// Class selector
					} else if ( (m = match[3]) && support.getElementsByClassName &&
						context.getElementsByClassName ) {

						push.apply( results, context.getElementsByClassName( m ) );
						return results;
					}
				}

				// Take advantage of querySelectorAll
				if ( support.qsa &&
					!compilerCache[ selector + " " ] &&
					(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

					if ( nodeType !== 1 ) {
						newContext = context;
						newSelector = selector;

					// qSA looks outside Element context, which is not what we want
					// Thanks to Andrew Dupont for this workaround technique
					// Support: IE <=8
					// Exclude object elements
					} else if ( context.nodeName.toLowerCase() !== "object" ) {

						// Capture the context ID, setting it first if necessary
						if ( (nid = context.getAttribute( "id" )) ) {
							nid = nid.replace( rcssescape, fcssescape );
						} else {
							context.setAttribute( "id", (nid = expando) );
						}

						// Prefix every selector in the list
						groups = tokenize( selector );
						i = groups.length;
						while ( i-- ) {
							groups[i] = "#" + nid + " " + toSelector( groups[i] );
						}
						newSelector = groups.join( "," );

						// Expand context for sibling selectors
						newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
							context;
					}

					if ( newSelector ) {
						try {
							push.apply( results,
								newContext.querySelectorAll( newSelector )
							);
							return results;
						} catch ( qsaError ) {
						} finally {
							if ( nid === expando ) {
								context.removeAttribute( "id" );
							}
						}
					}
				}
			}
		}

		// All others
		return select( selector.replace( rtrim, "$1" ), context, results, seed );
	}

	/**
	 * Create key-value caches of limited size
	 * @returns {function(string, object)} Returns the Object data after storing it on itself with
	 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
	 *	deleting the oldest entry
	 */
	function createCache() {
		var keys = [];

		function cache( key, value ) {
			// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
			if ( keys.push( key + " " ) > Expr.cacheLength ) {
				// Only keep the most recent entries
				delete cache[ keys.shift() ];
			}
			return (cache[ key + " " ] = value);
		}
		return cache;
	}

	/**
	 * Mark a function for special use by Sizzle
	 * @param {Function} fn The function to mark
	 */
	function markFunction( fn ) {
		fn[ expando ] = true;
		return fn;
	}

	/**
	 * Support testing using an element
	 * @param {Function} fn Passed the created element and returns a boolean result
	 */
	function assert( fn ) {
		var el = document.createElement("fieldset");

		try {
			return !!fn( el );
		} catch (e) {
			return false;
		} finally {
			// Remove from its parent by default
			if ( el.parentNode ) {
				el.parentNode.removeChild( el );
			}
			// release memory in IE
			el = null;
		}
	}

	/**
	 * Adds the same handler for all of the specified attrs
	 * @param {String} attrs Pipe-separated list of attributes
	 * @param {Function} handler The method that will be applied
	 */
	function addHandle( attrs, handler ) {
		var arr = attrs.split("|"),
			i = arr.length;

		while ( i-- ) {
			Expr.attrHandle[ arr[i] ] = handler;
		}
	}

	/**
	 * Checks document order of two siblings
	 * @param {Element} a
	 * @param {Element} b
	 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
	 */
	function siblingCheck( a, b ) {
		var cur = b && a,
			diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
				a.sourceIndex - b.sourceIndex;

		// Use IE sourceIndex if available on both nodes
		if ( diff ) {
			return diff;
		}

		// Check if b follows a
		if ( cur ) {
			while ( (cur = cur.nextSibling) ) {
				if ( cur === b ) {
					return -1;
				}
			}
		}

		return a ? 1 : -1;
	}

	/**
	 * Returns a function to use in pseudos for input types
	 * @param {String} type
	 */
	function createInputPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for buttons
	 * @param {String} type
	 */
	function createButtonPseudo( type ) {
		return function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return (name === "input" || name === "button") && elem.type === type;
		};
	}

	/**
	 * Returns a function to use in pseudos for :enabled/:disabled
	 * @param {Boolean} disabled true for :disabled; false for :enabled
	 */
	function createDisabledPseudo( disabled ) {

		// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
		return function( elem ) {

			// Only certain elements can match :enabled or :disabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
			// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
			if ( "form" in elem ) {

				// Check for inherited disabledness on relevant non-disabled elements:
				// * listed form-associated elements in a disabled fieldset
				//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
				// * option elements in a disabled optgroup
				//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
				// All such elements have a "form" property.
				if ( elem.parentNode && elem.disabled === false ) {

					// Option elements defer to a parent optgroup if present
					if ( "label" in elem ) {
						if ( "label" in elem.parentNode ) {
							return elem.parentNode.disabled === disabled;
						} else {
							return elem.disabled === disabled;
						}
					}

					// Support: IE 6 - 11
					// Use the isDisabled shortcut property to check for disabled fieldset ancestors
					return elem.isDisabled === disabled ||

						// Where there is no isDisabled, check manually
						/* jshint -W018 */
						elem.isDisabled !== !disabled &&
							disabledAncestor( elem ) === disabled;
				}

				return elem.disabled === disabled;

			// Try to winnow out elements that can't be disabled before trusting the disabled property.
			// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
			// even exist on them, let alone have a boolean value.
			} else if ( "label" in elem ) {
				return elem.disabled === disabled;
			}

			// Remaining elements are neither :enabled nor :disabled
			return false;
		};
	}

	/**
	 * Returns a function to use in pseudos for positionals
	 * @param {Function} fn
	 */
	function createPositionalPseudo( fn ) {
		return markFunction(function( argument ) {
			argument = +argument;
			return markFunction(function( seed, matches ) {
				var j,
					matchIndexes = fn( [], seed.length, argument ),
					i = matchIndexes.length;

				// Match elements found at the specified indexes
				while ( i-- ) {
					if ( seed[ (j = matchIndexes[i]) ] ) {
						seed[j] = !(matches[j] = seed[j]);
					}
				}
			});
		});
	}

	/**
	 * Checks a node for validity as a Sizzle context
	 * @param {Element|Object=} context
	 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
	 */
	function testContext( context ) {
		return context && typeof context.getElementsByTagName !== "undefined" && context;
	}

	// Expose support vars for convenience
	support = Sizzle.support = {};

	/**
	 * Detects XML nodes
	 * @param {Element|Object} elem An element or a document
	 * @returns {Boolean} True iff elem is a non-HTML XML node
	 */
	isXML = Sizzle.isXML = function( elem ) {
		// documentElement is verified for cases where it doesn't yet exist
		// (such as loading iframes in IE - #4833)
		var documentElement = elem && (elem.ownerDocument || elem).documentElement;
		return documentElement ? documentElement.nodeName !== "HTML" : false;
	};

	/**
	 * Sets document-related variables once based on the current document
	 * @param {Element|Object} [doc] An element or document object to use to set the document
	 * @returns {Object} Returns the current document
	 */
	setDocument = Sizzle.setDocument = function( node ) {
		var hasCompare, subWindow,
			doc = node ? node.ownerDocument || node : preferredDoc;

		// Return early if doc is invalid or already selected
		if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
			return document;
		}

		// Update global variables
		document = doc;
		docElem = document.documentElement;
		documentIsHTML = !isXML( document );

		// Support: IE 9-11, Edge
		// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
		if ( preferredDoc !== document &&
			(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

			// Support: IE 11, Edge
			if ( subWindow.addEventListener ) {
				subWindow.addEventListener( "unload", unloadHandler, false );

			// Support: IE 9 - 10 only
			} else if ( subWindow.attachEvent ) {
				subWindow.attachEvent( "onunload", unloadHandler );
			}
		}

		/* Attributes
		---------------------------------------------------------------------- */

		// Support: IE<8
		// Verify that getAttribute really returns attributes and not properties
		// (excepting IE8 booleans)
		support.attributes = assert(function( el ) {
			el.className = "i";
			return !el.getAttribute("className");
		});

		/* getElement(s)By*
		---------------------------------------------------------------------- */

		// Check if getElementsByTagName("*") returns only elements
		support.getElementsByTagName = assert(function( el ) {
			el.appendChild( document.createComment("") );
			return !el.getElementsByTagName("*").length;
		});

		// Support: IE<9
		support.getElementsByClassName = rnative.test( document.getElementsByClassName );

		// Support: IE<10
		// Check if getElementById returns elements by name
		// The broken getElementById methods don't pick up programmatically-set names,
		// so use a roundabout getElementsByName test
		support.getById = assert(function( el ) {
			docElem.appendChild( el ).id = expando;
			return !document.getElementsByName || !document.getElementsByName( expando ).length;
		});

		// ID filter and find
		if ( support.getById ) {
			Expr.filter["ID"] = function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					return elem.getAttribute("id") === attrId;
				};
			};
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var elem = context.getElementById( id );
					return elem ? [ elem ] : [];
				}
			};
		} else {
			Expr.filter["ID"] =  function( id ) {
				var attrId = id.replace( runescape, funescape );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== "undefined" &&
						elem.getAttributeNode("id");
					return node && node.value === attrId;
				};
			};

			// Support: IE 6 - 7 only
			// getElementById is not reliable as a find shortcut
			Expr.find["ID"] = function( id, context ) {
				if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
					var node, i, elems,
						elem = context.getElementById( id );

					if ( elem ) {

						// Verify the id attribute
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}

						// Fall back on getElementsByName
						elems = context.getElementsByName( id );
						i = 0;
						while ( (elem = elems[i++]) ) {
							node = elem.getAttributeNode("id");
							if ( node && node.value === id ) {
								return [ elem ];
							}
						}
					}

					return [];
				}
			};
		}

		// Tag
		Expr.find["TAG"] = support.getElementsByTagName ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== "undefined" ) {
					return context.getElementsByTagName( tag );

				// DocumentFragment nodes don't have gEBTN
				} else if ( support.qsa ) {
					return context.querySelectorAll( tag );
				}
			} :

			function( tag, context ) {
				var elem,
					tmp = [],
					i = 0,
					// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
					results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					while ( (elem = results[i++]) ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			};

		// Class
		Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
			if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
				return context.getElementsByClassName( className );
			}
		};

		/* QSA/matchesSelector
		---------------------------------------------------------------------- */

		// QSA and matchesSelector support

		// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
		rbuggyMatches = [];

		// qSa(:focus) reports false when true (Chrome 21)
		// We allow this because of a bug in IE8/9 that throws an error
		// whenever `document.activeElement` is accessed on an iframe
		// So, we allow :focus to pass through QSA all the time to avoid the IE error
		// See https://bugs.jquery.com/ticket/13378
		rbuggyQSA = [];

		if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
			// Build QSA regex
			// Regex strategy adopted from Diego Perini
			assert(function( el ) {
				// Select is set to empty string on purpose
				// This is to test IE's treatment of not explicitly
				// setting a boolean content attribute,
				// since its presence should be enough
				// https://bugs.jquery.com/ticket/12359
				docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
					"<select id='" + expando + "-\r\\' msallowcapture=''>" +
					"<option selected=''></option></select>";

				// Support: IE8, Opera 11-12.16
				// Nothing should be selected when empty strings follow ^= or $= or *=
				// The test attribute must be unknown in Opera but "safe" for WinRT
				// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
				if ( el.querySelectorAll("[msallowcapture^='']").length ) {
					rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
				}

				// Support: IE8
				// Boolean attributes and "value" are not treated correctly
				if ( !el.querySelectorAll("[selected]").length ) {
					rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
				}

				// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
				if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
					rbuggyQSA.push("~=");
				}

				// Webkit/Opera - :checked should return selected option elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				// IE8 throws error here and will not see later tests
				if ( !el.querySelectorAll(":checked").length ) {
					rbuggyQSA.push(":checked");
				}

				// Support: Safari 8+, iOS 8+
				// https://bugs.webkit.org/show_bug.cgi?id=136851
				// In-page `selector#id sibling-combinator selector` fails
				if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
					rbuggyQSA.push(".#.+[+~]");
				}
			});

			assert(function( el ) {
				el.innerHTML = "<a href='' disabled='disabled'></a>" +
					"<select disabled='disabled'><option/></select>";

				// Support: Windows 8 Native Apps
				// The type and name attributes are restricted during .innerHTML assignment
				var input = document.createElement("input");
				input.setAttribute( "type", "hidden" );
				el.appendChild( input ).setAttribute( "name", "D" );

				// Support: IE8
				// Enforce case-sensitivity of name attribute
				if ( el.querySelectorAll("[name=d]").length ) {
					rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
				}

				// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
				// IE8 throws error here and will not see later tests
				if ( el.querySelectorAll(":enabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Support: IE9-11+
				// IE's :disabled selector does not pick up the children of disabled fieldsets
				docElem.appendChild( el ).disabled = true;
				if ( el.querySelectorAll(":disabled").length !== 2 ) {
					rbuggyQSA.push( ":enabled", ":disabled" );
				}

				// Opera 10-11 does not throw on post-comma invalid pseudos
				el.querySelectorAll("*,:x");
				rbuggyQSA.push(",.*:");
			});
		}

		if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
			docElem.webkitMatchesSelector ||
			docElem.mozMatchesSelector ||
			docElem.oMatchesSelector ||
			docElem.msMatchesSelector) )) ) {

			assert(function( el ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				support.disconnectedMatch = matches.call( el, "*" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				matches.call( el, "[s!='']:x" );
				rbuggyMatches.push( "!=", pseudos );
			});
		}

		rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
		rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

		/* Contains
		---------------------------------------------------------------------- */
		hasCompare = rnative.test( docElem.compareDocumentPosition );

		// Element contains another
		// Purposefully self-exclusive
		// As in, an element does not contain itself
		contains = hasCompare || rnative.test( docElem.contains ) ?
			function( a, b ) {
				var adown = a.nodeType === 9 ? a.documentElement : a,
					bup = b && b.parentNode;
				return a === bup || !!( bup && bup.nodeType === 1 && (
					adown.contains ?
						adown.contains( bup ) :
						a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
				));
			} :
			function( a, b ) {
				if ( b ) {
					while ( (b = b.parentNode) ) {
						if ( b === a ) {
							return true;
						}
					}
				}
				return false;
			};

		/* Sorting
		---------------------------------------------------------------------- */

		// Document order sorting
		sortOrder = hasCompare ?
		function( a, b ) {

			// Flag for duplicate removal
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			// Sort on method existence if only one input has compareDocumentPosition
			var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
			if ( compare ) {
				return compare;
			}

			// Calculate position if both inputs belong to the same document
			compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
				a.compareDocumentPosition( b ) :

				// Otherwise we know they are disconnected
				1;

			// Disconnected nodes
			if ( compare & 1 ||
				(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

				// Choose the first element that is related to our preferred document
				if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
					return -1;
				}
				if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
					return 1;
				}

				// Maintain original order
				return sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;
			}

			return compare & 4 ? -1 : 1;
		} :
		function( a, b ) {
			// Exit early if the nodes are identical
			if ( a === b ) {
				hasDuplicate = true;
				return 0;
			}

			var cur,
				i = 0,
				aup = a.parentNode,
				bup = b.parentNode,
				ap = [ a ],
				bp = [ b ];

			// Parentless nodes are either documents or disconnected
			if ( !aup || !bup ) {
				return a === document ? -1 :
					b === document ? 1 :
					aup ? -1 :
					bup ? 1 :
					sortInput ?
					( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
					0;

			// If the nodes are siblings, we can do a quick check
			} else if ( aup === bup ) {
				return siblingCheck( a, b );
			}

			// Otherwise we need full lists of their ancestors for comparison
			cur = a;
			while ( (cur = cur.parentNode) ) {
				ap.unshift( cur );
			}
			cur = b;
			while ( (cur = cur.parentNode) ) {
				bp.unshift( cur );
			}

			// Walk down the tree looking for a discrepancy
			while ( ap[i] === bp[i] ) {
				i++;
			}

			return i ?
				// Do a sibling check if the nodes have a common ancestor
				siblingCheck( ap[i], bp[i] ) :

				// Otherwise nodes in our document sort first
				ap[i] === preferredDoc ? -1 :
				bp[i] === preferredDoc ? 1 :
				0;
		};

		return document;
	};

	Sizzle.matches = function( expr, elements ) {
		return Sizzle( expr, null, null, elements );
	};

	Sizzle.matchesSelector = function( elem, expr ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		// Make sure that attribute selectors are quoted
		expr = expr.replace( rattributeQuotes, "='$1']" );

		if ( support.matchesSelector && documentIsHTML &&
			!compilerCache[ expr + " " ] &&
			( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
			( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

			try {
				var ret = matches.call( elem, expr );

				// IE 9's matchesSelector returns false on disconnected nodes
				if ( ret || support.disconnectedMatch ||
						// As well, disconnected nodes are said to be in a document
						// fragment in IE 9
						elem.document && elem.document.nodeType !== 11 ) {
					return ret;
				}
			} catch (e) {}
		}

		return Sizzle( expr, document, null, [ elem ] ).length > 0;
	};

	Sizzle.contains = function( context, elem ) {
		// Set document vars if needed
		if ( ( context.ownerDocument || context ) !== document ) {
			setDocument( context );
		}
		return contains( context, elem );
	};

	Sizzle.attr = function( elem, name ) {
		// Set document vars if needed
		if ( ( elem.ownerDocument || elem ) !== document ) {
			setDocument( elem );
		}

		var fn = Expr.attrHandle[ name.toLowerCase() ],
			// Don't get fooled by Object.prototype properties (jQuery #13807)
			val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
				fn( elem, name, !documentIsHTML ) :
				undefined;

		return val !== undefined ?
			val :
			support.attributes || !documentIsHTML ?
				elem.getAttribute( name ) :
				(val = elem.getAttributeNode(name)) && val.specified ?
					val.value :
					null;
	};

	Sizzle.escape = function( sel ) {
		return (sel + "").replace( rcssescape, fcssescape );
	};

	Sizzle.error = function( msg ) {
		throw new Error( "Syntax error, unrecognized expression: " + msg );
	};

	/**
	 * Document sorting and removing duplicates
	 * @param {ArrayLike} results
	 */
	Sizzle.uniqueSort = function( results ) {
		var elem,
			duplicates = [],
			j = 0,
			i = 0;

		// Unless we *know* we can detect duplicates, assume their presence
		hasDuplicate = !support.detectDuplicates;
		sortInput = !support.sortStable && results.slice( 0 );
		results.sort( sortOrder );

		if ( hasDuplicate ) {
			while ( (elem = results[i++]) ) {
				if ( elem === results[ i ] ) {
					j = duplicates.push( i );
				}
			}
			while ( j-- ) {
				results.splice( duplicates[ j ], 1 );
			}
		}

		// Clear input after sorting to release objects
		// See https://github.com/jquery/sizzle/pull/225
		sortInput = null;

		return results;
	};

	/**
	 * Utility function for retrieving the text value of an array of DOM nodes
	 * @param {Array|Element} elem
	 */
	getText = Sizzle.getText = function( elem ) {
		var node,
			ret = "",
			i = 0,
			nodeType = elem.nodeType;

		if ( !nodeType ) {
			// If no nodeType, this is expected to be an array
			while ( (node = elem[i++]) ) {
				// Do not traverse comment nodes
				ret += getText( node );
			}
		} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (jQuery #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes

		return ret;
	};

	Expr = Sizzle.selectors = {

		// Can be adjusted by the user
		cacheLength: 50,

		createPseudo: markFunction,

		match: matchExpr,

		attrHandle: {},

		find: {},

		relative: {
			">": { dir: "parentNode", first: true },
			" ": { dir: "parentNode" },
			"+": { dir: "previousSibling", first: true },
			"~": { dir: "previousSibling" }
		},

		preFilter: {
			"ATTR": function( match ) {
				match[1] = match[1].replace( runescape, funescape );

				// Move the given value to match[3] whether quoted or unquoted
				match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

				if ( match[2] === "~=" ) {
					match[3] = " " + match[3] + " ";
				}

				return match.slice( 0, 4 );
			},

			"CHILD": function( match ) {
				/* matches from matchExpr["CHILD"]
					1 type (only|nth|...)
					2 what (child|of-type)
					3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
					4 xn-component of xn+y argument ([+-]?\d*n|)
					5 sign of xn-component
					6 x of xn-component
					7 sign of y-component
					8 y of y-component
				*/
				match[1] = match[1].toLowerCase();

				if ( match[1].slice( 0, 3 ) === "nth" ) {
					// nth-* requires argument
					if ( !match[3] ) {
						Sizzle.error( match[0] );
					}

					// numeric x and y parameters for Expr.filter.CHILD
					// remember that false/true cast respectively to 0/1
					match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
					match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

				// other types prohibit arguments
				} else if ( match[3] ) {
					Sizzle.error( match[0] );
				}

				return match;
			},

			"PSEUDO": function( match ) {
				var excess,
					unquoted = !match[6] && match[2];

				if ( matchExpr["CHILD"].test( match[0] ) ) {
					return null;
				}

				// Accept quoted arguments as-is
				if ( match[3] ) {
					match[2] = match[4] || match[5] || "";

				// Strip excess characters from unquoted arguments
				} else if ( unquoted && rpseudo.test( unquoted ) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					match[0] = match[0].slice( 0, excess );
					match[2] = unquoted.slice( 0, excess );
				}

				// Return only captures needed by the pseudo filter method (type and argument)
				return match.slice( 0, 3 );
			}
		},

		filter: {

			"TAG": function( nodeNameSelector ) {
				var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
				return nodeNameSelector === "*" ?
					function() { return true; } :
					function( elem ) {
						return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
					};
			},

			"CLASS": function( className ) {
				var pattern = classCache[ className + " " ];

				return pattern ||
					(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
					classCache( className, function( elem ) {
						return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
					});
			},

			"ATTR": function( name, operator, check ) {
				return function( elem ) {
					var result = Sizzle.attr( elem, name );

					if ( result == null ) {
						return operator === "!=";
					}
					if ( !operator ) {
						return true;
					}

					result += "";

					return operator === "=" ? result === check :
						operator === "!=" ? result !== check :
						operator === "^=" ? check && result.indexOf( check ) === 0 :
						operator === "*=" ? check && result.indexOf( check ) > -1 :
						operator === "$=" ? check && result.slice( -check.length ) === check :
						operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
						operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
						false;
				};
			},

			"CHILD": function( type, what, argument, first, last ) {
				var simple = type.slice( 0, 3 ) !== "nth",
					forward = type.slice( -4 ) !== "last",
					ofType = what === "of-type";

				return first === 1 && last === 0 ?

					// Shortcut for :nth-*(n)
					function( elem ) {
						return !!elem.parentNode;
					} :

					function( elem, context, xml ) {
						var cache, uniqueCache, outerCache, node, nodeIndex, start,
							dir = simple !== forward ? "nextSibling" : "previousSibling",
							parent = elem.parentNode,
							name = ofType && elem.nodeName.toLowerCase(),
							useCache = !xml && !ofType,
							diff = false;

						if ( parent ) {

							// :(first|last|only)-(child|of-type)
							if ( simple ) {
								while ( dir ) {
									node = elem;
									while ( (node = node[ dir ]) ) {
										if ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) {

											return false;
										}
									}
									// Reverse direction for :only-* (if we haven't yet done so)
									start = dir = type === "only" && !start && "nextSibling";
								}
								return true;
							}

							start = [ forward ? parent.firstChild : parent.lastChild ];

							// non-xml :nth-child(...) stores cache data on `parent`
							if ( forward && useCache ) {

								// Seek `elem` from a previously-cached index

								// ...in a gzip-friendly way
								node = parent;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex && cache[ 2 ];
								node = nodeIndex && parent.childNodes[ nodeIndex ];

								while ( (node = ++nodeIndex && node && node[ dir ] ||

									// Fallback to seeking `elem` from the start
									(diff = nodeIndex = 0) || start.pop()) ) {

									// When found, cache indexes on `parent` and break
									if ( node.nodeType === 1 && ++diff && node === elem ) {
										uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
										break;
									}
								}

							} else {
								// Use previously-cached element index if available
								if ( useCache ) {
									// ...in a gzip-friendly way
									node = elem;
									outerCache = node[ expando ] || (node[ expando ] = {});

									// Support: IE <9 only
									// Defend against cloned attroperties (jQuery gh-1709)
									uniqueCache = outerCache[ node.uniqueID ] ||
										(outerCache[ node.uniqueID ] = {});

									cache = uniqueCache[ type ] || [];
									nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
									diff = nodeIndex;
								}

								// xml :nth-child(...)
								// or :nth-last-child(...) or :nth(-last)?-of-type(...)
								if ( diff === false ) {
									// Use the same loop as above to seek `elem` from the start
									while ( (node = ++nodeIndex && node && node[ dir ] ||
										(diff = nodeIndex = 0) || start.pop()) ) {

										if ( ( ofType ?
											node.nodeName.toLowerCase() === name :
											node.nodeType === 1 ) &&
											++diff ) {

											// Cache the index of each encountered element
											if ( useCache ) {
												outerCache = node[ expando ] || (node[ expando ] = {});

												// Support: IE <9 only
												// Defend against cloned attroperties (jQuery gh-1709)
												uniqueCache = outerCache[ node.uniqueID ] ||
													(outerCache[ node.uniqueID ] = {});

												uniqueCache[ type ] = [ dirruns, diff ];
											}

											if ( node === elem ) {
												break;
											}
										}
									}
								}
							}

							// Incorporate the offset, then check against cycle size
							diff -= last;
							return diff === first || ( diff % first === 0 && diff / first >= 0 );
						}
					};
			},

			"PSEUDO": function( pseudo, argument ) {
				// pseudo-class names are case-insensitive
				// http://www.w3.org/TR/selectors/#pseudo-classes
				// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
				// Remember that setFilters inherits from pseudos
				var args,
					fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
						Sizzle.error( "unsupported pseudo: " + pseudo );

				// The user may use createPseudo to indicate that
				// arguments are needed to create the filter function
				// just as Sizzle does
				if ( fn[ expando ] ) {
					return fn( argument );
				}

				// But maintain support for old signatures
				if ( fn.length > 1 ) {
					args = [ pseudo, pseudo, "", argument ];
					return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
						markFunction(function( seed, matches ) {
							var idx,
								matched = fn( seed, argument ),
								i = matched.length;
							while ( i-- ) {
								idx = indexOf( seed, matched[i] );
								seed[ idx ] = !( matches[ idx ] = matched[i] );
							}
						}) :
						function( elem ) {
							return fn( elem, 0, args );
						};
				}

				return fn;
			}
		},

		pseudos: {
			// Potentially complex pseudos
			"not": markFunction(function( selector ) {
				// Trim the selector passed to compile
				// to avoid treating leading and trailing
				// spaces as combinators
				var input = [],
					results = [],
					matcher = compile( selector.replace( rtrim, "$1" ) );

				return matcher[ expando ] ?
					markFunction(function( seed, matches, context, xml ) {
						var elem,
							unmatched = matcher( seed, null, xml, [] ),
							i = seed.length;

						// Match elements unmatched by `matcher`
						while ( i-- ) {
							if ( (elem = unmatched[i]) ) {
								seed[i] = !(matches[i] = elem);
							}
						}
					}) :
					function( elem, context, xml ) {
						input[0] = elem;
						matcher( input, null, xml, results );
						// Don't keep the element (issue #299)
						input[0] = null;
						return !results.pop();
					};
			}),

			"has": markFunction(function( selector ) {
				return function( elem ) {
					return Sizzle( selector, elem ).length > 0;
				};
			}),

			"contains": markFunction(function( text ) {
				text = text.replace( runescape, funescape );
				return function( elem ) {
					return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
				};
			}),

			// "Whether an element is represented by a :lang() selector
			// is based solely on the element's language value
			// being equal to the identifier C,
			// or beginning with the identifier C immediately followed by "-".
			// The matching of C against the element's language value is performed case-insensitively.
			// The identifier C does not have to be a valid language name."
			// http://www.w3.org/TR/selectors/#lang-pseudo
			"lang": markFunction( function( lang ) {
				// lang value must be a valid identifier
				if ( !ridentifier.test(lang || "") ) {
					Sizzle.error( "unsupported lang: " + lang );
				}
				lang = lang.replace( runescape, funescape ).toLowerCase();
				return function( elem ) {
					var elemLang;
					do {
						if ( (elemLang = documentIsHTML ?
							elem.lang :
							elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

							elemLang = elemLang.toLowerCase();
							return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
						}
					} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
					return false;
				};
			}),

			// Miscellaneous
			"target": function( elem ) {
				var hash = window.location && window.location.hash;
				return hash && hash.slice( 1 ) === elem.id;
			},

			"root": function( elem ) {
				return elem === docElem;
			},

			"focus": function( elem ) {
				return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
			},

			// Boolean properties
			"enabled": createDisabledPseudo( false ),
			"disabled": createDisabledPseudo( true ),

			"checked": function( elem ) {
				// In CSS3, :checked should return both checked and selected elements
				// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
				var nodeName = elem.nodeName.toLowerCase();
				return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
			},

			"selected": function( elem ) {
				// Accessing this property makes selected-by-default
				// options in Safari work properly
				if ( elem.parentNode ) {
					elem.parentNode.selectedIndex;
				}

				return elem.selected === true;
			},

			// Contents
			"empty": function( elem ) {
				// http://www.w3.org/TR/selectors/#empty-pseudo
				// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
				//   but not by others (comment: 8; processing instruction: 7; etc.)
				// nodeType < 6 works because attributes (2) do not appear as children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					if ( elem.nodeType < 6 ) {
						return false;
					}
				}
				return true;
			},

			"parent": function( elem ) {
				return !Expr.pseudos["empty"]( elem );
			},

			// Element/input types
			"header": function( elem ) {
				return rheader.test( elem.nodeName );
			},

			"input": function( elem ) {
				return rinputs.test( elem.nodeName );
			},

			"button": function( elem ) {
				var name = elem.nodeName.toLowerCase();
				return name === "input" && elem.type === "button" || name === "button";
			},

			"text": function( elem ) {
				var attr;
				return elem.nodeName.toLowerCase() === "input" &&
					elem.type === "text" &&

					// Support: IE<8
					// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
					( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
			},

			// Position-in-collection
			"first": createPositionalPseudo(function() {
				return [ 0 ];
			}),

			"last": createPositionalPseudo(function( matchIndexes, length ) {
				return [ length - 1 ];
			}),

			"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
				return [ argument < 0 ? argument + length : argument ];
			}),

			"even": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 0;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"odd": createPositionalPseudo(function( matchIndexes, length ) {
				var i = 1;
				for ( ; i < length; i += 2 ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; --i >= 0; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			}),

			"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
				var i = argument < 0 ? argument + length : argument;
				for ( ; ++i < length; ) {
					matchIndexes.push( i );
				}
				return matchIndexes;
			})
		}
	};

	Expr.pseudos["nth"] = Expr.pseudos["eq"];

	// Add button/input type pseudos
	for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
		Expr.pseudos[ i ] = createInputPseudo( i );
	}
	for ( i in { submit: true, reset: true } ) {
		Expr.pseudos[ i ] = createButtonPseudo( i );
	}

	// Easy API for creating new setFilters
	function setFilters() {}
	setFilters.prototype = Expr.filters = Expr.pseudos;
	Expr.setFilters = new setFilters();

	tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
		var matched, match, tokens, type,
			soFar, groups, preFilters,
			cached = tokenCache[ selector + " " ];

		if ( cached ) {
			return parseOnly ? 0 : cached.slice( 0 );
		}

		soFar = selector;
		groups = [];
		preFilters = Expr.preFilter;

		while ( soFar ) {

			// Comma and first run
			if ( !matched || (match = rcomma.exec( soFar )) ) {
				if ( match ) {
					// Don't consume trailing commas as valid
					soFar = soFar.slice( match[0].length ) || soFar;
				}
				groups.push( (tokens = []) );
			}

			matched = false;

			// Combinators
			if ( (match = rcombinators.exec( soFar )) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					// Cast descendant combinators to space
					type: match[0].replace( rtrim, " " )
				});
				soFar = soFar.slice( matched.length );
			}

			// Filters
			for ( type in Expr.filter ) {
				if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
					(match = preFilters[ type ]( match ))) ) {
					matched = match.shift();
					tokens.push({
						value: matched,
						type: type,
						matches: match
					});
					soFar = soFar.slice( matched.length );
				}
			}

			if ( !matched ) {
				break;
			}
		}

		// Return the length of the invalid excess
		// if we're just parsing
		// Otherwise, throw an error or return tokens
		return parseOnly ?
			soFar.length :
			soFar ?
				Sizzle.error( selector ) :
				// Cache the tokens
				tokenCache( selector, groups ).slice( 0 );
	};

	function toSelector( tokens ) {
		var i = 0,
			len = tokens.length,
			selector = "";
		for ( ; i < len; i++ ) {
			selector += tokens[i].value;
		}
		return selector;
	}

	function addCombinator( matcher, combinator, base ) {
		var dir = combinator.dir,
			skip = combinator.next,
			key = skip || dir,
			checkNonElements = base && key === "parentNode",
			doneName = done++;

		return combinator.first ?
			// Check against closest ancestor/preceding element
			function( elem, context, xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						return matcher( elem, context, xml );
					}
				}
				return false;
			} :

			// Check against all ancestor/preceding elements
			function( elem, context, xml ) {
				var oldCache, uniqueCache, outerCache,
					newCache = [ dirruns, doneName ];

				// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
				if ( xml ) {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							if ( matcher( elem, context, xml ) ) {
								return true;
							}
						}
					}
				} else {
					while ( (elem = elem[ dir ]) ) {
						if ( elem.nodeType === 1 || checkNonElements ) {
							outerCache = elem[ expando ] || (elem[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

							if ( skip && skip === elem.nodeName.toLowerCase() ) {
								elem = elem[ dir ] || elem;
							} else if ( (oldCache = uniqueCache[ key ]) &&
								oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

								// Assign to newCache so results back-propagate to previous elements
								return (newCache[ 2 ] = oldCache[ 2 ]);
							} else {
								// Reuse newcache so results back-propagate to previous elements
								uniqueCache[ key ] = newCache;

								// A match means we're done; a fail means we have to keep checking
								if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
									return true;
								}
							}
						}
					}
				}
				return false;
			};
	}

	function elementMatcher( matchers ) {
		return matchers.length > 1 ?
			function( elem, context, xml ) {
				var i = matchers.length;
				while ( i-- ) {
					if ( !matchers[i]( elem, context, xml ) ) {
						return false;
					}
				}
				return true;
			} :
			matchers[0];
	}

	function multipleContexts( selector, contexts, results ) {
		var i = 0,
			len = contexts.length;
		for ( ; i < len; i++ ) {
			Sizzle( selector, contexts[i], results );
		}
		return results;
	}

	function condense( unmatched, map, filter, context, xml ) {
		var elem,
			newUnmatched = [],
			i = 0,
			len = unmatched.length,
			mapped = map != null;

		for ( ; i < len; i++ ) {
			if ( (elem = unmatched[i]) ) {
				if ( !filter || filter( elem, context, xml ) ) {
					newUnmatched.push( elem );
					if ( mapped ) {
						map.push( i );
					}
				}
			}
		}

		return newUnmatched;
	}

	function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
		if ( postFilter && !postFilter[ expando ] ) {
			postFilter = setMatcher( postFilter );
		}
		if ( postFinder && !postFinder[ expando ] ) {
			postFinder = setMatcher( postFinder, postSelector );
		}
		return markFunction(function( seed, results, context, xml ) {
			var temp, i, elem,
				preMap = [],
				postMap = [],
				preexisting = results.length,

				// Get initial elements from seed or context
				elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

				// Prefilter to get matcher input, preserving a map for seed-results synchronization
				matcherIn = preFilter && ( seed || !selector ) ?
					condense( elems, preMap, preFilter, context, xml ) :
					elems,

				matcherOut = matcher ?
					// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
					postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

						// ...intermediate processing is necessary
						[] :

						// ...otherwise use results directly
						results :
					matcherIn;

			// Find primary matches
			if ( matcher ) {
				matcher( matcherIn, matcherOut, context, xml );
			}

			// Apply postFilter
			if ( postFilter ) {
				temp = condense( matcherOut, postMap );
				postFilter( temp, [], context, xml );

				// Un-match failing elements by moving them back to matcherIn
				i = temp.length;
				while ( i-- ) {
					if ( (elem = temp[i]) ) {
						matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
					}
				}
			}

			if ( seed ) {
				if ( postFinder || preFilter ) {
					if ( postFinder ) {
						// Get the final matcherOut by condensing this intermediate into postFinder contexts
						temp = [];
						i = matcherOut.length;
						while ( i-- ) {
							if ( (elem = matcherOut[i]) ) {
								// Restore matcherIn since elem is not yet a final match
								temp.push( (matcherIn[i] = elem) );
							}
						}
						postFinder( null, (matcherOut = []), temp, xml );
					}

					// Move matched elements from seed to results to keep them synchronized
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) &&
							(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

							seed[temp] = !(results[temp] = elem);
						}
					}
				}

			// Add elements to results, through postFinder if defined
			} else {
				matcherOut = condense(
					matcherOut === results ?
						matcherOut.splice( preexisting, matcherOut.length ) :
						matcherOut
				);
				if ( postFinder ) {
					postFinder( null, results, matcherOut, xml );
				} else {
					push.apply( results, matcherOut );
				}
			}
		});
	}

	function matcherFromTokens( tokens ) {
		var checkContext, matcher, j,
			len = tokens.length,
			leadingRelative = Expr.relative[ tokens[0].type ],
			implicitRelative = leadingRelative || Expr.relative[" "],
			i = leadingRelative ? 1 : 0,

			// The foundational matcher ensures that elements are reachable from top-level context(s)
			matchContext = addCombinator( function( elem ) {
				return elem === checkContext;
			}, implicitRelative, true ),
			matchAnyContext = addCombinator( function( elem ) {
				return indexOf( checkContext, elem ) > -1;
			}, implicitRelative, true ),
			matchers = [ function( elem, context, xml ) {
				var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
					(checkContext = context).nodeType ?
						matchContext( elem, context, xml ) :
						matchAnyContext( elem, context, xml ) );
				// Avoid hanging onto element (issue #299)
				checkContext = null;
				return ret;
			} ];

		for ( ; i < len; i++ ) {
			if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
				matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
			} else {
				matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

				// Return special upon seeing a positional matcher
				if ( matcher[ expando ] ) {
					// Find the next relative operator (if any) for proper handling
					j = ++i;
					for ( ; j < len; j++ ) {
						if ( Expr.relative[ tokens[j].type ] ) {
							break;
						}
					}
					return setMatcher(
						i > 1 && elementMatcher( matchers ),
						i > 1 && toSelector(
							// If the preceding token was a descendant combinator, insert an implicit any-element `*`
							tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
						).replace( rtrim, "$1" ),
						matcher,
						i < j && matcherFromTokens( tokens.slice( i, j ) ),
						j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
						j < len && toSelector( tokens )
					);
				}
				matchers.push( matcher );
			}
		}

		return elementMatcher( matchers );
	}

	function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
		var bySet = setMatchers.length > 0,
			byElement = elementMatchers.length > 0,
			superMatcher = function( seed, context, xml, results, outermost ) {
				var elem, j, matcher,
					matchedCount = 0,
					i = "0",
					unmatched = seed && [],
					setMatched = [],
					contextBackup = outermostContext,
					// We must always have either seed elements or outermost context
					elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
					// Use integer dirruns iff this is the outermost matcher
					dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
					len = elems.length;

				if ( outermost ) {
					outermostContext = context === document || context || outermost;
				}

				// Add elements passing elementMatchers directly to results
				// Support: IE<9, Safari
				// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
				for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
					if ( byElement && elem ) {
						j = 0;
						if ( !context && elem.ownerDocument !== document ) {
							setDocument( elem );
							xml = !documentIsHTML;
						}
						while ( (matcher = elementMatchers[j++]) ) {
							if ( matcher( elem, context || document, xml) ) {
								results.push( elem );
								break;
							}
						}
						if ( outermost ) {
							dirruns = dirrunsUnique;
						}
					}

					// Track unmatched elements for set filters
					if ( bySet ) {
						// They will have gone through all possible matchers
						if ( (elem = !matcher && elem) ) {
							matchedCount--;
						}

						// Lengthen the array for every element, matched or not
						if ( seed ) {
							unmatched.push( elem );
						}
					}
				}

				// `i` is now the count of elements visited above, and adding it to `matchedCount`
				// makes the latter nonnegative.
				matchedCount += i;

				// Apply set filters to unmatched elements
				// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
				// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
				// no element matchers and no seed.
				// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
				// case, which will result in a "00" `matchedCount` that differs from `i` but is also
				// numerically zero.
				if ( bySet && i !== matchedCount ) {
					j = 0;
					while ( (matcher = setMatchers[j++]) ) {
						matcher( unmatched, setMatched, context, xml );
					}

					if ( seed ) {
						// Reintegrate element matches to eliminate the need for sorting
						if ( matchedCount > 0 ) {
							while ( i-- ) {
								if ( !(unmatched[i] || setMatched[i]) ) {
									setMatched[i] = pop.call( results );
								}
							}
						}

						// Discard index placeholder values to get only actual matches
						setMatched = condense( setMatched );
					}

					// Add matches to results
					push.apply( results, setMatched );

					// Seedless set matches succeeding multiple successful matchers stipulate sorting
					if ( outermost && !seed && setMatched.length > 0 &&
						( matchedCount + setMatchers.length ) > 1 ) {

						Sizzle.uniqueSort( results );
					}
				}

				// Override manipulation of globals by nested matchers
				if ( outermost ) {
					dirruns = dirrunsUnique;
					outermostContext = contextBackup;
				}

				return unmatched;
			};

		return bySet ?
			markFunction( superMatcher ) :
			superMatcher;
	}

	compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
		var i,
			setMatchers = [],
			elementMatchers = [],
			cached = compilerCache[ selector + " " ];

		if ( !cached ) {
			// Generate a function of recursive functions that can be used to check each element
			if ( !match ) {
				match = tokenize( selector );
			}
			i = match.length;
			while ( i-- ) {
				cached = matcherFromTokens( match[i] );
				if ( cached[ expando ] ) {
					setMatchers.push( cached );
				} else {
					elementMatchers.push( cached );
				}
			}

			// Cache the compiled function
			cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

			// Save selector and tokenization
			cached.selector = selector;
		}
		return cached;
	};

	/**
	 * A low-level selection function that works with Sizzle's compiled
	 *  selector functions
	 * @param {String|Function} selector A selector or a pre-compiled
	 *  selector function built with Sizzle.compile
	 * @param {Element} context
	 * @param {Array} [results]
	 * @param {Array} [seed] A set of elements to match against
	 */
	select = Sizzle.select = function( selector, context, results, seed ) {
		var i, tokens, token, type, find,
			compiled = typeof selector === "function" && selector,
			match = !seed && tokenize( (selector = compiled.selector || selector) );

		results = results || [];

		// Try to minimize operations if there is only one selector in the list and no seed
		// (the latter of which guarantees us context)
		if ( match.length === 1 ) {

			// Reduce context if the leading compound selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

				context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
				if ( !context ) {
					return results;

				// Precompiled matchers will still verify ancestry, so step up a level
				} else if ( compiled ) {
					context = context.parentNode;
				}

				selector = selector.slice( tokens.shift().value.length );
			}

			// Fetch a seed set for right-to-left matching
			i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
			while ( i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( runescape, funescape ),
						rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && toSelector( tokens );
						if ( !selector ) {
							push.apply( results, seed );
							return results;
						}

						break;
					}
				}
			}
		}

		// Compile and execute a filtering function if one is not provided
		// Provide `match` to avoid retokenization if we modified the selector above
		( compiled || compile( selector, match ) )(
			seed,
			context,
			!documentIsHTML,
			results,
			!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
		);
		return results;
	};

	// One-time assignments

	// Sort stability
	support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

	// Support: Chrome 14-35+
	// Always assume duplicates if they aren't passed to the comparison function
	support.detectDuplicates = !!hasDuplicate;

	// Initialize against the default document
	setDocument();

	// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
	// Detached nodes confoundingly follow *each other*
	support.sortDetached = assert(function( el ) {
		// Should return 1, but returns 4 (following)
		return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
	});

	// Support: IE<8
	// Prevent attribute/property "interpolation"
	// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
	if ( !assert(function( el ) {
		el.innerHTML = "<a href='#'></a>";
		return el.firstChild.getAttribute("href") === "#" ;
	}) ) {
		addHandle( "type|href|height|width", function( elem, name, isXML ) {
			if ( !isXML ) {
				return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
			}
		});
	}

	// Support: IE<9
	// Use defaultValue in place of getAttribute("value")
	if ( !support.attributes || !assert(function( el ) {
		el.innerHTML = "<input/>";
		el.firstChild.setAttribute( "value", "" );
		return el.firstChild.getAttribute( "value" ) === "";
	}) ) {
		addHandle( "value", function( elem, name, isXML ) {
			if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
				return elem.defaultValue;
			}
		});
	}

	// Support: IE<9
	// Use getAttributeNode to fetch booleans when getAttribute lies
	if ( !assert(function( el ) {
		return el.getAttribute("disabled") == null;
	}) ) {
		addHandle( booleans, function( elem, name, isXML ) {
			var val;
			if ( !isXML ) {
				return elem[ name ] === true ? name.toLowerCase() :
						(val = elem.getAttributeNode( name )) && val.specified ?
						val.value :
					null;
			}
		});
	}

	return Sizzle;

	})( window );



	jQuery.find = Sizzle;
	jQuery.expr = Sizzle.selectors;

	// Deprecated
	jQuery.expr[ ":" ] = jQuery.expr.pseudos;
	jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
	jQuery.text = Sizzle.getText;
	jQuery.isXMLDoc = Sizzle.isXML;
	jQuery.contains = Sizzle.contains;
	jQuery.escapeSelector = Sizzle.escape;




	var dir = function( elem, dir, until ) {
		var matched = [],
			truncate = until !== undefined;

		while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
			if ( elem.nodeType === 1 ) {
				if ( truncate && jQuery( elem ).is( until ) ) {
					break;
				}
				matched.push( elem );
			}
		}
		return matched;
	};


	var siblings = function( n, elem ) {
		var matched = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				matched.push( n );
			}
		}

		return matched;
	};


	var rneedsContext = jQuery.expr.match.needsContext;



	function nodeName( elem, name ) {

	  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

	};
	var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



	// Implement the identical functionality for filter and not
	function winnow( elements, qualifier, not ) {
		if ( isFunction( qualifier ) ) {
			return jQuery.grep( elements, function( elem, i ) {
				return !!qualifier.call( elem, i, elem ) !== not;
			} );
		}

		// Single element
		if ( qualifier.nodeType ) {
			return jQuery.grep( elements, function( elem ) {
				return ( elem === qualifier ) !== not;
			} );
		}

		// Arraylike of elements (jQuery, arguments, Array)
		if ( typeof qualifier !== "string" ) {
			return jQuery.grep( elements, function( elem ) {
				return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
			} );
		}

		// Filtered directly for both simple and complex selectors
		return jQuery.filter( qualifier, elements, not );
	}

	jQuery.filter = function( expr, elems, not ) {
		var elem = elems[ 0 ];

		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		if ( elems.length === 1 && elem.nodeType === 1 ) {
			return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
		}

		return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
			return elem.nodeType === 1;
		} ) );
	};

	jQuery.fn.extend( {
		find: function( selector ) {
			var i, ret,
				len = this.length,
				self = this;

			if ( typeof selector !== "string" ) {
				return this.pushStack( jQuery( selector ).filter( function() {
					for ( i = 0; i < len; i++ ) {
						if ( jQuery.contains( self[ i ], this ) ) {
							return true;
						}
					}
				} ) );
			}

			ret = this.pushStack( [] );

			for ( i = 0; i < len; i++ ) {
				jQuery.find( selector, self[ i ], ret );
			}

			return len > 1 ? jQuery.uniqueSort( ret ) : ret;
		},
		filter: function( selector ) {
			return this.pushStack( winnow( this, selector || [], false ) );
		},
		not: function( selector ) {
			return this.pushStack( winnow( this, selector || [], true ) );
		},
		is: function( selector ) {
			return !!winnow(
				this,

				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				typeof selector === "string" && rneedsContext.test( selector ) ?
					jQuery( selector ) :
					selector || [],
				false
			).length;
		}
	} );


	// Initialize a jQuery object


	// A central reference to the root jQuery(document)
	var rootjQuery,

		// A simple way to check for HTML strings
		// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
		// Strict HTML recognition (#11290: must start with <)
		// Shortcut simple #id case for speed
		rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

		init = jQuery.fn.init = function( selector, context, root ) {
			var match, elem;

			// HANDLE: $(""), $(null), $(undefined), $(false)
			if ( !selector ) {
				return this;
			}

			// Method init() accepts an alternate rootjQuery
			// so migrate can support jQuery.sub (gh-2101)
			root = root || rootjQuery;

			// Handle HTML strings
			if ( typeof selector === "string" ) {
				if ( selector[ 0 ] === "<" &&
					selector[ selector.length - 1 ] === ">" &&
					selector.length >= 3 ) {

					// Assume that strings that start and end with <> are HTML and skip the regex check
					match = [ null, selector, null ];

				} else {
					match = rquickExpr.exec( selector );
				}

				// Match html or make sure no context is specified for #id
				if ( match && ( match[ 1 ] || !context ) ) {

					// HANDLE: $(html) -> $(array)
					if ( match[ 1 ] ) {
						context = context instanceof jQuery ? context[ 0 ] : context;

						// Option to run scripts is true for back-compat
						// Intentionally let the error be thrown if parseHTML is not present
						jQuery.merge( this, jQuery.parseHTML(
							match[ 1 ],
							context && context.nodeType ? context.ownerDocument || context : document,
							true
						) );

						// HANDLE: $(html, props)
						if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
							for ( match in context ) {

								// Properties of context are called as methods if possible
								if ( isFunction( this[ match ] ) ) {
									this[ match ]( context[ match ] );

								// ...and otherwise set as attributes
								} else {
									this.attr( match, context[ match ] );
								}
							}
						}

						return this;

					// HANDLE: $(#id)
					} else {
						elem = document.getElementById( match[ 2 ] );

						if ( elem ) {

							// Inject the element directly into the jQuery object
							this[ 0 ] = elem;
							this.length = 1;
						}
						return this;
					}

				// HANDLE: $(expr, $(...))
				} else if ( !context || context.jquery ) {
					return ( context || root ).find( selector );

				// HANDLE: $(expr, context)
				// (which is just equivalent to: $(context).find(expr)
				} else {
					return this.constructor( context ).find( selector );
				}

			// HANDLE: $(DOMElement)
			} else if ( selector.nodeType ) {
				this[ 0 ] = selector;
				this.length = 1;
				return this;

			// HANDLE: $(function)
			// Shortcut for document ready
			} else if ( isFunction( selector ) ) {
				return root.ready !== undefined ?
					root.ready( selector ) :

					// Execute immediately if ready is not present
					selector( jQuery );
			}

			return jQuery.makeArray( selector, this );
		};

	// Give the init function the jQuery prototype for later instantiation
	init.prototype = jQuery.fn;

	// Initialize central reference
	rootjQuery = jQuery( document );


	var rparentsprev = /^(?:parents|prev(?:Until|All))/,

		// Methods guaranteed to produce a unique set when starting from a unique set
		guaranteedUnique = {
			children: true,
			contents: true,
			next: true,
			prev: true
		};

	jQuery.fn.extend( {
		has: function( target ) {
			var targets = jQuery( target, this ),
				l = targets.length;

			return this.filter( function() {
				var i = 0;
				for ( ; i < l; i++ ) {
					if ( jQuery.contains( this, targets[ i ] ) ) {
						return true;
					}
				}
			} );
		},

		closest: function( selectors, context ) {
			var cur,
				i = 0,
				l = this.length,
				matched = [],
				targets = typeof selectors !== "string" && jQuery( selectors );

			// Positional selectors never match, since there's no _selection_ context
			if ( !rneedsContext.test( selectors ) ) {
				for ( ; i < l; i++ ) {
					for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

						// Always skip document fragments
						if ( cur.nodeType < 11 && ( targets ?
							targets.index( cur ) > -1 :

							// Don't pass non-elements to Sizzle
							cur.nodeType === 1 &&
								jQuery.find.matchesSelector( cur, selectors ) ) ) {

							matched.push( cur );
							break;
						}
					}
				}
			}

			return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
		},

		// Determine the position of an element within the set
		index: function( elem ) {

			// No argument, return index in parent
			if ( !elem ) {
				return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
			}

			// Index in selector
			if ( typeof elem === "string" ) {
				return indexOf.call( jQuery( elem ), this[ 0 ] );
			}

			// Locate the position of the desired element
			return indexOf.call( this,

				// If it receives a jQuery object, the first element is used
				elem.jquery ? elem[ 0 ] : elem
			);
		},

		add: function( selector, context ) {
			return this.pushStack(
				jQuery.uniqueSort(
					jQuery.merge( this.get(), jQuery( selector, context ) )
				)
			);
		},

		addBack: function( selector ) {
			return this.add( selector == null ?
				this.prevObject : this.prevObject.filter( selector )
			);
		}
	} );

	function sibling( cur, dir ) {
		while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
		return cur;
	}

	jQuery.each( {
		parent: function( elem ) {
			var parent = elem.parentNode;
			return parent && parent.nodeType !== 11 ? parent : null;
		},
		parents: function( elem ) {
			return dir( elem, "parentNode" );
		},
		parentsUntil: function( elem, i, until ) {
			return dir( elem, "parentNode", until );
		},
		next: function( elem ) {
			return sibling( elem, "nextSibling" );
		},
		prev: function( elem ) {
			return sibling( elem, "previousSibling" );
		},
		nextAll: function( elem ) {
			return dir( elem, "nextSibling" );
		},
		prevAll: function( elem ) {
			return dir( elem, "previousSibling" );
		},
		nextUntil: function( elem, i, until ) {
			return dir( elem, "nextSibling", until );
		},
		prevUntil: function( elem, i, until ) {
			return dir( elem, "previousSibling", until );
		},
		siblings: function( elem ) {
			return siblings( ( elem.parentNode || {} ).firstChild, elem );
		},
		children: function( elem ) {
			return siblings( elem.firstChild );
		},
		contents: function( elem ) {
	        if ( nodeName( elem, "iframe" ) ) {
	            return elem.contentDocument;
	        }

	        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
	        // Treat the template element as a regular one in browsers that
	        // don't support it.
	        if ( nodeName( elem, "template" ) ) {
	            elem = elem.content || elem;
	        }

	        return jQuery.merge( [], elem.childNodes );
		}
	}, function( name, fn ) {
		jQuery.fn[ name ] = function( until, selector ) {
			var matched = jQuery.map( this, fn, until );

			if ( name.slice( -5 ) !== "Until" ) {
				selector = until;
			}

			if ( selector && typeof selector === "string" ) {
				matched = jQuery.filter( selector, matched );
			}

			if ( this.length > 1 ) {

				// Remove duplicates
				if ( !guaranteedUnique[ name ] ) {
					jQuery.uniqueSort( matched );
				}

				// Reverse order for parents* and prev-derivatives
				if ( rparentsprev.test( name ) ) {
					matched.reverse();
				}
			}

			return this.pushStack( matched );
		};
	} );
	var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



	// Convert String-formatted options into Object-formatted ones
	function createOptions( options ) {
		var object = {};
		jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
			object[ flag ] = true;
		} );
		return object;
	}

	/*
	 * Create a callback list using the following parameters:
	 *
	 *	options: an optional list of space-separated options that will change how
	 *			the callback list behaves or a more traditional option object
	 *
	 * By default a callback list will act like an event callback list and can be
	 * "fired" multiple times.
	 *
	 * Possible options:
	 *
	 *	once:			will ensure the callback list can only be fired once (like a Deferred)
	 *
	 *	memory:			will keep track of previous values and will call any callback added
	 *					after the list has been fired right away with the latest "memorized"
	 *					values (like a Deferred)
	 *
	 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
	 *
	 *	stopOnFalse:	interrupt callings when a callback returns false
	 *
	 */
	jQuery.Callbacks = function( options ) {

		// Convert options from String-formatted to Object-formatted if needed
		// (we check in cache first)
		options = typeof options === "string" ?
			createOptions( options ) :
			jQuery.extend( {}, options );

		var // Flag to know if list is currently firing
			firing,

			// Last fire value for non-forgettable lists
			memory,

			// Flag to know if list was already fired
			fired,

			// Flag to prevent firing
			locked,

			// Actual callback list
			list = [],

			// Queue of execution data for repeatable lists
			queue = [],

			// Index of currently firing callback (modified by add/remove as needed)
			firingIndex = -1,

			// Fire callbacks
			fire = function() {

				// Enforce single-firing
				locked = locked || options.once;

				// Execute callbacks for all pending executions,
				// respecting firingIndex overrides and runtime changes
				fired = firing = true;
				for ( ; queue.length; firingIndex = -1 ) {
					memory = queue.shift();
					while ( ++firingIndex < list.length ) {

						// Run callback and check for early termination
						if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
							options.stopOnFalse ) {

							// Jump to end and forget the data so .add doesn't re-fire
							firingIndex = list.length;
							memory = false;
						}
					}
				}

				// Forget the data if we're done with it
				if ( !options.memory ) {
					memory = false;
				}

				firing = false;

				// Clean up if we're done firing for good
				if ( locked ) {

					// Keep an empty list if we have data for future add calls
					if ( memory ) {
						list = [];

					// Otherwise, this object is spent
					} else {
						list = "";
					}
				}
			},

			// Actual Callbacks object
			self = {

				// Add a callback or a collection of callbacks to the list
				add: function() {
					if ( list ) {

						// If we have memory from a past run, we should fire after adding
						if ( memory && !firing ) {
							firingIndex = list.length - 1;
							queue.push( memory );
						}

						( function add( args ) {
							jQuery.each( args, function( _, arg ) {
								if ( isFunction( arg ) ) {
									if ( !options.unique || !self.has( arg ) ) {
										list.push( arg );
									}
								} else if ( arg && arg.length && toType( arg ) !== "string" ) {

									// Inspect recursively
									add( arg );
								}
							} );
						} )( arguments );

						if ( memory && !firing ) {
							fire();
						}
					}
					return this;
				},

				// Remove a callback from the list
				remove: function() {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );

							// Handle firing indexes
							if ( index <= firingIndex ) {
								firingIndex--;
							}
						}
					} );
					return this;
				},

				// Check if a given callback is in the list.
				// If no argument is given, return whether or not list has callbacks attached.
				has: function( fn ) {
					return fn ?
						jQuery.inArray( fn, list ) > -1 :
						list.length > 0;
				},

				// Remove all callbacks from the list
				empty: function() {
					if ( list ) {
						list = [];
					}
					return this;
				},

				// Disable .fire and .add
				// Abort any current/pending executions
				// Clear all callbacks and values
				disable: function() {
					locked = queue = [];
					list = memory = "";
					return this;
				},
				disabled: function() {
					return !list;
				},

				// Disable .fire
				// Also disable .add unless we have memory (since it would have no effect)
				// Abort any pending executions
				lock: function() {
					locked = queue = [];
					if ( !memory && !firing ) {
						list = memory = "";
					}
					return this;
				},
				locked: function() {
					return !!locked;
				},

				// Call all callbacks with the given context and arguments
				fireWith: function( context, args ) {
					if ( !locked ) {
						args = args || [];
						args = [ context, args.slice ? args.slice() : args ];
						queue.push( args );
						if ( !firing ) {
							fire();
						}
					}
					return this;
				},

				// Call all the callbacks with the given arguments
				fire: function() {
					self.fireWith( this, arguments );
					return this;
				},

				// To know if the callbacks have already been called at least once
				fired: function() {
					return !!fired;
				}
			};

		return self;
	};


	function Identity( v ) {
		return v;
	}
	function Thrower( ex ) {
		throw ex;
	}

	function adoptValue( value, resolve, reject, noValue ) {
		var method;

		try {

			// Check for promise aspect first to privilege synchronous behavior
			if ( value && isFunction( ( method = value.promise ) ) ) {
				method.call( value ).done( resolve ).fail( reject );

			// Other thenables
			} else if ( value && isFunction( ( method = value.then ) ) ) {
				method.call( value, resolve, reject );

			// Other non-thenables
			} else {

				// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
				// * false: [ value ].slice( 0 ) => resolve( value )
				// * true: [ value ].slice( 1 ) => resolve()
				resolve.apply( undefined, [ value ].slice( noValue ) );
			}

		// For Promises/A+, convert exceptions into rejections
		// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
		// Deferred#then to conditionally suppress rejection.
		} catch ( value ) {

			// Support: Android 4.0 only
			// Strict mode functions invoked without .call/.apply get global-object context
			reject.apply( undefined, [ value ] );
		}
	}

	jQuery.extend( {

		Deferred: function( func ) {
			var tuples = [

					// action, add listener, callbacks,
					// ... .then handlers, argument index, [final state]
					[ "notify", "progress", jQuery.Callbacks( "memory" ),
						jQuery.Callbacks( "memory" ), 2 ],
					[ "resolve", "done", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 0, "resolved" ],
					[ "reject", "fail", jQuery.Callbacks( "once memory" ),
						jQuery.Callbacks( "once memory" ), 1, "rejected" ]
				],
				state = "pending",
				promise = {
					state: function() {
						return state;
					},
					always: function() {
						deferred.done( arguments ).fail( arguments );
						return this;
					},
					"catch": function( fn ) {
						return promise.then( null, fn );
					},

					// Keep pipe for back-compat
					pipe: function( /* fnDone, fnFail, fnProgress */ ) {
						var fns = arguments;

						return jQuery.Deferred( function( newDefer ) {
							jQuery.each( tuples, function( i, tuple ) {

								// Map tuples (progress, done, fail) to arguments (done, fail, progress)
								var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

								// deferred.progress(function() { bind to newDefer or newDefer.notify })
								// deferred.done(function() { bind to newDefer or newDefer.resolve })
								// deferred.fail(function() { bind to newDefer or newDefer.reject })
								deferred[ tuple[ 1 ] ]( function() {
									var returned = fn && fn.apply( this, arguments );
									if ( returned && isFunction( returned.promise ) ) {
										returned.promise()
											.progress( newDefer.notify )
											.done( newDefer.resolve )
											.fail( newDefer.reject );
									} else {
										newDefer[ tuple[ 0 ] + "With" ](
											this,
											fn ? [ returned ] : arguments
										);
									}
								} );
							} );
							fns = null;
						} ).promise();
					},
					then: function( onFulfilled, onRejected, onProgress ) {
						var maxDepth = 0;
						function resolve( depth, deferred, handler, special ) {
							return function() {
								var that = this,
									args = arguments,
									mightThrow = function() {
										var returned, then;

										// Support: Promises/A+ section 2.3.3.3.3
										// https://promisesaplus.com/#point-59
										// Ignore double-resolution attempts
										if ( depth < maxDepth ) {
											return;
										}

										returned = handler.apply( that, args );

										// Support: Promises/A+ section 2.3.1
										// https://promisesaplus.com/#point-48
										if ( returned === deferred.promise() ) {
											throw new TypeError( "Thenable self-resolution" );
										}

										// Support: Promises/A+ sections 2.3.3.1, 3.5
										// https://promisesaplus.com/#point-54
										// https://promisesaplus.com/#point-75
										// Retrieve `then` only once
										then = returned &&

											// Support: Promises/A+ section 2.3.4
											// https://promisesaplus.com/#point-64
											// Only check objects and functions for thenability
											( typeof returned === "object" ||
												typeof returned === "function" ) &&
											returned.then;

										// Handle a returned thenable
										if ( isFunction( then ) ) {

											// Special processors (notify) just wait for resolution
											if ( special ) {
												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special )
												);

											// Normal processors (resolve) also hook into progress
											} else {

												// ...and disregard older resolution values
												maxDepth++;

												then.call(
													returned,
													resolve( maxDepth, deferred, Identity, special ),
													resolve( maxDepth, deferred, Thrower, special ),
													resolve( maxDepth, deferred, Identity,
														deferred.notifyWith )
												);
											}

										// Handle all other returned values
										} else {

											// Only substitute handlers pass on context
											// and multiple values (non-spec behavior)
											if ( handler !== Identity ) {
												that = undefined;
												args = [ returned ];
											}

											// Process the value(s)
											// Default process is resolve
											( special || deferred.resolveWith )( that, args );
										}
									},

									// Only normal processors (resolve) catch and reject exceptions
									process = special ?
										mightThrow :
										function() {
											try {
												mightThrow();
											} catch ( e ) {

												if ( jQuery.Deferred.exceptionHook ) {
													jQuery.Deferred.exceptionHook( e,
														process.stackTrace );
												}

												// Support: Promises/A+ section 2.3.3.3.4.1
												// https://promisesaplus.com/#point-61
												// Ignore post-resolution exceptions
												if ( depth + 1 >= maxDepth ) {

													// Only substitute handlers pass on context
													// and multiple values (non-spec behavior)
													if ( handler !== Thrower ) {
														that = undefined;
														args = [ e ];
													}

													deferred.rejectWith( that, args );
												}
											}
										};

								// Support: Promises/A+ section 2.3.3.3.1
								// https://promisesaplus.com/#point-57
								// Re-resolve promises immediately to dodge false rejection from
								// subsequent errors
								if ( depth ) {
									process();
								} else {

									// Call an optional hook to record the stack, in case of exception
									// since it's otherwise lost when execution goes async
									if ( jQuery.Deferred.getStackHook ) {
										process.stackTrace = jQuery.Deferred.getStackHook();
									}
									window.setTimeout( process );
								}
							};
						}

						return jQuery.Deferred( function( newDefer ) {

							// progress_handlers.add( ... )
							tuples[ 0 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onProgress ) ?
										onProgress :
										Identity,
									newDefer.notifyWith
								)
							);

							// fulfilled_handlers.add( ... )
							tuples[ 1 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onFulfilled ) ?
										onFulfilled :
										Identity
								)
							);

							// rejected_handlers.add( ... )
							tuples[ 2 ][ 3 ].add(
								resolve(
									0,
									newDefer,
									isFunction( onRejected ) ?
										onRejected :
										Thrower
								)
							);
						} ).promise();
					},

					// Get a promise for this deferred
					// If obj is provided, the promise aspect is added to the object
					promise: function( obj ) {
						return obj != null ? jQuery.extend( obj, promise ) : promise;
					}
				},
				deferred = {};

			// Add list-specific methods
			jQuery.each( tuples, function( i, tuple ) {
				var list = tuple[ 2 ],
					stateString = tuple[ 5 ];

				// promise.progress = list.add
				// promise.done = list.add
				// promise.fail = list.add
				promise[ tuple[ 1 ] ] = list.add;

				// Handle state
				if ( stateString ) {
					list.add(
						function() {

							// state = "resolved" (i.e., fulfilled)
							// state = "rejected"
							state = stateString;
						},

						// rejected_callbacks.disable
						// fulfilled_callbacks.disable
						tuples[ 3 - i ][ 2 ].disable,

						// rejected_handlers.disable
						// fulfilled_handlers.disable
						tuples[ 3 - i ][ 3 ].disable,

						// progress_callbacks.lock
						tuples[ 0 ][ 2 ].lock,

						// progress_handlers.lock
						tuples[ 0 ][ 3 ].lock
					);
				}

				// progress_handlers.fire
				// fulfilled_handlers.fire
				// rejected_handlers.fire
				list.add( tuple[ 3 ].fire );

				// deferred.notify = function() { deferred.notifyWith(...) }
				// deferred.resolve = function() { deferred.resolveWith(...) }
				// deferred.reject = function() { deferred.rejectWith(...) }
				deferred[ tuple[ 0 ] ] = function() {
					deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
					return this;
				};

				// deferred.notifyWith = list.fireWith
				// deferred.resolveWith = list.fireWith
				// deferred.rejectWith = list.fireWith
				deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
			} );

			// Make the deferred a promise
			promise.promise( deferred );

			// Call given func if any
			if ( func ) {
				func.call( deferred, deferred );
			}

			// All done!
			return deferred;
		},

		// Deferred helper
		when: function( singleValue ) {
			var

				// count of uncompleted subordinates
				remaining = arguments.length,

				// count of unprocessed arguments
				i = remaining,

				// subordinate fulfillment data
				resolveContexts = Array( i ),
				resolveValues = slice.call( arguments ),

				// the master Deferred
				master = jQuery.Deferred(),

				// subordinate callback factory
				updateFunc = function( i ) {
					return function( value ) {
						resolveContexts[ i ] = this;
						resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
						if ( !( --remaining ) ) {
							master.resolveWith( resolveContexts, resolveValues );
						}
					};
				};

			// Single- and empty arguments are adopted like Promise.resolve
			if ( remaining <= 1 ) {
				adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
					!remaining );

				// Use .then() to unwrap secondary thenables (cf. gh-3000)
				if ( master.state() === "pending" ||
					isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

					return master.then();
				}
			}

			// Multiple arguments are aggregated like Promise.all array elements
			while ( i-- ) {
				adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
			}

			return master.promise();
		}
	} );


	// These usually indicate a programmer mistake during development,
	// warn about them ASAP rather than swallowing them by default.
	var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

	jQuery.Deferred.exceptionHook = function( error, stack ) {

		// Support: IE 8 - 9 only
		// Console exists when dev tools are open, which can happen at any time
		if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
			window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
		}
	};




	jQuery.readyException = function( error ) {
		window.setTimeout( function() {
			throw error;
		} );
	};




	// The deferred used on DOM ready
	var readyList = jQuery.Deferred();

	jQuery.fn.ready = function( fn ) {

		readyList
			.then( fn )

			// Wrap jQuery.readyException in a function so that the lookup
			// happens at the time of error handling instead of callback
			// registration.
			.catch( function( error ) {
				jQuery.readyException( error );
			} );

		return this;
	};

	jQuery.extend( {

		// Is the DOM ready to be used? Set to true once it occurs.
		isReady: false,

		// A counter to track how many items to wait for before
		// the ready event fires. See #6781
		readyWait: 1,

		// Handle when the DOM is ready
		ready: function( wait ) {

			// Abort if there are pending holds or we're already ready
			if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
				return;
			}

			// Remember that the DOM is ready
			jQuery.isReady = true;

			// If a normal DOM Ready event fired, decrement, and wait if need be
			if ( wait !== true && --jQuery.readyWait > 0 ) {
				return;
			}

			// If there are functions bound, to execute
			readyList.resolveWith( document, [ jQuery ] );
		}
	} );

	jQuery.ready.then = readyList.then;

	// The ready event handler and self cleanup method
	function completed() {
		document.removeEventListener( "DOMContentLoaded", completed );
		window.removeEventListener( "load", completed );
		jQuery.ready();
	}

	// Catch cases where $(document).ready() is called
	// after the browser event has already occurred.
	// Support: IE <=9 - 10 only
	// Older IE sometimes signals "interactive" too soon
	if ( document.readyState === "complete" ||
		( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

		// Handle it asynchronously to allow scripts the opportunity to delay ready
		window.setTimeout( jQuery.ready );

	} else {

		// Use the handy event callback
		document.addEventListener( "DOMContentLoaded", completed );

		// A fallback to window.onload, that will always work
		window.addEventListener( "load", completed );
	}




	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
		var i = 0,
			len = elems.length,
			bulk = key == null;

		// Sets many values
		if ( toType( key ) === "object" ) {
			chainable = true;
			for ( i in key ) {
				access( elems, fn, i, key[ i ], true, emptyGet, raw );
			}

		// Sets one value
		} else if ( value !== undefined ) {
			chainable = true;

			if ( !isFunction( value ) ) {
				raw = true;
			}

			if ( bulk ) {

				// Bulk operations run against the entire set
				if ( raw ) {
					fn.call( elems, value );
					fn = null;

				// ...except when executing function values
				} else {
					bulk = fn;
					fn = function( elem, key, value ) {
						return bulk.call( jQuery( elem ), value );
					};
				}
			}

			if ( fn ) {
				for ( ; i < len; i++ ) {
					fn(
						elems[ i ], key, raw ?
						value :
						value.call( elems[ i ], i, fn( elems[ i ], key ) )
					);
				}
			}
		}

		if ( chainable ) {
			return elems;
		}

		// Gets
		if ( bulk ) {
			return fn.call( elems );
		}

		return len ? fn( elems[ 0 ], key ) : emptyGet;
	};


	// Matches dashed string for camelizing
	var rmsPrefix = /^-ms-/,
		rdashAlpha = /-([a-z])/g;

	// Used by camelCase as callback to replace()
	function fcamelCase( all, letter ) {
		return letter.toUpperCase();
	}

	// Convert dashed to camelCase; used by the css and data modules
	// Support: IE <=9 - 11, Edge 12 - 15
	// Microsoft forgot to hump their vendor prefix (#9572)
	function camelCase( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	}
	var acceptData = function( owner ) {

		// Accepts only:
		//  - Node
		//    - Node.ELEMENT_NODE
		//    - Node.DOCUMENT_NODE
		//  - Object
		//    - Any
		return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
	};




	function Data() {
		this.expando = jQuery.expando + Data.uid++;
	}

	Data.uid = 1;

	Data.prototype = {

		cache: function( owner ) {

			// Check if the owner object already has a cache
			var value = owner[ this.expando ];

			// If not, create one
			if ( !value ) {
				value = {};

				// We can accept data for non-element nodes in modern browsers,
				// but we should not, see #8335.
				// Always return an empty object.
				if ( acceptData( owner ) ) {

					// If it is a node unlikely to be stringify-ed or looped over
					// use plain assignment
					if ( owner.nodeType ) {
						owner[ this.expando ] = value;

					// Otherwise secure it in a non-enumerable property
					// configurable must be true to allow the property to be
					// deleted when data is removed
					} else {
						Object.defineProperty( owner, this.expando, {
							value: value,
							configurable: true
						} );
					}
				}
			}

			return value;
		},
		set: function( owner, data, value ) {
			var prop,
				cache = this.cache( owner );

			// Handle: [ owner, key, value ] args
			// Always use camelCase key (gh-2257)
			if ( typeof data === "string" ) {
				cache[ camelCase( data ) ] = value;

			// Handle: [ owner, { properties } ] args
			} else {

				// Copy the properties one-by-one to the cache object
				for ( prop in data ) {
					cache[ camelCase( prop ) ] = data[ prop ];
				}
			}
			return cache;
		},
		get: function( owner, key ) {
			return key === undefined ?
				this.cache( owner ) :

				// Always use camelCase key (gh-2257)
				owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
		},
		access: function( owner, key, value ) {

			// In cases where either:
			//
			//   1. No key was specified
			//   2. A string key was specified, but no value provided
			//
			// Take the "read" path and allow the get method to determine
			// which value to return, respectively either:
			//
			//   1. The entire cache object
			//   2. The data stored at the key
			//
			if ( key === undefined ||
					( ( key && typeof key === "string" ) && value === undefined ) ) {

				return this.get( owner, key );
			}

			// When the key is not a string, or both a key and value
			// are specified, set or extend (existing objects) with either:
			//
			//   1. An object of properties
			//   2. A key and value
			//
			this.set( owner, key, value );

			// Since the "set" path can have two possible entry points
			// return the expected data based on which path was taken[*]
			return value !== undefined ? value : key;
		},
		remove: function( owner, key ) {
			var i,
				cache = owner[ this.expando ];

			if ( cache === undefined ) {
				return;
			}

			if ( key !== undefined ) {

				// Support array or space separated string of keys
				if ( Array.isArray( key ) ) {

					// If key is an array of keys...
					// We always set camelCase keys, so remove that.
					key = key.map( camelCase );
				} else {
					key = camelCase( key );

					// If a key with the spaces exists, use it.
					// Otherwise, create an array by matching non-whitespace
					key = key in cache ?
						[ key ] :
						( key.match( rnothtmlwhite ) || [] );
				}

				i = key.length;

				while ( i-- ) {
					delete cache[ key[ i ] ];
				}
			}

			// Remove the expando if there's no more data
			if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

				// Support: Chrome <=35 - 45
				// Webkit & Blink performance suffers when deleting properties
				// from DOM nodes, so set to undefined instead
				// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
				if ( owner.nodeType ) {
					owner[ this.expando ] = undefined;
				} else {
					delete owner[ this.expando ];
				}
			}
		},
		hasData: function( owner ) {
			var cache = owner[ this.expando ];
			return cache !== undefined && !jQuery.isEmptyObject( cache );
		}
	};
	var dataPriv = new Data();

	var dataUser = new Data();



	//	Implementation Summary
	//
	//	1. Enforce API surface and semantic compatibility with 1.9.x branch
	//	2. Improve the module's maintainability by reducing the storage
	//		paths to a single mechanism.
	//	3. Use the same single mechanism to support "private" and "user" data.
	//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
	//	5. Avoid exposing implementation details on user objects (eg. expando properties)
	//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

	var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
		rmultiDash = /[A-Z]/g;

	function getData( data ) {
		if ( data === "true" ) {
			return true;
		}

		if ( data === "false" ) {
			return false;
		}

		if ( data === "null" ) {
			return null;
		}

		// Only convert to a number if it doesn't change the string
		if ( data === +data + "" ) {
			return +data;
		}

		if ( rbrace.test( data ) ) {
			return JSON.parse( data );
		}

		return data;
	}

	function dataAttr( elem, key, data ) {
		var name;

		// If nothing was found internally, try to fetch any
		// data from the HTML5 data-* attribute
		if ( data === undefined && elem.nodeType === 1 ) {
			name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
			data = elem.getAttribute( name );

			if ( typeof data === "string" ) {
				try {
					data = getData( data );
				} catch ( e ) {}

				// Make sure we set the data so it isn't changed later
				dataUser.set( elem, key, data );
			} else {
				data = undefined;
			}
		}
		return data;
	}

	jQuery.extend( {
		hasData: function( elem ) {
			return dataUser.hasData( elem ) || dataPriv.hasData( elem );
		},

		data: function( elem, name, data ) {
			return dataUser.access( elem, name, data );
		},

		removeData: function( elem, name ) {
			dataUser.remove( elem, name );
		},

		// TODO: Now that all calls to _data and _removeData have been replaced
		// with direct calls to dataPriv methods, these can be deprecated.
		_data: function( elem, name, data ) {
			return dataPriv.access( elem, name, data );
		},

		_removeData: function( elem, name ) {
			dataPriv.remove( elem, name );
		}
	} );

	jQuery.fn.extend( {
		data: function( key, value ) {
			var i, name, data,
				elem = this[ 0 ],
				attrs = elem && elem.attributes;

			// Gets all values
			if ( key === undefined ) {
				if ( this.length ) {
					data = dataUser.get( elem );

					if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
						i = attrs.length;
						while ( i-- ) {

							// Support: IE 11 only
							// The attrs elements can be null (#14894)
							if ( attrs[ i ] ) {
								name = attrs[ i ].name;
								if ( name.indexOf( "data-" ) === 0 ) {
									name = camelCase( name.slice( 5 ) );
									dataAttr( elem, name, data[ name ] );
								}
							}
						}
						dataPriv.set( elem, "hasDataAttrs", true );
					}
				}

				return data;
			}

			// Sets multiple values
			if ( typeof key === "object" ) {
				return this.each( function() {
					dataUser.set( this, key );
				} );
			}

			return access( this, function( value ) {
				var data;

				// The calling jQuery object (element matches) is not empty
				// (and therefore has an element appears at this[ 0 ]) and the
				// `value` parameter was not undefined. An empty jQuery object
				// will result in `undefined` for elem = this[ 0 ] which will
				// throw an exception if an attempt to read a data cache is made.
				if ( elem && value === undefined ) {

					// Attempt to get data from the cache
					// The key will always be camelCased in Data
					data = dataUser.get( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// Attempt to "discover" the data in
					// HTML5 custom data-* attrs
					data = dataAttr( elem, key );
					if ( data !== undefined ) {
						return data;
					}

					// We tried really hard, but the data doesn't exist.
					return;
				}

				// Set the data...
				this.each( function() {

					// We always store the camelCased key
					dataUser.set( this, key, value );
				} );
			}, null, value, arguments.length > 1, null, true );
		},

		removeData: function( key ) {
			return this.each( function() {
				dataUser.remove( this, key );
			} );
		}
	} );


	jQuery.extend( {
		queue: function( elem, type, data ) {
			var queue;

			if ( elem ) {
				type = ( type || "fx" ) + "queue";
				queue = dataPriv.get( elem, type );

				// Speed up dequeue by getting out quickly if this is just a lookup
				if ( data ) {
					if ( !queue || Array.isArray( data ) ) {
						queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
					} else {
						queue.push( data );
					}
				}
				return queue || [];
			}
		},

		dequeue: function( elem, type ) {
			type = type || "fx";

			var queue = jQuery.queue( elem, type ),
				startLength = queue.length,
				fn = queue.shift(),
				hooks = jQuery._queueHooks( elem, type ),
				next = function() {
					jQuery.dequeue( elem, type );
				};

			// If the fx queue is dequeued, always remove the progress sentinel
			if ( fn === "inprogress" ) {
				fn = queue.shift();
				startLength--;
			}

			if ( fn ) {

				// Add a progress sentinel to prevent the fx queue from being
				// automatically dequeued
				if ( type === "fx" ) {
					queue.unshift( "inprogress" );
				}

				// Clear up the last queue stop function
				delete hooks.stop;
				fn.call( elem, next, hooks );
			}

			if ( !startLength && hooks ) {
				hooks.empty.fire();
			}
		},

		// Not public - generate a queueHooks object, or return the current one
		_queueHooks: function( elem, type ) {
			var key = type + "queueHooks";
			return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
				empty: jQuery.Callbacks( "once memory" ).add( function() {
					dataPriv.remove( elem, [ type + "queue", key ] );
				} )
			} );
		}
	} );

	jQuery.fn.extend( {
		queue: function( type, data ) {
			var setter = 2;

			if ( typeof type !== "string" ) {
				data = type;
				type = "fx";
				setter--;
			}

			if ( arguments.length < setter ) {
				return jQuery.queue( this[ 0 ], type );
			}

			return data === undefined ?
				this :
				this.each( function() {
					var queue = jQuery.queue( this, type, data );

					// Ensure a hooks for this queue
					jQuery._queueHooks( this, type );

					if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
						jQuery.dequeue( this, type );
					}
				} );
		},
		dequeue: function( type ) {
			return this.each( function() {
				jQuery.dequeue( this, type );
			} );
		},
		clearQueue: function( type ) {
			return this.queue( type || "fx", [] );
		},

		// Get a promise resolved when queues of a certain type
		// are emptied (fx is the type by default)
		promise: function( type, obj ) {
			var tmp,
				count = 1,
				defer = jQuery.Deferred(),
				elements = this,
				i = this.length,
				resolve = function() {
					if ( !( --count ) ) {
						defer.resolveWith( elements, [ elements ] );
					}
				};

			if ( typeof type !== "string" ) {
				obj = type;
				type = undefined;
			}
			type = type || "fx";

			while ( i-- ) {
				tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
				if ( tmp && tmp.empty ) {
					count++;
					tmp.empty.add( resolve );
				}
			}
			resolve();
			return defer.promise( obj );
		}
	} );
	var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

	var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


	var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

	var isHiddenWithinTree = function( elem, el ) {

			// isHiddenWithinTree might be called from jQuery#filter function;
			// in that case, element will be second argument
			elem = el || elem;

			// Inline style trumps all
			return elem.style.display === "none" ||
				elem.style.display === "" &&

				// Otherwise, check computed style
				// Support: Firefox <=43 - 45
				// Disconnected elements can have computed display: none, so first confirm that elem is
				// in the document.
				jQuery.contains( elem.ownerDocument, elem ) &&

				jQuery.css( elem, "display" ) === "none";
		};

	var swap = function( elem, options, callback, args ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.apply( elem, args || [] );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	};




	function adjustCSS( elem, prop, valueParts, tween ) {
		var adjusted, scale,
			maxIterations = 20,
			currentValue = tween ?
				function() {
					return tween.cur();
				} :
				function() {
					return jQuery.css( elem, prop, "" );
				},
			initial = currentValue(),
			unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

			// Starting value computation is required for potential unit mismatches
			initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
				rcssNum.exec( jQuery.css( elem, prop ) );

		if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

			// Support: Firefox <=54
			// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
			initial = initial / 2;

			// Trust units reported by jQuery.css
			unit = unit || initialInUnit[ 3 ];

			// Iteratively approximate from a nonzero starting point
			initialInUnit = +initial || 1;

			while ( maxIterations-- ) {

				// Evaluate and update our best guess (doubling guesses that zero out).
				// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
				jQuery.style( elem, prop, initialInUnit + unit );
				if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
					maxIterations = 0;
				}
				initialInUnit = initialInUnit / scale;

			}

			initialInUnit = initialInUnit * 2;
			jQuery.style( elem, prop, initialInUnit + unit );

			// Make sure we update the tween properties later on
			valueParts = valueParts || [];
		}

		if ( valueParts ) {
			initialInUnit = +initialInUnit || +initial || 0;

			// Apply relative offset (+=/-=) if specified
			adjusted = valueParts[ 1 ] ?
				initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
				+valueParts[ 2 ];
			if ( tween ) {
				tween.unit = unit;
				tween.start = initialInUnit;
				tween.end = adjusted;
			}
		}
		return adjusted;
	}


	var defaultDisplayMap = {};

	function getDefaultDisplay( elem ) {
		var temp,
			doc = elem.ownerDocument,
			nodeName = elem.nodeName,
			display = defaultDisplayMap[ nodeName ];

		if ( display ) {
			return display;
		}

		temp = doc.body.appendChild( doc.createElement( nodeName ) );
		display = jQuery.css( temp, "display" );

		temp.parentNode.removeChild( temp );

		if ( display === "none" ) {
			display = "block";
		}
		defaultDisplayMap[ nodeName ] = display;

		return display;
	}

	function showHide( elements, show ) {
		var display, elem,
			values = [],
			index = 0,
			length = elements.length;

		// Determine new display value for elements that need to change
		for ( ; index < length; index++ ) {
			elem = elements[ index ];
			if ( !elem.style ) {
				continue;
			}

			display = elem.style.display;
			if ( show ) {

				// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
				// check is required in this first loop unless we have a nonempty display value (either
				// inline or about-to-be-restored)
				if ( display === "none" ) {
					values[ index ] = dataPriv.get( elem, "display" ) || null;
					if ( !values[ index ] ) {
						elem.style.display = "";
					}
				}
				if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
					values[ index ] = getDefaultDisplay( elem );
				}
			} else {
				if ( display !== "none" ) {
					values[ index ] = "none";

					// Remember what we're overwriting
					dataPriv.set( elem, "display", display );
				}
			}
		}

		// Set the display of the elements in a second loop to avoid constant reflow
		for ( index = 0; index < length; index++ ) {
			if ( values[ index ] != null ) {
				elements[ index ].style.display = values[ index ];
			}
		}

		return elements;
	}

	jQuery.fn.extend( {
		show: function() {
			return showHide( this, true );
		},
		hide: function() {
			return showHide( this );
		},
		toggle: function( state ) {
			if ( typeof state === "boolean" ) {
				return state ? this.show() : this.hide();
			}

			return this.each( function() {
				if ( isHiddenWithinTree( this ) ) {
					jQuery( this ).show();
				} else {
					jQuery( this ).hide();
				}
			} );
		}
	} );
	var rcheckableType = ( /^(?:checkbox|radio)$/i );

	var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

	var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



	// We have to close these tags to support XHTML (#13200)
	var wrapMap = {

		// Support: IE <=9 only
		option: [ 1, "<select multiple='multiple'>", "</select>" ],

		// XHTML parsers do not magically insert elements in the
		// same way that tag soup parsers do. So we cannot shorten
		// this by omitting <tbody> or other required elements.
		thead: [ 1, "<table>", "</table>" ],
		col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

		_default: [ 0, "", "" ]
	};

	// Support: IE <=9 only
	wrapMap.optgroup = wrapMap.option;

	wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
	wrapMap.th = wrapMap.td;


	function getAll( context, tag ) {

		// Support: IE <=9 - 11 only
		// Use typeof to avoid zero-argument method invocation on host objects (#15151)
		var ret;

		if ( typeof context.getElementsByTagName !== "undefined" ) {
			ret = context.getElementsByTagName( tag || "*" );

		} else if ( typeof context.querySelectorAll !== "undefined" ) {
			ret = context.querySelectorAll( tag || "*" );

		} else {
			ret = [];
		}

		if ( tag === undefined || tag && nodeName( context, tag ) ) {
			return jQuery.merge( [ context ], ret );
		}

		return ret;
	}


	// Mark scripts as having already been evaluated
	function setGlobalEval( elems, refElements ) {
		var i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			dataPriv.set(
				elems[ i ],
				"globalEval",
				!refElements || dataPriv.get( refElements[ i ], "globalEval" )
			);
		}
	}


	var rhtml = /<|&#?\w+;/;

	function buildFragment( elems, context, scripts, selection, ignored ) {
		var elem, tmp, tag, wrap, contains, j,
			fragment = context.createDocumentFragment(),
			nodes = [],
			i = 0,
			l = elems.length;

		for ( ; i < l; i++ ) {
			elem = elems[ i ];

			if ( elem || elem === 0 ) {

				// Add nodes directly
				if ( toType( elem ) === "object" ) {

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

				// Convert non-html into a text node
				} else if ( !rhtml.test( elem ) ) {
					nodes.push( context.createTextNode( elem ) );

				// Convert html into DOM nodes
				} else {
					tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

					// Deserialize a standard representation
					tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

					// Descend through wrappers to the right content
					j = wrap[ 0 ];
					while ( j-- ) {
						tmp = tmp.lastChild;
					}

					// Support: Android <=4.0 only, PhantomJS 1 only
					// push.apply(_, arraylike) throws on ancient WebKit
					jQuery.merge( nodes, tmp.childNodes );

					// Remember the top-level container
					tmp = fragment.firstChild;

					// Ensure the created nodes are orphaned (#12392)
					tmp.textContent = "";
				}
			}
		}

		// Remove wrapper from fragment
		fragment.textContent = "";

		i = 0;
		while ( ( elem = nodes[ i++ ] ) ) {

			// Skip elements already in the context collection (trac-4087)
			if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
				if ( ignored ) {
					ignored.push( elem );
				}
				continue;
			}

			contains = jQuery.contains( elem.ownerDocument, elem );

			// Append to fragment
			tmp = getAll( fragment.appendChild( elem ), "script" );

			// Preserve script evaluation history
			if ( contains ) {
				setGlobalEval( tmp );
			}

			// Capture executables
			if ( scripts ) {
				j = 0;
				while ( ( elem = tmp[ j++ ] ) ) {
					if ( rscriptType.test( elem.type || "" ) ) {
						scripts.push( elem );
					}
				}
			}
		}

		return fragment;
	}


	( function() {
		var fragment = document.createDocumentFragment(),
			div = fragment.appendChild( document.createElement( "div" ) ),
			input = document.createElement( "input" );

		// Support: Android 4.0 - 4.3 only
		// Check state lost if the name is set (#11217)
		// Support: Windows Web Apps (WWA)
		// `name` and `type` must use .setAttribute for WWA (#14901)
		input.setAttribute( "type", "radio" );
		input.setAttribute( "checked", "checked" );
		input.setAttribute( "name", "t" );

		div.appendChild( input );

		// Support: Android <=4.1 only
		// Older WebKit doesn't clone checked state correctly in fragments
		support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

		// Support: IE <=11 only
		// Make sure textarea (and checkbox) defaultValue is properly cloned
		div.innerHTML = "<textarea>x</textarea>";
		support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
	} )();
	var documentElement = document.documentElement;



	var
		rkeyEvent = /^key/,
		rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
		rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

	function returnTrue() {
		return true;
	}

	function returnFalse() {
		return false;
	}

	// Support: IE <=9 only
	// See #13393 for more info
	function safeActiveElement() {
		try {
			return document.activeElement;
		} catch ( err ) { }
	}

	function on( elem, types, selector, data, fn, one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {

			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) {

				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				on( elem, type, selector, data, types[ type ], one );
			}
			return elem;
		}

		if ( data == null && fn == null ) {

			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {

				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {

				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return elem;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {

				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};

			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return elem.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		} );
	}

	/*
	 * Helper functions for managing events -- not part of the public interface.
	 * Props to Dean Edwards' addEvent library for many of the ideas.
	 */
	jQuery.event = {

		global: {},

		add: function( elem, types, handler, data, selector ) {

			var handleObjIn, eventHandle, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.get( elem );

			// Don't attach events to noData or text/comment nodes (but allow plain objects)
			if ( !elemData ) {
				return;
			}

			// Caller can pass in an object of custom data in lieu of the handler
			if ( handler.handler ) {
				handleObjIn = handler;
				handler = handleObjIn.handler;
				selector = handleObjIn.selector;
			}

			// Ensure that invalid selectors throw exceptions at attach time
			// Evaluate against documentElement in case elem is a non-element node (e.g., document)
			if ( selector ) {
				jQuery.find.matchesSelector( documentElement, selector );
			}

			// Make sure that the handler has a unique ID, used to find/remove it later
			if ( !handler.guid ) {
				handler.guid = jQuery.guid++;
			}

			// Init the element's event structure and main handler, if this is the first
			if ( !( events = elemData.events ) ) {
				events = elemData.events = {};
			}
			if ( !( eventHandle = elemData.handle ) ) {
				eventHandle = elemData.handle = function( e ) {

					// Discard the second event of a jQuery.event.trigger() and
					// when an event is called after a page has unloaded
					return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
						jQuery.event.dispatch.apply( elem, arguments ) : undefined;
				};
			}

			// Handle multiple events separated by a space
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// There *must* be a type, no attaching namespace-only handlers
				if ( !type ) {
					continue;
				}

				// If event changes its type, use the special event handlers for the changed type
				special = jQuery.event.special[ type ] || {};

				// If selector defined, determine special event api type, otherwise given type
				type = ( selector ? special.delegateType : special.bindType ) || type;

				// Update special based on newly reset type
				special = jQuery.event.special[ type ] || {};

				// handleObj is passed to all event handlers
				handleObj = jQuery.extend( {
					type: type,
					origType: origType,
					data: data,
					handler: handler,
					guid: handler.guid,
					selector: selector,
					needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
					namespace: namespaces.join( "." )
				}, handleObjIn );

				// Init the event handler queue if we're the first
				if ( !( handlers = events[ type ] ) ) {
					handlers = events[ type ] = [];
					handlers.delegateCount = 0;

					// Only use addEventListener if the special events handler returns false
					if ( !special.setup ||
						special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

						if ( elem.addEventListener ) {
							elem.addEventListener( type, eventHandle );
						}
					}
				}

				if ( special.add ) {
					special.add.call( elem, handleObj );

					if ( !handleObj.handler.guid ) {
						handleObj.handler.guid = handler.guid;
					}
				}

				// Add to the element's handler list, delegates in front
				if ( selector ) {
					handlers.splice( handlers.delegateCount++, 0, handleObj );
				} else {
					handlers.push( handleObj );
				}

				// Keep track of which events have ever been used, for event optimization
				jQuery.event.global[ type ] = true;
			}

		},

		// Detach an event or set of events from an element
		remove: function( elem, types, handler, selector, mappedTypes ) {

			var j, origCount, tmp,
				events, t, handleObj,
				special, handlers, type, namespaces, origType,
				elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

			if ( !elemData || !( events = elemData.events ) ) {
				return;
			}

			// Once for each type.namespace in types; type may be omitted
			types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
			t = types.length;
			while ( t-- ) {
				tmp = rtypenamespace.exec( types[ t ] ) || [];
				type = origType = tmp[ 1 ];
				namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

				// Unbind all events (on this namespace, if provided) for the element
				if ( !type ) {
					for ( type in events ) {
						jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
					}
					continue;
				}

				special = jQuery.event.special[ type ] || {};
				type = ( selector ? special.delegateType : special.bindType ) || type;
				handlers = events[ type ] || [];
				tmp = tmp[ 2 ] &&
					new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

				// Remove matching events
				origCount = j = handlers.length;
				while ( j-- ) {
					handleObj = handlers[ j ];

					if ( ( mappedTypes || origType === handleObj.origType ) &&
						( !handler || handler.guid === handleObj.guid ) &&
						( !tmp || tmp.test( handleObj.namespace ) ) &&
						( !selector || selector === handleObj.selector ||
							selector === "**" && handleObj.selector ) ) {
						handlers.splice( j, 1 );

						if ( handleObj.selector ) {
							handlers.delegateCount--;
						}
						if ( special.remove ) {
							special.remove.call( elem, handleObj );
						}
					}
				}

				// Remove generic event handler if we removed something and no more handlers exist
				// (avoids potential for endless recursion during removal of special event handlers)
				if ( origCount && !handlers.length ) {
					if ( !special.teardown ||
						special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

						jQuery.removeEvent( elem, type, elemData.handle );
					}

					delete events[ type ];
				}
			}

			// Remove data and the expando if it's no longer used
			if ( jQuery.isEmptyObject( events ) ) {
				dataPriv.remove( elem, "handle events" );
			}
		},

		dispatch: function( nativeEvent ) {

			// Make a writable jQuery.Event from the native event object
			var event = jQuery.event.fix( nativeEvent );

			var i, j, ret, matched, handleObj, handlerQueue,
				args = new Array( arguments.length ),
				handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
				special = jQuery.event.special[ event.type ] || {};

			// Use the fix-ed jQuery.Event rather than the (read-only) native event
			args[ 0 ] = event;

			for ( i = 1; i < arguments.length; i++ ) {
				args[ i ] = arguments[ i ];
			}

			event.delegateTarget = this;

			// Call the preDispatch hook for the mapped type, and let it bail if desired
			if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
				return;
			}

			// Determine handlers
			handlerQueue = jQuery.event.handlers.call( this, event, handlers );

			// Run delegates first; they may want to stop propagation beneath us
			i = 0;
			while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
				event.currentTarget = matched.elem;

				j = 0;
				while ( ( handleObj = matched.handlers[ j++ ] ) &&
					!event.isImmediatePropagationStopped() ) {

					// Triggered event must either 1) have no namespace, or 2) have namespace(s)
					// a subset or equal to those in the bound event (both can have no namespace).
					if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

						event.handleObj = handleObj;
						event.data = handleObj.data;

						ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
							handleObj.handler ).apply( matched.elem, args );

						if ( ret !== undefined ) {
							if ( ( event.result = ret ) === false ) {
								event.preventDefault();
								event.stopPropagation();
							}
						}
					}
				}
			}

			// Call the postDispatch hook for the mapped type
			if ( special.postDispatch ) {
				special.postDispatch.call( this, event );
			}

			return event.result;
		},

		handlers: function( event, handlers ) {
			var i, handleObj, sel, matchedHandlers, matchedSelectors,
				handlerQueue = [],
				delegateCount = handlers.delegateCount,
				cur = event.target;

			// Find delegate handlers
			if ( delegateCount &&

				// Support: IE <=9
				// Black-hole SVG <use> instance trees (trac-13180)
				cur.nodeType &&

				// Support: Firefox <=42
				// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
				// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
				// Support: IE 11 only
				// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
				!( event.type === "click" && event.button >= 1 ) ) {

				for ( ; cur !== this; cur = cur.parentNode || this ) {

					// Don't check non-elements (#13208)
					// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
					if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
						matchedHandlers = [];
						matchedSelectors = {};
						for ( i = 0; i < delegateCount; i++ ) {
							handleObj = handlers[ i ];

							// Don't conflict with Object.prototype properties (#13203)
							sel = handleObj.selector + " ";

							if ( matchedSelectors[ sel ] === undefined ) {
								matchedSelectors[ sel ] = handleObj.needsContext ?
									jQuery( sel, this ).index( cur ) > -1 :
									jQuery.find( sel, this, null, [ cur ] ).length;
							}
							if ( matchedSelectors[ sel ] ) {
								matchedHandlers.push( handleObj );
							}
						}
						if ( matchedHandlers.length ) {
							handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
						}
					}
				}
			}

			// Add the remaining (directly-bound) handlers
			cur = this;
			if ( delegateCount < handlers.length ) {
				handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
			}

			return handlerQueue;
		},

		addProp: function( name, hook ) {
			Object.defineProperty( jQuery.Event.prototype, name, {
				enumerable: true,
				configurable: true,

				get: isFunction( hook ) ?
					function() {
						if ( this.originalEvent ) {
								return hook( this.originalEvent );
						}
					} :
					function() {
						if ( this.originalEvent ) {
								return this.originalEvent[ name ];
						}
					},

				set: function( value ) {
					Object.defineProperty( this, name, {
						enumerable: true,
						configurable: true,
						writable: true,
						value: value
					} );
				}
			} );
		},

		fix: function( originalEvent ) {
			return originalEvent[ jQuery.expando ] ?
				originalEvent :
				new jQuery.Event( originalEvent );
		},

		special: {
			load: {

				// Prevent triggered image.load events from bubbling to window.load
				noBubble: true
			},
			focus: {

				// Fire native event if possible so blur/focus sequence is correct
				trigger: function() {
					if ( this !== safeActiveElement() && this.focus ) {
						this.focus();
						return false;
					}
				},
				delegateType: "focusin"
			},
			blur: {
				trigger: function() {
					if ( this === safeActiveElement() && this.blur ) {
						this.blur();
						return false;
					}
				},
				delegateType: "focusout"
			},
			click: {

				// For checkbox, fire native event so checked state will be right
				trigger: function() {
					if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
						this.click();
						return false;
					}
				},

				// For cross-browser consistency, don't fire native .click() on links
				_default: function( event ) {
					return nodeName( event.target, "a" );
				}
			},

			beforeunload: {
				postDispatch: function( event ) {

					// Support: Firefox 20+
					// Firefox doesn't alert if the returnValue field is not set.
					if ( event.result !== undefined && event.originalEvent ) {
						event.originalEvent.returnValue = event.result;
					}
				}
			}
		}
	};

	jQuery.removeEvent = function( elem, type, handle ) {

		// This "if" is needed for plain objects
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle );
		}
	};

	jQuery.Event = function( src, props ) {

		// Allow instantiation without the 'new' keyword
		if ( !( this instanceof jQuery.Event ) ) {
			return new jQuery.Event( src, props );
		}

		// Event object
		if ( src && src.type ) {
			this.originalEvent = src;
			this.type = src.type;

			// Events bubbling up the document may have been marked as prevented
			// by a handler lower down the tree; reflect the correct value.
			this.isDefaultPrevented = src.defaultPrevented ||
					src.defaultPrevented === undefined &&

					// Support: Android <=2.3 only
					src.returnValue === false ?
				returnTrue :
				returnFalse;

			// Create target properties
			// Support: Safari <=6 - 7 only
			// Target should not be a text node (#504, #13143)
			this.target = ( src.target && src.target.nodeType === 3 ) ?
				src.target.parentNode :
				src.target;

			this.currentTarget = src.currentTarget;
			this.relatedTarget = src.relatedTarget;

		// Event type
		} else {
			this.type = src;
		}

		// Put explicitly provided properties onto the event object
		if ( props ) {
			jQuery.extend( this, props );
		}

		// Create a timestamp if incoming event doesn't have one
		this.timeStamp = src && src.timeStamp || Date.now();

		// Mark it as fixed
		this[ jQuery.expando ] = true;
	};

	// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
	// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
	jQuery.Event.prototype = {
		constructor: jQuery.Event,
		isDefaultPrevented: returnFalse,
		isPropagationStopped: returnFalse,
		isImmediatePropagationStopped: returnFalse,
		isSimulated: false,

		preventDefault: function() {
			var e = this.originalEvent;

			this.isDefaultPrevented = returnTrue;

			if ( e && !this.isSimulated ) {
				e.preventDefault();
			}
		},
		stopPropagation: function() {
			var e = this.originalEvent;

			this.isPropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopPropagation();
			}
		},
		stopImmediatePropagation: function() {
			var e = this.originalEvent;

			this.isImmediatePropagationStopped = returnTrue;

			if ( e && !this.isSimulated ) {
				e.stopImmediatePropagation();
			}

			this.stopPropagation();
		}
	};

	// Includes all common event props including KeyEvent and MouseEvent specific props
	jQuery.each( {
		altKey: true,
		bubbles: true,
		cancelable: true,
		changedTouches: true,
		ctrlKey: true,
		detail: true,
		eventPhase: true,
		metaKey: true,
		pageX: true,
		pageY: true,
		shiftKey: true,
		view: true,
		"char": true,
		charCode: true,
		key: true,
		keyCode: true,
		button: true,
		buttons: true,
		clientX: true,
		clientY: true,
		offsetX: true,
		offsetY: true,
		pointerId: true,
		pointerType: true,
		screenX: true,
		screenY: true,
		targetTouches: true,
		toElement: true,
		touches: true,

		which: function( event ) {
			var button = event.button;

			// Add which for key events
			if ( event.which == null && rkeyEvent.test( event.type ) ) {
				return event.charCode != null ? event.charCode : event.keyCode;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
				if ( button & 1 ) {
					return 1;
				}

				if ( button & 2 ) {
					return 3;
				}

				if ( button & 4 ) {
					return 2;
				}

				return 0;
			}

			return event.which;
		}
	}, jQuery.event.addProp );

	// Create mouseenter/leave events using mouseover/out and event-time checks
	// so that event delegation works in jQuery.
	// Do the same for pointerenter/pointerleave and pointerover/pointerout
	//
	// Support: Safari 7 only
	// Safari sends mouseenter too often; see:
	// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
	// for the description of the bug (it existed in older Chrome versions as well).
	jQuery.each( {
		mouseenter: "mouseover",
		mouseleave: "mouseout",
		pointerenter: "pointerover",
		pointerleave: "pointerout"
	}, function( orig, fix ) {
		jQuery.event.special[ orig ] = {
			delegateType: fix,
			bindType: fix,

			handle: function( event ) {
				var ret,
					target = this,
					related = event.relatedTarget,
					handleObj = event.handleObj;

				// For mouseenter/leave call the handler if related is outside the target.
				// NB: No relatedTarget if the mouse left/entered the browser window
				if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
					event.type = handleObj.origType;
					ret = handleObj.handler.apply( this, arguments );
					event.type = fix;
				}
				return ret;
			}
		};
	} );

	jQuery.fn.extend( {

		on: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn );
		},
		one: function( types, selector, data, fn ) {
			return on( this, types, selector, data, fn, 1 );
		},
		off: function( types, selector, fn ) {
			var handleObj, type;
			if ( types && types.preventDefault && types.handleObj ) {

				// ( event )  dispatched jQuery.Event
				handleObj = types.handleObj;
				jQuery( types.delegateTarget ).off(
					handleObj.namespace ?
						handleObj.origType + "." + handleObj.namespace :
						handleObj.origType,
					handleObj.selector,
					handleObj.handler
				);
				return this;
			}
			if ( typeof types === "object" ) {

				// ( types-object [, selector] )
				for ( type in types ) {
					this.off( type, selector, types[ type ] );
				}
				return this;
			}
			if ( selector === false || typeof selector === "function" ) {

				// ( types [, fn] )
				fn = selector;
				selector = undefined;
			}
			if ( fn === false ) {
				fn = returnFalse;
			}
			return this.each( function() {
				jQuery.event.remove( this, types, fn, selector );
			} );
		}
	} );


	var

		/* eslint-disable max-len */

		// See https://github.com/eslint/eslint/issues/3229
		rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

		/* eslint-enable */

		// Support: IE <=10 - 11, Edge 12 - 13 only
		// In IE/Edge using regex groups here causes severe slowdowns.
		// See https://connect.microsoft.com/IE/feedback/details/1736512/
		rnoInnerhtml = /<script|<style|<link/i,

		// checked="checked" or checked
		rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
		rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

	// Prefer a tbody over its parent table for containing new rows
	function manipulationTarget( elem, content ) {
		if ( nodeName( elem, "table" ) &&
			nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

			return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
		}

		return elem;
	}

	// Replace/restore the type attribute of script elements for safe DOM manipulation
	function disableScript( elem ) {
		elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
		return elem;
	}
	function restoreScript( elem ) {
		if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
			elem.type = elem.type.slice( 5 );
		} else {
			elem.removeAttribute( "type" );
		}

		return elem;
	}

	function cloneCopyEvent( src, dest ) {
		var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

		if ( dest.nodeType !== 1 ) {
			return;
		}

		// 1. Copy private data: events, handlers, etc.
		if ( dataPriv.hasData( src ) ) {
			pdataOld = dataPriv.access( src );
			pdataCur = dataPriv.set( dest, pdataOld );
			events = pdataOld.events;

			if ( events ) {
				delete pdataCur.handle;
				pdataCur.events = {};

				for ( type in events ) {
					for ( i = 0, l = events[ type ].length; i < l; i++ ) {
						jQuery.event.add( dest, type, events[ type ][ i ] );
					}
				}
			}
		}

		// 2. Copy user data
		if ( dataUser.hasData( src ) ) {
			udataOld = dataUser.access( src );
			udataCur = jQuery.extend( {}, udataOld );

			dataUser.set( dest, udataCur );
		}
	}

	// Fix IE bugs, see support tests
	function fixInput( src, dest ) {
		var nodeName = dest.nodeName.toLowerCase();

		// Fails to persist the checked state of a cloned checkbox or radio button.
		if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
			dest.checked = src.checked;

		// Fails to return the selected option to the default selected state when cloning options
		} else if ( nodeName === "input" || nodeName === "textarea" ) {
			dest.defaultValue = src.defaultValue;
		}
	}

	function domManip( collection, args, callback, ignored ) {

		// Flatten any nested arrays
		args = concat.apply( [], args );

		var fragment, first, scripts, hasScripts, node, doc,
			i = 0,
			l = collection.length,
			iNoClone = l - 1,
			value = args[ 0 ],
			valueIsFunction = isFunction( value );

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( valueIsFunction ||
				( l > 1 && typeof value === "string" &&
					!support.checkClone && rchecked.test( value ) ) ) {
			return collection.each( function( index ) {
				var self = collection.eq( index );
				if ( valueIsFunction ) {
					args[ 0 ] = value.call( this, index, self.html() );
				}
				domManip( self, args, callback, ignored );
			} );
		}

		if ( l ) {
			fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			// Require either new content or an interest in ignored elements to invoke the callback
			if ( first || ignored ) {
				scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
				hasScripts = scripts.length;

				// Use the original fragment for the last item
				// instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				for ( ; i < l; i++ ) {
					node = fragment;

					if ( i !== iNoClone ) {
						node = jQuery.clone( node, true, true );

						// Keep references to cloned scripts for later restoration
						if ( hasScripts ) {

							// Support: Android <=4.0 only, PhantomJS 1 only
							// push.apply(_, arraylike) throws on ancient WebKit
							jQuery.merge( scripts, getAll( node, "script" ) );
						}
					}

					callback.call( collection[ i ], node, i );
				}

				if ( hasScripts ) {
					doc = scripts[ scripts.length - 1 ].ownerDocument;

					// Reenable scripts
					jQuery.map( scripts, restoreScript );

					// Evaluate executable scripts on first document insertion
					for ( i = 0; i < hasScripts; i++ ) {
						node = scripts[ i ];
						if ( rscriptType.test( node.type || "" ) &&
							!dataPriv.access( node, "globalEval" ) &&
							jQuery.contains( doc, node ) ) {

							if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

								// Optional AJAX dependency, but won't run scripts if not present
								if ( jQuery._evalUrl ) {
									jQuery._evalUrl( node.src );
								}
							} else {
								DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
							}
						}
					}
				}
			}
		}

		return collection;
	}

	function remove( elem, selector, keepData ) {
		var node,
			nodes = selector ? jQuery.filter( selector, elem ) : elem,
			i = 0;

		for ( ; ( node = nodes[ i ] ) != null; i++ ) {
			if ( !keepData && node.nodeType === 1 ) {
				jQuery.cleanData( getAll( node ) );
			}

			if ( node.parentNode ) {
				if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
					setGlobalEval( getAll( node, "script" ) );
				}
				node.parentNode.removeChild( node );
			}
		}

		return elem;
	}

	jQuery.extend( {
		htmlPrefilter: function( html ) {
			return html.replace( rxhtmlTag, "<$1></$2>" );
		},

		clone: function( elem, dataAndEvents, deepDataAndEvents ) {
			var i, l, srcElements, destElements,
				clone = elem.cloneNode( true ),
				inPage = jQuery.contains( elem.ownerDocument, elem );

			// Fix IE cloning issues
			if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
					!jQuery.isXMLDoc( elem ) ) {

				// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
				destElements = getAll( clone );
				srcElements = getAll( elem );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					fixInput( srcElements[ i ], destElements[ i ] );
				}
			}

			// Copy the events from the original to the clone
			if ( dataAndEvents ) {
				if ( deepDataAndEvents ) {
					srcElements = srcElements || getAll( elem );
					destElements = destElements || getAll( clone );

					for ( i = 0, l = srcElements.length; i < l; i++ ) {
						cloneCopyEvent( srcElements[ i ], destElements[ i ] );
					}
				} else {
					cloneCopyEvent( elem, clone );
				}
			}

			// Preserve script evaluation history
			destElements = getAll( clone, "script" );
			if ( destElements.length > 0 ) {
				setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
			}

			// Return the cloned set
			return clone;
		},

		cleanData: function( elems ) {
			var data, elem, type,
				special = jQuery.event.special,
				i = 0;

			for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
				if ( acceptData( elem ) ) {
					if ( ( data = elem[ dataPriv.expando ] ) ) {
						if ( data.events ) {
							for ( type in data.events ) {
								if ( special[ type ] ) {
									jQuery.event.remove( elem, type );

								// This is a shortcut to avoid jQuery.event.remove's overhead
								} else {
									jQuery.removeEvent( elem, type, data.handle );
								}
							}
						}

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataPriv.expando ] = undefined;
					}
					if ( elem[ dataUser.expando ] ) {

						// Support: Chrome <=35 - 45+
						// Assign undefined instead of using delete, see Data#remove
						elem[ dataUser.expando ] = undefined;
					}
				}
			}
		}
	} );

	jQuery.fn.extend( {
		detach: function( selector ) {
			return remove( this, selector, true );
		},

		remove: function( selector ) {
			return remove( this, selector );
		},

		text: function( value ) {
			return access( this, function( value ) {
				return value === undefined ?
					jQuery.text( this ) :
					this.empty().each( function() {
						if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
							this.textContent = value;
						}
					} );
			}, null, value, arguments.length );
		},

		append: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.appendChild( elem );
				}
			} );
		},

		prepend: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
					var target = manipulationTarget( this, elem );
					target.insertBefore( elem, target.firstChild );
				}
			} );
		},

		before: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this );
				}
			} );
		},

		after: function() {
			return domManip( this, arguments, function( elem ) {
				if ( this.parentNode ) {
					this.parentNode.insertBefore( elem, this.nextSibling );
				}
			} );
		},

		empty: function() {
			var elem,
				i = 0;

			for ( ; ( elem = this[ i ] ) != null; i++ ) {
				if ( elem.nodeType === 1 ) {

					// Prevent memory leaks
					jQuery.cleanData( getAll( elem, false ) );

					// Remove any remaining nodes
					elem.textContent = "";
				}
			}

			return this;
		},

		clone: function( dataAndEvents, deepDataAndEvents ) {
			dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
			deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

			return this.map( function() {
				return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
			} );
		},

		html: function( value ) {
			return access( this, function( value ) {
				var elem = this[ 0 ] || {},
					i = 0,
					l = this.length;

				if ( value === undefined && elem.nodeType === 1 ) {
					return elem.innerHTML;
				}

				// See if we can take a shortcut and just use innerHTML
				if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
					!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

					value = jQuery.htmlPrefilter( value );

					try {
						for ( ; i < l; i++ ) {
							elem = this[ i ] || {};

							// Remove element nodes and prevent memory leaks
							if ( elem.nodeType === 1 ) {
								jQuery.cleanData( getAll( elem, false ) );
								elem.innerHTML = value;
							}
						}

						elem = 0;

					// If using innerHTML throws an exception, use the fallback method
					} catch ( e ) {}
				}

				if ( elem ) {
					this.empty().append( value );
				}
			}, null, value, arguments.length );
		},

		replaceWith: function() {
			var ignored = [];

			// Make the changes, replacing each non-ignored context element with the new content
			return domManip( this, arguments, function( elem ) {
				var parent = this.parentNode;

				if ( jQuery.inArray( this, ignored ) < 0 ) {
					jQuery.cleanData( getAll( this ) );
					if ( parent ) {
						parent.replaceChild( elem, this );
					}
				}

			// Force callback invocation
			}, ignored );
		}
	} );

	jQuery.each( {
		appendTo: "append",
		prependTo: "prepend",
		insertBefore: "before",
		insertAfter: "after",
		replaceAll: "replaceWith"
	}, function( name, original ) {
		jQuery.fn[ name ] = function( selector ) {
			var elems,
				ret = [],
				insert = jQuery( selector ),
				last = insert.length - 1,
				i = 0;

			for ( ; i <= last; i++ ) {
				elems = i === last ? this : this.clone( true );
				jQuery( insert[ i ] )[ original ]( elems );

				// Support: Android <=4.0 only, PhantomJS 1 only
				// .get() because push.apply(_, arraylike) throws on ancient WebKit
				push.apply( ret, elems.get() );
			}

			return this.pushStack( ret );
		};
	} );
	var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

	var getStyles = function( elem ) {

			// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
			// IE throws on elements created in popups
			// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
			var view = elem.ownerDocument.defaultView;

			if ( !view || !view.opener ) {
				view = window;
			}

			return view.getComputedStyle( elem );
		};

	var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



	( function() {

		// Executing both pixelPosition & boxSizingReliable tests require only one layout
		// so they're executed at the same time to save the second computation.
		function computeStyleTests() {

			// This is a singleton, we need to execute it only once
			if ( !div ) {
				return;
			}

			container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
				"margin-top:1px;padding:0;border:0";
			div.style.cssText =
				"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
				"margin:auto;border:1px;padding:1px;" +
				"width:60%;top:1%";
			documentElement.appendChild( container ).appendChild( div );

			var divStyle = window.getComputedStyle( div );
			pixelPositionVal = divStyle.top !== "1%";

			// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
			reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

			// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
			// Some styles come back with percentage values, even though they shouldn't
			div.style.right = "60%";
			pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

			// Support: IE 9 - 11 only
			// Detect misreporting of content dimensions for box-sizing:border-box elements
			boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

			// Support: IE 9 only
			// Detect overflow:scroll screwiness (gh-3699)
			div.style.position = "absolute";
			scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

			documentElement.removeChild( container );

			// Nullify the div so it wouldn't be stored in the memory and
			// it will also be a sign that checks already performed
			div = null;
		}

		function roundPixelMeasures( measure ) {
			return Math.round( parseFloat( measure ) );
		}

		var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
			reliableMarginLeftVal,
			container = document.createElement( "div" ),
			div = document.createElement( "div" );

		// Finish early in limited (non-browser) environments
		if ( !div.style ) {
			return;
		}

		// Support: IE <=9 - 11 only
		// Style of cloned element affects source element cloned (#8908)
		div.style.backgroundClip = "content-box";
		div.cloneNode( true ).style.backgroundClip = "";
		support.clearCloneStyle = div.style.backgroundClip === "content-box";

		jQuery.extend( support, {
			boxSizingReliable: function() {
				computeStyleTests();
				return boxSizingReliableVal;
			},
			pixelBoxStyles: function() {
				computeStyleTests();
				return pixelBoxStylesVal;
			},
			pixelPosition: function() {
				computeStyleTests();
				return pixelPositionVal;
			},
			reliableMarginLeft: function() {
				computeStyleTests();
				return reliableMarginLeftVal;
			},
			scrollboxSize: function() {
				computeStyleTests();
				return scrollboxSizeVal;
			}
		} );
	} )();


	function curCSS( elem, name, computed ) {
		var width, minWidth, maxWidth, ret,

			// Support: Firefox 51+
			// Retrieving style before computed somehow
			// fixes an issue with getting wrong values
			// on detached elements
			style = elem.style;

		computed = computed || getStyles( elem );

		// getPropertyValue is needed for:
		//   .css('filter') (IE 9 only, #12537)
		//   .css('--customProperty) (#3144)
		if ( computed ) {
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Android Browser returns percentage for some values,
			// but width seems to be reliably pixels.
			// This is against the CSSOM draft spec:
			// https://drafts.csswg.org/cssom/#resolved-values
			if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

				// Remember the original values
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				// Put in the new values to get a computed value out
				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				// Revert the changed values
				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret !== undefined ?

			// Support: IE <=9 - 11 only
			// IE returns zIndex value as an integer.
			ret + "" :
			ret;
	}


	function addGetHookIf( conditionFn, hookFn ) {

		// Define the hook, we'll check on the first run if it's really needed.
		return {
			get: function() {
				if ( conditionFn() ) {

					// Hook not needed (or it's not possible to use it due
					// to missing dependency), remove it.
					delete this.get;
					return;
				}

				// Hook needed; redefine it so that the support test is not executed again.
				return ( this.get = hookFn ).apply( this, arguments );
			}
		};
	}


	var

		// Swappable if display is none or starts with table
		// except "table", "table-cell", or "table-caption"
		// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
		rdisplayswap = /^(none|table(?!-c[ea]).+)/,
		rcustomProp = /^--/,
		cssShow = { position: "absolute", visibility: "hidden", display: "block" },
		cssNormalTransform = {
			letterSpacing: "0",
			fontWeight: "400"
		},

		cssPrefixes = [ "Webkit", "Moz", "ms" ],
		emptyStyle = document.createElement( "div" ).style;

	// Return a css property mapped to a potentially vendor prefixed property
	function vendorPropName( name ) {

		// Shortcut for names that are not vendor prefixed
		if ( name in emptyStyle ) {
			return name;
		}

		// Check for vendor prefixed names
		var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
			i = cssPrefixes.length;

		while ( i-- ) {
			name = cssPrefixes[ i ] + capName;
			if ( name in emptyStyle ) {
				return name;
			}
		}
	}

	// Return a property mapped along what jQuery.cssProps suggests or to
	// a vendor prefixed property.
	function finalPropName( name ) {
		var ret = jQuery.cssProps[ name ];
		if ( !ret ) {
			ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
		}
		return ret;
	}

	function setPositiveNumber( elem, value, subtract ) {

		// Any relative (+/-) values have already been
		// normalized at this point
		var matches = rcssNum.exec( value );
		return matches ?

			// Guard against undefined "subtract", e.g., when used as in cssHooks
			Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
			value;
	}

	function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
		var i = dimension === "width" ? 1 : 0,
			extra = 0,
			delta = 0;

		// Adjustment may not be necessary
		if ( box === ( isBorderBox ? "border" : "content" ) ) {
			return 0;
		}

		for ( ; i < 4; i += 2 ) {

			// Both box models exclude margin
			if ( box === "margin" ) {
				delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
			}

			// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
			if ( !isBorderBox ) {

				// Add padding
				delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

				// For "border" or "margin", add border
				if ( box !== "padding" ) {
					delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

				// But still keep track of it otherwise
				} else {
					extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}

			// If we get here with a border-box (content + padding + border), we're seeking "content" or
			// "padding" or "margin"
			} else {

				// For "content", subtract padding
				if ( box === "content" ) {
					delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
				}

				// For "content" or "padding", subtract border
				if ( box !== "margin" ) {
					delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
				}
			}
		}

		// Account for positive content-box scroll gutter when requested by providing computedVal
		if ( !isBorderBox && computedVal >= 0 ) {

			// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
			// Assuming integer scroll gutter, subtract the rest and round down
			delta += Math.max( 0, Math.ceil(
				elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
				computedVal -
				delta -
				extra -
				0.5
			) );
		}

		return delta;
	}

	function getWidthOrHeight( elem, dimension, extra ) {

		// Start with computed style
		var styles = getStyles( elem ),
			val = curCSS( elem, dimension, styles ),
			isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
			valueIsBorderBox = isBorderBox;

		// Support: Firefox <=54
		// Return a confounding non-pixel value or feign ignorance, as appropriate.
		if ( rnumnonpx.test( val ) ) {
			if ( !extra ) {
				return val;
			}
			val = "auto";
		}

		// Check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = valueIsBorderBox &&
			( support.boxSizingReliable() || val === elem.style[ dimension ] );

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		if ( val === "auto" ||
			!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

			val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

			// offsetWidth/offsetHeight provide border-box values
			valueIsBorderBox = true;
		}

		// Normalize "" and auto
		val = parseFloat( val ) || 0;

		// Adjust for the element's box model
		return ( val +
			boxModelAdjustment(
				elem,
				dimension,
				extra || ( isBorderBox ? "border" : "content" ),
				valueIsBorderBox,
				styles,

				// Provide the current computed size to request scroll gutter calculation (gh-3589)
				val
			)
		) + "px";
	}

	jQuery.extend( {

		// Add in style property hooks for overriding the default
		// behavior of getting and setting a style property
		cssHooks: {
			opacity: {
				get: function( elem, computed ) {
					if ( computed ) {

						// We should always get a number back from opacity
						var ret = curCSS( elem, "opacity" );
						return ret === "" ? "1" : ret;
					}
				}
			}
		},

		// Don't automatically add "px" to these possibly-unitless properties
		cssNumber: {
			"animationIterationCount": true,
			"columnCount": true,
			"fillOpacity": true,
			"flexGrow": true,
			"flexShrink": true,
			"fontWeight": true,
			"lineHeight": true,
			"opacity": true,
			"order": true,
			"orphans": true,
			"widows": true,
			"zIndex": true,
			"zoom": true
		},

		// Add in properties whose names you wish to fix before
		// setting or getting the value
		cssProps: {},

		// Get and set the style property on a DOM Node
		style: function( elem, name, value, extra ) {

			// Don't set styles on text and comment nodes
			if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
				return;
			}

			// Make sure that we're working with the right name
			var ret, type, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name ),
				style = elem.style;

			// Make sure that we're working with the right name. We don't
			// want to query the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Gets hook for the prefixed version, then unprefixed version
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// Check if we're setting a value
			if ( value !== undefined ) {
				type = typeof value;

				// Convert "+=" or "-=" to relative numbers (#7345)
				if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
					value = adjustCSS( elem, name, ret );

					// Fixes bug #9237
					type = "number";
				}

				// Make sure that null and NaN values aren't set (#7116)
				if ( value == null || value !== value ) {
					return;
				}

				// If a number was passed in, add the unit (except for certain CSS properties)
				if ( type === "number" ) {
					value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
				}

				// background-* props affect original clone's values
				if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
					style[ name ] = "inherit";
				}

				// If a hook was provided, use that value, otherwise just set the specified value
				if ( !hooks || !( "set" in hooks ) ||
					( value = hooks.set( elem, value, extra ) ) !== undefined ) {

					if ( isCustomProp ) {
						style.setProperty( name, value );
					} else {
						style[ name ] = value;
					}
				}

			} else {

				// If a hook was provided get the non-computed value from there
				if ( hooks && "get" in hooks &&
					( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

					return ret;
				}

				// Otherwise just get the value from the style object
				return style[ name ];
			}
		},

		css: function( elem, name, extra, styles ) {
			var val, num, hooks,
				origName = camelCase( name ),
				isCustomProp = rcustomProp.test( name );

			// Make sure that we're working with the right name. We don't
			// want to modify the value if it is a CSS custom property
			// since they are user-defined.
			if ( !isCustomProp ) {
				name = finalPropName( origName );
			}

			// Try prefixed name followed by the unprefixed name
			hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

			// If a hook was provided get the computed value from there
			if ( hooks && "get" in hooks ) {
				val = hooks.get( elem, true, extra );
			}

			// Otherwise, if a way to get the computed value exists, use that
			if ( val === undefined ) {
				val = curCSS( elem, name, styles );
			}

			// Convert "normal" to computed value
			if ( val === "normal" && name in cssNormalTransform ) {
				val = cssNormalTransform[ name ];
			}

			// Make numeric if forced or a qualifier was provided and val looks numeric
			if ( extra === "" || extra ) {
				num = parseFloat( val );
				return extra === true || isFinite( num ) ? num || 0 : val;
			}

			return val;
		}
	} );

	jQuery.each( [ "height", "width" ], function( i, dimension ) {
		jQuery.cssHooks[ dimension ] = {
			get: function( elem, computed, extra ) {
				if ( computed ) {

					// Certain elements can have dimension info if we invisibly show them
					// but it must have a current display style that would benefit
					return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

						// Support: Safari 8+
						// Table columns in Safari have non-zero offsetWidth & zero
						// getBoundingClientRect().width unless display is changed.
						// Support: IE <=11 only
						// Running getBoundingClientRect on a disconnected node
						// in IE throws an error.
						( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
							swap( elem, cssShow, function() {
								return getWidthOrHeight( elem, dimension, extra );
							} ) :
							getWidthOrHeight( elem, dimension, extra );
				}
			},

			set: function( elem, value, extra ) {
				var matches,
					styles = getStyles( elem ),
					isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
					subtract = extra && boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					);

				// Account for unreliable border-box dimensions by comparing offset* to computed and
				// faking a content-box to get border and padding (gh-3699)
				if ( isBorderBox && support.scrollboxSize() === styles.position ) {
					subtract -= Math.ceil(
						elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
						parseFloat( styles[ dimension ] ) -
						boxModelAdjustment( elem, dimension, "border", false, styles ) -
						0.5
					);
				}

				// Convert to pixels if value adjustment is needed
				if ( subtract && ( matches = rcssNum.exec( value ) ) &&
					( matches[ 3 ] || "px" ) !== "px" ) {

					elem.style[ dimension ] = value;
					value = jQuery.css( elem, dimension );
				}

				return setPositiveNumber( elem, value, subtract );
			}
		};
	} );

	jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
		function( elem, computed ) {
			if ( computed ) {
				return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
					elem.getBoundingClientRect().left -
						swap( elem, { marginLeft: 0 }, function() {
							return elem.getBoundingClientRect().left;
						} )
					) + "px";
			}
		}
	);

	// These hooks are used by animate to expand properties
	jQuery.each( {
		margin: "",
		padding: "",
		border: "Width"
	}, function( prefix, suffix ) {
		jQuery.cssHooks[ prefix + suffix ] = {
			expand: function( value ) {
				var i = 0,
					expanded = {},

					// Assumes a single number if not a string
					parts = typeof value === "string" ? value.split( " " ) : [ value ];

				for ( ; i < 4; i++ ) {
					expanded[ prefix + cssExpand[ i ] + suffix ] =
						parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
				}

				return expanded;
			}
		};

		if ( prefix !== "margin" ) {
			jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
		}
	} );

	jQuery.fn.extend( {
		css: function( name, value ) {
			return access( this, function( elem, name, value ) {
				var styles, len,
					map = {},
					i = 0;

				if ( Array.isArray( name ) ) {
					styles = getStyles( elem );
					len = name.length;

					for ( ; i < len; i++ ) {
						map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
					}

					return map;
				}

				return value !== undefined ?
					jQuery.style( elem, name, value ) :
					jQuery.css( elem, name );
			}, name, value, arguments.length > 1 );
		}
	} );


	function Tween( elem, options, prop, end, easing ) {
		return new Tween.prototype.init( elem, options, prop, end, easing );
	}
	jQuery.Tween = Tween;

	Tween.prototype = {
		constructor: Tween,
		init: function( elem, options, prop, end, easing, unit ) {
			this.elem = elem;
			this.prop = prop;
			this.easing = easing || jQuery.easing._default;
			this.options = options;
			this.start = this.now = this.cur();
			this.end = end;
			this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
		},
		cur: function() {
			var hooks = Tween.propHooks[ this.prop ];

			return hooks && hooks.get ?
				hooks.get( this ) :
				Tween.propHooks._default.get( this );
		},
		run: function( percent ) {
			var eased,
				hooks = Tween.propHooks[ this.prop ];

			if ( this.options.duration ) {
				this.pos = eased = jQuery.easing[ this.easing ](
					percent, this.options.duration * percent, 0, 1, this.options.duration
				);
			} else {
				this.pos = eased = percent;
			}
			this.now = ( this.end - this.start ) * eased + this.start;

			if ( this.options.step ) {
				this.options.step.call( this.elem, this.now, this );
			}

			if ( hooks && hooks.set ) {
				hooks.set( this );
			} else {
				Tween.propHooks._default.set( this );
			}
			return this;
		}
	};

	Tween.prototype.init.prototype = Tween.prototype;

	Tween.propHooks = {
		_default: {
			get: function( tween ) {
				var result;

				// Use a property on the element directly when it is not a DOM element,
				// or when there is no matching style property that exists.
				if ( tween.elem.nodeType !== 1 ||
					tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
					return tween.elem[ tween.prop ];
				}

				// Passing an empty string as a 3rd parameter to .css will automatically
				// attempt a parseFloat and fallback to a string if the parse fails.
				// Simple values such as "10px" are parsed to Float;
				// complex values such as "rotate(1rad)" are returned as-is.
				result = jQuery.css( tween.elem, tween.prop, "" );

				// Empty strings, null, undefined and "auto" are converted to 0.
				return !result || result === "auto" ? 0 : result;
			},
			set: function( tween ) {

				// Use step hook for back compat.
				// Use cssHook if its there.
				// Use .style if available and use plain properties where available.
				if ( jQuery.fx.step[ tween.prop ] ) {
					jQuery.fx.step[ tween.prop ]( tween );
				} else if ( tween.elem.nodeType === 1 &&
					( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
						jQuery.cssHooks[ tween.prop ] ) ) {
					jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
				} else {
					tween.elem[ tween.prop ] = tween.now;
				}
			}
		}
	};

	// Support: IE <=9 only
	// Panic based approach to setting things on disconnected nodes
	Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
		set: function( tween ) {
			if ( tween.elem.nodeType && tween.elem.parentNode ) {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	};

	jQuery.easing = {
		linear: function( p ) {
			return p;
		},
		swing: function( p ) {
			return 0.5 - Math.cos( p * Math.PI ) / 2;
		},
		_default: "swing"
	};

	jQuery.fx = Tween.prototype.init;

	// Back compat <1.8 extension point
	jQuery.fx.step = {};




	var
		fxNow, inProgress,
		rfxtypes = /^(?:toggle|show|hide)$/,
		rrun = /queueHooks$/;

	function schedule() {
		if ( inProgress ) {
			if ( document.hidden === false && window.requestAnimationFrame ) {
				window.requestAnimationFrame( schedule );
			} else {
				window.setTimeout( schedule, jQuery.fx.interval );
			}

			jQuery.fx.tick();
		}
	}

	// Animations created synchronously will run synchronously
	function createFxNow() {
		window.setTimeout( function() {
			fxNow = undefined;
		} );
		return ( fxNow = Date.now() );
	}

	// Generate parameters to create a standard animation
	function genFx( type, includeWidth ) {
		var which,
			i = 0,
			attrs = { height: type };

		// If we include width, step value is 1 to do all cssExpand values,
		// otherwise step value is 2 to skip over Left and Right
		includeWidth = includeWidth ? 1 : 0;
		for ( ; i < 4; i += 2 - includeWidth ) {
			which = cssExpand[ i ];
			attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
		}

		if ( includeWidth ) {
			attrs.opacity = attrs.width = type;
		}

		return attrs;
	}

	function createTween( value, prop, animation ) {
		var tween,
			collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

				// We're done with this property
				return tween;
			}
		}
	}

	function defaultPrefilter( elem, props, opts ) {
		var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
			isBox = "width" in props || "height" in props,
			anim = this,
			orig = {},
			style = elem.style,
			hidden = elem.nodeType && isHiddenWithinTree( elem ),
			dataShow = dataPriv.get( elem, "fxshow" );

		// Queue-skipping animations hijack the fx hooks
		if ( !opts.queue ) {
			hooks = jQuery._queueHooks( elem, "fx" );
			if ( hooks.unqueued == null ) {
				hooks.unqueued = 0;
				oldfire = hooks.empty.fire;
				hooks.empty.fire = function() {
					if ( !hooks.unqueued ) {
						oldfire();
					}
				};
			}
			hooks.unqueued++;

			anim.always( function() {

				// Ensure the complete handler is called before this completes
				anim.always( function() {
					hooks.unqueued--;
					if ( !jQuery.queue( elem, "fx" ).length ) {
						hooks.empty.fire();
					}
				} );
			} );
		}

		// Detect show/hide animations
		for ( prop in props ) {
			value = props[ prop ];
			if ( rfxtypes.test( value ) ) {
				delete props[ prop ];
				toggle = toggle || value === "toggle";
				if ( value === ( hidden ? "hide" : "show" ) ) {

					// Pretend to be hidden if this is a "show" and
					// there is still data from a stopped show/hide
					if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
						hidden = true;

					// Ignore all other no-op show/hide data
					} else {
						continue;
					}
				}
				orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
			}
		}

		// Bail out if this is a no-op like .hide().hide()
		propTween = !jQuery.isEmptyObject( props );
		if ( !propTween && jQuery.isEmptyObject( orig ) ) {
			return;
		}

		// Restrict "overflow" and "display" styles during box animations
		if ( isBox && elem.nodeType === 1 ) {

			// Support: IE <=9 - 11, Edge 12 - 15
			// Record all 3 overflow attributes because IE does not infer the shorthand
			// from identically-valued overflowX and overflowY and Edge just mirrors
			// the overflowX value there.
			opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

			// Identify a display type, preferring old show/hide data over the CSS cascade
			restoreDisplay = dataShow && dataShow.display;
			if ( restoreDisplay == null ) {
				restoreDisplay = dataPriv.get( elem, "display" );
			}
			display = jQuery.css( elem, "display" );
			if ( display === "none" ) {
				if ( restoreDisplay ) {
					display = restoreDisplay;
				} else {

					// Get nonempty value(s) by temporarily forcing visibility
					showHide( [ elem ], true );
					restoreDisplay = elem.style.display || restoreDisplay;
					display = jQuery.css( elem, "display" );
					showHide( [ elem ] );
				}
			}

			// Animate inline elements as inline-block
			if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
				if ( jQuery.css( elem, "float" ) === "none" ) {

					// Restore the original display value at the end of pure show/hide animations
					if ( !propTween ) {
						anim.done( function() {
							style.display = restoreDisplay;
						} );
						if ( restoreDisplay == null ) {
							display = style.display;
							restoreDisplay = display === "none" ? "" : display;
						}
					}
					style.display = "inline-block";
				}
			}
		}

		if ( opts.overflow ) {
			style.overflow = "hidden";
			anim.always( function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			} );
		}

		// Implement show/hide animations
		propTween = false;
		for ( prop in orig ) {

			// General show/hide setup for this element animation
			if ( !propTween ) {
				if ( dataShow ) {
					if ( "hidden" in dataShow ) {
						hidden = dataShow.hidden;
					}
				} else {
					dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
				}

				// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
				if ( toggle ) {
					dataShow.hidden = !hidden;
				}

				// Show elements before animating them
				if ( hidden ) {
					showHide( [ elem ], true );
				}

				/* eslint-disable no-loop-func */

				anim.done( function() {

				/* eslint-enable no-loop-func */

					// The final step of a "hide" animation is actually hiding the element
					if ( !hidden ) {
						showHide( [ elem ] );
					}
					dataPriv.remove( elem, "fxshow" );
					for ( prop in orig ) {
						jQuery.style( elem, prop, orig[ prop ] );
					}
				} );
			}

			// Per-property setup
			propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = propTween.start;
				if ( hidden ) {
					propTween.end = propTween.start;
					propTween.start = 0;
				}
			}
		}
	}

	function propFilter( props, specialEasing ) {
		var index, name, easing, value, hooks;

		// camelCase, specialEasing and expand cssHook pass
		for ( index in props ) {
			name = camelCase( index );
			easing = specialEasing[ name ];
			value = props[ index ];
			if ( Array.isArray( value ) ) {
				easing = value[ 1 ];
				value = props[ index ] = value[ 0 ];
			}

			if ( index !== name ) {
				props[ name ] = value;
				delete props[ index ];
			}

			hooks = jQuery.cssHooks[ name ];
			if ( hooks && "expand" in hooks ) {
				value = hooks.expand( value );
				delete props[ name ];

				// Not quite $.extend, this won't overwrite existing keys.
				// Reusing 'index' because we have the correct "name"
				for ( index in value ) {
					if ( !( index in props ) ) {
						props[ index ] = value[ index ];
						specialEasing[ index ] = easing;
					}
				}
			} else {
				specialEasing[ name ] = easing;
			}
		}
	}

	function Animation( elem, properties, options ) {
		var result,
			stopped,
			index = 0,
			length = Animation.prefilters.length,
			deferred = jQuery.Deferred().always( function() {

				// Don't match elem in the :animated selector
				delete tick.elem;
			} ),
			tick = function() {
				if ( stopped ) {
					return false;
				}
				var currentTime = fxNow || createFxNow(),
					remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

					// Support: Android 2.3 only
					// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
					temp = remaining / animation.duration || 0,
					percent = 1 - temp,
					index = 0,
					length = animation.tweens.length;

				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( percent );
				}

				deferred.notifyWith( elem, [ animation, percent, remaining ] );

				// If there's more to do, yield
				if ( percent < 1 && length ) {
					return remaining;
				}

				// If this was an empty animation, synthesize a final progress notification
				if ( !length ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
				}

				// Resolve the animation and report its conclusion
				deferred.resolveWith( elem, [ animation ] );
				return false;
			},
			animation = deferred.promise( {
				elem: elem,
				props: jQuery.extend( {}, properties ),
				opts: jQuery.extend( true, {
					specialEasing: {},
					easing: jQuery.easing._default
				}, options ),
				originalProperties: properties,
				originalOptions: options,
				startTime: fxNow || createFxNow(),
				duration: options.duration,
				tweens: [],
				createTween: function( prop, end ) {
					var tween = jQuery.Tween( elem, animation.opts, prop, end,
							animation.opts.specialEasing[ prop ] || animation.opts.easing );
					animation.tweens.push( tween );
					return tween;
				},
				stop: function( gotoEnd ) {
					var index = 0,

						// If we are going to the end, we want to run all the tweens
						// otherwise we skip this part
						length = gotoEnd ? animation.tweens.length : 0;
					if ( stopped ) {
						return this;
					}
					stopped = true;
					for ( ; index < length; index++ ) {
						animation.tweens[ index ].run( 1 );
					}

					// Resolve when we played the last frame; otherwise, reject
					if ( gotoEnd ) {
						deferred.notifyWith( elem, [ animation, 1, 0 ] );
						deferred.resolveWith( elem, [ animation, gotoEnd ] );
					} else {
						deferred.rejectWith( elem, [ animation, gotoEnd ] );
					}
					return this;
				}
			} ),
			props = animation.props;

		propFilter( props, animation.opts.specialEasing );

		for ( ; index < length; index++ ) {
			result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
			if ( result ) {
				if ( isFunction( result.stop ) ) {
					jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
						result.stop.bind( result );
				}
				return result;
			}
		}

		jQuery.map( props, createTween, animation );

		if ( isFunction( animation.opts.start ) ) {
			animation.opts.start.call( elem, animation );
		}

		// Attach callbacks from options
		animation
			.progress( animation.opts.progress )
			.done( animation.opts.done, animation.opts.complete )
			.fail( animation.opts.fail )
			.always( animation.opts.always );

		jQuery.fx.timer(
			jQuery.extend( tick, {
				elem: elem,
				anim: animation,
				queue: animation.opts.queue
			} )
		);

		return animation;
	}

	jQuery.Animation = jQuery.extend( Animation, {

		tweeners: {
			"*": [ function( prop, value ) {
				var tween = this.createTween( prop, value );
				adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
				return tween;
			} ]
		},

		tweener: function( props, callback ) {
			if ( isFunction( props ) ) {
				callback = props;
				props = [ "*" ];
			} else {
				props = props.match( rnothtmlwhite );
			}

			var prop,
				index = 0,
				length = props.length;

			for ( ; index < length; index++ ) {
				prop = props[ index ];
				Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
				Animation.tweeners[ prop ].unshift( callback );
			}
		},

		prefilters: [ defaultPrefilter ],

		prefilter: function( callback, prepend ) {
			if ( prepend ) {
				Animation.prefilters.unshift( callback );
			} else {
				Animation.prefilters.push( callback );
			}
		}
	} );

	jQuery.speed = function( speed, easing, fn ) {
		var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
			complete: fn || !fn && easing ||
				isFunction( speed ) && speed,
			duration: speed,
			easing: fn && easing || easing && !isFunction( easing ) && easing
		};

		// Go to the end state if fx are off
		if ( jQuery.fx.off ) {
			opt.duration = 0;

		} else {
			if ( typeof opt.duration !== "number" ) {
				if ( opt.duration in jQuery.fx.speeds ) {
					opt.duration = jQuery.fx.speeds[ opt.duration ];

				} else {
					opt.duration = jQuery.fx.speeds._default;
				}
			}
		}

		// Normalize opt.queue - true/undefined/null -> "fx"
		if ( opt.queue == null || opt.queue === true ) {
			opt.queue = "fx";
		}

		// Queueing
		opt.old = opt.complete;

		opt.complete = function() {
			if ( isFunction( opt.old ) ) {
				opt.old.call( this );
			}

			if ( opt.queue ) {
				jQuery.dequeue( this, opt.queue );
			}
		};

		return opt;
	};

	jQuery.fn.extend( {
		fadeTo: function( speed, to, easing, callback ) {

			// Show any hidden elements after setting opacity to 0
			return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

				// Animate to the value specified
				.end().animate( { opacity: to }, speed, easing, callback );
		},
		animate: function( prop, speed, easing, callback ) {
			var empty = jQuery.isEmptyObject( prop ),
				optall = jQuery.speed( speed, easing, callback ),
				doAnimation = function() {

					// Operate on a copy of prop so per-property easing won't be lost
					var anim = Animation( this, jQuery.extend( {}, prop ), optall );

					// Empty animations, or finishing resolves immediately
					if ( empty || dataPriv.get( this, "finish" ) ) {
						anim.stop( true );
					}
				};
				doAnimation.finish = doAnimation;

			return empty || optall.queue === false ?
				this.each( doAnimation ) :
				this.queue( optall.queue, doAnimation );
		},
		stop: function( type, clearQueue, gotoEnd ) {
			var stopQueue = function( hooks ) {
				var stop = hooks.stop;
				delete hooks.stop;
				stop( gotoEnd );
			};

			if ( typeof type !== "string" ) {
				gotoEnd = clearQueue;
				clearQueue = type;
				type = undefined;
			}
			if ( clearQueue && type !== false ) {
				this.queue( type || "fx", [] );
			}

			return this.each( function() {
				var dequeue = true,
					index = type != null && type + "queueHooks",
					timers = jQuery.timers,
					data = dataPriv.get( this );

				if ( index ) {
					if ( data[ index ] && data[ index ].stop ) {
						stopQueue( data[ index ] );
					}
				} else {
					for ( index in data ) {
						if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
							stopQueue( data[ index ] );
						}
					}
				}

				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this &&
						( type == null || timers[ index ].queue === type ) ) {

						timers[ index ].anim.stop( gotoEnd );
						dequeue = false;
						timers.splice( index, 1 );
					}
				}

				// Start the next in the queue if the last step wasn't forced.
				// Timers currently will call their complete callbacks, which
				// will dequeue but only if they were gotoEnd.
				if ( dequeue || !gotoEnd ) {
					jQuery.dequeue( this, type );
				}
			} );
		},
		finish: function( type ) {
			if ( type !== false ) {
				type = type || "fx";
			}
			return this.each( function() {
				var index,
					data = dataPriv.get( this ),
					queue = data[ type + "queue" ],
					hooks = data[ type + "queueHooks" ],
					timers = jQuery.timers,
					length = queue ? queue.length : 0;

				// Enable finishing flag on private data
				data.finish = true;

				// Empty the queue first
				jQuery.queue( this, type, [] );

				if ( hooks && hooks.stop ) {
					hooks.stop.call( this, true );
				}

				// Look for any active animations, and finish them
				for ( index = timers.length; index--; ) {
					if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
						timers[ index ].anim.stop( true );
						timers.splice( index, 1 );
					}
				}

				// Look for any animations in the old queue and finish them
				for ( index = 0; index < length; index++ ) {
					if ( queue[ index ] && queue[ index ].finish ) {
						queue[ index ].finish.call( this );
					}
				}

				// Turn off finishing flag
				delete data.finish;
			} );
		}
	} );

	jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
		var cssFn = jQuery.fn[ name ];
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return speed == null || typeof speed === "boolean" ?
				cssFn.apply( this, arguments ) :
				this.animate( genFx( name, true ), speed, easing, callback );
		};
	} );

	// Generate shortcuts for custom animations
	jQuery.each( {
		slideDown: genFx( "show" ),
		slideUp: genFx( "hide" ),
		slideToggle: genFx( "toggle" ),
		fadeIn: { opacity: "show" },
		fadeOut: { opacity: "hide" },
		fadeToggle: { opacity: "toggle" }
	}, function( name, props ) {
		jQuery.fn[ name ] = function( speed, easing, callback ) {
			return this.animate( props, speed, easing, callback );
		};
	} );

	jQuery.timers = [];
	jQuery.fx.tick = function() {
		var timer,
			i = 0,
			timers = jQuery.timers;

		fxNow = Date.now();

		for ( ; i < timers.length; i++ ) {
			timer = timers[ i ];

			// Run the timer and safely remove it when done (allowing for external removal)
			if ( !timer() && timers[ i ] === timer ) {
				timers.splice( i--, 1 );
			}
		}

		if ( !timers.length ) {
			jQuery.fx.stop();
		}
		fxNow = undefined;
	};

	jQuery.fx.timer = function( timer ) {
		jQuery.timers.push( timer );
		jQuery.fx.start();
	};

	jQuery.fx.interval = 13;
	jQuery.fx.start = function() {
		if ( inProgress ) {
			return;
		}

		inProgress = true;
		schedule();
	};

	jQuery.fx.stop = function() {
		inProgress = null;
	};

	jQuery.fx.speeds = {
		slow: 600,
		fast: 200,

		// Default speed
		_default: 400
	};


	// Based off of the plugin by Clint Helfers, with permission.
	// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
	jQuery.fn.delay = function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = window.setTimeout( next, time );
			hooks.stop = function() {
				window.clearTimeout( timeout );
			};
		} );
	};


	( function() {
		var input = document.createElement( "input" ),
			select = document.createElement( "select" ),
			opt = select.appendChild( document.createElement( "option" ) );

		input.type = "checkbox";

		// Support: Android <=4.3 only
		// Default value for a checkbox should be "on"
		support.checkOn = input.value !== "";

		// Support: IE <=11 only
		// Must access selectedIndex to make default options select
		support.optSelected = opt.selected;

		// Support: IE <=11 only
		// An input loses its value after becoming a radio
		input = document.createElement( "input" );
		input.value = "t";
		input.type = "radio";
		support.radioValue = input.value === "t";
	} )();


	var boolHook,
		attrHandle = jQuery.expr.attrHandle;

	jQuery.fn.extend( {
		attr: function( name, value ) {
			return access( this, jQuery.attr, name, value, arguments.length > 1 );
		},

		removeAttr: function( name ) {
			return this.each( function() {
				jQuery.removeAttr( this, name );
			} );
		}
	} );

	jQuery.extend( {
		attr: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set attributes on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			// Fallback to prop when attributes are not supported
			if ( typeof elem.getAttribute === "undefined" ) {
				return jQuery.prop( elem, name, value );
			}

			// Attribute hooks are determined by the lowercase version
			// Grab necessary hook if one is defined
			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
				hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
					( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
			}

			if ( value !== undefined ) {
				if ( value === null ) {
					jQuery.removeAttr( elem, name );
					return;
				}

				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				elem.setAttribute( name, value + "" );
				return value;
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			ret = jQuery.find.attr( elem, name );

			// Non-existent attributes return null, we normalize to undefined
			return ret == null ? undefined : ret;
		},

		attrHooks: {
			type: {
				set: function( elem, value ) {
					if ( !support.radioValue && value === "radio" &&
						nodeName( elem, "input" ) ) {
						var val = elem.value;
						elem.setAttribute( "type", value );
						if ( val ) {
							elem.value = val;
						}
						return value;
					}
				}
			}
		},

		removeAttr: function( elem, value ) {
			var name,
				i = 0,

				// Attribute names can contain non-HTML whitespace characters
				// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
				attrNames = value && value.match( rnothtmlwhite );

			if ( attrNames && elem.nodeType === 1 ) {
				while ( ( name = attrNames[ i++ ] ) ) {
					elem.removeAttribute( name );
				}
			}
		}
	} );

	// Hooks for boolean attributes
	boolHook = {
		set: function( elem, value, name ) {
			if ( value === false ) {

				// Remove boolean attributes when set to false
				jQuery.removeAttr( elem, name );
			} else {
				elem.setAttribute( name, name );
			}
			return name;
		}
	};

	jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
		var getter = attrHandle[ name ] || jQuery.find.attr;

		attrHandle[ name ] = function( elem, name, isXML ) {
			var ret, handle,
				lowercaseName = name.toLowerCase();

			if ( !isXML ) {

				// Avoid an infinite loop by temporarily removing this function from the getter
				handle = attrHandle[ lowercaseName ];
				attrHandle[ lowercaseName ] = ret;
				ret = getter( elem, name, isXML ) != null ?
					lowercaseName :
					null;
				attrHandle[ lowercaseName ] = handle;
			}
			return ret;
		};
	} );




	var rfocusable = /^(?:input|select|textarea|button)$/i,
		rclickable = /^(?:a|area)$/i;

	jQuery.fn.extend( {
		prop: function( name, value ) {
			return access( this, jQuery.prop, name, value, arguments.length > 1 );
		},

		removeProp: function( name ) {
			return this.each( function() {
				delete this[ jQuery.propFix[ name ] || name ];
			} );
		}
	} );

	jQuery.extend( {
		prop: function( elem, name, value ) {
			var ret, hooks,
				nType = elem.nodeType;

			// Don't get/set properties on text, comment and attribute nodes
			if ( nType === 3 || nType === 8 || nType === 2 ) {
				return;
			}

			if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

				// Fix name and attach hooks
				name = jQuery.propFix[ name ] || name;
				hooks = jQuery.propHooks[ name ];
			}

			if ( value !== undefined ) {
				if ( hooks && "set" in hooks &&
					( ret = hooks.set( elem, value, name ) ) !== undefined ) {
					return ret;
				}

				return ( elem[ name ] = value );
			}

			if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
				return ret;
			}

			return elem[ name ];
		},

		propHooks: {
			tabIndex: {
				get: function( elem ) {

					// Support: IE <=9 - 11 only
					// elem.tabIndex doesn't always return the
					// correct value when it hasn't been explicitly set
					// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
					// Use proper attribute retrieval(#12072)
					var tabindex = jQuery.find.attr( elem, "tabindex" );

					if ( tabindex ) {
						return parseInt( tabindex, 10 );
					}

					if (
						rfocusable.test( elem.nodeName ) ||
						rclickable.test( elem.nodeName ) &&
						elem.href
					) {
						return 0;
					}

					return -1;
				}
			}
		},

		propFix: {
			"for": "htmlFor",
			"class": "className"
		}
	} );

	// Support: IE <=11 only
	// Accessing the selectedIndex property
	// forces the browser to respect setting selected
	// on the option
	// The getter ensures a default option is selected
	// when in an optgroup
	// eslint rule "no-unused-expressions" is disabled for this code
	// since it considers such accessions noop
	if ( !support.optSelected ) {
		jQuery.propHooks.selected = {
			get: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent && parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
				return null;
			},
			set: function( elem ) {

				/* eslint no-unused-expressions: "off" */

				var parent = elem.parentNode;
				if ( parent ) {
					parent.selectedIndex;

					if ( parent.parentNode ) {
						parent.parentNode.selectedIndex;
					}
				}
			}
		};
	}

	jQuery.each( [
		"tabIndex",
		"readOnly",
		"maxLength",
		"cellSpacing",
		"cellPadding",
		"rowSpan",
		"colSpan",
		"useMap",
		"frameBorder",
		"contentEditable"
	], function() {
		jQuery.propFix[ this.toLowerCase() ] = this;
	} );




		// Strip and collapse whitespace according to HTML spec
		// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
		function stripAndCollapse( value ) {
			var tokens = value.match( rnothtmlwhite ) || [];
			return tokens.join( " " );
		}


	function getClass( elem ) {
		return elem.getAttribute && elem.getAttribute( "class" ) || "";
	}

	function classesToArray( value ) {
		if ( Array.isArray( value ) ) {
			return value;
		}
		if ( typeof value === "string" ) {
			return value.match( rnothtmlwhite ) || [];
		}
		return [];
	}

	jQuery.fn.extend( {
		addClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {
							if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
								cur += clazz + " ";
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		removeClass: function( value ) {
			var classes, elem, cur, curValue, clazz, j, finalValue,
				i = 0;

			if ( isFunction( value ) ) {
				return this.each( function( j ) {
					jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
				} );
			}

			if ( !arguments.length ) {
				return this.attr( "class", "" );
			}

			classes = classesToArray( value );

			if ( classes.length ) {
				while ( ( elem = this[ i++ ] ) ) {
					curValue = getClass( elem );

					// This expression is here for better compressibility (see addClass)
					cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

					if ( cur ) {
						j = 0;
						while ( ( clazz = classes[ j++ ] ) ) {

							// Remove *all* instances
							while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
								cur = cur.replace( " " + clazz + " ", " " );
							}
						}

						// Only assign if different to avoid unneeded rendering.
						finalValue = stripAndCollapse( cur );
						if ( curValue !== finalValue ) {
							elem.setAttribute( "class", finalValue );
						}
					}
				}
			}

			return this;
		},

		toggleClass: function( value, stateVal ) {
			var type = typeof value,
				isValidValue = type === "string" || Array.isArray( value );

			if ( typeof stateVal === "boolean" && isValidValue ) {
				return stateVal ? this.addClass( value ) : this.removeClass( value );
			}

			if ( isFunction( value ) ) {
				return this.each( function( i ) {
					jQuery( this ).toggleClass(
						value.call( this, i, getClass( this ), stateVal ),
						stateVal
					);
				} );
			}

			return this.each( function() {
				var className, i, self, classNames;

				if ( isValidValue ) {

					// Toggle individual class names
					i = 0;
					self = jQuery( this );
					classNames = classesToArray( value );

					while ( ( className = classNames[ i++ ] ) ) {

						// Check each className given, space separated list
						if ( self.hasClass( className ) ) {
							self.removeClass( className );
						} else {
							self.addClass( className );
						}
					}

				// Toggle whole class name
				} else if ( value === undefined || type === "boolean" ) {
					className = getClass( this );
					if ( className ) {

						// Store className if set
						dataPriv.set( this, "__className__", className );
					}

					// If the element has a class name or if we're passed `false`,
					// then remove the whole classname (if there was one, the above saved it).
					// Otherwise bring back whatever was previously saved (if anything),
					// falling back to the empty string if nothing was stored.
					if ( this.setAttribute ) {
						this.setAttribute( "class",
							className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
						);
					}
				}
			} );
		},

		hasClass: function( selector ) {
			var className, elem,
				i = 0;

			className = " " + selector + " ";
			while ( ( elem = this[ i++ ] ) ) {
				if ( elem.nodeType === 1 &&
					( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
						return true;
				}
			}

			return false;
		}
	} );




	var rreturn = /\r/g;

	jQuery.fn.extend( {
		val: function( value ) {
			var hooks, ret, valueIsFunction,
				elem = this[ 0 ];

			if ( !arguments.length ) {
				if ( elem ) {
					hooks = jQuery.valHooks[ elem.type ] ||
						jQuery.valHooks[ elem.nodeName.toLowerCase() ];

					if ( hooks &&
						"get" in hooks &&
						( ret = hooks.get( elem, "value" ) ) !== undefined
					) {
						return ret;
					}

					ret = elem.value;

					// Handle most common string cases
					if ( typeof ret === "string" ) {
						return ret.replace( rreturn, "" );
					}

					// Handle cases where value is null/undef or number
					return ret == null ? "" : ret;
				}

				return;
			}

			valueIsFunction = isFunction( value );

			return this.each( function( i ) {
				var val;

				if ( this.nodeType !== 1 ) {
					return;
				}

				if ( valueIsFunction ) {
					val = value.call( this, i, jQuery( this ).val() );
				} else {
					val = value;
				}

				// Treat null/undefined as ""; convert numbers to string
				if ( val == null ) {
					val = "";

				} else if ( typeof val === "number" ) {
					val += "";

				} else if ( Array.isArray( val ) ) {
					val = jQuery.map( val, function( value ) {
						return value == null ? "" : value + "";
					} );
				}

				hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

				// If set returns undefined, fall back to normal setting
				if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
					this.value = val;
				}
			} );
		}
	} );

	jQuery.extend( {
		valHooks: {
			option: {
				get: function( elem ) {

					var val = jQuery.find.attr( elem, "value" );
					return val != null ?
						val :

						// Support: IE <=10 - 11 only
						// option.text throws exceptions (#14686, #14858)
						// Strip and collapse whitespace
						// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
						stripAndCollapse( jQuery.text( elem ) );
				}
			},
			select: {
				get: function( elem ) {
					var value, option, i,
						options = elem.options,
						index = elem.selectedIndex,
						one = elem.type === "select-one",
						values = one ? null : [],
						max = one ? index + 1 : options.length;

					if ( index < 0 ) {
						i = max;

					} else {
						i = one ? index : 0;
					}

					// Loop through all the selected options
					for ( ; i < max; i++ ) {
						option = options[ i ];

						// Support: IE <=9 only
						// IE8-9 doesn't update selected after form reset (#2551)
						if ( ( option.selected || i === index ) &&

								// Don't return options that are disabled or in a disabled optgroup
								!option.disabled &&
								( !option.parentNode.disabled ||
									!nodeName( option.parentNode, "optgroup" ) ) ) {

							// Get the specific value for the option
							value = jQuery( option ).val();

							// We don't need an array for one selects
							if ( one ) {
								return value;
							}

							// Multi-Selects return an array
							values.push( value );
						}
					}

					return values;
				},

				set: function( elem, value ) {
					var optionSet, option,
						options = elem.options,
						values = jQuery.makeArray( value ),
						i = options.length;

					while ( i-- ) {
						option = options[ i ];

						/* eslint-disable no-cond-assign */

						if ( option.selected =
							jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
						) {
							optionSet = true;
						}

						/* eslint-enable no-cond-assign */
					}

					// Force browsers to behave consistently when non-matching value is set
					if ( !optionSet ) {
						elem.selectedIndex = -1;
					}
					return values;
				}
			}
		}
	} );

	// Radios and checkboxes getter/setter
	jQuery.each( [ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			set: function( elem, value ) {
				if ( Array.isArray( value ) ) {
					return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
				}
			}
		};
		if ( !support.checkOn ) {
			jQuery.valHooks[ this ].get = function( elem ) {
				return elem.getAttribute( "value" ) === null ? "on" : elem.value;
			};
		}
	} );




	// Return jQuery for attributes-only inclusion


	support.focusin = "onfocusin" in window;


	var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
		stopPropagationCallback = function( e ) {
			e.stopPropagation();
		};

	jQuery.extend( jQuery.event, {

		trigger: function( event, data, elem, onlyHandlers ) {

			var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
				eventPath = [ elem || document ],
				type = hasOwn.call( event, "type" ) ? event.type : event,
				namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

			cur = lastElement = tmp = elem = elem || document;

			// Don't do events on text and comment nodes
			if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
				return;
			}

			// focus/blur morphs to focusin/out; ensure we're not firing them right now
			if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
				return;
			}

			if ( type.indexOf( "." ) > -1 ) {

				// Namespaced trigger; create a regexp to match event type in handle()
				namespaces = type.split( "." );
				type = namespaces.shift();
				namespaces.sort();
			}
			ontype = type.indexOf( ":" ) < 0 && "on" + type;

			// Caller can pass in a jQuery.Event object, Object, or just an event type string
			event = event[ jQuery.expando ] ?
				event :
				new jQuery.Event( type, typeof event === "object" && event );

			// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
			event.isTrigger = onlyHandlers ? 2 : 3;
			event.namespace = namespaces.join( "." );
			event.rnamespace = event.namespace ?
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
				null;

			// Clean up the event in case it is being reused
			event.result = undefined;
			if ( !event.target ) {
				event.target = elem;
			}

			// Clone any incoming data and prepend the event, creating the handler arg list
			data = data == null ?
				[ event ] :
				jQuery.makeArray( data, [ event ] );

			// Allow special events to draw outside the lines
			special = jQuery.event.special[ type ] || {};
			if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
				return;
			}

			// Determine event propagation path in advance, per W3C events spec (#9951)
			// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
			if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

				bubbleType = special.delegateType || type;
				if ( !rfocusMorph.test( bubbleType + type ) ) {
					cur = cur.parentNode;
				}
				for ( ; cur; cur = cur.parentNode ) {
					eventPath.push( cur );
					tmp = cur;
				}

				// Only add window if we got to document (e.g., not plain obj or detached DOM)
				if ( tmp === ( elem.ownerDocument || document ) ) {
					eventPath.push( tmp.defaultView || tmp.parentWindow || window );
				}
			}

			// Fire handlers on the event path
			i = 0;
			while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
				lastElement = cur;
				event.type = i > 1 ?
					bubbleType :
					special.bindType || type;

				// jQuery handler
				handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
					dataPriv.get( cur, "handle" );
				if ( handle ) {
					handle.apply( cur, data );
				}

				// Native handler
				handle = ontype && cur[ ontype ];
				if ( handle && handle.apply && acceptData( cur ) ) {
					event.result = handle.apply( cur, data );
					if ( event.result === false ) {
						event.preventDefault();
					}
				}
			}
			event.type = type;

			// If nobody prevented the default action, do it now
			if ( !onlyHandlers && !event.isDefaultPrevented() ) {

				if ( ( !special._default ||
					special._default.apply( eventPath.pop(), data ) === false ) &&
					acceptData( elem ) ) {

					// Call a native DOM method on the target with the same name as the event.
					// Don't do default actions on window, that's where global variables be (#6170)
					if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

						// Don't re-trigger an onFOO event when we call its FOO() method
						tmp = elem[ ontype ];

						if ( tmp ) {
							elem[ ontype ] = null;
						}

						// Prevent re-triggering of the same event, since we already bubbled it above
						jQuery.event.triggered = type;

						if ( event.isPropagationStopped() ) {
							lastElement.addEventListener( type, stopPropagationCallback );
						}

						elem[ type ]();

						if ( event.isPropagationStopped() ) {
							lastElement.removeEventListener( type, stopPropagationCallback );
						}

						jQuery.event.triggered = undefined;

						if ( tmp ) {
							elem[ ontype ] = tmp;
						}
					}
				}
			}

			return event.result;
		},

		// Piggyback on a donor event to simulate a different one
		// Used only for `focus(in | out)` events
		simulate: function( type, elem, event ) {
			var e = jQuery.extend(
				new jQuery.Event(),
				event,
				{
					type: type,
					isSimulated: true
				}
			);

			jQuery.event.trigger( e, null, elem );
		}

	} );

	jQuery.fn.extend( {

		trigger: function( type, data ) {
			return this.each( function() {
				jQuery.event.trigger( type, data, this );
			} );
		},
		triggerHandler: function( type, data ) {
			var elem = this[ 0 ];
			if ( elem ) {
				return jQuery.event.trigger( type, data, elem, true );
			}
		}
	} );


	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	if ( !support.focusin ) {
		jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

			// Attach a single capturing handler on the document while someone wants focusin/focusout
			var handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
			};

			jQuery.event.special[ fix ] = {
				setup: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix );

					if ( !attaches ) {
						doc.addEventListener( orig, handler, true );
					}
					dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
				},
				teardown: function() {
					var doc = this.ownerDocument || this,
						attaches = dataPriv.access( doc, fix ) - 1;

					if ( !attaches ) {
						doc.removeEventListener( orig, handler, true );
						dataPriv.remove( doc, fix );

					} else {
						dataPriv.access( doc, fix, attaches );
					}
				}
			};
		} );
	}
	var location = window.location;

	var nonce = Date.now();

	var rquery = ( /\?/ );



	// Cross-browser xml parsing
	jQuery.parseXML = function( data ) {
		var xml;
		if ( !data || typeof data !== "string" ) {
			return null;
		}

		// Support: IE 9 - 11 only
		// IE throws on parseFromString with invalid input.
		try {
			xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
		} catch ( e ) {
			xml = undefined;
		}

		if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	};


	var
		rbracket = /\[\]$/,
		rCRLF = /\r?\n/g,
		rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
		rsubmittable = /^(?:input|select|textarea|keygen)/i;

	function buildParams( prefix, obj, traditional, add ) {
		var name;

		if ( Array.isArray( obj ) ) {

			// Serialize array item.
			jQuery.each( obj, function( i, v ) {
				if ( traditional || rbracket.test( prefix ) ) {

					// Treat each array item as a scalar.
					add( prefix, v );

				} else {

					// Item is non-scalar (array or object), encode its numeric index.
					buildParams(
						prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
						v,
						traditional,
						add
					);
				}
			} );

		} else if ( !traditional && toType( obj ) === "object" ) {

			// Serialize object item.
			for ( name in obj ) {
				buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
			}

		} else {

			// Serialize scalar item.
			add( prefix, obj );
		}
	}

	// Serialize an array of form elements or a set of
	// key/values into a query string
	jQuery.param = function( a, traditional ) {
		var prefix,
			s = [],
			add = function( key, valueOrFunction ) {

				// If value is a function, invoke it and use its return value
				var value = isFunction( valueOrFunction ) ?
					valueOrFunction() :
					valueOrFunction;

				s[ s.length ] = encodeURIComponent( key ) + "=" +
					encodeURIComponent( value == null ? "" : value );
			};

		// If an array was passed in, assume that it is an array of form elements.
		if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

			// Serialize the form elements
			jQuery.each( a, function() {
				add( this.name, this.value );
			} );

		} else {

			// If traditional, encode the "old" way (the way 1.3.2 or older
			// did it), otherwise encode params recursively.
			for ( prefix in a ) {
				buildParams( prefix, a[ prefix ], traditional, add );
			}
		}

		// Return the resulting serialization
		return s.join( "&" );
	};

	jQuery.fn.extend( {
		serialize: function() {
			return jQuery.param( this.serializeArray() );
		},
		serializeArray: function() {
			return this.map( function() {

				// Can add propHook for "elements" to filter or add form elements
				var elements = jQuery.prop( this, "elements" );
				return elements ? jQuery.makeArray( elements ) : this;
			} )
			.filter( function() {
				var type = this.type;

				// Use .is( ":disabled" ) so that fieldset[disabled] works
				return this.name && !jQuery( this ).is( ":disabled" ) &&
					rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
					( this.checked || !rcheckableType.test( type ) );
			} )
			.map( function( i, elem ) {
				var val = jQuery( this ).val();

				if ( val == null ) {
					return null;
				}

				if ( Array.isArray( val ) ) {
					return jQuery.map( val, function( val ) {
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					} );
				}

				return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
			} ).get();
		}
	} );


	var
		r20 = /%20/g,
		rhash = /#.*$/,
		rantiCache = /([?&])_=[^&]*/,
		rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

		// #7653, #8125, #8152: local protocol detection
		rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
		rnoContent = /^(?:GET|HEAD)$/,
		rprotocol = /^\/\//,

		/* Prefilters
		 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
		 * 2) These are called:
		 *    - BEFORE asking for a transport
		 *    - AFTER param serialization (s.data is a string if s.processData is true)
		 * 3) key is the dataType
		 * 4) the catchall symbol "*" can be used
		 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
		 */
		prefilters = {},

		/* Transports bindings
		 * 1) key is the dataType
		 * 2) the catchall symbol "*" can be used
		 * 3) selection will start with transport dataType and THEN go to "*" if needed
		 */
		transports = {},

		// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
		allTypes = "*/".concat( "*" ),

		// Anchor tag for parsing the document origin
		originAnchor = document.createElement( "a" );
		originAnchor.href = location.href;

	// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
	function addToPrefiltersOrTransports( structure ) {

		// dataTypeExpression is optional and defaults to "*"
		return function( dataTypeExpression, func ) {

			if ( typeof dataTypeExpression !== "string" ) {
				func = dataTypeExpression;
				dataTypeExpression = "*";
			}

			var dataType,
				i = 0,
				dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

			if ( isFunction( func ) ) {

				// For each dataType in the dataTypeExpression
				while ( ( dataType = dataTypes[ i++ ] ) ) {

					// Prepend if requested
					if ( dataType[ 0 ] === "+" ) {
						dataType = dataType.slice( 1 ) || "*";
						( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

					// Otherwise append
					} else {
						( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
					}
				}
			}
		};
	}

	// Base inspection function for prefilters and transports
	function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

		var inspected = {},
			seekingTransport = ( structure === transports );

		function inspect( dataType ) {
			var selected;
			inspected[ dataType ] = true;
			jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
				var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
				if ( typeof dataTypeOrTransport === "string" &&
					!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

					options.dataTypes.unshift( dataTypeOrTransport );
					inspect( dataTypeOrTransport );
					return false;
				} else if ( seekingTransport ) {
					return !( selected = dataTypeOrTransport );
				}
			} );
			return selected;
		}

		return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
	}

	// A special extend for ajax options
	// that takes "flat" options (not to be deep extended)
	// Fixes #9887
	function ajaxExtend( target, src ) {
		var key, deep,
			flatOptions = jQuery.ajaxSettings.flatOptions || {};

		for ( key in src ) {
			if ( src[ key ] !== undefined ) {
				( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
			}
		}
		if ( deep ) {
			jQuery.extend( true, target, deep );
		}

		return target;
	}

	/* Handles responses to an ajax request:
	 * - finds the right dataType (mediates between content-type and expected dataType)
	 * - returns the corresponding response
	 */
	function ajaxHandleResponses( s, jqXHR, responses ) {

		var ct, type, finalDataType, firstDataType,
			contents = s.contents,
			dataTypes = s.dataTypes;

		// Remove auto dataType and get content-type in the process
		while ( dataTypes[ 0 ] === "*" ) {
			dataTypes.shift();
			if ( ct === undefined ) {
				ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
			}
		}

		// Check if we're dealing with a known content-type
		if ( ct ) {
			for ( type in contents ) {
				if ( contents[ type ] && contents[ type ].test( ct ) ) {
					dataTypes.unshift( type );
					break;
				}
			}
		}

		// Check to see if we have a response for the expected dataType
		if ( dataTypes[ 0 ] in responses ) {
			finalDataType = dataTypes[ 0 ];
		} else {

			// Try convertible dataTypes
			for ( type in responses ) {
				if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
					finalDataType = type;
					break;
				}
				if ( !firstDataType ) {
					firstDataType = type;
				}
			}

			// Or just use first one
			finalDataType = finalDataType || firstDataType;
		}

		// If we found a dataType
		// We add the dataType to the list if needed
		// and return the corresponding response
		if ( finalDataType ) {
			if ( finalDataType !== dataTypes[ 0 ] ) {
				dataTypes.unshift( finalDataType );
			}
			return responses[ finalDataType ];
		}
	}

	/* Chain conversions given the request and the original response
	 * Also sets the responseXXX fields on the jqXHR instance
	 */
	function ajaxConvert( s, response, jqXHR, isSuccess ) {
		var conv2, current, conv, tmp, prev,
			converters = {},

			// Work with a copy of dataTypes in case we need to modify it for conversion
			dataTypes = s.dataTypes.slice();

		// Create converters map with lowercased keys
		if ( dataTypes[ 1 ] ) {
			for ( conv in s.converters ) {
				converters[ conv.toLowerCase() ] = s.converters[ conv ];
			}
		}

		current = dataTypes.shift();

		// Convert to each sequential dataType
		while ( current ) {

			if ( s.responseFields[ current ] ) {
				jqXHR[ s.responseFields[ current ] ] = response;
			}

			// Apply the dataFilter if provided
			if ( !prev && isSuccess && s.dataFilter ) {
				response = s.dataFilter( response, s.dataType );
			}

			prev = current;
			current = dataTypes.shift();

			if ( current ) {

				// There's only work to do if current dataType is non-auto
				if ( current === "*" ) {

					current = prev;

				// Convert response if prev dataType is non-auto and differs from current
				} else if ( prev !== "*" && prev !== current ) {

					// Seek a direct converter
					conv = converters[ prev + " " + current ] || converters[ "* " + current ];

					// If none found, seek a pair
					if ( !conv ) {
						for ( conv2 in converters ) {

							// If conv2 outputs current
							tmp = conv2.split( " " );
							if ( tmp[ 1 ] === current ) {

								// If prev can be converted to accepted input
								conv = converters[ prev + " " + tmp[ 0 ] ] ||
									converters[ "* " + tmp[ 0 ] ];
								if ( conv ) {

									// Condense equivalence converters
									if ( conv === true ) {
										conv = converters[ conv2 ];

									// Otherwise, insert the intermediate dataType
									} else if ( converters[ conv2 ] !== true ) {
										current = tmp[ 0 ];
										dataTypes.unshift( tmp[ 1 ] );
									}
									break;
								}
							}
						}
					}

					// Apply converter (if not an equivalence)
					if ( conv !== true ) {

						// Unless errors are allowed to bubble, catch and return them
						if ( conv && s.throws ) {
							response = conv( response );
						} else {
							try {
								response = conv( response );
							} catch ( e ) {
								return {
									state: "parsererror",
									error: conv ? e : "No conversion from " + prev + " to " + current
								};
							}
						}
					}
				}
			}
		}

		return { state: "success", data: response };
	}

	jQuery.extend( {

		// Counter for holding the number of active queries
		active: 0,

		// Last-Modified header cache for next request
		lastModified: {},
		etag: {},

		ajaxSettings: {
			url: location.href,
			type: "GET",
			isLocal: rlocalProtocol.test( location.protocol ),
			global: true,
			processData: true,
			async: true,
			contentType: "application/x-www-form-urlencoded; charset=UTF-8",

			/*
			timeout: 0,
			data: null,
			dataType: null,
			username: null,
			password: null,
			cache: null,
			throws: false,
			traditional: false,
			headers: {},
			*/

			accepts: {
				"*": allTypes,
				text: "text/plain",
				html: "text/html",
				xml: "application/xml, text/xml",
				json: "application/json, text/javascript"
			},

			contents: {
				xml: /\bxml\b/,
				html: /\bhtml/,
				json: /\bjson\b/
			},

			responseFields: {
				xml: "responseXML",
				text: "responseText",
				json: "responseJSON"
			},

			// Data converters
			// Keys separate source (or catchall "*") and destination types with a single space
			converters: {

				// Convert anything to text
				"* text": String,

				// Text to html (true = no transformation)
				"text html": true,

				// Evaluate text as a json expression
				"text json": JSON.parse,

				// Parse text as xml
				"text xml": jQuery.parseXML
			},

			// For options that shouldn't be deep extended:
			// you can add your own custom options here if
			// and when you create one that shouldn't be
			// deep extended (see ajaxExtend)
			flatOptions: {
				url: true,
				context: true
			}
		},

		// Creates a full fledged settings object into target
		// with both ajaxSettings and settings fields.
		// If target is omitted, writes into ajaxSettings.
		ajaxSetup: function( target, settings ) {
			return settings ?

				// Building a settings object
				ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

				// Extending ajaxSettings
				ajaxExtend( jQuery.ajaxSettings, target );
		},

		ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
		ajaxTransport: addToPrefiltersOrTransports( transports ),

		// Main method
		ajax: function( url, options ) {

			// If url is an object, simulate pre-1.5 signature
			if ( typeof url === "object" ) {
				options = url;
				url = undefined;
			}

			// Force options to be an object
			options = options || {};

			var transport,

				// URL without anti-cache param
				cacheURL,

				// Response headers
				responseHeadersString,
				responseHeaders,

				// timeout handle
				timeoutTimer,

				// Url cleanup var
				urlAnchor,

				// Request state (becomes false upon send and true upon completion)
				completed,

				// To know if global events are to be dispatched
				fireGlobals,

				// Loop variable
				i,

				// uncached part of the url
				uncached,

				// Create the final options object
				s = jQuery.ajaxSetup( {}, options ),

				// Callbacks context
				callbackContext = s.context || s,

				// Context for global events is callbackContext if it is a DOM node or jQuery collection
				globalEventContext = s.context &&
					( callbackContext.nodeType || callbackContext.jquery ) ?
						jQuery( callbackContext ) :
						jQuery.event,

				// Deferreds
				deferred = jQuery.Deferred(),
				completeDeferred = jQuery.Callbacks( "once memory" ),

				// Status-dependent callbacks
				statusCode = s.statusCode || {},

				// Headers (they are sent all at once)
				requestHeaders = {},
				requestHeadersNames = {},

				// Default abort message
				strAbort = "canceled",

				// Fake xhr
				jqXHR = {
					readyState: 0,

					// Builds headers hashtable if needed
					getResponseHeader: function( key ) {
						var match;
						if ( completed ) {
							if ( !responseHeaders ) {
								responseHeaders = {};
								while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
									responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
								}
							}
							match = responseHeaders[ key.toLowerCase() ];
						}
						return match == null ? null : match;
					},

					// Raw string
					getAllResponseHeaders: function() {
						return completed ? responseHeadersString : null;
					},

					// Caches the header
					setRequestHeader: function( name, value ) {
						if ( completed == null ) {
							name = requestHeadersNames[ name.toLowerCase() ] =
								requestHeadersNames[ name.toLowerCase() ] || name;
							requestHeaders[ name ] = value;
						}
						return this;
					},

					// Overrides response content-type header
					overrideMimeType: function( type ) {
						if ( completed == null ) {
							s.mimeType = type;
						}
						return this;
					},

					// Status-dependent callbacks
					statusCode: function( map ) {
						var code;
						if ( map ) {
							if ( completed ) {

								// Execute the appropriate callbacks
								jqXHR.always( map[ jqXHR.status ] );
							} else {

								// Lazy-add the new callbacks in a way that preserves old ones
								for ( code in map ) {
									statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
								}
							}
						}
						return this;
					},

					// Cancel the request
					abort: function( statusText ) {
						var finalText = statusText || strAbort;
						if ( transport ) {
							transport.abort( finalText );
						}
						done( 0, finalText );
						return this;
					}
				};

			// Attach deferreds
			deferred.promise( jqXHR );

			// Add protocol if not provided (prefilters might expect it)
			// Handle falsy url in the settings object (#10093: consistency with old signature)
			// We also use the url parameter if available
			s.url = ( ( url || s.url || location.href ) + "" )
				.replace( rprotocol, location.protocol + "//" );

			// Alias method option to type as per ticket #12004
			s.type = options.method || options.type || s.method || s.type;

			// Extract dataTypes list
			s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

			// A cross-domain request is in order when the origin doesn't match the current origin.
			if ( s.crossDomain == null ) {
				urlAnchor = document.createElement( "a" );

				// Support: IE <=8 - 11, Edge 12 - 15
				// IE throws exception on accessing the href property if url is malformed,
				// e.g. http://example.com:80x/
				try {
					urlAnchor.href = s.url;

					// Support: IE <=8 - 11 only
					// Anchor's host property isn't correctly set when s.url is relative
					urlAnchor.href = urlAnchor.href;
					s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
						urlAnchor.protocol + "//" + urlAnchor.host;
				} catch ( e ) {

					// If there is an error parsing the URL, assume it is crossDomain,
					// it can be rejected by the transport if it is invalid
					s.crossDomain = true;
				}
			}

			// Convert data if not already a string
			if ( s.data && s.processData && typeof s.data !== "string" ) {
				s.data = jQuery.param( s.data, s.traditional );
			}

			// Apply prefilters
			inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

			// If request was aborted inside a prefilter, stop there
			if ( completed ) {
				return jqXHR;
			}

			// We can fire global events as of now if asked to
			// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
			fireGlobals = jQuery.event && s.global;

			// Watch for a new set of requests
			if ( fireGlobals && jQuery.active++ === 0 ) {
				jQuery.event.trigger( "ajaxStart" );
			}

			// Uppercase the type
			s.type = s.type.toUpperCase();

			// Determine if request has content
			s.hasContent = !rnoContent.test( s.type );

			// Save the URL in case we're toying with the If-Modified-Since
			// and/or If-None-Match header later on
			// Remove hash to simplify url manipulation
			cacheURL = s.url.replace( rhash, "" );

			// More options handling for requests with no content
			if ( !s.hasContent ) {

				// Remember the hash so we can put it back
				uncached = s.url.slice( cacheURL.length );

				// If data is available and should be processed, append data to url
				if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
					cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

					// #9682: remove data so that it's not used in an eventual retry
					delete s.data;
				}

				// Add or update anti-cache param if needed
				if ( s.cache === false ) {
					cacheURL = cacheURL.replace( rantiCache, "$1" );
					uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
				}

				// Put hash and anti-cache on the URL that will be requested (gh-1732)
				s.url = cacheURL + uncached;

			// Change '%20' to '+' if this is encoded form body content (gh-2658)
			} else if ( s.data && s.processData &&
				( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
				s.data = s.data.replace( r20, "+" );
			}

			// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
			if ( s.ifModified ) {
				if ( jQuery.lastModified[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
				}
				if ( jQuery.etag[ cacheURL ] ) {
					jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
				}
			}

			// Set the correct header, if data is being sent
			if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
				jqXHR.setRequestHeader( "Content-Type", s.contentType );
			}

			// Set the Accepts header for the server, depending on the dataType
			jqXHR.setRequestHeader(
				"Accept",
				s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
					s.accepts[ s.dataTypes[ 0 ] ] +
						( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
					s.accepts[ "*" ]
			);

			// Check for headers option
			for ( i in s.headers ) {
				jqXHR.setRequestHeader( i, s.headers[ i ] );
			}

			// Allow custom headers/mimetypes and early abort
			if ( s.beforeSend &&
				( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

				// Abort if not done already and return
				return jqXHR.abort();
			}

			// Aborting is no longer a cancellation
			strAbort = "abort";

			// Install callbacks on deferreds
			completeDeferred.add( s.complete );
			jqXHR.done( s.success );
			jqXHR.fail( s.error );

			// Get transport
			transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

			// If no transport, we auto-abort
			if ( !transport ) {
				done( -1, "No Transport" );
			} else {
				jqXHR.readyState = 1;

				// Send global event
				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
				}

				// If request was aborted inside ajaxSend, stop there
				if ( completed ) {
					return jqXHR;
				}

				// Timeout
				if ( s.async && s.timeout > 0 ) {
					timeoutTimer = window.setTimeout( function() {
						jqXHR.abort( "timeout" );
					}, s.timeout );
				}

				try {
					completed = false;
					transport.send( requestHeaders, done );
				} catch ( e ) {

					// Rethrow post-completion exceptions
					if ( completed ) {
						throw e;
					}

					// Propagate others as results
					done( -1, e );
				}
			}

			// Callback for when everything is done
			function done( status, nativeStatusText, responses, headers ) {
				var isSuccess, success, error, response, modified,
					statusText = nativeStatusText;

				// Ignore repeat invocations
				if ( completed ) {
					return;
				}

				completed = true;

				// Clear timeout if it exists
				if ( timeoutTimer ) {
					window.clearTimeout( timeoutTimer );
				}

				// Dereference transport for early garbage collection
				// (no matter how long the jqXHR object will be used)
				transport = undefined;

				// Cache response headers
				responseHeadersString = headers || "";

				// Set readyState
				jqXHR.readyState = status > 0 ? 4 : 0;

				// Determine if successful
				isSuccess = status >= 200 && status < 300 || status === 304;

				// Get response data
				if ( responses ) {
					response = ajaxHandleResponses( s, jqXHR, responses );
				}

				// Convert no matter what (that way responseXXX fields are always set)
				response = ajaxConvert( s, response, jqXHR, isSuccess );

				// If successful, handle type chaining
				if ( isSuccess ) {

					// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
					if ( s.ifModified ) {
						modified = jqXHR.getResponseHeader( "Last-Modified" );
						if ( modified ) {
							jQuery.lastModified[ cacheURL ] = modified;
						}
						modified = jqXHR.getResponseHeader( "etag" );
						if ( modified ) {
							jQuery.etag[ cacheURL ] = modified;
						}
					}

					// if no content
					if ( status === 204 || s.type === "HEAD" ) {
						statusText = "nocontent";

					// if not modified
					} else if ( status === 304 ) {
						statusText = "notmodified";

					// If we have data, let's convert it
					} else {
						statusText = response.state;
						success = response.data;
						error = response.error;
						isSuccess = !error;
					}
				} else {

					// Extract error from statusText and normalize for non-aborts
					error = statusText;
					if ( status || !statusText ) {
						statusText = "error";
						if ( status < 0 ) {
							status = 0;
						}
					}
				}

				// Set data for the fake xhr object
				jqXHR.status = status;
				jqXHR.statusText = ( nativeStatusText || statusText ) + "";

				// Success/Error
				if ( isSuccess ) {
					deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
				} else {
					deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
				}

				// Status-dependent callbacks
				jqXHR.statusCode( statusCode );
				statusCode = undefined;

				if ( fireGlobals ) {
					globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
						[ jqXHR, s, isSuccess ? success : error ] );
				}

				// Complete
				completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

				if ( fireGlobals ) {
					globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

					// Handle the global AJAX counter
					if ( !( --jQuery.active ) ) {
						jQuery.event.trigger( "ajaxStop" );
					}
				}
			}

			return jqXHR;
		},

		getJSON: function( url, data, callback ) {
			return jQuery.get( url, data, callback, "json" );
		},

		getScript: function( url, callback ) {
			return jQuery.get( url, undefined, callback, "script" );
		}
	} );

	jQuery.each( [ "get", "post" ], function( i, method ) {
		jQuery[ method ] = function( url, data, callback, type ) {

			// Shift arguments if data argument was omitted
			if ( isFunction( data ) ) {
				type = type || callback;
				callback = data;
				data = undefined;
			}

			// The url can be an options object (which then must have .url)
			return jQuery.ajax( jQuery.extend( {
				url: url,
				type: method,
				dataType: type,
				data: data,
				success: callback
			}, jQuery.isPlainObject( url ) && url ) );
		};
	} );


	jQuery._evalUrl = function( url ) {
		return jQuery.ajax( {
			url: url,

			// Make this explicit, since user can override this through ajaxSetup (#11264)
			type: "GET",
			dataType: "script",
			cache: true,
			async: false,
			global: false,
			"throws": true
		} );
	};


	jQuery.fn.extend( {
		wrapAll: function( html ) {
			var wrap;

			if ( this[ 0 ] ) {
				if ( isFunction( html ) ) {
					html = html.call( this[ 0 ] );
				}

				// The elements to wrap the target around
				wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

				if ( this[ 0 ].parentNode ) {
					wrap.insertBefore( this[ 0 ] );
				}

				wrap.map( function() {
					var elem = this;

					while ( elem.firstElementChild ) {
						elem = elem.firstElementChild;
					}

					return elem;
				} ).append( this );
			}

			return this;
		},

		wrapInner: function( html ) {
			if ( isFunction( html ) ) {
				return this.each( function( i ) {
					jQuery( this ).wrapInner( html.call( this, i ) );
				} );
			}

			return this.each( function() {
				var self = jQuery( this ),
					contents = self.contents();

				if ( contents.length ) {
					contents.wrapAll( html );

				} else {
					self.append( html );
				}
			} );
		},

		wrap: function( html ) {
			var htmlIsFunction = isFunction( html );

			return this.each( function( i ) {
				jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
			} );
		},

		unwrap: function( selector ) {
			this.parent( selector ).not( "body" ).each( function() {
				jQuery( this ).replaceWith( this.childNodes );
			} );
			return this;
		}
	} );


	jQuery.expr.pseudos.hidden = function( elem ) {
		return !jQuery.expr.pseudos.visible( elem );
	};
	jQuery.expr.pseudos.visible = function( elem ) {
		return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
	};




	jQuery.ajaxSettings.xhr = function() {
		try {
			return new window.XMLHttpRequest();
		} catch ( e ) {}
	};

	var xhrSuccessStatus = {

			// File protocol always yields status code 0, assume 200
			0: 200,

			// Support: IE <=9 only
			// #1450: sometimes IE returns 1223 when it should be 204
			1223: 204
		},
		xhrSupported = jQuery.ajaxSettings.xhr();

	support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
	support.ajax = xhrSupported = !!xhrSupported;

	jQuery.ajaxTransport( function( options ) {
		var callback, errorCallback;

		// Cross domain only allowed if supported through XMLHttpRequest
		if ( support.cors || xhrSupported && !options.crossDomain ) {
			return {
				send: function( headers, complete ) {
					var i,
						xhr = options.xhr();

					xhr.open(
						options.type,
						options.url,
						options.async,
						options.username,
						options.password
					);

					// Apply custom fields if provided
					if ( options.xhrFields ) {
						for ( i in options.xhrFields ) {
							xhr[ i ] = options.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( options.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( options.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Set headers
					for ( i in headers ) {
						xhr.setRequestHeader( i, headers[ i ] );
					}

					// Callback
					callback = function( type ) {
						return function() {
							if ( callback ) {
								callback = errorCallback = xhr.onload =
									xhr.onerror = xhr.onabort = xhr.ontimeout =
										xhr.onreadystatechange = null;

								if ( type === "abort" ) {
									xhr.abort();
								} else if ( type === "error" ) {

									// Support: IE <=9 only
									// On a manual native abort, IE9 throws
									// errors on any property access that is not readyState
									if ( typeof xhr.status !== "number" ) {
										complete( 0, "error" );
									} else {
										complete(

											// File: protocol always yields status 0; see #8605, #14207
											xhr.status,
											xhr.statusText
										);
									}
								} else {
									complete(
										xhrSuccessStatus[ xhr.status ] || xhr.status,
										xhr.statusText,

										// Support: IE <=9 only
										// IE9 has no XHR2 but throws on binary (trac-11426)
										// For XHR2 non-text, let the caller handle it (gh-2498)
										( xhr.responseType || "text" ) !== "text"  ||
										typeof xhr.responseText !== "string" ?
											{ binary: xhr.response } :
											{ text: xhr.responseText },
										xhr.getAllResponseHeaders()
									);
								}
							}
						};
					};

					// Listen to events
					xhr.onload = callback();
					errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

					// Support: IE 9 only
					// Use onreadystatechange to replace onabort
					// to handle uncaught aborts
					if ( xhr.onabort !== undefined ) {
						xhr.onabort = errorCallback;
					} else {
						xhr.onreadystatechange = function() {

							// Check readyState before timeout as it changes
							if ( xhr.readyState === 4 ) {

								// Allow onerror to be called first,
								// but that will not handle a native abort
								// Also, save errorCallback to a variable
								// as xhr.onerror cannot be accessed
								window.setTimeout( function() {
									if ( callback ) {
										errorCallback();
									}
								} );
							}
						};
					}

					// Create the abort callback
					callback = callback( "abort" );

					try {

						// Do send the request (this may raise an exception)
						xhr.send( options.hasContent && options.data || null );
					} catch ( e ) {

						// #14683: Only rethrow if this hasn't been notified as an error yet
						if ( callback ) {
							throw e;
						}
					}
				},

				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
	jQuery.ajaxPrefilter( function( s ) {
		if ( s.crossDomain ) {
			s.contents.script = false;
		}
	} );

	// Install script dataType
	jQuery.ajaxSetup( {
		accepts: {
			script: "text/javascript, application/javascript, " +
				"application/ecmascript, application/x-ecmascript"
		},
		contents: {
			script: /\b(?:java|ecma)script\b/
		},
		converters: {
			"text script": function( text ) {
				jQuery.globalEval( text );
				return text;
			}
		}
	} );

	// Handle cache's special case and crossDomain
	jQuery.ajaxPrefilter( "script", function( s ) {
		if ( s.cache === undefined ) {
			s.cache = false;
		}
		if ( s.crossDomain ) {
			s.type = "GET";
		}
	} );

	// Bind script tag hack transport
	jQuery.ajaxTransport( "script", function( s ) {

		// This transport only deals with cross domain requests
		if ( s.crossDomain ) {
			var script, callback;
			return {
				send: function( _, complete ) {
					script = jQuery( "<script>" ).prop( {
						charset: s.scriptCharset,
						src: s.url
					} ).on(
						"load error",
						callback = function( evt ) {
							script.remove();
							callback = null;
							if ( evt ) {
								complete( evt.type === "error" ? 404 : 200, evt.type );
							}
						}
					);

					// Use native DOM manipulation to avoid our domManip AJAX trickery
					document.head.appendChild( script[ 0 ] );
				},
				abort: function() {
					if ( callback ) {
						callback();
					}
				}
			};
		}
	} );




	var oldCallbacks = [],
		rjsonp = /(=)\?(?=&|$)|\?\?/;

	// Default jsonp settings
	jQuery.ajaxSetup( {
		jsonp: "callback",
		jsonpCallback: function() {
			var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
			this[ callback ] = true;
			return callback;
		}
	} );

	// Detect, normalize options and install callbacks for jsonp requests
	jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

		var callbackName, overwritten, responseContainer,
			jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
				"url" :
				typeof s.data === "string" &&
					( s.contentType || "" )
						.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
					rjsonp.test( s.data ) && "data"
			);

		// Handle iff the expected data type is "jsonp" or we have a parameter to set
		if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

			// Get callback name, remembering preexisting value associated with it
			callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
				s.jsonpCallback() :
				s.jsonpCallback;

			// Insert callback into url or form data
			if ( jsonProp ) {
				s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
			} else if ( s.jsonp !== false ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
			}

			// Use data converter to retrieve json after script execution
			s.converters[ "script json" ] = function() {
				if ( !responseContainer ) {
					jQuery.error( callbackName + " was not called" );
				}
				return responseContainer[ 0 ];
			};

			// Force json dataType
			s.dataTypes[ 0 ] = "json";

			// Install callback
			overwritten = window[ callbackName ];
			window[ callbackName ] = function() {
				responseContainer = arguments;
			};

			// Clean-up function (fires after converters)
			jqXHR.always( function() {

				// If previous value didn't exist - remove it
				if ( overwritten === undefined ) {
					jQuery( window ).removeProp( callbackName );

				// Otherwise restore preexisting value
				} else {
					window[ callbackName ] = overwritten;
				}

				// Save back as free
				if ( s[ callbackName ] ) {

					// Make sure that re-using the options doesn't screw things around
					s.jsonpCallback = originalSettings.jsonpCallback;

					// Save the callback name for future use
					oldCallbacks.push( callbackName );
				}

				// Call if it was a function and we have a response
				if ( responseContainer && isFunction( overwritten ) ) {
					overwritten( responseContainer[ 0 ] );
				}

				responseContainer = overwritten = undefined;
			} );

			// Delegate to script
			return "script";
		}
	} );




	// Support: Safari 8 only
	// In Safari 8 documents created via document.implementation.createHTMLDocument
	// collapse sibling forms: the second one becomes a child of the first one.
	// Because of that, this security measure has to be disabled in Safari 8.
	// https://bugs.webkit.org/show_bug.cgi?id=137337
	support.createHTMLDocument = ( function() {
		var body = document.implementation.createHTMLDocument( "" ).body;
		body.innerHTML = "<form></form><form></form>";
		return body.childNodes.length === 2;
	} )();


	// Argument "data" should be string of html
	// context (optional): If specified, the fragment will be created in this context,
	// defaults to document
	// keepScripts (optional): If true, will include scripts passed in the html string
	jQuery.parseHTML = function( data, context, keepScripts ) {
		if ( typeof data !== "string" ) {
			return [];
		}
		if ( typeof context === "boolean" ) {
			keepScripts = context;
			context = false;
		}

		var base, parsed, scripts;

		if ( !context ) {

			// Stop scripts or inline event handlers from being executed immediately
			// by using document.implementation
			if ( support.createHTMLDocument ) {
				context = document.implementation.createHTMLDocument( "" );

				// Set the base href for the created document
				// so any parsed elements with URLs
				// are based on the document's URL (gh-2965)
				base = context.createElement( "base" );
				base.href = document.location.href;
				context.head.appendChild( base );
			} else {
				context = document;
			}
		}

		parsed = rsingleTag.exec( data );
		scripts = !keepScripts && [];

		// Single tag
		if ( parsed ) {
			return [ context.createElement( parsed[ 1 ] ) ];
		}

		parsed = buildFragment( [ data ], context, scripts );

		if ( scripts && scripts.length ) {
			jQuery( scripts ).remove();
		}

		return jQuery.merge( [], parsed.childNodes );
	};


	/**
	 * Load a url into a page
	 */
	jQuery.fn.load = function( url, params, callback ) {
		var selector, type, response,
			self = this,
			off = url.indexOf( " " );

		if ( off > -1 ) {
			selector = stripAndCollapse( url.slice( off ) );
			url = url.slice( 0, off );
		}

		// If it's a function
		if ( isFunction( params ) ) {

			// We assume that it's the callback
			callback = params;
			params = undefined;

		// Otherwise, build a param string
		} else if ( params && typeof params === "object" ) {
			type = "POST";
		}

		// If we have elements to modify, make the request
		if ( self.length > 0 ) {
			jQuery.ajax( {
				url: url,

				// If "type" variable is undefined, then "GET" method will be used.
				// Make value of this field explicit since
				// user can override it through ajaxSetup method
				type: type || "GET",
				dataType: "html",
				data: params
			} ).done( function( responseText ) {

				// Save response for use in complete callback
				response = arguments;

				self.html( selector ?

					// If a selector was specified, locate the right elements in a dummy div
					// Exclude scripts to avoid IE 'Permission Denied' errors
					jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

					// Otherwise use the full result
					responseText );

			// If the request succeeds, this function gets "data", "status", "jqXHR"
			// but they are ignored because response was set above.
			// If it fails, this function gets "jqXHR", "status", "error"
			} ).always( callback && function( jqXHR, status ) {
				self.each( function() {
					callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
				} );
			} );
		}

		return this;
	};




	// Attach a bunch of functions for handling common AJAX events
	jQuery.each( [
		"ajaxStart",
		"ajaxStop",
		"ajaxComplete",
		"ajaxError",
		"ajaxSuccess",
		"ajaxSend"
	], function( i, type ) {
		jQuery.fn[ type ] = function( fn ) {
			return this.on( type, fn );
		};
	} );




	jQuery.expr.pseudos.animated = function( elem ) {
		return jQuery.grep( jQuery.timers, function( fn ) {
			return elem === fn.elem;
		} ).length;
	};




	jQuery.offset = {
		setOffset: function( elem, options, i ) {
			var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
				position = jQuery.css( elem, "position" ),
				curElem = jQuery( elem ),
				props = {};

			// Set position first, in-case top/left are set even on static elem
			if ( position === "static" ) {
				elem.style.position = "relative";
			}

			curOffset = curElem.offset();
			curCSSTop = jQuery.css( elem, "top" );
			curCSSLeft = jQuery.css( elem, "left" );
			calculatePosition = ( position === "absolute" || position === "fixed" ) &&
				( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

			// Need to be able to calculate position if either
			// top or left is auto and position is either absolute or fixed
			if ( calculatePosition ) {
				curPosition = curElem.position();
				curTop = curPosition.top;
				curLeft = curPosition.left;

			} else {
				curTop = parseFloat( curCSSTop ) || 0;
				curLeft = parseFloat( curCSSLeft ) || 0;
			}

			if ( isFunction( options ) ) {

				// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
				options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
			}

			if ( options.top != null ) {
				props.top = ( options.top - curOffset.top ) + curTop;
			}
			if ( options.left != null ) {
				props.left = ( options.left - curOffset.left ) + curLeft;
			}

			if ( "using" in options ) {
				options.using.call( elem, props );

			} else {
				curElem.css( props );
			}
		}
	};

	jQuery.fn.extend( {

		// offset() relates an element's border box to the document origin
		offset: function( options ) {

			// Preserve chaining for setter
			if ( arguments.length ) {
				return options === undefined ?
					this :
					this.each( function( i ) {
						jQuery.offset.setOffset( this, options, i );
					} );
			}

			var rect, win,
				elem = this[ 0 ];

			if ( !elem ) {
				return;
			}

			// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
			// Support: IE <=11 only
			// Running getBoundingClientRect on a
			// disconnected node in IE throws an error
			if ( !elem.getClientRects().length ) {
				return { top: 0, left: 0 };
			}

			// Get document-relative position by adding viewport scroll to viewport-relative gBCR
			rect = elem.getBoundingClientRect();
			win = elem.ownerDocument.defaultView;
			return {
				top: rect.top + win.pageYOffset,
				left: rect.left + win.pageXOffset
			};
		},

		// position() relates an element's margin box to its offset parent's padding box
		// This corresponds to the behavior of CSS absolute positioning
		position: function() {
			if ( !this[ 0 ] ) {
				return;
			}

			var offsetParent, offset, doc,
				elem = this[ 0 ],
				parentOffset = { top: 0, left: 0 };

			// position:fixed elements are offset from the viewport, which itself always has zero offset
			if ( jQuery.css( elem, "position" ) === "fixed" ) {

				// Assume position:fixed implies availability of getBoundingClientRect
				offset = elem.getBoundingClientRect();

			} else {
				offset = this.offset();

				// Account for the *real* offset parent, which can be the document or its root element
				// when a statically positioned element is identified
				doc = elem.ownerDocument;
				offsetParent = elem.offsetParent || doc.documentElement;
				while ( offsetParent &&
					( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
					jQuery.css( offsetParent, "position" ) === "static" ) {

					offsetParent = offsetParent.parentNode;
				}
				if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

					// Incorporate borders into its offset, since they are outside its content origin
					parentOffset = jQuery( offsetParent ).offset();
					parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
					parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
				}
			}

			// Subtract parent offsets and element margins
			return {
				top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
				left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
			};
		},

		// This method will return documentElement in the following cases:
		// 1) For the element inside the iframe without offsetParent, this method will return
		//    documentElement of the parent window
		// 2) For the hidden or detached element
		// 3) For body or html element, i.e. in case of the html node - it will return itself
		//
		// but those exceptions were never presented as a real life use-cases
		// and might be considered as more preferable results.
		//
		// This logic, however, is not guaranteed and can change at any point in the future
		offsetParent: function() {
			return this.map( function() {
				var offsetParent = this.offsetParent;

				while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
					offsetParent = offsetParent.offsetParent;
				}

				return offsetParent || documentElement;
			} );
		}
	} );

	// Create scrollLeft and scrollTop methods
	jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
		var top = "pageYOffset" === prop;

		jQuery.fn[ method ] = function( val ) {
			return access( this, function( elem, method, val ) {

				// Coalesce documents and windows
				var win;
				if ( isWindow( elem ) ) {
					win = elem;
				} else if ( elem.nodeType === 9 ) {
					win = elem.defaultView;
				}

				if ( val === undefined ) {
					return win ? win[ prop ] : elem[ method ];
				}

				if ( win ) {
					win.scrollTo(
						!top ? val : win.pageXOffset,
						top ? val : win.pageYOffset
					);

				} else {
					elem[ method ] = val;
				}
			}, method, val, arguments.length );
		};
	} );

	// Support: Safari <=7 - 9.1, Chrome <=37 - 49
	// Add the top/left cssHooks using jQuery.fn.position
	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
	// getComputedStyle returns percent when specified for top/left/bottom/right;
	// rather than make the css module depend on the offset module, just check for it here
	jQuery.each( [ "top", "left" ], function( i, prop ) {
		jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
			function( elem, computed ) {
				if ( computed ) {
					computed = curCSS( elem, prop );

					// If curCSS returns percentage, fallback to offset
					return rnumnonpx.test( computed ) ?
						jQuery( elem ).position()[ prop ] + "px" :
						computed;
				}
			}
		);
	} );


	// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
	jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
		jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
			function( defaultExtra, funcName ) {

			// Margin is only for outerHeight, outerWidth
			jQuery.fn[ funcName ] = function( margin, value ) {
				var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
					extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

				return access( this, function( elem, type, value ) {
					var doc;

					if ( isWindow( elem ) ) {

						// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
						return funcName.indexOf( "outer" ) === 0 ?
							elem[ "inner" + name ] :
							elem.document.documentElement[ "client" + name ];
					}

					// Get document width or height
					if ( elem.nodeType === 9 ) {
						doc = elem.documentElement;

						// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
						// whichever is greatest
						return Math.max(
							elem.body[ "scroll" + name ], doc[ "scroll" + name ],
							elem.body[ "offset" + name ], doc[ "offset" + name ],
							doc[ "client" + name ]
						);
					}

					return value === undefined ?

						// Get width or height on the element, requesting but not forcing parseFloat
						jQuery.css( elem, type, extra ) :

						// Set width or height on the element
						jQuery.style( elem, type, value, extra );
				}, type, chainable ? margin : undefined, chainable );
			};
		} );
	} );


	jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
		"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
		"change select submit keydown keypress keyup contextmenu" ).split( " " ),
		function( i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	} );

	jQuery.fn.extend( {
		hover: function( fnOver, fnOut ) {
			return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
		}
	} );




	jQuery.fn.extend( {

		bind: function( types, data, fn ) {
			return this.on( types, null, data, fn );
		},
		unbind: function( types, fn ) {
			return this.off( types, null, fn );
		},

		delegate: function( selector, types, data, fn ) {
			return this.on( types, selector, data, fn );
		},
		undelegate: function( selector, types, fn ) {

			// ( namespace ) or ( selector, types [, fn] )
			return arguments.length === 1 ?
				this.off( selector, "**" ) :
				this.off( types, selector || "**", fn );
		}
	} );

	// Bind a function to a context, optionally partially applying any
	// arguments.
	// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
	// However, it is not slated for removal any time soon
	jQuery.proxy = function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	};

	jQuery.holdReady = function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	};
	jQuery.isArray = Array.isArray;
	jQuery.parseJSON = JSON.parse;
	jQuery.nodeName = nodeName;
	jQuery.isFunction = isFunction;
	jQuery.isWindow = isWindow;
	jQuery.camelCase = camelCase;
	jQuery.type = toType;

	jQuery.now = Date.now;

	jQuery.isNumeric = function( obj ) {

		// As of jQuery 3.0, isNumeric is limited to
		// strings and numbers (primitives or objects)
		// that can be coerced to finite numbers (gh-2662)
		var type = jQuery.type( obj );
		return ( type === "number" || type === "string" ) &&

			// parseFloat NaNs numeric-cast false positives ("")
			// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
			// subtraction forces infinities to NaN
			!isNaN( obj - parseFloat( obj ) );
	};




	// Register as a named AMD module, since jQuery can be concatenated with other
	// files that may use define, but not via a proper concatenation script that
	// understands anonymous AMD modules. A named AMD is safest and most robust
	// way to register. Lowercase jquery is used because AMD module names are
	// derived from file names, and jQuery is normally delivered in a lowercase
	// file name. Do this after creating the global so that if an AMD module wants
	// to call noConflict to hide this version of jQuery, it will work.

	// Note that for maximum portability, libraries that are not jQuery should
	// declare themselves as anonymous modules, and avoid setting a global if an
	// AMD loader is present. jQuery is a special case. For more information, see
	// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

	if ( true ) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
			return jQuery;
		}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	}




	var

		// Map over jQuery in case of overwrite
		_jQuery = window.jQuery,

		// Map over the $ in case of overwrite
		_$ = window.$;

	jQuery.noConflict = function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	};

	// Expose jQuery and $ identifiers, even in AMD
	// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
	// and CommonJS for browser emulators (#13566)
	if ( !noGlobal ) {
		window.jQuery = window.$ = jQuery;
	}




	return jQuery;
	} );


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* WEBPACK VAR INJECTION */(function(global, module) {//     Underscore.js 1.9.1
	//     http://underscorejs.org
	//     (c) 2009-2018 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.

	(function() {

	  // Baseline setup
	  // --------------

	  // Establish the root object, `window` (`self`) in the browser, `global`
	  // on the server, or `this` in some virtual machines. We use `self`
	  // instead of `window` for `WebWorker` support.
	  var root = typeof self == 'object' && self.self === self && self ||
	            typeof global == 'object' && global.global === global && global ||
	            this ||
	            {};

	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;

	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
	  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

	  // Create quick reference variables for speed access to core prototypes.
	  var push = ArrayProto.push,
	      slice = ArrayProto.slice,
	      toString = ObjProto.toString,
	      hasOwnProperty = ObjProto.hasOwnProperty;

	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var nativeIsArray = Array.isArray,
	      nativeKeys = Object.keys,
	      nativeCreate = Object.create;

	  // Naked function reference for surrogate-prototype-swapping.
	  var Ctor = function(){};

	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };

	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for their old module API. If we're in
	  // the browser, add `_` as a global object.
	  // (`nodeType` is checked to ensure that `module`
	  // and `exports` are not HTML elements.)
	  if (typeof exports != 'undefined' && !exports.nodeType) {
	    if (typeof module != 'undefined' && !module.nodeType && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }

	  // Current version.
	  _.VERSION = '1.9.1';

	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var optimizeCb = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      // The 2-argument case is omitted because we’re not using it.
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };

	  var builtinIteratee;

	  // An internal function to generate callbacks that can be applied to each
	  // element in a collection, returning the desired result — either `identity`,
	  // an arbitrary callback, a property matcher, or a property accessor.
	  var cb = function(value, context, argCount) {
	    if (_.iteratee !== builtinIteratee) return _.iteratee(value, context);
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
	    if (_.isObject(value) && !_.isArray(value)) return _.matcher(value);
	    return _.property(value);
	  };

	  // External wrapper for our callback generator. Users may customize
	  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
	  // This abstraction hides the internal-only argCount argument.
	  _.iteratee = builtinIteratee = function(value, context) {
	    return cb(value, context, Infinity);
	  };

	  // Some functions take a variable number of arguments, or a few expected
	  // arguments at the beginning and then a variable number of values to operate
	  // on. This helper accumulates all remaining arguments past the function’s
	  // argument length (or an explicit `startIndex`), into an array that becomes
	  // the last argument. Similar to ES6’s "rest parameter".
	  var restArguments = function(func, startIndex) {
	    startIndex = startIndex == null ? func.length - 1 : +startIndex;
	    return function() {
	      var length = Math.max(arguments.length - startIndex, 0),
	          rest = Array(length),
	          index = 0;
	      for (; index < length; index++) {
	        rest[index] = arguments[index + startIndex];
	      }
	      switch (startIndex) {
	        case 0: return func.call(this, rest);
	        case 1: return func.call(this, arguments[0], rest);
	        case 2: return func.call(this, arguments[0], arguments[1], rest);
	      }
	      var args = Array(startIndex + 1);
	      for (index = 0; index < startIndex; index++) {
	        args[index] = arguments[index];
	      }
	      args[startIndex] = rest;
	      return func.apply(this, args);
	    };
	  };

	  // An internal function for creating a new object that inherits from another.
	  var baseCreate = function(prototype) {
	    if (!_.isObject(prototype)) return {};
	    if (nativeCreate) return nativeCreate(prototype);
	    Ctor.prototype = prototype;
	    var result = new Ctor;
	    Ctor.prototype = null;
	    return result;
	  };

	  var shallowProperty = function(key) {
	    return function(obj) {
	      return obj == null ? void 0 : obj[key];
	    };
	  };

	  var has = function(obj, path) {
	    return obj != null && hasOwnProperty.call(obj, path);
	  }

	  var deepGet = function(obj, path) {
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      if (obj == null) return void 0;
	      obj = obj[path[i]];
	    }
	    return length ? obj : void 0;
	  };

	  // Helper for collection methods to determine whether a collection
	  // should be iterated as an array or as an object.
	  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
	  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
	  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
	  var getLength = shallowProperty('length');
	  var isArrayLike = function(collection) {
	    var length = getLength(collection);
	    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
	  };

	  // Collection Functions
	  // --------------------

	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    iteratee = optimizeCb(iteratee, context);
	    var i, length;
	    if (isArrayLike(obj)) {
	      for (i = 0, length = obj.length; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };

	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length);
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Create a reducing function iterating left or right.
	  var createReduce = function(dir) {
	    // Wrap code that reassigns argument variables in a separate function than
	    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
	    var reducer = function(obj, iteratee, memo, initial) {
	      var keys = !isArrayLike(obj) && _.keys(obj),
	          length = (keys || obj).length,
	          index = dir > 0 ? 0 : length - 1;
	      if (!initial) {
	        memo = obj[keys ? keys[index] : index];
	        index += dir;
	      }
	      for (; index >= 0 && index < length; index += dir) {
	        var currentKey = keys ? keys[index] : index;
	        memo = iteratee(memo, obj[currentKey], currentKey, obj);
	      }
	      return memo;
	    };

	    return function(obj, iteratee, memo, context) {
	      var initial = arguments.length >= 3;
	      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
	    };
	  };

	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = createReduce(1);

	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = createReduce(-1);

	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var keyFinder = isArrayLike(obj) ? _.findIndex : _.findKey;
	    var key = keyFinder(obj, predicate, context);
	    if (key !== void 0 && key !== -1) return obj[key];
	  };

	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    predicate = cb(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };

	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(cb(predicate)), context);
	  };

	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };

	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = !isArrayLike(obj) && _.keys(obj),
	        length = (keys || obj).length;
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };

	  // Determine if the array or object contains a given item (using `===`).
	  // Aliased as `includes` and `include`.
	  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
	    if (!isArrayLike(obj)) obj = _.values(obj);
	    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
	    return _.indexOf(obj, item, fromIndex) >= 0;
	  };

	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = restArguments(function(obj, path, args) {
	    var contextPath, func;
	    if (_.isFunction(path)) {
	      func = path;
	    } else if (_.isArray(path)) {
	      contextPath = path.slice(0, -1);
	      path = path[path.length - 1];
	    }
	    return _.map(obj, function(context) {
	      var method = func;
	      if (!method) {
	        if (contextPath && contextPath.length) {
	          context = deepGet(context, contextPath);
	        }
	        if (context == null) return void 0;
	        method = context[path];
	      }
	      return method == null ? method : method.apply(context, args);
	    });
	  });

	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };

	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matcher(attrs));
	  };

	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matcher(attrs));
	  };

	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null || typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null) {
	      obj = isArrayLike(obj) ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value != null && value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(v, index, list) {
	        computed = iteratee(v, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = v;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };

	  // Shuffle a collection.
	  _.shuffle = function(obj) {
	    return _.sample(obj, Infinity);
	  };

	  // Sample **n** random values from a collection using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (!isArrayLike(obj)) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    var sample = isArrayLike(obj) ? _.clone(obj) : _.values(obj);
	    var length = getLength(sample);
	    n = Math.max(Math.min(n, length), 0);
	    var last = length - 1;
	    for (var index = 0; index < n; index++) {
	      var rand = _.random(index, last);
	      var temp = sample[index];
	      sample[index] = sample[rand];
	      sample[rand] = temp;
	    }
	    return sample.slice(0, n);
	  };

	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    var index = 0;
	    iteratee = cb(iteratee, context);
	    return _.pluck(_.map(obj, function(value, key, list) {
	      return {
	        value: value,
	        index: index++,
	        criteria: iteratee(value, key, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };

	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior, partition) {
	    return function(obj, iteratee, context) {
	      var result = partition ? [[], []] : {};
	      iteratee = cb(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };

	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (has(result, key)) result[key].push(value); else result[key] = [value];
	  });

	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });

	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (has(result, key)) result[key]++; else result[key] = 1;
	  });

	  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (_.isString(obj)) {
	      // Keep surrogate pair characters together
	      return obj.match(reStrSymbol);
	    }
	    if (isArrayLike(obj)) return _.map(obj, _.identity);
	    return _.values(obj);
	  };

	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
	  };

	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = group(function(result, value, pass) {
	    result[pass ? 0 : 1].push(value);
	  }, true);

	  // Array Functions
	  // ---------------

	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[0];
	    return _.initial(array, array.length - n);
	  };

	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };

	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array.
	  _.last = function(array, n, guard) {
	    if (array == null || array.length < 1) return n == null ? void 0 : [];
	    if (n == null || guard) return array[array.length - 1];
	    return _.rest(array, Math.max(0, array.length - n));
	  };

	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };

	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, Boolean);
	  };

	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, output) {
	    output = output || [];
	    var idx = output.length;
	    for (var i = 0, length = getLength(input); i < length; i++) {
	      var value = input[i];
	      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
	        // Flatten current level of array or arguments object.
	        if (shallow) {
	          var j = 0, len = value.length;
	          while (j < len) output[idx++] = value[j++];
	        } else {
	          flatten(value, shallow, strict, output);
	          idx = output.length;
	        }
	      } else if (!strict) {
	        output[idx++] = value;
	      }
	    }
	    return output;
	  };

	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false);
	  };

	  // Return a version of the array that does not contain the specified value(s).
	  _.without = restArguments(function(array, otherArrays) {
	    return _.difference(array, otherArrays);
	  });

	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // The faster algorithm will not work with an iteratee if the iteratee
	  // is not a one-to-one function, so providing an iteratee will disable
	  // the faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = cb(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var value = array[i],
	          computed = iteratee ? iteratee(value, i, array) : value;
	      if (isSorted && !iteratee) {
	        if (!i || seen !== computed) result.push(value);
	        seen = computed;
	      } else if (iteratee) {
	        if (!_.contains(seen, computed)) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (!_.contains(result, value)) {
	        result.push(value);
	      }
	    }
	    return result;
	  };

	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = restArguments(function(arrays) {
	    return _.uniq(flatten(arrays, true, true));
	  });

	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = getLength(array); i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      var j;
	      for (j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };

	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = restArguments(function(array, rest) {
	    rest = flatten(rest, true, true);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  });

	  // Complement of _.zip. Unzip accepts an array of arrays and groups
	  // each array's elements on shared indices.
	  _.unzip = function(array) {
	    var length = array && _.max(array, getLength).length || 0;
	    var result = Array(length);

	    for (var index = 0; index < length; index++) {
	      result[index] = _.pluck(array, index);
	    }
	    return result;
	  };

	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = restArguments(_.unzip);

	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values. Passing by pairs is the reverse of _.pairs.
	  _.object = function(list, values) {
	    var result = {};
	    for (var i = 0, length = getLength(list); i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };

	  // Generator function to create the findIndex and findLastIndex functions.
	  var createPredicateIndexFinder = function(dir) {
	    return function(array, predicate, context) {
	      predicate = cb(predicate, context);
	      var length = getLength(array);
	      var index = dir > 0 ? 0 : length - 1;
	      for (; index >= 0 && index < length; index += dir) {
	        if (predicate(array[index], index, array)) return index;
	      }
	      return -1;
	    };
	  };

	  // Returns the first index on an array-like that passes a predicate test.
	  _.findIndex = createPredicateIndexFinder(1);
	  _.findLastIndex = createPredicateIndexFinder(-1);

	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = cb(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = getLength(array);
	    while (low < high) {
	      var mid = Math.floor((low + high) / 2);
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };

	  // Generator function to create the indexOf and lastIndexOf functions.
	  var createIndexFinder = function(dir, predicateFind, sortedIndex) {
	    return function(array, item, idx) {
	      var i = 0, length = getLength(array);
	      if (typeof idx == 'number') {
	        if (dir > 0) {
	          i = idx >= 0 ? idx : Math.max(idx + length, i);
	        } else {
	          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
	        }
	      } else if (sortedIndex && idx && length) {
	        idx = sortedIndex(array, item);
	        return array[idx] === item ? idx : -1;
	      }
	      if (item !== item) {
	        idx = predicateFind(slice.call(array, i, length), _.isNaN);
	        return idx >= 0 ? idx + i : -1;
	      }
	      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
	        if (array[idx] === item) return idx;
	      }
	      return -1;
	    };
	  };

	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
	  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (stop == null) {
	      stop = start || 0;
	      start = 0;
	    }
	    if (!step) {
	      step = stop < start ? -1 : 1;
	    }

	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);

	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }

	    return range;
	  };

	  // Chunk a single array into multiple arrays, each containing `count` or fewer
	  // items.
	  _.chunk = function(array, count) {
	    if (count == null || count < 1) return [];
	    var result = [];
	    var i = 0, length = array.length;
	    while (i < length) {
	      result.push(slice.call(array, i, i += count));
	    }
	    return result;
	  };

	  // Function (ahem) Functions
	  // ------------------

	  // Determines whether to execute a function as a constructor
	  // or a normal function with the provided arguments.
	  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
	    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
	    var self = baseCreate(sourceFunc.prototype);
	    var result = sourceFunc.apply(self, args);
	    if (_.isObject(result)) return result;
	    return self;
	  };

	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = restArguments(function(func, context, args) {
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    var bound = restArguments(function(callArgs) {
	      return executeBound(func, bound, context, this, args.concat(callArgs));
	    });
	    return bound;
	  });

	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder by default, allowing any combination of arguments to be
	  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
	  _.partial = restArguments(function(func, boundArgs) {
	    var placeholder = _.partial.placeholder;
	    var bound = function() {
	      var position = 0, length = boundArgs.length;
	      var args = Array(length);
	      for (var i = 0; i < length; i++) {
	        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return executeBound(func, bound, this, this, args);
	    };
	    return bound;
	  });

	  _.partial.placeholder = _;

	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = restArguments(function(obj, keys) {
	    keys = flatten(keys, false, false);
	    var index = keys.length;
	    if (index < 1) throw new Error('bindAll must be passed function names');
	    while (index--) {
	      var key = keys[index];
	      obj[key] = _.bind(obj[key], obj);
	    }
	  });

	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
	      if (!has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };

	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = restArguments(function(func, wait, args) {
	    return setTimeout(function() {
	      return func.apply(null, args);
	    }, wait);
	  });

	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = _.partial(_.delay, _, 1);

	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var timeout, context, args, result;
	    var previous = 0;
	    if (!options) options = {};

	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };

	    var throttled = function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        if (timeout) {
	          clearTimeout(timeout);
	          timeout = null;
	        }
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };

	    throttled.cancel = function() {
	      clearTimeout(timeout);
	      previous = 0;
	      timeout = context = args = null;
	    };

	    return throttled;
	  };

	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, result;

	    var later = function(context, args) {
	      timeout = null;
	      if (args) result = func.apply(context, args);
	    };

	    var debounced = restArguments(function(args) {
	      if (timeout) clearTimeout(timeout);
	      if (immediate) {
	        var callNow = !timeout;
	        timeout = setTimeout(later, wait);
	        if (callNow) result = func.apply(this, args);
	      } else {
	        timeout = _.delay(later, wait, this, args);
	      }

	      return result;
	    });

	    debounced.cancel = function() {
	      clearTimeout(timeout);
	      timeout = null;
	    };

	    return debounced;
	  };

	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };

	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };

	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };

	  // Returns a function that will only be executed on and after the Nth call.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };

	  // Returns a function that will only be executed up to (but not including) the Nth call.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      }
	      if (times <= 1) func = null;
	      return memo;
	    };
	  };

	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);

	  _.restArguments = restArguments;

	  // Object Functions
	  // ----------------

	  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
	  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
	  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
	    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

	  var collectNonEnumProps = function(obj, keys) {
	    var nonEnumIdx = nonEnumerableProps.length;
	    var constructor = obj.constructor;
	    var proto = _.isFunction(constructor) && constructor.prototype || ObjProto;

	    // Constructor is a special case.
	    var prop = 'constructor';
	    if (has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

	    while (nonEnumIdx--) {
	      prop = nonEnumerableProps[nonEnumIdx];
	      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
	        keys.push(prop);
	      }
	    }
	  };

	  // Retrieve the names of an object's own properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`.
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (has(obj, key)) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve all the property names of an object.
	  _.allKeys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    var keys = [];
	    for (var key in obj) keys.push(key);
	    // Ahem, IE < 9.
	    if (hasEnumBug) collectNonEnumProps(obj, keys);
	    return keys;
	  };

	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };

	  // Returns the results of applying the iteratee to each element of the object.
	  // In contrast to _.map it returns an object.
	  _.mapObject = function(obj, iteratee, context) {
	    iteratee = cb(iteratee, context);
	    var keys = _.keys(obj),
	        length = keys.length,
	        results = {};
	    for (var index = 0; index < length; index++) {
	      var currentKey = keys[index];
	      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };

	  // Convert an object into a list of `[key, value]` pairs.
	  // The opposite of _.object.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };

	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };

	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`.
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };

	  // An internal function for creating assigner functions.
	  var createAssigner = function(keysFunc, defaults) {
	    return function(obj) {
	      var length = arguments.length;
	      if (defaults) obj = Object(obj);
	      if (length < 2 || obj == null) return obj;
	      for (var index = 1; index < length; index++) {
	        var source = arguments[index],
	            keys = keysFunc(source),
	            l = keys.length;
	        for (var i = 0; i < l; i++) {
	          var key = keys[i];
	          if (!defaults || obj[key] === void 0) obj[key] = source[key];
	        }
	      }
	      return obj;
	    };
	  };

	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = createAssigner(_.allKeys);

	  // Assigns a given object with all the own properties in the passed-in object(s).
	  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
	  _.extendOwn = _.assign = createAssigner(_.keys);

	  // Returns the first key on an object that passes a predicate test.
	  _.findKey = function(obj, predicate, context) {
	    predicate = cb(predicate, context);
	    var keys = _.keys(obj), key;
	    for (var i = 0, length = keys.length; i < length; i++) {
	      key = keys[i];
	      if (predicate(obj[key], key, obj)) return key;
	    }
	  };

	  // Internal pick helper function to determine if `obj` has key `key`.
	  var keyInObj = function(value, key, obj) {
	    return key in obj;
	  };

	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = restArguments(function(obj, keys) {
	    var result = {}, iteratee = keys[0];
	    if (obj == null) return result;
	    if (_.isFunction(iteratee)) {
	      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
	      keys = _.allKeys(obj);
	    } else {
	      iteratee = keyInObj;
	      keys = flatten(keys, false, false);
	      obj = Object(obj);
	    }
	    for (var i = 0, length = keys.length; i < length; i++) {
	      var key = keys[i];
	      var value = obj[key];
	      if (iteratee(value, key, obj)) result[key] = value;
	    }
	    return result;
	  });

	  // Return a copy of the object without the blacklisted properties.
	  _.omit = restArguments(function(obj, keys) {
	    var iteratee = keys[0], context;
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	      if (keys.length > 1) context = keys[1];
	    } else {
	      keys = _.map(flatten(keys, false, false), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  });

	  // Fill in a given object with default properties.
	  _.defaults = createAssigner(_.allKeys, true);

	  // Creates an object that inherits from the given prototype object.
	  // If additional properties are provided then they will be added to the
	  // created object.
	  _.create = function(prototype, props) {
	    var result = baseCreate(prototype);
	    if (props) _.extendOwn(result, props);
	    return result;
	  };

	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };

	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };

	  // Returns whether an object has a given set of `key:value` pairs.
	  _.isMatch = function(object, attrs) {
	    var keys = _.keys(attrs), length = keys.length;
	    if (object == null) return !length;
	    var obj = Object(object);
	    for (var i = 0; i < length; i++) {
	      var key = keys[i];
	      if (attrs[key] !== obj[key] || !(key in obj)) return false;
	    }
	    return true;
	  };


	  // Internal recursive comparison function for `isEqual`.
	  var eq, deepEq;
	  eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // `null` or `undefined` only equal to itself (strict comparison).
	    if (a == null || b == null) return false;
	    // `NaN`s are equivalent, but non-reflexive.
	    if (a !== a) return b !== b;
	    // Exhaust primitive checks
	    var type = typeof a;
	    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
	    return deepEq(a, b, aStack, bStack);
	  };

	  // Internal recursive comparison function for `isEqual`.
	  deepEq = function(a, b, aStack, bStack) {
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN.
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	      case '[object Symbol]':
	        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
	    }

	    var areArrays = className === '[object Array]';
	    if (!areArrays) {
	      if (typeof a != 'object' || typeof b != 'object') return false;

	      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
	      // from different frames are.
	      var aCtor = a.constructor, bCtor = b.constructor;
	      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	                               _.isFunction(bCtor) && bCtor instanceof bCtor)
	                          && ('constructor' in a && 'constructor' in b)) {
	        return false;
	      }
	    }
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

	    // Initializing stack of traversed objects.
	    // It's done here since we only need them for objects and arrays comparison.
	    aStack = aStack || [];
	    bStack = bStack || [];
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }

	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);

	    // Recursively compare objects and arrays.
	    if (areArrays) {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      length = a.length;
	      if (length !== b.length) return false;
	      // Deep compare the contents, ignoring non-numeric properties.
	      while (length--) {
	        if (!eq(a[length], b[length], aStack, bStack)) return false;
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      length = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      if (_.keys(b).length !== length) return false;
	      while (length--) {
	        // Deep compare each member
	        key = keys[length];
	        if (!(has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return true;
	  };

	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b);
	  };

	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
	    return _.keys(obj).length === 0;
	  };

	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };

	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };

	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };

	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError, isMap, isWeakMap, isSet, isWeakSet.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error', 'Symbol', 'Map', 'WeakMap', 'Set', 'WeakSet'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });

	  // Define a fallback version of the method in browsers (ahem, IE < 9), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return has(obj, 'callee');
	    };
	  }

	  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
	  // IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
	  var nodelist = root.document && root.document.childNodes;
	  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }

	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return !_.isSymbol(obj) && isFinite(obj) && !isNaN(parseFloat(obj));
	  };

	  // Is the given value `NaN`?
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && isNaN(obj);
	  };

	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };

	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };

	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };

	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, path) {
	    if (!_.isArray(path)) {
	      return has(obj, path);
	    }
	    var length = path.length;
	    for (var i = 0; i < length; i++) {
	      var key = path[i];
	      if (obj == null || !hasOwnProperty.call(obj, key)) {
	        return false;
	      }
	      obj = obj[key];
	    }
	    return !!length;
	  };

	  // Utility Functions
	  // -----------------

	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };

	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };

	  // Predicate-generating functions. Often useful outside of Underscore.
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };

	  _.noop = function(){};

	  // Creates a function that, when passed an object, will traverse that object’s
	  // properties down the given `path`, specified as an array of keys or indexes.
	  _.property = function(path) {
	    if (!_.isArray(path)) {
	      return shallowProperty(path);
	    }
	    return function(obj) {
	      return deepGet(obj, path);
	    };
	  };

	  // Generates a function for a given object that returns a given property.
	  _.propertyOf = function(obj) {
	    if (obj == null) {
	      return function(){};
	    }
	    return function(path) {
	      return !_.isArray(path) ? obj[path] : deepGet(obj, path);
	    };
	  };

	  // Returns a predicate for checking whether an object has a given set of
	  // `key:value` pairs.
	  _.matcher = _.matches = function(attrs) {
	    attrs = _.extendOwn({}, attrs);
	    return function(obj) {
	      return _.isMatch(obj, attrs);
	    };
	  };

	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = optimizeCb(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };

	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };

	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };

	  // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);

	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped.
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);

	  // Traverses the children of `obj` along `path`. If a child is a function, it
	  // is invoked with its parent as context. Returns the value of the final
	  // child, or `fallback` if any child is undefined.
	  _.result = function(obj, path, fallback) {
	    if (!_.isArray(path)) path = [path];
	    var length = path.length;
	    if (!length) {
	      return _.isFunction(fallback) ? fallback.call(obj) : fallback;
	    }
	    for (var i = 0; i < length; i++) {
	      var prop = obj == null ? void 0 : obj[path[i]];
	      if (prop === void 0) {
	        prop = fallback;
	        i = length; // Ensure we don't continue iterating.
	      }
	      obj = _.isFunction(prop) ? prop.call(obj) : prop;
	    }
	    return obj;
	  };

	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };

	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate: /<%([\s\S]+?)%>/g,
	    interpolate: /<%=([\s\S]+?)%>/g,
	    escape: /<%-([\s\S]+?)%>/g
	  };

	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;

	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'": "'",
	    '\\': '\\',
	    '\r': 'r',
	    '\n': 'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };

	  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };

	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);

	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');

	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
	      index = offset + match.length;

	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }

	      // Adobe VMs need the match returned to produce the correct offset.
	      return match;
	    });
	    source += "';\n";

	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';

	    var render;
	    try {
	      render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }

	    var template = function(data) {
	      return render.call(this, data, _);
	    };

	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';

	    return template;
	  };

	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };

	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.

	  // Helper function to continue chaining intermediate results.
	  var chainResult = function(instance, obj) {
	    return instance._chain ? _(obj).chain() : obj;
	  };

	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return chainResult(this, func.apply(_, args));
	      };
	    });
	    return _;
	  };

	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);

	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return chainResult(this, obj);
	    };
	  });

	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return chainResult(this, method.apply(this._wrapped, arguments));
	    };
	  });

	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };

	  // Provide unwrapping proxy for some methods used in engine operations
	  // such as arithmetic and JSON stringification.
	  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

	  _.prototype.toString = function() {
	    return String(this._wrapped);
	  };

	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}());

	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(3)(module)))

/***/ }),
/* 3 */
/***/ (function(module, exports) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ }),
/* 4 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_4__;

/***/ }),
/* 5 */
/***/ (function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_5__;

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

	(function webpackUniversalModuleDefinition(root, factory) {
		if(true)
			module.exports = factory();
		else if(typeof define === 'function' && define.amd)
			define([], factory);
		else if(typeof exports === 'object')
			exports["G2_3"] = factory();
		else
			root["G2_3"] = factory();
	})(typeof self !== 'undefined' ? self : this, function() {
	return /******/ (function(modules) { // webpackBootstrap
	/******/ 	// The module cache
	/******/ 	var installedModules = {};
	/******/
	/******/ 	// The require function
	/******/ 	function __webpack_require__(moduleId) {
	/******/
	/******/ 		// Check if module is in cache
	/******/ 		if(installedModules[moduleId]) {
	/******/ 			return installedModules[moduleId].exports;
	/******/ 		}
	/******/ 		// Create a new module (and put it into the cache)
	/******/ 		var module = installedModules[moduleId] = {
	/******/ 			i: moduleId,
	/******/ 			l: false,
	/******/ 			exports: {}
	/******/ 		};
	/******/
	/******/ 		// Execute the module function
	/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	/******/
	/******/ 		// Flag the module as loaded
	/******/ 		module.l = true;
	/******/
	/******/ 		// Return the exports of the module
	/******/ 		return module.exports;
	/******/ 	}
	/******/
	/******/
	/******/ 	// expose the modules object (__webpack_modules__)
	/******/ 	__webpack_require__.m = modules;
	/******/
	/******/ 	// expose the module cache
	/******/ 	__webpack_require__.c = installedModules;
	/******/
	/******/ 	// define getter function for harmony exports
	/******/ 	__webpack_require__.d = function(exports, name, getter) {
	/******/ 		if(!__webpack_require__.o(exports, name)) {
	/******/ 			Object.defineProperty(exports, name, {
	/******/ 				configurable: false,
	/******/ 				enumerable: true,
	/******/ 				get: getter
	/******/ 			});
	/******/ 		}
	/******/ 	};
	/******/
	/******/ 	// getDefaultExport function for compatibility with non-harmony modules
	/******/ 	__webpack_require__.n = function(module) {
	/******/ 		var getter = module && module.__esModule ?
	/******/ 			function getDefault() { return module['default']; } :
	/******/ 			function getModuleExports() { return module; };
	/******/ 		__webpack_require__.d(getter, 'a', getter);
	/******/ 		return getter;
	/******/ 	};
	/******/
	/******/ 	// Object.prototype.hasOwnProperty.call
	/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
	/******/
	/******/ 	// __webpack_public_path__
	/******/ 	__webpack_require__.p = "";
	/******/
	/******/ 	// Load entry module and return exports
	/******/ 	return __webpack_require__(__webpack_require__.s = 380);
	/******/ })
	/************************************************************************/
	/******/ ([
	/* 0 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The util method based on the lodash.
	 * @author dxq613@gmail.com
	 * @see https://github.com/lodash/lodash
	 */
	var G = __webpack_require__(1);

	var CommonUtil = G.CommonUtil;

	var MAX_LEVEL = 5;

	function _mix(dist, obj) {
	  for (var k in obj) {
	    if (obj.hasOwnProperty(k) && k !== 'constructor' && obj[k] !== undefined) {
	      dist[k] = obj[k];
	    }
	  }
	}

	var Util = CommonUtil.assign({
	  cloneDeep: __webpack_require__(119),
	  filter: __webpack_require__(180),
	  flatten: __webpack_require__(87),
	  groupBy: __webpack_require__(208),
	  indexOf: __webpack_require__(212),
	  isDate: __webpack_require__(217),
	  isEmpty: __webpack_require__(219),
	  isEqualWith: __webpack_require__(220),
	  isFinite: __webpack_require__(221),
	  isNaN: __webpack_require__(222),
	  isNull: __webpack_require__(224),
	  isPlainObject: __webpack_require__(225),
	  lowerFirst: __webpack_require__(226),
	  map: __webpack_require__(233),
	  maxBy: __webpack_require__(235),
	  minBy: __webpack_require__(237),
	  pick: __webpack_require__(239),
	  reduce: __webpack_require__(248),
	  replace: __webpack_require__(250),
	  round: __webpack_require__(251),
	  union: __webpack_require__(253),
	  uniq: __webpack_require__(260),
	  upperCase: __webpack_require__(261),
	  snapEqual: function snapEqual(v1, v2) {
	    return Math.abs(v1 - v2) < 0.001;
	  },
	  fixedBase: function fixedBase(v, base) {
	    var str = base.toString();
	    var index = str.indexOf('.');
	    if (index === -1) {
	      return Math.round(v);
	    }
	    var length = str.substr(index + 1).length;
	    if (length > 20) {
	      length = 20;
	    }
	    return parseFloat(v.toFixed(length));
	  },
	  mix: function mix(dist, obj1, obj2, obj3) {
	    if (obj1) {
	      _mix(dist, obj1);
	    }

	    if (obj2) {
	      _mix(dist, obj2);
	    }

	    if (obj3) {
	      _mix(dist, obj3);
	    }
	    return dist;
	  },
	  inArray: function inArray(arr, value) {
	    return arr.indexOf(value) >= 0;
	  },

	  /**
	   * 封装事件，便于使用上下文this,和便于解除事件时使用
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  wrapBehavior: function wrapBehavior(obj, action) {
	    if (obj['_wrap_' + action]) {
	      return obj['_wrap_' + action];
	    }
	    var method = function method(e) {
	      obj[action](e);
	    };
	    obj['_wrap_' + action] = method;
	    return method;
	  },

	  /**
	   * 获取封装的事件
	   * @protected
	   * @param  {Object} obj   对象
	   * @param  {String} action 事件名称
	   * @return {Function}        返回事件处理函数
	   */
	  getWrapBehavior: function getWrapBehavior(obj, action) {
	    return obj['_wrap_' + action];
	  },

	  /**
	   * 将用户输入的 padding 转换成 [top, right, bottom, right] 的模式
	   * @param  {Number|Array} padding 输入的padding
	   * @return {Array} 四个padding 值
	   */
	  toAllPadding: function toAllPadding(padding) {
	    var top = 0;
	    var left = 0;
	    var right = 0;
	    var bottom = 0;

	    if (Util.isNumber(padding) || Util.isString(padding)) {
	      top = left = right = bottom = padding;
	    } else if (Util.isArray(padding)) {
	      top = padding[0];
	      right = !Util.isNil(padding[1]) ? padding[1] : padding[0];
	      bottom = !Util.isNil(padding[2]) ? padding[2] : padding[0];
	      left = !Util.isNil(padding[3]) ? padding[3] : right;
	    } else if (Util.isObject(padding)) {
	      top = padding.top || 0;
	      right = padding.right || 0;
	      bottom = padding.bottom || 0;
	      left = padding.left || 0;
	    }
	    return [top, right, bottom, left];
	  },

	  /**
	   * 替换字符串中的字段.
	   * @param {String} str 模版字符串
	   * @param {Object} o json data
	   * @return {String}     替换后的字符串
	   */
	  substitute: function substitute(str, o) {
	    if (!str || !o) {
	      return str;
	    }
	    return str.replace(/\\?\{([^{}]+)\}/g, function (match, name) {
	      if (match.charAt(0) === '\\') {
	        return match.slice(1);
	      }
	      return o[name] === undefined ? '' : o[name];
	    });
	  }
	}, CommonUtil);

	function deepMix(dst, src, level) {
	  level = level || 0;
	  for (var k in src) {
	    if (src.hasOwnProperty(k)) {
	      var value = src[k];
	      if (value !== null && Util.isPlainObject(value)) {
	        if (!Util.isPlainObject(dst[k])) {
	          dst[k] = {};
	        }
	        if (level < MAX_LEVEL) {
	          deepMix(dst[k], src[k], level + 1);
	        } else {
	          dst[k] = src[k];
	        }
	      } else if (Util.isArray(value)) {
	        dst[k] = [];
	        dst[k] = dst[k].concat(value);
	      } else if (value !== undefined) {
	        dst[k] = src[k];
	      }
	    }
	  }
	}

	Util.deepMix = function () {
	  var args = Util.toArray(arguments);
	  var rst = args[0];
	  for (var i = 1; i < args.length; i++) {
	    var source = args[i];
	    deepMix(rst, source);
	  }
	  return rst;
	};

	Util.Array = {
	  merge: function merge(dataArray) {
	    var rst = [];
	    for (var i = 0; i < dataArray.length; i++) {
	      rst = rst.concat(dataArray[i]);
	    }
	    return rst;
	  },
	  values: function values(data, name) {
	    var rst = [];
	    var tmpMap = {};
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (!Util.isArray(value)) {
	          value = [value];
	        }
	        Util.each(value, function (val) {
	          if (!tmpMap[val]) {
	            rst.push(val);
	            tmpMap[val] = true;
	          }
	        });
	      }
	    }
	    return rst;
	  },
	  getRange: function getRange(values) {
	    // 存在 NaN 时，min,max 判定会出问题
	    values = Util.filter(values, function (v) {
	      return !isNaN(v);
	    });
	    if (!values.length) {
	      // 如果没有数值则直接返回0
	      return {
	        min: 0,
	        max: 0
	      };
	    }
	    if (Util.isArray(values[0])) {
	      var tmp = [];
	      for (var i = 0; i < values.length; i++) {
	        tmp = tmp.concat(values[i]);
	      }
	      values = tmp;
	    }
	    var max = Math.max.apply(null, values);
	    var min = Math.min.apply(null, values);
	    return {
	      min: min,
	      max: max
	    };
	  },
	  firstValue: function firstValue(data, name) {
	    var rst = null;
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[name];
	      if (!Util.isNil(value)) {
	        if (Util.isArray(value)) {
	          rst = value[0];
	        } else {
	          rst = value;
	        }
	        break;
	      }
	    }
	    return rst;
	  },
	  group: function group(data, condition) {
	    if (!condition) {
	      return [data];
	    }
	    var groups = Util.Array.groupToMap(data, condition);
	    var array = [];
	    for (var i in groups) {
	      array.push(groups[i]);
	    }
	    return array;
	  },
	  groupToMap: function groupToMap(data, condition) {
	    if (!condition) {
	      return {
	        0: data
	      };
	    }
	    if (!Util.isFunction(condition)) {
	      var paramsCondition = Util.isArray(condition) ? condition : condition.replace(/\s+/g, '').split('*');
	      condition = function condition(row) {
	        var unique = '_'; // 避免出现数字作为Key的情况，会进行按照数字的排序
	        for (var i = 0, l = paramsCondition.length; i < l; i++) {
	          unique += row[paramsCondition[i]] && row[paramsCondition[i]].toString();
	        }
	        return unique;
	      };
	    }
	    var groups = Util.groupBy(data, condition);
	    return groups;
	  },

	  remove: CommonUtil.remove
	};

	module.exports = Util;

	/***/ }),
	/* 1 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function webpackUniversalModuleDefinition(root, factory) {
	  if (( false ? 'undefined' : _typeof2(exports)) === 'object' && ( false ? 'undefined' : _typeof2(module)) === 'object') module.exports = factory();else if (true) !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));else if ((typeof exports === 'undefined' ? 'undefined' : _typeof2(exports)) === 'object') exports["G"] = factory();else root["G"] = factory();
	})(this, function () {
	  return (/******/function (modules) {
	      // webpackBootstrap
	      /******/ // The module cache
	      /******/var installedModules = {};
	      /******/
	      /******/ // The require function
	      /******/function __webpack_require__(moduleId) {
	        /******/
	        /******/ // Check if module is in cache
	        /******/if (installedModules[moduleId]) {
	          /******/return installedModules[moduleId].exports;
	          /******/
	        }
	        /******/ // Create a new module (and put it into the cache)
	        /******/var module = installedModules[moduleId] = {
	          /******/i: moduleId,
	          /******/l: false,
	          /******/exports: {}
	          /******/ };
	        /******/
	        /******/ // Execute the module function
	        /******/modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
	        /******/
	        /******/ // Flag the module as loaded
	        /******/module.l = true;
	        /******/
	        /******/ // Return the exports of the module
	        /******/return module.exports;
	        /******/
	      }
	      /******/
	      /******/
	      /******/ // expose the modules object (__webpack_modules__)
	      /******/__webpack_require__.m = modules;
	      /******/
	      /******/ // expose the module cache
	      /******/__webpack_require__.c = installedModules;
	      /******/
	      /******/ // define getter function for harmony exports
	      /******/__webpack_require__.d = function (exports, name, getter) {
	        /******/if (!__webpack_require__.o(exports, name)) {
	          /******/Object.defineProperty(exports, name, {
	            /******/configurable: false,
	            /******/enumerable: true,
	            /******/get: getter
	            /******/ });
	          /******/
	        }
	        /******/
	      };
	      /******/
	      /******/ // getDefaultExport function for compatibility with non-harmony modules
	      /******/__webpack_require__.n = function (module) {
	        /******/var getter = module && module.__esModule ?
	        /******/function getDefault() {
	          return module['default'];
	        } :
	        /******/function getModuleExports() {
	          return module;
	        };
	        /******/__webpack_require__.d(getter, 'a', getter);
	        /******/return getter;
	        /******/
	      };
	      /******/
	      /******/ // Object.prototype.hasOwnProperty.call
	      /******/__webpack_require__.o = function (object, property) {
	        return Object.prototype.hasOwnProperty.call(object, property);
	      };
	      /******/
	      /******/ // __webpack_public_path__
	      /******/__webpack_require__.p = "";
	      /******/
	      /******/ // Load entry module and return exports
	      /******/return __webpack_require__(__webpack_require__.s = 113);
	      /******/
	    }(
	    /************************************************************************/
	    /******/[
	    /* 0 */
	    /***/function (module, exports, __webpack_require__) {

	      var CommonUtil = __webpack_require__(16);
	      var DomUtil = __webpack_require__(86);

	      var Util = {};

	      CommonUtil.merge(Util, CommonUtil, DomUtil, {
	        mixin: function mixin(c, mixins) {
	          var Param = c.CFG ? 'CFG' : 'ATTRS';
	          if (c && mixins) {
	            c._mixins = mixins;
	            c[Param] = c[Param] || {};
	            var temp = {};
	            Util.each(mixins, function (mixin) {
	              Util.augment(c, mixin);
	              var attrs = mixin[Param];
	              if (attrs) {
	                Util.merge(temp, attrs);
	              }
	            });
	            c[Param] = Util.merge(temp, c[Param]);
	          }
	        }
	      });

	      module.exports = Util;

	      /***/
	    },
	    /* 1 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Element = __webpack_require__(89);
	      var Inside = __webpack_require__(2);

	      var Shape = function Shape(cfg) {
	        Shape.superclass.constructor.call(this, cfg);
	      };

	      Shape.ATTRS = {};

	      Util.extend(Shape, Element);

	      Util.augment(Shape, {
	        isShape: true,
	        createPath: function createPath() {},
	        drawInner: function drawInner(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          self.createPath(context);
	          var originOpacity = context.globalAlpha;
	          if (self.hasFill()) {
	            var fillOpacity = attrs.fillOpacity;
	            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	              context.globalAlpha = fillOpacity;
	              context.fill();
	              context.globalAlpha = originOpacity;
	            } else {
	              context.fill();
	            }
	          }
	          if (self.hasStroke()) {
	            var lineWidth = self.__attrs.lineWidth;
	            if (lineWidth > 0) {
	              var strokeOpacity = attrs.strokeOpacity;
	              if (!Util.isNil(strokeOpacity) && strokeOpacity !== 1) {
	                context.globalAlpha = strokeOpacity;
	              }
	              context.stroke();
	            }
	          }
	        },

	        /**
	         * 节点是否在图形中
	         * @param  {Number}  x x 坐标
	         * @param  {Number}  y y 坐标
	         * @return {Boolean}  是否在图形中
	         */
	        isPointInPath: function isPointInPath() {
	          return false;
	        },

	        /**
	         * 击中图形时是否进行包围盒判断
	         * @return {Boolean} [description]
	         */
	        isHitBox: function isHitBox() {
	          return true;
	        },

	        /**
	         * 节点是否能够被击中
	         * @param {Number} x x坐标
	         * @param {Number} y y坐标
	         * @return {Boolean} 是否在图形中
	         */
	        isHit: function isHit(x, y) {
	          var self = this;
	          var v = [x, y, 1];
	          self.invert(v); // canvas

	          if (self.isHitBox()) {
	            var box = self.getBBox();
	            if (box && !Inside.box(box.minX, box.maxX, box.minY, box.maxY, v[0], v[1])) {
	              return false;
	            }
	          }
	          var clip = self.__attrs.clip;
	          if (clip) {
	            if (clip.inside(x, y)) {
	              return self.isPointInPath(v[0], v[1]);
	            }
	          } else {
	            return self.isPointInPath(v[0], v[1]);
	          }
	          return false;
	        },

	        /**
	         * @protected
	         * 计算包围盒
	         * @return {Object} 包围盒
	         */
	        calculateBox: function calculateBox() {
	          return null;
	        },

	        // 获取拾取时线的宽度，需要考虑附加的线的宽度
	        getHitLineWidth: function getHitLineWidth() {
	          var attrs = this.__attrs;
	          // if (!attrs.stroke) {
	          //   return 0;
	          // }
	          var lineAppendWidth = attrs.lineAppendWidth || 0;
	          var lineWidth = attrs.lineWidth || 0;
	          return lineWidth + lineAppendWidth;
	        },

	        // 清除当前的矩阵
	        clearTotalMatrix: function clearTotalMatrix() {
	          this.__cfg.totalMatrix = null;
	          this.__cfg.region = null;
	        },
	        clearBBox: function clearBBox() {
	          this.__cfg.box = null;
	          this.__cfg.region = null;
	        },
	        getBBox: function getBBox() {
	          var box = this.__cfg.box;
	          // 延迟计算
	          if (!box) {
	            box = this.calculateBox();
	            if (box) {
	              box.x = box.minX;
	              box.y = box.minY;
	              box.width = box.maxX - box.minX;
	              box.height = box.maxY - box.minY;
	            }
	            this.__cfg.box = box;
	          }
	          return box;
	        }
	      });

	      module.exports = Shape;

	      /***/
	    },
	    /* 2 */
	    /***/function (module, exports, __webpack_require__) {

	      var Line = __webpack_require__(52);
	      var Quadratic = __webpack_require__(53);
	      var Cubic = __webpack_require__(31);
	      var Arc = __webpack_require__(54);

	      module.exports = {
	        line: function line(x1, y1, x2, y2, lineWidth, x, y) {
	          var box = Line.box(x1, y1, x2, y2, lineWidth);

	          if (!this.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	            return false;
	          }

	          var d = Line.pointDistance(x1, y1, x2, y2, x, y);
	          if (isNaN(d)) {
	            return false;
	          }
	          return d <= lineWidth / 2;
	        },
	        polyline: function polyline(points, lineWidth, x, y) {
	          var l = points.length - 1;
	          if (l < 1) {
	            return false;
	          }
	          for (var i = 0; i < l; i++) {
	            var x1 = points[i][0];
	            var y1 = points[i][1];
	            var x2 = points[i + 1][0];
	            var y2 = points[i + 1][1];

	            if (this.line(x1, y1, x2, y2, lineWidth, x, y)) {
	              return true;
	            }
	          }

	          return false;
	        },
	        cubicline: function cubicline(x1, y1, x2, y2, x3, y3, x4, y4, lineWidth, x, y) {
	          return Cubic.pointDistance(x1, y1, x2, y2, x3, y3, x4, y4, x, y) <= lineWidth / 2;
	        },
	        quadraticline: function quadraticline(x1, y1, x2, y2, x3, y3, lineWidth, x, y) {
	          return Quadratic.pointDistance(x1, y1, x2, y2, x3, y3, x, y) <= lineWidth / 2;
	        },
	        arcline: function arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y) {
	          return Arc.pointDistance(cx, cy, r, startAngle, endAngle, clockwise, x, y) <= lineWidth / 2;
	        },
	        rect: function rect(rx, ry, width, height, x, y) {
	          return rx <= x && x <= rx + width && ry <= y && y <= ry + height;
	        },
	        circle: function circle(cx, cy, r, x, y) {
	          return Math.pow(x - cx, 2) + Math.pow(y - cy, 2) <= Math.pow(r, 2);
	        },
	        box: function box(minX, maxX, minY, maxY, x, y) {
	          return minX <= x && x <= maxX && minY <= y && y <= maxY;
	        }
	      };

	      /***/
	    },
	    /* 3 */
	    /***/function (module, exports, __webpack_require__) {

	      var CommonUtil = __webpack_require__(16);
	      var mat3 = __webpack_require__(231);
	      var vec3 = __webpack_require__(232);
	      var vec2 = __webpack_require__(233);

	      vec2.angle = function (v1, v2) {
	        var theta = vec2.dot(v1, v2) / (vec2.length(v1) * vec2.length(v2));
	        return Math.acos(CommonUtil.clamp(theta, -1, 1));
	      };
	      /**
	       * 向量 v1 到 向量 v2 夹角的方向
	       * @param  {Array} v1 向量
	       * @param  {Array} v2 向量
	       * @return {Boolean} >= 0 顺时针 < 0 逆时针
	       */
	      vec2.direction = function (v1, v2) {
	        return v1[0] * v2[1] - v2[0] * v1[1];
	      };
	      vec2.angleTo = function (v1, v2, direct) {
	        var angle = vec2.angle(v1, v2);
	        var angleLargeThanPI = vec2.direction(v1, v2) >= 0;
	        if (direct) {
	          if (angleLargeThanPI) {
	            return Math.PI * 2 - angle;
	          }

	          return angle;
	        }

	        if (angleLargeThanPI) {
	          return angle;
	        }
	        return Math.PI * 2 - angle;
	      };
	      vec2.vertical = function (out, v, flag) {
	        if (flag) {
	          out[0] = v[1];
	          out[1] = -1 * v[0];
	        } else {
	          out[0] = -1 * v[1];
	          out[1] = v[0];
	        }

	        return out;
	      };

	      mat3.translate = function (out, a, v) {
	        var transMat = new Array(9);
	        mat3.fromTranslation(transMat, v);
	        return mat3.multiply(out, transMat, a);
	      };

	      mat3.rotate = function (out, a, rad) {
	        var rotateMat = new Array(9);
	        mat3.fromRotation(rotateMat, rad);
	        return mat3.multiply(out, rotateMat, a);
	      };

	      mat3.scale = function (out, a, v) {
	        var scaleMat = new Array(9);
	        mat3.fromScaling(scaleMat, v);
	        return mat3.multiply(out, scaleMat, a);
	      };

	      module.exports = {
	        mat3: mat3,
	        vec2: vec2,
	        vec3: vec3,
	        transform: function transform(m, ts) {
	          m = CommonUtil.clone(m);
	          CommonUtil.each(ts, function (t) {
	            switch (t[0]) {
	              case 't':
	                mat3.translate(m, m, [t[1], t[2]]);
	                break;
	              case 's':
	                mat3.scale(m, m, [t[1], t[2]]);
	                break;
	              case 'r':
	                mat3.rotate(m, m, t[1]);
	                break;
	              case 'm':
	                mat3.multiply(m, m, t[1]);
	                break;
	              default:
	                return false;
	            }
	          });
	          return m;
	        }
	      };

	      /***/
	    },
	    /* 4 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var freeGlobal = __webpack_require__(56);

	      /** Detect free variable `self`. */
	      var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	      /** Used as a reference to the global object. */
	      var root = freeGlobal || freeSelf || Function('return this')();

	      module.exports = root;

	      /***/
	    },
	    /* 5 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is object-like. A value is object-like if it's not `null`
	       * and has a `typeof` result of "object".
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	       * @example
	       *
	       * _.isObjectLike({});
	       * // => true
	       *
	       * _.isObjectLike([1, 2, 3]);
	       * // => true
	       *
	       * _.isObjectLike(_.noop);
	       * // => false
	       *
	       * _.isObjectLike(null);
	       * // => false
	       */
	      function isObjectLike(value) {
	        return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	      }

	      module.exports = isObjectLike;

	      /***/
	    },
	    /* 6 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is classified as an `Array` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	       * @example
	       *
	       * _.isArray([1, 2, 3]);
	       * // => true
	       *
	       * _.isArray(document.body.children);
	       * // => false
	       *
	       * _.isArray('abc');
	       * // => false
	       *
	       * _.isArray(_.noop);
	       * // => false
	       */
	      var isArray = Array.isArray;

	      module.exports = isArray;

	      /***/
	    },
	    /* 7 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          getRawTag = __webpack_require__(116),
	          objectToString = __webpack_require__(117);

	      /** `Object#toString` result references. */
	      var nullTag = '[object Null]',
	          undefinedTag = '[object Undefined]';

	      /** Built-in value references. */
	      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	      /**
	       * The base implementation of `getTag` without fallbacks for buggy environments.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the `toStringTag`.
	       */
	      function baseGetTag(value) {
	        if (value == null) {
	          return value === undefined ? undefinedTag : nullTag;
	        }
	        return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	      }

	      module.exports = baseGetTag;

	      /***/
	    },
	    /* 8 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is the
	       * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	       * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	       * @example
	       *
	       * _.isObject({});
	       * // => true
	       *
	       * _.isObject([1, 2, 3]);
	       * // => true
	       *
	       * _.isObject(_.noop);
	       * // => true
	       *
	       * _.isObject(null);
	       * // => false
	       */
	      function isObject(value) {
	        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	        return value != null && (type == 'object' || type == 'function');
	      }

	      module.exports = isObject;

	      /***/
	    },
	    /* 9 */
	    /***/function (module, exports, __webpack_require__) {

	      var isFunction = __webpack_require__(21),
	          isLength = __webpack_require__(61);

	      /**
	       * Checks if `value` is array-like. A value is considered array-like if it's
	       * not a function and has a `value.length` that's an integer greater than or
	       * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	       * @example
	       *
	       * _.isArrayLike([1, 2, 3]);
	       * // => true
	       *
	       * _.isArrayLike(document.body.children);
	       * // => true
	       *
	       * _.isArrayLike('abc');
	       * // => true
	       *
	       * _.isArrayLike(_.noop);
	       * // => false
	       */
	      function isArrayLike(value) {
	        return value != null && isLength(value.length) && !isFunction(value);
	      }

	      module.exports = isArrayLike;

	      /***/
	    },
	    /* 10 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsNative = __webpack_require__(124),
	          getValue = __webpack_require__(127);

	      /**
	       * Gets the native function at `key` of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {string} key The key of the method to get.
	       * @returns {*} Returns the function if it's native, else `undefined`.
	       */
	      function getNative(object, key) {
	        var value = getValue(object, key);
	        return baseIsNative(value) ? value : undefined;
	      }

	      module.exports = getNative;

	      /***/
	    },
	    /* 11 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Built-in value references. */
	      var _Symbol = root.Symbol;

	      module.exports = _Symbol;

	      /***/
	    },
	    /* 12 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignValue = __webpack_require__(37),
	          baseAssignValue = __webpack_require__(38);

	      /**
	       * Copies properties of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy properties from.
	       * @param {Array} props The property identifiers to copy.
	       * @param {Object} [object={}] The object to copy properties to.
	       * @param {Function} [customizer] The function to customize copied values.
	       * @returns {Object} Returns `object`.
	       */
	      function copyObject(source, props, object, customizer) {
	        var isNew = !object;
	        object || (object = {});

	        var index = -1,
	            length = props.length;

	        while (++index < length) {
	          var key = props[index];

	          var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	          if (newValue === undefined) {
	            newValue = source[key];
	          }
	          if (isNew) {
	            baseAssignValue(object, key, newValue);
	          } else {
	            assignValue(object, key, newValue);
	          }
	        }
	        return object;
	      }

	      module.exports = copyObject;

	      /***/
	    },
	    /* 13 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayLikeKeys = __webpack_require__(67),
	          baseKeys = __webpack_require__(58),
	          isArrayLike = __webpack_require__(9);

	      /**
	       * Creates an array of the own enumerable property names of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects. See the
	       * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	       * for more details.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.keys(new Foo);
	       * // => ['a', 'b'] (iteration order is not guaranteed)
	       *
	       * _.keys('hi');
	       * // => ['0', '1']
	       */
	      function keys(object) {
	        return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	      }

	      module.exports = keys;

	      /***/
	    },
	    /* 14 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(49);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "a", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "f", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(250);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "e", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(251);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"];
	      });

	      /***/
	    },
	    /* 15 */
	    /***/function (module, exports) {

	      var PI = Math.PI;
	      var sin = Math.sin;
	      var cos = Math.cos;
	      var atan2 = Math.atan2;
	      var DEFAULT_LENGTH = 10;
	      var DEFAULT_ANGLE = PI / 3;

	      function _addArrow(ctx, attrs, x1, y1, x2, y2) {
	        var leftX = void 0;
	        var leftY = void 0;
	        var rightX = void 0;
	        var rightY = void 0;
	        var offsetX = void 0;
	        var offsetY = void 0;
	        var angle = void 0;

	        if (!attrs.fill) {
	          // 闭合的不绘制箭头
	          var arrowLength = attrs.arrowLength || DEFAULT_LENGTH;
	          var arrowAngle = attrs.arrowAngle ? attrs.arrowAngle * PI / 180 : DEFAULT_ANGLE; // 转换为弧度

	          // Calculate angle
	          angle = atan2(y2 - y1, x2 - x1);
	          // Adjust angle correctly
	          angle -= PI;
	          // Calculate offset to place arrow at edge of path
	          offsetX = attrs.lineWidth * cos(angle);
	          offsetY = attrs.lineWidth * sin(angle);

	          // Calculate coordinates for left half of arrow
	          leftX = x2 + arrowLength * cos(angle + arrowAngle / 2);
	          leftY = y2 + arrowLength * sin(angle + arrowAngle / 2);
	          // Calculate coordinates for right half of arrow
	          rightX = x2 + arrowLength * cos(angle - arrowAngle / 2);
	          rightY = y2 + arrowLength * sin(angle - arrowAngle / 2);

	          // Draw left half of arrow
	          ctx.moveTo(leftX - offsetX, leftY - offsetY);
	          ctx.lineTo(x2 - offsetX, y2 - offsetY);
	          // Draw right half of arrow
	          ctx.lineTo(rightX - offsetX, rightY - offsetY);

	          // Visually connect arrow to path
	          ctx.moveTo(x2 - offsetX, y2 - offsetY);
	          ctx.lineTo(x2 + offsetX, y2 + offsetY);
	          // Move back to end of path
	          ctx.moveTo(x2, y2);
	        }
	      }

	      module.exports = {
	        addStartArrow: function addStartArrow(ctx, attrs, x1, y1, x2, y2) {
	          if (attrs.startArrow) {
	            _addArrow(ctx, attrs, x1, y1, x2, y2);
	          }
	        },
	        addEndArrow: function addEndArrow(ctx, attrs, x1, y1, x2, y2) {
	          if (attrs.endArrow) {
	            _addArrow(ctx, attrs, x1, y1, x2, y2);
	          }
	        }
	      };

	      /***/
	    },
	    /* 16 */
	    /***/function (module, exports, __webpack_require__) {

	      var PRECISION = 0.00001; // 常量，据的精度，小于这个精度认为是0
	      var RADIAN = Math.PI / 180;
	      var DEGREE = 180 / Math.PI;

	      module.exports = {
	        isFunction: __webpack_require__(21),
	        isObject: __webpack_require__(8),
	        isBoolean: __webpack_require__(118),
	        isNil: __webpack_require__(119),
	        isString: __webpack_require__(57),
	        isArray: __webpack_require__(6),
	        isNumber: __webpack_require__(120),
	        isEmpty: __webpack_require__(121), // isBlank
	        uniqueId: __webpack_require__(135),
	        clone: __webpack_require__(138),
	        assign: __webpack_require__(181), // simpleMix
	        merge: __webpack_require__(189), // mix
	        upperFirst: __webpack_require__(196), // ucfirst
	        remove: __webpack_require__(202),
	        each: __webpack_require__(210),
	        isEqual: __webpack_require__(215),
	        toArray: __webpack_require__(225),
	        extend: function extend(subclass, superclass, overrides, staticOverrides) {
	          // 如果只提供父类构造函数，则自动生成子类构造函数
	          if (!this.isFunction(superclass)) {
	            overrides = superclass;
	            superclass = subclass;
	            subclass = function subclass() {};
	          }

	          var create = Object.create ? function (proto, c) {
	            return Object.create(proto, {
	              constructor: {
	                value: c
	              }
	            });
	          } : function (proto, c) {
	            function F() {}

	            F.prototype = proto;
	            var o = new F();
	            o.constructor = c;
	            return o;
	          };

	          var superObj = create(superclass.prototype, subclass); // new superclass(),//实例化父类作为子类的prototype
	          subclass.prototype = this.merge(superObj, subclass.prototype); // 指定子类的prototype
	          subclass.superclass = create(superclass.prototype, superclass);
	          this.merge(superObj, overrides);
	          this.merge(subclass, staticOverrides);
	          return subclass;
	        },
	        augment: function augment(c) {
	          var args = this.toArray(arguments);
	          for (var i = 1; i < args.length; i++) {
	            var obj = args[i];
	            if (this.isFunction(obj)) {
	              obj = obj.prototype;
	            }
	            this.merge(c.prototype, obj);
	          }
	        },

	        /**
	         * 判断两个数是否相等
	         * @param {Number} a 数
	         * @param {Number} b 数
	         * @return {Boolean} 是否相等
	         **/
	        isNumberEqual: function isNumberEqual(a, b) {
	          return Math.abs(a - b) < PRECISION;
	        },

	        /**
	         * 获取角度对应的弧度
	         * @param {Number} degree 角度
	         * @return {Number} 弧度
	         **/
	        toRadian: function toRadian(degree) {
	          return RADIAN * degree;
	        },

	        /**
	         * 获取弧度对应的角度
	         * @param {Number} radian 弧度
	         * @return {Number} 角度
	         **/
	        toDegree: function toDegree(radian) {
	          return DEGREE * radian;
	        },

	        /**
	         * 广义取模运算
	         * @param {Number} n 被取模的值
	         * @param {Number} m 模
	         * @return {Number} 返回n 被 m 取模的结果
	         */
	        mod: function mod(n, m) {
	          return (n % m + m) % m;
	        },

	        /**
	         * 把a夹在min，max中间, 低于min的返回min，高于max的返回max，否则返回自身
	         * @param {Number} a 数
	         * @param {Number} min 下限
	         * @param {Number} max 上限
	         * @return {Number} 返回结果值
	         **/
	        clamp: function clamp(a, min, max) {
	          if (a < min) {
	            return min;
	          } else if (a > max) {
	            return max;
	          }

	          return a;
	        }
	      };

	      /***/
	    },
	    /* 17 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /**
	       * Checks if `value` is likely a prototype object.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	       */
	      function isPrototype(value) {
	        var Ctor = value && value.constructor,
	            proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	        return value === proto;
	      }

	      module.exports = isPrototype;

	      /***/
	    },
	    /* 18 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var root = __webpack_require__(4),
	            stubFalse = __webpack_require__(132);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Built-in value references. */
	        var Buffer = moduleExports ? root.Buffer : undefined;

	        /* Built-in method references for those with the same name as other `lodash` methods. */
	        var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	        /**
	         * Checks if `value` is a buffer.
	         *
	         * @static
	         * @memberOf _
	         * @since 4.3.0
	         * @category Lang
	         * @param {*} value The value to check.
	         * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	         * @example
	         *
	         * _.isBuffer(new Buffer(2));
	         * // => true
	         *
	         * _.isBuffer(new Uint8Array(2));
	         * // => false
	         */
	        var isBuffer = nativeIsBuffer || stubFalse;

	        module.exports = isBuffer;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 19 */
	    /***/function (module, exports) {

	      /**
	       * Performs a
	       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * comparison between two values to determine if they are equivalent.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       * var other = { 'a': 1 };
	       *
	       * _.eq(object, object);
	       * // => true
	       *
	       * _.eq(object, other);
	       * // => false
	       *
	       * _.eq('a', 'a');
	       * // => true
	       *
	       * _.eq('a', Object('a'));
	       * // => false
	       *
	       * _.eq(NaN, NaN);
	       * // => true
	       */
	      function eq(value, other) {
	        return value === other || value !== value && other !== other;
	      }

	      module.exports = eq;

	      /***/
	    },
	    /* 20 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["c"] = hue;
	      /* harmony export (immutable) */__webpack_exports__["b"] = gamma;
	      /* harmony export (immutable) */__webpack_exports__["a"] = nogamma;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(93);

	      function linear(a, d) {
	        return function (t) {
	          return a + t * d;
	        };
	      }

	      function exponential(a, b, y) {
	        return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	          return Math.pow(a + t * b, y);
	        };
	      }

	      function hue(a, b) {
	        var d = b - a;
	        return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	      }

	      function gamma(y) {
	        return (y = +y) === 1 ? nogamma : function (a, b) {
	          return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	        };
	      }

	      function nogamma(a, b) {
	        var d = b - a;
	        return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	      }

	      /***/
	    },
	    /* 21 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObject = __webpack_require__(8);

	      /** `Object#toString` result references. */
	      var asyncTag = '[object AsyncFunction]',
	          funcTag = '[object Function]',
	          genTag = '[object GeneratorFunction]',
	          proxyTag = '[object Proxy]';

	      /**
	       * Checks if `value` is classified as a `Function` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	       * @example
	       *
	       * _.isFunction(_);
	       * // => true
	       *
	       * _.isFunction(/abc/);
	       * // => false
	       */
	      function isFunction(value) {
	        if (!isObject(value)) {
	          return false;
	        }
	        // The use of `Object#toString` avoids issues with the `typeof` operator
	        // in Safari 9 which returns 'object' for typed arrays and other constructors.
	        var tag = baseGetTag(value);
	        return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	      }

	      module.exports = isFunction;

	      /***/
	    },
	    /* 22 */
	    /***/function (module, exports, __webpack_require__) {

	      var DataView = __webpack_require__(123),
	          Map = __webpack_require__(32),
	          Promise = __webpack_require__(128),
	          Set = __webpack_require__(129),
	          WeakMap = __webpack_require__(130),
	          baseGetTag = __webpack_require__(7),
	          toSource = __webpack_require__(60);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          objectTag = '[object Object]',
	          promiseTag = '[object Promise]',
	          setTag = '[object Set]',
	          weakMapTag = '[object WeakMap]';

	      var dataViewTag = '[object DataView]';

	      /** Used to detect maps, sets, and weakmaps. */
	      var dataViewCtorString = toSource(DataView),
	          mapCtorString = toSource(Map),
	          promiseCtorString = toSource(Promise),
	          setCtorString = toSource(Set),
	          weakMapCtorString = toSource(WeakMap);

	      /**
	       * Gets the `toStringTag` of `value`.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the `toStringTag`.
	       */
	      var getTag = baseGetTag;

	      // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	      if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	        getTag = function getTag(value) {
	          var result = baseGetTag(value),
	              Ctor = result == objectTag ? value.constructor : undefined,
	              ctorString = Ctor ? toSource(Ctor) : '';

	          if (ctorString) {
	            switch (ctorString) {
	              case dataViewCtorString:
	                return dataViewTag;
	              case mapCtorString:
	                return mapTag;
	              case promiseCtorString:
	                return promiseTag;
	              case setCtorString:
	                return setTag;
	              case weakMapCtorString:
	                return weakMapTag;
	            }
	          }
	          return result;
	        };
	      }

	      module.exports = getTag;

	      /***/
	    },
	    /* 23 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsTypedArray = __webpack_require__(133),
	          baseUnary = __webpack_require__(62),
	          nodeUtil = __webpack_require__(134);

	      /* Node.js helper references. */
	      var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	      /**
	       * Checks if `value` is classified as a typed array.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	       * @example
	       *
	       * _.isTypedArray(new Uint8Array);
	       * // => true
	       *
	       * _.isTypedArray([]);
	       * // => false
	       */
	      var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	      module.exports = isTypedArray;

	      /***/
	    },
	    /* 24 */
	    /***/function (module, exports, __webpack_require__) {

	      var listCacheClear = __webpack_require__(140),
	          listCacheDelete = __webpack_require__(141),
	          listCacheGet = __webpack_require__(142),
	          listCacheHas = __webpack_require__(143),
	          listCacheSet = __webpack_require__(144);

	      /**
	       * Creates an list cache object.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function ListCache(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `ListCache`.
	      ListCache.prototype.clear = listCacheClear;
	      ListCache.prototype['delete'] = listCacheDelete;
	      ListCache.prototype.get = listCacheGet;
	      ListCache.prototype.has = listCacheHas;
	      ListCache.prototype.set = listCacheSet;

	      module.exports = ListCache;

	      /***/
	    },
	    /* 25 */
	    /***/function (module, exports, __webpack_require__) {

	      var eq = __webpack_require__(19);

	      /**
	       * Gets the index at which the `key` is found in `array` of key-value pairs.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} key The key to search for.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function assocIndexOf(array, key) {
	        var length = array.length;
	        while (length--) {
	          if (eq(array[length][0], key)) {
	            return length;
	          }
	        }
	        return -1;
	      }

	      module.exports = assocIndexOf;

	      /***/
	    },
	    /* 26 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10);

	      /* Built-in method references that are verified to be native. */
	      var nativeCreate = getNative(Object, 'create');

	      module.exports = nativeCreate;

	      /***/
	    },
	    /* 27 */
	    /***/function (module, exports, __webpack_require__) {

	      var isKeyable = __webpack_require__(158);

	      /**
	       * Gets the data for `map`.
	       *
	       * @private
	       * @param {Object} map The map to query.
	       * @param {string} key The reference key.
	       * @returns {*} Returns the map data.
	       */
	      function getMapData(map, key) {
	        var data = map.__data__;
	        return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	      }

	      module.exports = getMapData;

	      /***/
	    },
	    /* 28 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayLikeKeys = __webpack_require__(67),
	          baseKeysIn = __webpack_require__(165),
	          isArrayLike = __webpack_require__(9);

	      /**
	       * Creates an array of the own and inherited enumerable property names of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.keysIn(new Foo);
	       * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	       */
	      function keysIn(object) {
	        return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	      }

	      module.exports = keysIn;

	      /***/
	    },
	    /* 29 */
	    /***/function (module, exports) {

	      /**
	       * Copies the values of `source` to `array`.
	       *
	       * @private
	       * @param {Array} source The array to copy values from.
	       * @param {Array} [array=[]] The array to copy values to.
	       * @returns {Array} Returns `array`.
	       */
	      function copyArray(source, array) {
	        var index = -1,
	            length = source.length;

	        array || (array = Array(length));
	        while (++index < length) {
	          array[index] = source[index];
	        }
	        return array;
	      }

	      module.exports = copyArray;

	      /***/
	    },
	    /* 30 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        return a = +a, b -= a, function (t) {
	          return a + b * t;
	        };
	      };

	      /***/
	    },
	    /* 31 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function cubicAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return onet * onet * (onet * p3 + 3 * t * p2) + t * t * (t * p0 + 3 * onet * p1);
	      }

	      function cubicDerivativeAt(p0, p1, p2, p3, t) {
	        var onet = 1 - t;
	        return 3 * (((p1 - p0) * onet + 2 * (p2 - p1) * t) * onet + (p3 - p2) * t * t);
	      }

	      function cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, out) {
	        var t = void 0;
	        var interval = 0.005;
	        var d = Infinity;
	        var _t = void 0;
	        var v1 = void 0;
	        var d1 = void 0;
	        var d2 = void 0;
	        var v2 = void 0;
	        var prev = void 0;
	        var next = void 0;
	        var EPSILON = 0.0001;
	        var v0 = [x, y];

	        for (_t = 0; _t < 1; _t += 0.05) {
	          v1 = [cubicAt(x1, x2, x3, x4, _t), cubicAt(y1, y2, y3, y4, _t)];

	          d1 = vec2.squaredDistance(v0, v1);
	          if (d1 < d) {
	            t = _t;
	            d = d1;
	          }
	        }
	        d = Infinity;

	        for (var i = 0; i < 32; i++) {
	          if (interval < EPSILON) {
	            break;
	          }

	          prev = t - interval;
	          next = t + interval;

	          v1 = [cubicAt(x1, x2, x3, x4, prev), cubicAt(y1, y2, y3, y4, prev)];

	          d1 = vec2.squaredDistance(v0, v1);

	          if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	          } else {
	            v2 = [cubicAt(x1, x2, x3, x4, next), cubicAt(y1, y2, y3, y4, next)];

	            d2 = vec2.squaredDistance(v0, v2);

	            if (next <= 1 && d2 < d) {
	              t = next;
	              d = d2;
	            } else {
	              interval *= 0.5;
	            }
	          }
	        }

	        if (out) {
	          out.x = cubicAt(x1, x2, x3, x4, t);
	          out.y = cubicAt(y1, y2, y3, y4, t);
	        }

	        return Math.sqrt(d);
	      }

	      function cubicExtrema(p0, p1, p2, p3) {
	        var a = 3 * p0 - 9 * p1 + 9 * p2 - 3 * p3;
	        var b = 6 * p1 - 12 * p2 + 6 * p3;
	        var c = 3 * p2 - 3 * p3;
	        var extrema = [];
	        var t1 = void 0;
	        var t2 = void 0;
	        var discSqrt = void 0;

	        if (Util.isNumberEqual(a, 0)) {
	          if (!Util.isNumberEqual(b, 0)) {
	            t1 = -c / b;
	            if (t1 >= 0 && t1 <= 1) {
	              extrema.push(t1);
	            }
	          }
	        } else {
	          var disc = b * b - 4 * a * c;
	          if (Util.isNumberEqual(disc, 0)) {
	            extrema.push(-b / (2 * a));
	          } else if (disc > 0) {
	            discSqrt = Math.sqrt(disc);
	            t1 = (-b + discSqrt) / (2 * a);
	            t2 = (-b - discSqrt) / (2 * a);
	            if (t1 >= 0 && t1 <= 1) {
	              extrema.push(t1);
	            }
	            if (t2 >= 0 && t2 <= 1) {
	              extrema.push(t2);
	            }
	          }
	        }
	        return extrema;
	      }

	      function base3(t, p1, p2, p3, p4) {
	        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
	        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	        return t * t2 - 3 * p1 + 3 * p2;
	      }

	      function cubiclLen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	        if (Util.isNil(z)) {
	          z = 1;
	        }
	        z = z > 1 ? 1 : z < 0 ? 0 : z;
	        var z2 = z / 2;
	        var n = 12;
	        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
	        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
	        var sum = 0;
	        for (var i = 0; i < n; i++) {
	          var ct = z2 * Tvalues[i] + z2;
	          var xbase = base3(ct, x1, x2, x3, x4);
	          var ybase = base3(ct, y1, y2, y3, y4);
	          var comb = xbase * xbase + ybase * ybase;
	          sum += Cvalues[i] * Math.sqrt(comb);
	        }
	        return z2 * sum;
	      }

	      module.exports = {
	        at: cubicAt,
	        derivativeAt: cubicDerivativeAt,
	        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y) {
	          var rst = {};
	          cubicProjectPoint(x1, y1, x2, y2, x3, y3, x4, y4, x, y, rst);
	          return rst;
	        },

	        pointDistance: cubicProjectPoint,
	        extrema: cubicExtrema,
	        len: cubiclLen
	      };

	      /***/
	    },
	    /* 32 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Map = getNative(root, 'Map');

	      module.exports = Map;

	      /***/
	    },
	    /* 33 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsArguments = __webpack_require__(131),
	          isObjectLike = __webpack_require__(5);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Built-in value references. */
	      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	      /**
	       * Checks if `value` is likely an `arguments` object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	       *  else `false`.
	       * @example
	       *
	       * _.isArguments(function() { return arguments; }());
	       * // => true
	       *
	       * _.isArguments([1, 2, 3]);
	       * // => false
	       */
	      var isArguments = baseIsArguments(function () {
	        return arguments;
	      }()) ? baseIsArguments : function (value) {
	        return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	      };

	      module.exports = isArguments;

	      /***/
	    },
	    /* 34 */
	    /***/function (module, exports) {

	      module.exports = function (module) {
	        if (!module.webpackPolyfill) {
	          module.deprecate = function () {};
	          module.paths = [];
	          // module.parent = undefined by default
	          if (!module.children) module.children = [];
	          Object.defineProperty(module, "loaded", {
	            enumerable: true,
	            get: function get() {
	              return module.l;
	            }
	          });
	          Object.defineProperty(module, "id", {
	            enumerable: true,
	            get: function get() {
	              return module.i;
	            }
	          });
	          module.webpackPolyfill = 1;
	        }
	        return module;
	      };

	      /***/
	    },
	    /* 35 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.map` for arrays without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns the new mapped array.
	       */
	      function arrayMap(array, iteratee) {
	        var index = -1,
	            length = array == null ? 0 : array.length,
	            result = Array(length);

	        while (++index < length) {
	          result[index] = iteratee(array[index], index, array);
	        }
	        return result;
	      }

	      module.exports = arrayMap;

	      /***/
	    },
	    /* 36 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24),
	          stackClear = __webpack_require__(145),
	          stackDelete = __webpack_require__(146),
	          stackGet = __webpack_require__(147),
	          stackHas = __webpack_require__(148),
	          stackSet = __webpack_require__(149);

	      /**
	       * Creates a stack cache object to store key-value pairs.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function Stack(entries) {
	        var data = this.__data__ = new ListCache(entries);
	        this.size = data.size;
	      }

	      // Add methods to `Stack`.
	      Stack.prototype.clear = stackClear;
	      Stack.prototype['delete'] = stackDelete;
	      Stack.prototype.get = stackGet;
	      Stack.prototype.has = stackHas;
	      Stack.prototype.set = stackSet;

	      module.exports = Stack;

	      /***/
	    },
	    /* 37 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseAssignValue = __webpack_require__(38),
	          eq = __webpack_require__(19);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Assigns `value` to `key` of `object` if the existing value is not equivalent
	       * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * for equality comparisons.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function assignValue(object, key, value) {
	        var objValue = object[key];
	        if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	          baseAssignValue(object, key, value);
	        }
	      }

	      module.exports = assignValue;

	      /***/
	    },
	    /* 38 */
	    /***/function (module, exports, __webpack_require__) {

	      var defineProperty = __webpack_require__(66);

	      /**
	       * The base implementation of `assignValue` and `assignMergeValue` without
	       * value checks.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function baseAssignValue(object, key, value) {
	        if (key == '__proto__' && defineProperty) {
	          defineProperty(object, key, {
	            'configurable': true,
	            'enumerable': true,
	            'value': value,
	            'writable': true
	          });
	        } else {
	          object[key] = value;
	        }
	      }

	      module.exports = baseAssignValue;

	      /***/
	    },
	    /* 39 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayFilter = __webpack_require__(168),
	          stubArray = __webpack_require__(70);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Built-in value references. */
	      var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeGetSymbols = Object.getOwnPropertySymbols;

	      /**
	       * Creates an array of the own enumerable symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of symbols.
	       */
	      var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	        if (object == null) {
	          return [];
	        }
	        object = Object(object);
	        return arrayFilter(nativeGetSymbols(object), function (symbol) {
	          return propertyIsEnumerable.call(object, symbol);
	        });
	      };

	      module.exports = getSymbols;

	      /***/
	    },
	    /* 40 */
	    /***/function (module, exports, __webpack_require__) {

	      var overArg = __webpack_require__(59);

	      /** Built-in value references. */
	      var getPrototype = overArg(Object.getPrototypeOf, Object);

	      module.exports = getPrototype;

	      /***/
	    },
	    /* 41 */
	    /***/function (module, exports, __webpack_require__) {

	      var Uint8Array = __webpack_require__(75);

	      /**
	       * Creates a clone of `arrayBuffer`.
	       *
	       * @private
	       * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	       * @returns {ArrayBuffer} Returns the cloned array buffer.
	       */
	      function cloneArrayBuffer(arrayBuffer) {
	        var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	        new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	        return result;
	      }

	      module.exports = cloneArrayBuffer;

	      /***/
	    },
	    /* 42 */
	    /***/function (module, exports) {

	      /**
	       * Converts `map` to its key-value pairs.
	       *
	       * @private
	       * @param {Object} map The map to convert.
	       * @returns {Array} Returns the key-value pairs.
	       */
	      function mapToArray(map) {
	        var index = -1,
	            result = Array(map.size);

	        map.forEach(function (value, key) {
	          result[++index] = [key, value];
	        });
	        return result;
	      }

	      module.exports = mapToArray;

	      /***/
	    },
	    /* 43 */
	    /***/function (module, exports) {

	      /**
	       * Converts `set` to an array of its values.
	       *
	       * @private
	       * @param {Object} set The set to convert.
	       * @returns {Array} Returns the values.
	       */
	      function setToArray(set) {
	        var index = -1,
	            result = Array(set.size);

	        set.forEach(function (value) {
	          result[++index] = value;
	        });
	        return result;
	      }

	      module.exports = setToArray;

	      /***/
	    },
	    /* 44 */
	    /***/function (module, exports) {

	      /**
	       * This method returns the first argument it receives.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Util
	       * @param {*} value Any value.
	       * @returns {*} Returns `value`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       *
	       * console.log(_.identity(object) === object);
	       * // => true
	       */
	      function identity(value) {
	        return value;
	      }

	      module.exports = identity;

	      /***/
	    },
	    /* 45 */
	    /***/function (module, exports) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      /**
	       * @class Common utilities
	       * @name glMatrix
	       */
	      var glMatrix = {};

	      // Configuration Constants
	      glMatrix.EPSILON = 0.000001;
	      glMatrix.ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
	      glMatrix.RANDOM = Math.random;
	      glMatrix.ENABLE_SIMD = false;

	      // Capability detection
	      glMatrix.SIMD_AVAILABLE = glMatrix.ARRAY_TYPE === Float32Array && 'SIMD' in this;
	      glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;

	      /**
	       * Sets the type of array used when creating new vectors and matrices
	       *
	       * @param {Type} type Array type, such as Float32Array or Array
	       */
	      glMatrix.setMatrixArrayType = function (type) {
	        glMatrix.ARRAY_TYPE = type;
	      };

	      var degree = Math.PI / 180;

	      /**
	      * Convert Degree To Radian
	      *
	      * @param {Number} Angle in Degrees
	      */
	      glMatrix.toRadian = function (a) {
	        return a * degree;
	      };

	      /**
	       * Tests whether or not the arguments have approximately the same value, within an absolute
	       * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less 
	       * than or equal to 1.0, and a relative tolerance is used for larger values)
	       * 
	       * @param {Number} a The first number to test.
	       * @param {Number} b The second number to test.
	       * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
	       */
	      glMatrix.equals = function (a, b) {
	        return Math.abs(a - b) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a), Math.abs(b));
	      };

	      module.exports = glMatrix;

	      /***/
	    },
	    /* 46 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var Util = __webpack_require__(16);
	      var SPACES = '\t\n\x0B\f\r \xA0\u1680\u180E\u2000\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u2028\u2029';
	      var PATH_COMMAND = new RegExp('([a-z])[' + SPACES + ',]*((-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?[' + SPACES + ']*,?[' + SPACES + ']*)+)', 'ig');
	      var PATH_VALUES = new RegExp('(-?\\d*\\.?\\d*(?:e[\\-+]?\\d+)?)[' + SPACES + ']*,?[' + SPACES + ']*', 'ig');

	      // Parses given path string into an array of arrays of path segments
	      var parsePathString = function parsePathString(pathString) {
	        if (!pathString) {
	          return null;
	        }

	        if ((typeof pathString === 'undefined' ? 'undefined' : _typeof(pathString)) === _typeof([])) {
	          return pathString;
	        }
	        var paramCounts = {
	          a: 7,
	          c: 6,
	          o: 2,
	          h: 1,
	          l: 2,
	          m: 2,
	          r: 4,
	          q: 4,
	          s: 4,
	          t: 2,
	          v: 1,
	          u: 3,
	          z: 0
	        };
	        var data = [];

	        String(pathString).replace(PATH_COMMAND, function (a, b, c) {
	          var params = [];
	          var name = b.toLowerCase();
	          c.replace(PATH_VALUES, function (a, b) {
	            b && params.push(+b);
	          });
	          if (name === 'm' && params.length > 2) {
	            data.push([b].concat(params.splice(0, 2)));
	            name = 'l';
	            b = b === 'm' ? 'l' : 'L';
	          }
	          if (name === 'o' && params.length === 1) {
	            data.push([b, params[0]]);
	          }
	          if (name === 'r') {
	            data.push([b].concat(params));
	          } else {
	            while (params.length >= paramCounts[name]) {
	              data.push([b].concat(params.splice(0, paramCounts[name])));
	              if (!paramCounts[name]) {
	                break;
	              }
	            }
	          }
	        });

	        return data;
	      };

	      // http://schepers.cc/getting-to-the-point
	      var catmullRom2bezier = function catmullRom2bezier(crp, z) {
	        var d = [];
	        for (var i = 0, iLen = crp.length; iLen - 2 * !z > i; i += 2) {
	          var p = [{
	            x: +crp[i - 2],
	            y: +crp[i - 1]
	          }, {
	            x: +crp[i],
	            y: +crp[i + 1]
	          }, {
	            x: +crp[i + 2],
	            y: +crp[i + 3]
	          }, {
	            x: +crp[i + 4],
	            y: +crp[i + 5]
	          }];
	          if (z) {
	            if (!i) {
	              p[0] = {
	                x: +crp[iLen - 2],
	                y: +crp[iLen - 1]
	              };
	            } else if (iLen - 4 === i) {
	              p[3] = {
	                x: +crp[0],
	                y: +crp[1]
	              };
	            } else if (iLen - 2 === i) {
	              p[2] = {
	                x: +crp[0],
	                y: +crp[1]
	              };
	              p[3] = {
	                x: +crp[2],
	                y: +crp[3]
	              };
	            }
	          } else {
	            if (iLen - 4 === i) {
	              p[3] = p[2];
	            } else if (!i) {
	              p[0] = {
	                x: +crp[i],
	                y: +crp[i + 1]
	              };
	            }
	          }
	          d.push(['C', (-p[0].x + 6 * p[1].x + p[2].x) / 6, (-p[0].y + 6 * p[1].y + p[2].y) / 6, (p[1].x + 6 * p[2].x - p[3].x) / 6, (p[1].y + 6 * p[2].y - p[3].y) / 6, p[2].x, p[2].y]);
	        }

	        return d;
	      };

	      var ellipsePath = function ellipsePath(x, y, rx, ry, a) {
	        var res = [];
	        if (a === null && ry === null) {
	          ry = rx;
	        }
	        x = +x;
	        y = +y;
	        rx = +rx;
	        ry = +ry;
	        if (a !== null) {
	          var rad = Math.PI / 180;
	          var x1 = x + rx * Math.cos(-ry * rad);
	          var x2 = x + rx * Math.cos(-a * rad);
	          var y1 = y + rx * Math.sin(-ry * rad);
	          var y2 = y + rx * Math.sin(-a * rad);
	          res = [['M', x1, y1], ['A', rx, rx, 0, +(a - ry > 180), 0, x2, y2]];
	        } else {
	          res = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
	        }
	        return res;
	      };

	      var pathToAbsolute = function pathToAbsolute(pathArray) {
	        pathArray = parsePathString(pathArray);

	        if (!pathArray || !pathArray.length) {
	          return [['M', 0, 0]];
	        }
	        var res = [];
	        var x = 0;
	        var y = 0;
	        var mx = 0;
	        var my = 0;
	        var start = 0;
	        var pa0 = void 0;
	        var dots = void 0;
	        if (pathArray[0][0] === 'M') {
	          x = +pathArray[0][1];
	          y = +pathArray[0][2];
	          mx = x;
	          my = y;
	          start++;
	          res[0] = ['M', x, y];
	        }
	        var crz = pathArray.length === 3 && pathArray[0][0] === 'M' && pathArray[1][0].toUpperCase() === 'R' && pathArray[2][0].toUpperCase() === 'Z';
	        for (var r, pa, i = start, ii = pathArray.length; i < ii; i++) {
	          res.push(r = []);
	          pa = pathArray[i];
	          pa0 = pa[0];
	          if (pa0 !== pa0.toUpperCase()) {
	            r[0] = pa0.toUpperCase();
	            switch (r[0]) {
	              case 'A':
	                r[1] = pa[1];
	                r[2] = pa[2];
	                r[3] = pa[3];
	                r[4] = pa[4];
	                r[5] = pa[5];
	                r[6] = +pa[6] + x;
	                r[7] = +pa[7] + y;
	                break;
	              case 'V':
	                r[1] = +pa[1] + y;
	                break;
	              case 'H':
	                r[1] = +pa[1] + x;
	                break;
	              case 'R':
	                dots = [x, y].concat(pa.slice(1));
	                for (var j = 2, jj = dots.length; j < jj; j++) {
	                  dots[j] = +dots[j] + x;
	                  dots[++j] = +dots[j] + y;
	                }
	                res.pop();
	                res = res.concat(catmullRom2bezier(dots, crz));
	                break;
	              case 'O':
	                res.pop();
	                dots = ellipsePath(x, y, pa[1], pa[2]);
	                dots.push(dots[0]);
	                res = res.concat(dots);
	                break;
	              case 'U':
	                res.pop();
	                res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	                r = ['U'].concat(res[res.length - 1].slice(-2));
	                break;
	              case 'M':
	                mx = +pa[1] + x;
	                my = +pa[2] + y;
	                break; // for lint
	              default:
	                for (var _j = 1, _jj = pa.length; _j < _jj; _j++) {
	                  r[_j] = +pa[_j] + (_j % 2 ? x : y);
	                }
	            }
	          } else if (pa0 === 'R') {
	            dots = [x, y].concat(pa.slice(1));
	            res.pop();
	            res = res.concat(catmullRom2bezier(dots, crz));
	            r = ['R'].concat(pa.slice(-2));
	          } else if (pa0 === 'O') {
	            res.pop();
	            dots = ellipsePath(x, y, pa[1], pa[2]);
	            dots.push(dots[0]);
	            res = res.concat(dots);
	          } else if (pa0 === 'U') {
	            res.pop();
	            res = res.concat(ellipsePath(x, y, pa[1], pa[2], pa[3]));
	            r = ['U'].concat(res[res.length - 1].slice(-2));
	          } else {
	            for (var k = 0, kk = pa.length; k < kk; k++) {
	              r[k] = pa[k];
	            }
	          }
	          pa0 = pa0.toUpperCase();
	          if (pa0 !== 'O') {
	            switch (r[0]) {
	              case 'Z':
	                x = +mx;
	                y = +my;
	                break;
	              case 'H':
	                x = r[1];
	                break;
	              case 'V':
	                y = r[1];
	                break;
	              case 'M':
	                mx = r[r.length - 2];
	                my = r[r.length - 1];
	                break; // for lint
	              default:
	                x = r[r.length - 2];
	                y = r[r.length - 1];
	            }
	          }
	        }

	        return res;
	      };

	      var l2c = function l2c(x1, y1, x2, y2) {
	        return [x1, y1, x2, y2, x2, y2];
	      };

	      var q2c = function q2c(x1, y1, ax, ay, x2, y2) {
	        var _13 = 1 / 3;
	        var _23 = 2 / 3;
	        return [_13 * x1 + _23 * ax, _13 * y1 + _23 * ay, _13 * x2 + _23 * ax, _13 * y2 + _23 * ay, x2, y2];
	      };

	      var a2c = function a2c(x1, y1, rx, ry, angle, large_arc_flag, sweep_flag, x2, y2, recursive) {
	        // for more information of where this math came from visit:
	        // http://www.w3.org/TR/SVG11/implnote.html#ArcImplementationNotes
	        if (rx === ry) {
	          rx += 1;
	        }

	        var _120 = Math.PI * 120 / 180;
	        var rad = Math.PI / 180 * (+angle || 0);
	        var res = [];
	        var xy = void 0;
	        var f1 = void 0;
	        var f2 = void 0;
	        var cx = void 0;
	        var cy = void 0;
	        var rotate = function rotate(x, y, rad) {
	          var X = x * Math.cos(rad) - y * Math.sin(rad);
	          var Y = x * Math.sin(rad) + y * Math.cos(rad);
	          return {
	            x: X,
	            y: Y
	          };
	        };
	        if (!recursive) {
	          xy = rotate(x1, y1, -rad);
	          x1 = xy.x;
	          y1 = xy.y;
	          xy = rotate(x2, y2, -rad);
	          x2 = xy.x;
	          y2 = xy.y;
	          if (x1 === x2 && y1 === y2) {
	            // 若弧的起始点和终点重叠则错开一点
	            x2 += 1;
	            y2 += 1;
	          }
	          // const cos = Math.cos(Math.PI / 180 * angle);
	          // const sin = Math.sin(Math.PI / 180 * angle);
	          var x = (x1 - x2) / 2;
	          var y = (y1 - y2) / 2;
	          var h = x * x / (rx * rx) + y * y / (ry * ry);
	          if (h > 1) {
	            h = Math.sqrt(h);
	            rx = h * rx;
	            ry = h * ry;
	          }
	          var rx2 = rx * rx;
	          var ry2 = ry * ry;
	          var k = (large_arc_flag === sweep_flag ? -1 : 1) * Math.sqrt(Math.abs((rx2 * ry2 - rx2 * y * y - ry2 * x * x) / (rx2 * y * y + ry2 * x * x)));
	          cx = k * rx * y / ry + (x1 + x2) / 2;
	          cy = k * -ry * x / rx + (y1 + y2) / 2;
	          f1 = Math.asin(((y1 - cy) / ry).toFixed(9));
	          f2 = Math.asin(((y2 - cy) / ry).toFixed(9));

	          f1 = x1 < cx ? Math.PI - f1 : f1;
	          f2 = x2 < cx ? Math.PI - f2 : f2;
	          f1 < 0 && (f1 = Math.PI * 2 + f1);
	          f2 < 0 && (f2 = Math.PI * 2 + f2);
	          if (sweep_flag && f1 > f2) {
	            f1 = f1 - Math.PI * 2;
	          }
	          if (!sweep_flag && f2 > f1) {
	            f2 = f2 - Math.PI * 2;
	          }
	        } else {
	          f1 = recursive[0];
	          f2 = recursive[1];
	          cx = recursive[2];
	          cy = recursive[3];
	        }
	        var df = f2 - f1;
	        if (Math.abs(df) > _120) {
	          var f2old = f2;
	          var x2old = x2;
	          var y2old = y2;
	          f2 = f1 + _120 * (sweep_flag && f2 > f1 ? 1 : -1);
	          x2 = cx + rx * Math.cos(f2);
	          y2 = cy + ry * Math.sin(f2);
	          res = a2c(x2, y2, rx, ry, angle, 0, sweep_flag, x2old, y2old, [f2, f2old, cx, cy]);
	        }
	        df = f2 - f1;
	        var c1 = Math.cos(f1);
	        var s1 = Math.sin(f1);
	        var c2 = Math.cos(f2);
	        var s2 = Math.sin(f2);
	        var t = Math.tan(df / 4);
	        var hx = 4 / 3 * rx * t;
	        var hy = 4 / 3 * ry * t;
	        var m1 = [x1, y1];
	        var m2 = [x1 + hx * s1, y1 - hy * c1];
	        var m3 = [x2 + hx * s2, y2 - hy * c2];
	        var m4 = [x2, y2];
	        m2[0] = 2 * m1[0] - m2[0];
	        m2[1] = 2 * m1[1] - m2[1];
	        if (recursive) {
	          return [m2, m3, m4].concat(res);
	        }
	        res = [m2, m3, m4].concat(res).join().split(',');
	        var newres = [];
	        for (var i = 0, ii = res.length; i < ii; i++) {
	          newres[i] = i % 2 ? rotate(res[i - 1], res[i], rad).y : rotate(res[i], res[i + 1], rad).x;
	        }
	        return newres;
	      };

	      var pathTocurve = function pathTocurve(path, path2) {
	        var p = pathToAbsolute(path);
	        var p2 = path2 && pathToAbsolute(path2);
	        var attrs = {
	          x: 0,
	          y: 0,
	          bx: 0,
	          by: 0,
	          X: 0,
	          Y: 0,
	          qx: null,
	          qy: null
	        };
	        var attrs2 = {
	          x: 0,
	          y: 0,
	          bx: 0,
	          by: 0,
	          X: 0,
	          Y: 0,
	          qx: null,
	          qy: null
	        };
	        var pcoms1 = []; // path commands of original path p
	        var pcoms2 = []; // path commands of original path p2
	        var pfirst = ''; // temporary holder for original path command
	        var pcom = ''; // holder for previous path command of original path
	        var ii = void 0;
	        var processPath = function processPath(path, d, pcom) {
	          var nx = void 0,
	              ny = void 0;
	          if (!path) {
	            return ['C', d.x, d.y, d.x, d.y, d.x, d.y];
	          }!(path[0] in {
	            T: 1,
	            Q: 1
	          }) && (d.qx = d.qy = null);
	          switch (path[0]) {
	            case 'M':
	              d.X = path[1];
	              d.Y = path[2];
	              break;
	            case 'A':
	              path = ['C'].concat(a2c.apply(0, [d.x, d.y].concat(path.slice(1))));
	              break;
	            case 'S':
	              if (pcom === 'C' || pcom === 'S') {
	                // In "S" case we have to take into account, if the previous command is C/S.
	                nx = d.x * 2 - d.bx; // And reflect the previous
	                ny = d.y * 2 - d.by; // command's control point relative to the current point.
	              } else {
	                // or some else or nothing
	                nx = d.x;
	                ny = d.y;
	              }
	              path = ['C', nx, ny].concat(path.slice(1));
	              break;
	            case 'T':
	              if (pcom === 'Q' || pcom === 'T') {
	                // In "T" case we have to take into account, if the previous command is Q/T.
	                d.qx = d.x * 2 - d.qx; // And make a reflection similar
	                d.qy = d.y * 2 - d.qy; // to case "S".
	              } else {
	                // or something else or nothing
	                d.qx = d.x;
	                d.qy = d.y;
	              }
	              path = ['C'].concat(q2c(d.x, d.y, d.qx, d.qy, path[1], path[2]));
	              break;
	            case 'Q':
	              d.qx = path[1];
	              d.qy = path[2];
	              path = ['C'].concat(q2c(d.x, d.y, path[1], path[2], path[3], path[4]));
	              break;
	            case 'L':
	              path = ['C'].concat(l2c(d.x, d.y, path[1], path[2]));
	              break;
	            case 'H':
	              path = ['C'].concat(l2c(d.x, d.y, path[1], d.y));
	              break;
	            case 'V':
	              path = ['C'].concat(l2c(d.x, d.y, d.x, path[1]));
	              break;
	            case 'Z':
	              path = ['C'].concat(l2c(d.x, d.y, d.X, d.Y));
	              break;
	            default:
	              break;
	          }
	          return path;
	        };
	        var fixArc = function fixArc(pp, i) {
	          if (pp[i].length > 7) {
	            pp[i].shift();
	            var pi = pp[i];
	            while (pi.length) {
	              pcoms1[i] = 'A'; // if created multiple C:s, their original seg is saved
	              p2 && (pcoms2[i] = 'A'); // the same as above
	              pp.splice(i++, 0, ['C'].concat(pi.splice(0, 6)));
	            }
	            pp.splice(i, 1);
	            ii = Math.max(p.length, p2 && p2.length || 0);
	          }
	        };
	        var fixM = function fixM(path1, path2, a1, a2, i) {
	          if (path1 && path2 && path1[i][0] === 'M' && path2[i][0] !== 'M') {
	            path2.splice(i, 0, ['M', a2.x, a2.y]);
	            a1.bx = 0;
	            a1.by = 0;
	            a1.x = path1[i][1];
	            a1.y = path1[i][2];
	            ii = Math.max(p.length, p2 && p2.length || 0);
	          }
	        };
	        ii = Math.max(p.length, p2 && p2.length || 0);
	        for (var i = 0; i < ii; i++) {

	          p[i] && (pfirst = p[i][0]); // save current path command

	          if (pfirst !== 'C') {
	            // C is not saved yet, because it may be result of conversion
	            pcoms1[i] = pfirst; // Save current path command
	            i && (pcom = pcoms1[i - 1]); // Get previous path command pcom
	          }
	          p[i] = processPath(p[i], attrs, pcom); // Previous path command is inputted to processPath

	          if (pcoms1[i] !== 'A' && pfirst === 'C') pcoms1[i] = 'C'; // A is the only command
	          // which may produce multiple C:s
	          // so we have to make sure that C is also C in original path

	          fixArc(p, i); // fixArc adds also the right amount of A:s to pcoms1

	          if (p2) {
	            // the same procedures is done to p2
	            p2[i] && (pfirst = p2[i][0]);
	            if (pfirst !== 'C') {
	              pcoms2[i] = pfirst;
	              i && (pcom = pcoms2[i - 1]);
	            }
	            p2[i] = processPath(p2[i], attrs2, pcom);

	            if (pcoms2[i] !== 'A' && pfirst === 'C') {
	              pcoms2[i] = 'C';
	            }

	            fixArc(p2, i);
	          }
	          fixM(p, p2, attrs, attrs2, i);
	          fixM(p2, p, attrs2, attrs, i);
	          var seg = p[i];
	          var seg2 = p2 && p2[i];
	          var seglen = seg.length;
	          var seg2len = p2 && seg2.length;
	          attrs.x = seg[seglen - 2];
	          attrs.y = seg[seglen - 1];
	          attrs.bx = parseFloat(seg[seglen - 4]) || attrs.x;
	          attrs.by = parseFloat(seg[seglen - 3]) || attrs.y;
	          attrs2.bx = p2 && (parseFloat(seg2[seg2len - 4]) || attrs2.x);
	          attrs2.by = p2 && (parseFloat(seg2[seg2len - 3]) || attrs2.y);
	          attrs2.x = p2 && seg2[seg2len - 2];
	          attrs2.y = p2 && seg2[seg2len - 1];
	        }

	        return p2 ? [p, p2] : p;
	      };

	      var p2s = /,?([a-z]),?/gi;
	      var parsePathArray = function parsePathArray(path) {
	        return path.join(',').replace(p2s, '$1');
	      };

	      var base3 = function base3(t, p1, p2, p3, p4) {
	        var t1 = -3 * p1 + 9 * p2 - 9 * p3 + 3 * p4;
	        var t2 = t * t1 + 6 * p1 - 12 * p2 + 6 * p3;
	        return t * t2 - 3 * p1 + 3 * p2;
	      };

	      var bezlen = function bezlen(x1, y1, x2, y2, x3, y3, x4, y4, z) {
	        if (z === null) {
	          z = 1;
	        }
	        z = z > 1 ? 1 : z < 0 ? 0 : z;
	        var z2 = z / 2;
	        var n = 12;
	        var Tvalues = [-0.1252, 0.1252, -0.3678, 0.3678, -0.5873, 0.5873, -0.7699, 0.7699, -0.9041, 0.9041, -0.9816, 0.9816];
	        var Cvalues = [0.2491, 0.2491, 0.2335, 0.2335, 0.2032, 0.2032, 0.1601, 0.1601, 0.1069, 0.1069, 0.0472, 0.0472];
	        var sum = 0;
	        for (var i = 0; i < n; i++) {
	          var ct = z2 * Tvalues[i] + z2;
	          var xbase = base3(ct, x1, x2, x3, x4);
	          var ybase = base3(ct, y1, y2, y3, y4);
	          var comb = xbase * xbase + ybase * ybase;
	          sum += Cvalues[i] * Math.sqrt(comb);
	        }
	        return z2 * sum;
	      };

	      var curveDim = function curveDim(x0, y0, x1, y1, x2, y2, x3, y3) {
	        var tvalues = [];
	        var bounds = [[], []];
	        var a = void 0;
	        var b = void 0;
	        var c = void 0;
	        var t = void 0;

	        for (var i = 0; i < 2; ++i) {
	          if (i === 0) {
	            b = 6 * x0 - 12 * x1 + 6 * x2;
	            a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;
	            c = 3 * x1 - 3 * x0;
	          } else {
	            b = 6 * y0 - 12 * y1 + 6 * y2;
	            a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;
	            c = 3 * y1 - 3 * y0;
	          }
	          if (Math.abs(a) < 1e-12) {
	            if (Math.abs(b) < 1e-12) {
	              continue;
	            }
	            t = -c / b;
	            if (t > 0 && t < 1) {
	              tvalues.push(t);
	            }
	            continue;
	          }
	          var b2ac = b * b - 4 * c * a;
	          var sqrtb2ac = Math.sqrt(b2ac);
	          if (b2ac < 0) {
	            continue;
	          }
	          var t1 = (-b + sqrtb2ac) / (2 * a);
	          if (t1 > 0 && t1 < 1) {
	            tvalues.push(t1);
	          }
	          var t2 = (-b - sqrtb2ac) / (2 * a);
	          if (t2 > 0 && t2 < 1) {
	            tvalues.push(t2);
	          }
	        }

	        var j = tvalues.length;
	        var jlen = j;
	        var mt = void 0;
	        while (j--) {
	          t = tvalues[j];
	          mt = 1 - t;
	          bounds[0][j] = mt * mt * mt * x0 + 3 * mt * mt * t * x1 + 3 * mt * t * t * x2 + t * t * t * x3;
	          bounds[1][j] = mt * mt * mt * y0 + 3 * mt * mt * t * y1 + 3 * mt * t * t * y2 + t * t * t * y3;
	        }

	        bounds[0][jlen] = x0;
	        bounds[1][jlen] = y0;
	        bounds[0][jlen + 1] = x3;
	        bounds[1][jlen + 1] = y3;
	        bounds[0].length = bounds[1].length = jlen + 2;

	        return {
	          min: {
	            x: Math.min.apply(0, bounds[0]),
	            y: Math.min.apply(0, bounds[1])
	          },
	          max: {
	            x: Math.max.apply(0, bounds[0]),
	            y: Math.max.apply(0, bounds[1])
	          }
	        };
	      };

	      var intersect = function intersect(x1, y1, x2, y2, x3, y3, x4, y4) {
	        if (Math.max(x1, x2) < Math.min(x3, x4) || Math.min(x1, x2) > Math.max(x3, x4) || Math.max(y1, y2) < Math.min(y3, y4) || Math.min(y1, y2) > Math.max(y3, y4)) {
	          return;
	        }
	        var nx = (x1 * y2 - y1 * x2) * (x3 - x4) - (x1 - x2) * (x3 * y4 - y3 * x4);
	        var ny = (x1 * y2 - y1 * x2) * (y3 - y4) - (y1 - y2) * (x3 * y4 - y3 * x4);
	        var denominator = (x1 - x2) * (y3 - y4) - (y1 - y2) * (x3 - x4);

	        if (!denominator) {
	          return;
	        }
	        var px = nx / denominator;
	        var py = ny / denominator;
	        var px2 = +px.toFixed(2);
	        var py2 = +py.toFixed(2);
	        if (px2 < +Math.min(x1, x2).toFixed(2) || px2 > +Math.max(x1, x2).toFixed(2) || px2 < +Math.min(x3, x4).toFixed(2) || px2 > +Math.max(x3, x4).toFixed(2) || py2 < +Math.min(y1, y2).toFixed(2) || py2 > +Math.max(y1, y2).toFixed(2) || py2 < +Math.min(y3, y4).toFixed(2) || py2 > +Math.max(y3, y4).toFixed(2)) {
	          return;
	        }
	        return {
	          x: px,
	          y: py
	        };
	      };

	      var isPointInsideBBox = function isPointInsideBBox(bbox, x, y) {
	        return x >= bbox.x && x <= bbox.x + bbox.width && y >= bbox.y && y <= bbox.y + bbox.height;
	      };

	      var rectPath = function rectPath(x, y, w, h, r) {
	        if (r) {
	          return [['M', +x + +r, y], ['l', w - r * 2, 0], ['a', r, r, 0, 0, 1, r, r], ['l', 0, h - r * 2], ['a', r, r, 0, 0, 1, -r, r], ['l', r * 2 - w, 0], ['a', r, r, 0, 0, 1, -r, -r], ['l', 0, r * 2 - h], ['a', r, r, 0, 0, 1, r, -r], ['z']];
	        }
	        var res = [['M', x, y], ['l', w, 0], ['l', 0, h], ['l', -w, 0], ['z']];
	        res.parsePathArray = parsePathArray;
	        return res;
	      };

	      var box = function box(x, y, width, height) {
	        if (x === null) {
	          x = y = width = height = 0;
	        }
	        if (y === null) {
	          y = x.y;
	          width = x.width;
	          height = x.height;
	          x = x.x;
	        }
	        return {
	          x: x,
	          y: y,
	          width: width,
	          w: width,
	          height: height,
	          h: height,
	          x2: x + width,
	          y2: y + height,
	          cx: x + width / 2,
	          cy: y + height / 2,
	          r1: Math.min(width, height) / 2,
	          r2: Math.max(width, height) / 2,
	          r0: Math.sqrt(width * width + height * height) / 2,
	          path: rectPath(x, y, width, height),
	          vb: [x, y, width, height].join(' ')
	        };
	      };

	      var isBBoxIntersect = function isBBoxIntersect(bbox1, bbox2) {
	        bbox1 = box(bbox1);
	        bbox2 = box(bbox2);
	        return isPointInsideBBox(bbox2, bbox1.x, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y) || isPointInsideBBox(bbox2, bbox1.x, bbox1.y2) || isPointInsideBBox(bbox2, bbox1.x2, bbox1.y2) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y) || isPointInsideBBox(bbox1, bbox2.x, bbox2.y2) || isPointInsideBBox(bbox1, bbox2.x2, bbox2.y2) || (bbox1.x < bbox2.x2 && bbox1.x > bbox2.x || bbox2.x < bbox1.x2 && bbox2.x > bbox1.x) && (bbox1.y < bbox2.y2 && bbox1.y > bbox2.y || bbox2.y < bbox1.y2 && bbox2.y > bbox1.y);
	      };

	      var bezierBBox = function bezierBBox(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y) {
	        if (!Util.isArray(p1x)) {
	          p1x = [p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y];
	        }
	        var bbox = curveDim.apply(null, p1x);
	        return box(bbox.min.x, bbox.min.y, bbox.max.x - bbox.min.x, bbox.max.y - bbox.min.y);
	      };

	      var findDotsAtSegment = function findDotsAtSegment(p1x, p1y, c1x, c1y, c2x, c2y, p2x, p2y, t) {
	        var t1 = 1 - t;
	        var t13 = Math.pow(t1, 3);
	        var t12 = Math.pow(t1, 2);
	        var t2 = t * t;
	        var t3 = t2 * t;
	        var x = t13 * p1x + t12 * 3 * t * c1x + t1 * 3 * t * t * c2x + t3 * p2x;
	        var y = t13 * p1y + t12 * 3 * t * c1y + t1 * 3 * t * t * c2y + t3 * p2y;
	        var mx = p1x + 2 * t * (c1x - p1x) + t2 * (c2x - 2 * c1x + p1x);
	        var my = p1y + 2 * t * (c1y - p1y) + t2 * (c2y - 2 * c1y + p1y);
	        var nx = c1x + 2 * t * (c2x - c1x) + t2 * (p2x - 2 * c2x + c1x);
	        var ny = c1y + 2 * t * (c2y - c1y) + t2 * (p2y - 2 * c2y + c1y);
	        var ax = t1 * p1x + t * c1x;
	        var ay = t1 * p1y + t * c1y;
	        var cx = t1 * c2x + t * p2x;
	        var cy = t1 * c2y + t * p2y;
	        var alpha = 90 - Math.atan2(mx - nx, my - ny) * 180 / Math.PI;
	        // (mx > nx || my < ny) && (alpha += 180);
	        return {
	          x: x,
	          y: y,
	          m: {
	            x: mx,
	            y: my
	          },
	          n: {
	            x: nx,
	            y: ny
	          },
	          start: {
	            x: ax,
	            y: ay
	          },
	          end: {
	            x: cx,
	            y: cy
	          },
	          alpha: alpha
	        };
	      };

	      var interHelper = function interHelper(bez1, bez2, justCount) {
	        var bbox1 = bezierBBox(bez1);
	        var bbox2 = bezierBBox(bez2);
	        if (!isBBoxIntersect(bbox1, bbox2)) {
	          return justCount ? 0 : [];
	        }
	        var l1 = bezlen.apply(0, bez1);
	        var l2 = bezlen.apply(0, bez2);
	        var n1 = ~~(l1 / 8);
	        var n2 = ~~(l2 / 8);
	        var dots1 = [];
	        var dots2 = [];
	        var xy = {};
	        var res = justCount ? 0 : [];
	        for (var i = 0; i < n1 + 1; i++) {
	          var d = findDotsAtSegment.apply(0, bez1.concat(i / n1));
	          dots1.push({
	            x: d.x,
	            y: d.y,
	            t: i / n1
	          });
	        }
	        for (var _i = 0; _i < n2 + 1; _i++) {
	          var _d = findDotsAtSegment.apply(0, bez2.concat(_i / n2));
	          dots2.push({
	            x: _d.x,
	            y: _d.y,
	            t: _i / n2
	          });
	        }
	        for (var _i2 = 0; _i2 < n1; _i2++) {
	          for (var j = 0; j < n2; j++) {
	            var di = dots1[_i2];
	            var di1 = dots1[_i2 + 1];
	            var dj = dots2[j];
	            var dj1 = dots2[j + 1];
	            var ci = Math.abs(di1.x - di.x) < 0.001 ? 'y' : 'x';
	            var cj = Math.abs(dj1.x - dj.x) < 0.001 ? 'y' : 'x';
	            var is = intersect(di.x, di.y, di1.x, di1.y, dj.x, dj.y, dj1.x, dj1.y);
	            if (is) {
	              if (xy[is.x.toFixed(4)] === is.y.toFixed(4)) {
	                continue;
	              }
	              xy[is.x.toFixed(4)] = is.y.toFixed(4);
	              var t1 = di.t + Math.abs((is[ci] - di[ci]) / (di1[ci] - di[ci])) * (di1.t - di.t);
	              var t2 = dj.t + Math.abs((is[cj] - dj[cj]) / (dj1[cj] - dj[cj])) * (dj1.t - dj.t);
	              if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {
	                if (justCount) {
	                  res++;
	                } else {
	                  res.push({
	                    x: is.x,
	                    y: is.y,
	                    t1: t1,
	                    t2: t2
	                  });
	                }
	              }
	            }
	          }
	        }
	        return res;
	      };

	      var interPathHelper = function interPathHelper(path1, path2, justCount) {
	        path1 = pathTocurve(path1);
	        path2 = pathTocurve(path2);
	        var x1 = void 0;
	        var y1 = void 0;
	        var x2 = void 0;
	        var y2 = void 0;
	        var x1m = void 0;
	        var y1m = void 0;
	        var x2m = void 0;
	        var y2m = void 0;
	        var bez1 = void 0;
	        var bez2 = void 0;
	        var res = justCount ? 0 : [];
	        for (var i = 0, ii = path1.length; i < ii; i++) {
	          var pi = path1[i];
	          if (pi[0] === 'M') {
	            x1 = x1m = pi[1];
	            y1 = y1m = pi[2];
	          } else {
	            if (pi[0] === 'C') {
	              bez1 = [x1, y1].concat(pi.slice(1));
	              x1 = bez1[6];
	              y1 = bez1[7];
	            } else {
	              bez1 = [x1, y1, x1, y1, x1m, y1m, x1m, y1m];
	              x1 = x1m;
	              y1 = y1m;
	            }
	            for (var j = 0, jj = path2.length; j < jj; j++) {
	              var pj = path2[j];
	              if (pj[0] === 'M') {
	                x2 = x2m = pj[1];
	                y2 = y2m = pj[2];
	              } else {
	                if (pj[0] === 'C') {
	                  bez2 = [x2, y2].concat(pj.slice(1));
	                  x2 = bez2[6];
	                  y2 = bez2[7];
	                } else {
	                  bez2 = [x2, y2, x2, y2, x2m, y2m, x2m, y2m];
	                  x2 = x2m;
	                  y2 = y2m;
	                }
	                var intr = interHelper(bez1, bez2, justCount);
	                if (justCount) {
	                  res += intr;
	                } else {
	                  for (var k = 0, kk = intr.length; k < kk; k++) {
	                    intr[k].segment1 = i;
	                    intr[k].segment2 = j;
	                    intr[k].bez1 = bez1;
	                    intr[k].bez2 = bez2;
	                  }
	                  res = res.concat(intr);
	                }
	              }
	            }
	          }
	        }
	        return res;
	      };

	      var pathIntersection = function pathIntersection(path1, path2) {
	        return interPathHelper(path1, path2);
	      };

	      module.exports = {
	        parsePathString: parsePathString,
	        parsePathArray: parsePathArray,
	        pathTocurve: pathTocurve,
	        pathToAbsolute: pathToAbsolute,
	        catmullRomToBezier: catmullRom2bezier,
	        rectPath: rectPath,
	        intersection: pathIntersection
	      };

	      /***/
	    },
	    /* 47 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["b"] = now;
	      /* harmony export (immutable) */__webpack_exports__["a"] = Timer;
	      /* harmony export (immutable) */__webpack_exports__["c"] = timer;
	      /* harmony export (immutable) */__webpack_exports__["d"] = timerFlush;
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var frame = 0,

	      // is an animation frame pending?
	      timeout = 0,

	      // is a timeout pending?
	      interval = 0,

	      // are any timers active?
	      pokeDelay = 1000,

	      // how frequently we check for clock skew
	      taskHead,
	          taskTail,
	          clockLast = 0,
	          clockNow = 0,
	          clockSkew = 0,
	          clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	          setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	        setTimeout(f, 17);
	      };

	      function now() {
	        return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	      }

	      function clearNow() {
	        clockNow = 0;
	      }

	      function Timer() {
	        this._call = this._time = this._next = null;
	      }

	      Timer.prototype = timer.prototype = {
	        constructor: Timer,
	        restart: function restart(callback, delay, time) {
	          if (typeof callback !== "function") throw new TypeError("callback is not a function");
	          time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	          if (!this._next && taskTail !== this) {
	            if (taskTail) taskTail._next = this;else taskHead = this;
	            taskTail = this;
	          }
	          this._call = callback;
	          this._time = time;
	          sleep();
	        },
	        stop: function stop() {
	          if (this._call) {
	            this._call = null;
	            this._time = Infinity;
	            sleep();
	          }
	        }
	      };

	      function timer(callback, delay, time) {
	        var t = new Timer();
	        t.restart(callback, delay, time);
	        return t;
	      }

	      function timerFlush() {
	        now(); // Get the current time, if not already set.
	        ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	        var t = taskHead,
	            e;
	        while (t) {
	          if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	          t = t._next;
	        }
	        --frame;
	      }

	      function wake() {
	        clockNow = (clockLast = clock.now()) + clockSkew;
	        frame = timeout = 0;
	        try {
	          timerFlush();
	        } finally {
	          frame = 0;
	          nap();
	          clockNow = 0;
	        }
	      }

	      function poke() {
	        var now = clock.now(),
	            delay = now - clockLast;
	        if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	      }

	      function nap() {
	        var t0,
	            t1 = taskHead,
	            t2,
	            time = Infinity;
	        while (t1) {
	          if (t1._call) {
	            if (time > t1._time) time = t1._time;
	            t0 = t1, t1 = t1._next;
	          } else {
	            t2 = t1._next, t1._next = null;
	            t1 = t0 ? t0._next = t2 : taskHead = t2;
	          }
	        }
	        taskTail = t0;
	        sleep(time);
	      }

	      function sleep(time) {
	        if (frame) return; // Soonest alarm already set, or will be.
	        if (timeout) timeout = clearTimeout(timeout);
	        var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	        if (delay > 24) {
	          if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	          if (interval) interval = clearInterval(interval);
	        } else {
	          if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	          frame = 1, setFrame(wake);
	        }
	      }

	      /***/
	    },
	    /* 48 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(91);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(94);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(95);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(30);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(96);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(97);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(93);
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var t = typeof b === "undefined" ? "undefined" : _typeof(b),
	            c;
	        return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b) : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */] : t === "string" ? (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */] : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */] : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */] : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */] : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
	      };

	      /***/
	    },
	    /* 49 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = Color;
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "d", function () {
	        return _darker;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return _brighter;
	      });
	      /* harmony export (immutable) */__webpack_exports__["e"] = color;
	      /* harmony export (immutable) */__webpack_exports__["h"] = rgbConvert;
	      /* harmony export (immutable) */__webpack_exports__["g"] = rgb;
	      /* harmony export (immutable) */__webpack_exports__["b"] = Rgb;
	      /* unused harmony export hslConvert */
	      /* harmony export (immutable) */__webpack_exports__["f"] = hsl;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);

	      function Color() {}

	      var _darker = 0.7;

	      var _brighter = 1 / _darker;

	      var reI = "\\s*([+-]?\\d+)\\s*",
	          reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	          reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	          reHex3 = /^#([0-9a-f]{3})$/,
	          reHex6 = /^#([0-9a-f]{6})$/,
	          reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	          reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	          reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	          reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	          reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	          reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	      var named = {
	        aliceblue: 0xf0f8ff,
	        antiquewhite: 0xfaebd7,
	        aqua: 0x00ffff,
	        aquamarine: 0x7fffd4,
	        azure: 0xf0ffff,
	        beige: 0xf5f5dc,
	        bisque: 0xffe4c4,
	        black: 0x000000,
	        blanchedalmond: 0xffebcd,
	        blue: 0x0000ff,
	        blueviolet: 0x8a2be2,
	        brown: 0xa52a2a,
	        burlywood: 0xdeb887,
	        cadetblue: 0x5f9ea0,
	        chartreuse: 0x7fff00,
	        chocolate: 0xd2691e,
	        coral: 0xff7f50,
	        cornflowerblue: 0x6495ed,
	        cornsilk: 0xfff8dc,
	        crimson: 0xdc143c,
	        cyan: 0x00ffff,
	        darkblue: 0x00008b,
	        darkcyan: 0x008b8b,
	        darkgoldenrod: 0xb8860b,
	        darkgray: 0xa9a9a9,
	        darkgreen: 0x006400,
	        darkgrey: 0xa9a9a9,
	        darkkhaki: 0xbdb76b,
	        darkmagenta: 0x8b008b,
	        darkolivegreen: 0x556b2f,
	        darkorange: 0xff8c00,
	        darkorchid: 0x9932cc,
	        darkred: 0x8b0000,
	        darksalmon: 0xe9967a,
	        darkseagreen: 0x8fbc8f,
	        darkslateblue: 0x483d8b,
	        darkslategray: 0x2f4f4f,
	        darkslategrey: 0x2f4f4f,
	        darkturquoise: 0x00ced1,
	        darkviolet: 0x9400d3,
	        deeppink: 0xff1493,
	        deepskyblue: 0x00bfff,
	        dimgray: 0x696969,
	        dimgrey: 0x696969,
	        dodgerblue: 0x1e90ff,
	        firebrick: 0xb22222,
	        floralwhite: 0xfffaf0,
	        forestgreen: 0x228b22,
	        fuchsia: 0xff00ff,
	        gainsboro: 0xdcdcdc,
	        ghostwhite: 0xf8f8ff,
	        gold: 0xffd700,
	        goldenrod: 0xdaa520,
	        gray: 0x808080,
	        green: 0x008000,
	        greenyellow: 0xadff2f,
	        grey: 0x808080,
	        honeydew: 0xf0fff0,
	        hotpink: 0xff69b4,
	        indianred: 0xcd5c5c,
	        indigo: 0x4b0082,
	        ivory: 0xfffff0,
	        khaki: 0xf0e68c,
	        lavender: 0xe6e6fa,
	        lavenderblush: 0xfff0f5,
	        lawngreen: 0x7cfc00,
	        lemonchiffon: 0xfffacd,
	        lightblue: 0xadd8e6,
	        lightcoral: 0xf08080,
	        lightcyan: 0xe0ffff,
	        lightgoldenrodyellow: 0xfafad2,
	        lightgray: 0xd3d3d3,
	        lightgreen: 0x90ee90,
	        lightgrey: 0xd3d3d3,
	        lightpink: 0xffb6c1,
	        lightsalmon: 0xffa07a,
	        lightseagreen: 0x20b2aa,
	        lightskyblue: 0x87cefa,
	        lightslategray: 0x778899,
	        lightslategrey: 0x778899,
	        lightsteelblue: 0xb0c4de,
	        lightyellow: 0xffffe0,
	        lime: 0x00ff00,
	        limegreen: 0x32cd32,
	        linen: 0xfaf0e6,
	        magenta: 0xff00ff,
	        maroon: 0x800000,
	        mediumaquamarine: 0x66cdaa,
	        mediumblue: 0x0000cd,
	        mediumorchid: 0xba55d3,
	        mediumpurple: 0x9370db,
	        mediumseagreen: 0x3cb371,
	        mediumslateblue: 0x7b68ee,
	        mediumspringgreen: 0x00fa9a,
	        mediumturquoise: 0x48d1cc,
	        mediumvioletred: 0xc71585,
	        midnightblue: 0x191970,
	        mintcream: 0xf5fffa,
	        mistyrose: 0xffe4e1,
	        moccasin: 0xffe4b5,
	        navajowhite: 0xffdead,
	        navy: 0x000080,
	        oldlace: 0xfdf5e6,
	        olive: 0x808000,
	        olivedrab: 0x6b8e23,
	        orange: 0xffa500,
	        orangered: 0xff4500,
	        orchid: 0xda70d6,
	        palegoldenrod: 0xeee8aa,
	        palegreen: 0x98fb98,
	        paleturquoise: 0xafeeee,
	        palevioletred: 0xdb7093,
	        papayawhip: 0xffefd5,
	        peachpuff: 0xffdab9,
	        peru: 0xcd853f,
	        pink: 0xffc0cb,
	        plum: 0xdda0dd,
	        powderblue: 0xb0e0e6,
	        purple: 0x800080,
	        rebeccapurple: 0x663399,
	        red: 0xff0000,
	        rosybrown: 0xbc8f8f,
	        royalblue: 0x4169e1,
	        saddlebrown: 0x8b4513,
	        salmon: 0xfa8072,
	        sandybrown: 0xf4a460,
	        seagreen: 0x2e8b57,
	        seashell: 0xfff5ee,
	        sienna: 0xa0522d,
	        silver: 0xc0c0c0,
	        skyblue: 0x87ceeb,
	        slateblue: 0x6a5acd,
	        slategray: 0x708090,
	        slategrey: 0x708090,
	        snow: 0xfffafa,
	        springgreen: 0x00ff7f,
	        steelblue: 0x4682b4,
	        tan: 0xd2b48c,
	        teal: 0x008080,
	        thistle: 0xd8bfd8,
	        tomato: 0xff6347,
	        turquoise: 0x40e0d0,
	        violet: 0xee82ee,
	        wheat: 0xf5deb3,
	        white: 0xffffff,
	        whitesmoke: 0xf5f5f5,
	        yellow: 0xffff00,
	        yellowgreen: 0x9acd32
	      };

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
	        displayable: function displayable() {
	          return this.rgb().displayable();
	        },
	        toString: function toString() {
	          return this.rgb() + "";
	        }
	      });

	      function color(format) {
	        var m;
	        format = (format + "").trim().toLowerCase();
	        return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	        ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	        : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	        : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	        : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	        : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	        : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	        : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	        : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	      }

	      function rgbn(n) {
	        return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	      }

	      function rgba(r, g, b, a) {
	        if (a <= 0) r = g = b = NaN;
	        return new Rgb(r, g, b, a);
	      }

	      function rgbConvert(o) {
	        if (!(o instanceof Color)) o = color(o);
	        if (!o) return new Rgb();
	        o = o.rgb();
	        return new Rgb(o.r, o.g, o.b, o.opacity);
	      }

	      function rgb(r, g, b, opacity) {
	        return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	      }

	      function Rgb(r, g, b, opacity) {
	        this.r = +r;
	        this.g = +g;
	        this.b = +b;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	        brighter: function brighter(k) {
	          k = k == null ? _brighter : Math.pow(_brighter, k);
	          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? _darker : Math.pow(_darker, k);
	          return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	        },
	        rgb: function rgb() {
	          return this;
	        },
	        displayable: function displayable() {
	          return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
	        },
	        toString: function toString() {
	          var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	          return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	        }
	      }));

	      function hsla(h, s, l, a) {
	        if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	        return new Hsl(h, s, l, a);
	      }

	      function hslConvert(o) {
	        if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	        if (!(o instanceof Color)) o = color(o);
	        if (!o) return new Hsl();
	        if (o instanceof Hsl) return o;
	        o = o.rgb();
	        var r = o.r / 255,
	            g = o.g / 255,
	            b = o.b / 255,
	            min = Math.min(r, g, b),
	            max = Math.max(r, g, b),
	            h = NaN,
	            s = max - min,
	            l = (max + min) / 2;
	        if (s) {
	          if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	          s /= l < 0.5 ? max + min : 2 - max - min;
	          h *= 60;
	        } else {
	          s = l > 0 && l < 1 ? 0 : h;
	        }
	        return new Hsl(h, s, l, o.opacity);
	      }

	      function hsl(h, s, l, opacity) {
	        return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	      }

	      function Hsl(h, s, l, opacity) {
	        this.h = +h;
	        this.s = +s;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	        brighter: function brighter(k) {
	          k = k == null ? _brighter : Math.pow(_brighter, k);
	          return new Hsl(this.h, this.s, this.l * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? _darker : Math.pow(_darker, k);
	          return new Hsl(this.h, this.s, this.l * k, this.opacity);
	        },
	        rgb: function rgb() {
	          var h = this.h % 360 + (this.h < 0) * 360,
	              s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	              l = this.l,
	              m2 = l + (l < 0.5 ? l : 1 - l) * s,
	              m1 = 2 * l - m2;
	          return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	        },
	        displayable: function displayable() {
	          return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	        }
	      }));

	      /* From FvD 13.37, CSS Color Module Level 3 */
	      function hsl2rgb(h, m1, m2) {
	        return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	      }

	      /***/
	    },
	    /* 50 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["b"] = extend;
	      /* harmony default export */__webpack_exports__["a"] = function (constructor, factory, prototype) {
	        constructor.prototype = factory.prototype = prototype;
	        prototype.constructor = constructor;
	      };

	      function extend(parent, definition) {
	        var prototype = Object.create(parent.prototype);
	        for (var key in definition) {
	          prototype[key] = definition[key];
	        }return prototype;
	      }

	      /***/
	    },
	    /* 51 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = basis;
	      function basis(t1, v0, v1, v2, v3) {
	        var t2 = t1 * t1,
	            t3 = t2 * t1;
	        return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
	      }

	      /* harmony default export */__webpack_exports__["b"] = function (values) {
	        var n = values.length - 1;
	        return function (t) {
	          var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	              v1 = values[i],
	              v2 = values[i + 1],
	              v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	              v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	          return basis((t - i / n) * n, v0, v1, v2, v3);
	        };
	      };

	      /***/
	    },
	    /* 52 */
	    /***/function (module, exports, __webpack_require__) {

	      var vec2 = __webpack_require__(3).vec2;

	      module.exports = {
	        at: function at(p1, p2, t) {
	          return (p2 - p1) * t + p1;
	        },
	        pointDistance: function pointDistance(x1, y1, x2, y2, x, y) {
	          var d = [x2 - x1, y2 - y1];
	          if (vec2.exactEquals(d, [0, 0])) {
	            return NaN;
	          }

	          var u = [-d[1], d[0]];
	          vec2.normalize(u, u);
	          var a = [x - x1, y - y1];
	          return Math.abs(vec2.dot(a, u));
	        },
	        box: function box(x1, y1, x2, y2, lineWidth) {
	          var halfWidth = lineWidth / 2;
	          var minX = Math.min(x1, x2);
	          var maxX = Math.max(x1, x2);
	          var minY = Math.min(y1, y2);
	          var maxY = Math.max(y1, y2);

	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        len: function len(x1, y1, x2, y2) {
	          return Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));
	        }
	      };

	      /***/
	    },
	    /* 53 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function quadraticAt(p0, p1, p2, t) {
	        var onet = 1 - t;
	        return onet * (onet * p0 + 2 * t * p1) + t * t * p2;
	      }

	      function quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, out) {
	        var t = void 0;
	        var interval = 0.005;
	        var d = Infinity;
	        var d1 = void 0;
	        var v1 = void 0;
	        var v2 = void 0;
	        var _t = void 0;
	        var d2 = void 0;
	        var i = void 0;
	        var EPSILON = 0.0001;
	        var v0 = [x, y];

	        for (_t = 0; _t < 1; _t += 0.05) {
	          v1 = [quadraticAt(x1, x2, x3, _t), quadraticAt(y1, y2, y3, _t)];

	          d1 = vec2.squaredDistance(v0, v1);
	          if (d1 < d) {
	            t = _t;
	            d = d1;
	          }
	        }
	        d = Infinity;

	        for (i = 0; i < 32; i++) {
	          if (interval < EPSILON) {
	            break;
	          }

	          var prev = t - interval;
	          var next = t + interval;

	          v1 = [quadraticAt(x1, x2, x3, prev), quadraticAt(y1, y2, y3, prev)];

	          d1 = vec2.squaredDistance(v0, v1);

	          if (prev >= 0 && d1 < d) {
	            t = prev;
	            d = d1;
	          } else {
	            v2 = [quadraticAt(x1, x2, x3, next), quadraticAt(y1, y2, y3, next)];

	            d2 = vec2.squaredDistance(v0, v2);

	            if (next <= 1 && d2 < d) {
	              t = next;
	              d = d2;
	            } else {
	              interval *= 0.5;
	            }
	          }
	        }

	        if (out) {
	          out.x = quadraticAt(x1, x2, x3, t);
	          out.y = quadraticAt(y1, y2, y3, t);
	        }

	        return Math.sqrt(d);
	      }

	      function quadraticExtrema(p0, p1, p2) {
	        var a = p0 + p2 - 2 * p1;
	        if (Util.isNumberEqual(a, 0)) {
	          return [0.5];
	        }
	        var rst = (p0 - p1) / a;
	        if (rst <= 1 && rst >= 0) {
	          return [rst];
	        }
	        return [];
	      }

	      module.exports = {
	        at: quadraticAt,
	        projectPoint: function projectPoint(x1, y1, x2, y2, x3, y3, x, y) {
	          var rst = {};
	          quadraticProjectPoint(x1, y1, x2, y2, x3, y3, x, y, rst);
	          return rst;
	        },

	        pointDistance: quadraticProjectPoint,
	        extrema: quadraticExtrema
	      };

	      /***/
	    },
	    /* 54 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var vec2 = __webpack_require__(3).vec2;

	      function circlePoint(cx, cy, r, angle) {
	        return {
	          x: Math.cos(angle) * r + cx,
	          y: Math.sin(angle) * r + cy
	        };
	      }

	      function angleNearTo(angle, min, max, out) {
	        var v1 = void 0;
	        var v2 = void 0;
	        if (out) {
	          if (angle < min) {
	            v1 = min - angle;
	            v2 = Math.PI * 2 - max + angle;
	          } else if (angle > max) {
	            v1 = Math.PI * 2 - angle + min;
	            v2 = angle - max;
	          }
	        } else {
	          v1 = angle - min;
	          v2 = max - angle;
	        }

	        return v1 > v2 ? max : min;
	      }

	      function nearAngle(angle, startAngle, endAngle, clockwise) {
	        var plus = 0;
	        if (endAngle - startAngle >= Math.PI * 2) {
	          plus = Math.PI * 2;
	        }
	        startAngle = Util.mod(startAngle, Math.PI * 2);
	        endAngle = Util.mod(endAngle, Math.PI * 2) + plus;
	        angle = Util.mod(angle, Math.PI * 2);
	        if (clockwise) {
	          if (startAngle >= endAngle) {
	            if (angle > endAngle && angle < startAngle) {
	              return angle;
	            }
	            return angleNearTo(angle, endAngle, startAngle, true);
	          }
	          if (angle < startAngle || angle > endAngle) {
	            return angle;
	          }
	          return angleNearTo(angle, startAngle, endAngle);
	        }
	        if (startAngle <= endAngle) {
	          if (startAngle < angle && angle < endAngle) {
	            return angle;
	          }
	          return angleNearTo(angle, startAngle, endAngle, true);
	        }
	        if (angle > startAngle || angle < endAngle) {
	          return angle;
	        }
	        return angleNearTo(angle, endAngle, startAngle);
	      }

	      function arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, out) {
	        var v = [x, y];
	        var v0 = [cx, cy];
	        var v1 = [1, 0];
	        var subv = vec2.subtract([], v, v0);
	        var angle = vec2.angleTo(v1, subv);

	        angle = nearAngle(angle, startAngle, endAngle, clockwise);
	        var vpoint = [r * Math.cos(angle) + cx, r * Math.sin(angle) + cy];
	        if (out) {
	          out.x = vpoint[0];
	          out.y = vpoint[1];
	        }
	        var d = vec2.distance(vpoint, v);
	        return d;
	      }

	      function arcBox(cx, cy, r, startAngle, endAngle, clockwise) {
	        var angleRight = 0;
	        var angleBottom = Math.PI / 2;
	        var angleLeft = Math.PI;
	        var angleTop = Math.PI * 3 / 2;
	        var points = [];
	        var angle = nearAngle(angleRight, startAngle, endAngle, clockwise);
	        if (angle === angleRight) {
	          points.push(circlePoint(cx, cy, r, angleRight));
	        }

	        angle = nearAngle(angleBottom, startAngle, endAngle, clockwise);
	        if (angle === angleBottom) {
	          points.push(circlePoint(cx, cy, r, angleBottom));
	        }

	        angle = nearAngle(angleLeft, startAngle, endAngle, clockwise);
	        if (angle === angleLeft) {
	          points.push(circlePoint(cx, cy, r, angleLeft));
	        }

	        angle = nearAngle(angleTop, startAngle, endAngle, clockwise);
	        if (angle === angleTop) {
	          points.push(circlePoint(cx, cy, r, angleTop));
	        }

	        points.push(circlePoint(cx, cy, r, startAngle));
	        points.push(circlePoint(cx, cy, r, endAngle));
	        var minX = Infinity;
	        var maxX = -Infinity;
	        var minY = Infinity;
	        var maxY = -Infinity;
	        Util.each(points, function (point) {
	          if (minX > point.x) {
	            minX = point.x;
	          }
	          if (maxX < point.x) {
	            maxX = point.x;
	          }
	          if (minY > point.y) {
	            minY = point.y;
	          }
	          if (maxY < point.y) {
	            maxY = point.y;
	          }
	        });

	        return {
	          minX: minX,
	          minY: minY,
	          maxX: maxX,
	          maxY: maxY
	        };
	      }

	      module.exports = {
	        nearAngle: nearAngle,
	        projectPoint: function projectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y) {
	          var rst = {};
	          arcProjectPoint(cx, cy, r, startAngle, endAngle, clockwise, x, y, rst);
	          return rst;
	        },

	        pointDistance: arcProjectPoint,
	        box: arcBox
	      };

	      /***/
	    },
	    /* 55 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Rect = function Rect(cfg) {
	        Rect.superclass.constructor.call(this, cfg);
	      };

	      Rect.ATTRS = {
	        x: 0,
	        y: 0,
	        width: 0,
	        height: 0,
	        radius: 0,
	        lineWidth: 1
	      };

	      Util.extend(Rect, Shape);

	      Util.augment(Rect, {
	        canFill: true,
	        canStroke: true,
	        type: 'rect',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            radius: 0
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var lineWidth = this.getHitLineWidth();

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: x - halfWidth,
	            minY: y - halfWidth,
	            maxX: x + width + halfWidth,
	            maxY: y + height + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var context = this.get('context');

	          if (!context) return false;
	          this.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var rx = attrs.x;
	          var ry = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var radius = attrs.radius;
	          var lineWidth = this.getHitLineWidth();

	          if (radius === 0) {
	            var halfWidth = lineWidth / 2;
	            return Inside.line(rx - halfWidth, ry, rx + width + halfWidth, ry, lineWidth, x, y) || Inside.line(rx + width, ry - halfWidth, rx + width, ry + height + halfWidth, lineWidth, x, y) || Inside.line(rx + width + halfWidth, ry + height, rx - halfWidth, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height + halfWidth, rx, ry - halfWidth, lineWidth, x, y);
	          }

	          return Inside.line(rx + radius, ry, rx + width - radius, ry, lineWidth, x, y) || Inside.line(rx + width, ry + radius, rx + width, ry + height - radius, lineWidth, x, y) || Inside.line(rx + width - radius, ry + height, rx + radius, ry + height, lineWidth, x, y) || Inside.line(rx, ry + height - radius, rx, ry + radius, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + radius, radius, 1.5 * Math.PI, 2 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + width - radius, ry + height - radius, radius, 0, 0.5 * Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + height - radius, radius, 0.5 * Math.PI, Math.PI, false, lineWidth, x, y) || Inside.arcline(rx + radius, ry + radius, radius, Math.PI, 1.5 * Math.PI, false, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          var radius = attrs.radius;
	          context = context || self.get('context');

	          context.beginPath();
	          if (radius === 0) {
	            // 改成原生的rect方法
	            context.rect(x, y, width, height);
	          } else {
	            context.moveTo(x + radius, y);
	            context.lineTo(x + width - radius, y);
	            context.arc(x + width - radius, y + radius, radius, -Math.PI / 2, 0, false);
	            context.lineTo(x + width, y + height - radius);
	            context.arc(x + width - radius, y + height - radius, radius, 0, Math.PI / 2, false);
	            context.lineTo(x + radius, y + height);
	            context.arc(x + radius, y + height - radius, radius, Math.PI / 2, Math.PI, false);
	            context.lineTo(x, y + radius);
	            context.arc(x + radius, y + radius, radius, Math.PI, Math.PI * 3 / 2, false);
	            context.closePath();
	          }
	        }
	      });

	      module.exports = Rect;

	      /***/
	    },
	    /* 56 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (global) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        /** Detect free variable `global` from Node.js. */
	        var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	        module.exports = freeGlobal;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(115));

	      /***/
	    },
	    /* 57 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isArray = __webpack_require__(6),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var stringTag = '[object String]';

	      /**
	       * Checks if `value` is classified as a `String` primitive or object.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a string, else `false`.
	       * @example
	       *
	       * _.isString('abc');
	       * // => true
	       *
	       * _.isString(1);
	       * // => false
	       */
	      function isString(value) {
	        return typeof value == 'string' || !isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag;
	      }

	      module.exports = isString;

	      /***/
	    },
	    /* 58 */
	    /***/function (module, exports, __webpack_require__) {

	      var isPrototype = __webpack_require__(17),
	          nativeKeys = __webpack_require__(122);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function baseKeys(object) {
	        if (!isPrototype(object)) {
	          return nativeKeys(object);
	        }
	        var result = [];
	        for (var key in Object(object)) {
	          if (hasOwnProperty.call(object, key) && key != 'constructor') {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = baseKeys;

	      /***/
	    },
	    /* 59 */
	    /***/function (module, exports) {

	      /**
	       * Creates a unary function that invokes `func` with its argument transformed.
	       *
	       * @private
	       * @param {Function} func The function to wrap.
	       * @param {Function} transform The argument transform.
	       * @returns {Function} Returns the new function.
	       */
	      function overArg(func, transform) {
	        return function (arg) {
	          return func(transform(arg));
	        };
	      }

	      module.exports = overArg;

	      /***/
	    },
	    /* 60 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /**
	       * Converts `func` to its source code.
	       *
	       * @private
	       * @param {Function} func The function to convert.
	       * @returns {string} Returns the source code.
	       */
	      function toSource(func) {
	        if (func != null) {
	          try {
	            return funcToString.call(func);
	          } catch (e) {}
	          try {
	            return func + '';
	          } catch (e) {}
	        }
	        return '';
	      }

	      module.exports = toSource;

	      /***/
	    },
	    /* 61 */
	    /***/function (module, exports) {

	      /** Used as references for various `Number` constants. */
	      var MAX_SAFE_INTEGER = 9007199254740991;

	      /**
	       * Checks if `value` is a valid array-like length.
	       *
	       * **Note:** This method is loosely based on
	       * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	       * @example
	       *
	       * _.isLength(3);
	       * // => true
	       *
	       * _.isLength(Number.MIN_VALUE);
	       * // => false
	       *
	       * _.isLength(Infinity);
	       * // => false
	       *
	       * _.isLength('3');
	       * // => false
	       */
	      function isLength(value) {
	        return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	      }

	      module.exports = isLength;

	      /***/
	    },
	    /* 62 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.unary` without support for storing metadata.
	       *
	       * @private
	       * @param {Function} func The function to cap arguments for.
	       * @returns {Function} Returns the new capped function.
	       */
	      function baseUnary(func) {
	        return function (value) {
	          return func(value);
	        };
	      }

	      module.exports = baseUnary;

	      /***/
	    },
	    /* 63 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseToString = __webpack_require__(136);

	      /**
	       * Converts `value` to a string. An empty string is returned for `null`
	       * and `undefined` values. The sign of `-0` is preserved.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {string} Returns the converted string.
	       * @example
	       *
	       * _.toString(null);
	       * // => ''
	       *
	       * _.toString(-0);
	       * // => '-0'
	       *
	       * _.toString([1, 2, 3]);
	       * // => '1,2,3'
	       */
	      function toString(value) {
	        return value == null ? '' : baseToString(value);
	      }

	      module.exports = toString;

	      /***/
	    },
	    /* 64 */
	    /***/function (module, exports, __webpack_require__) {

	      var mapCacheClear = __webpack_require__(150),
	          mapCacheDelete = __webpack_require__(157),
	          mapCacheGet = __webpack_require__(159),
	          mapCacheHas = __webpack_require__(160),
	          mapCacheSet = __webpack_require__(161);

	      /**
	       * Creates a map cache object to store key-value pairs.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function MapCache(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `MapCache`.
	      MapCache.prototype.clear = mapCacheClear;
	      MapCache.prototype['delete'] = mapCacheDelete;
	      MapCache.prototype.get = mapCacheGet;
	      MapCache.prototype.has = mapCacheHas;
	      MapCache.prototype.set = mapCacheSet;

	      module.exports = MapCache;

	      /***/
	    },
	    /* 65 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.forEach` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns `array`.
	       */
	      function arrayEach(array, iteratee) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        while (++index < length) {
	          if (iteratee(array[index], index, array) === false) {
	            break;
	          }
	        }
	        return array;
	      }

	      module.exports = arrayEach;

	      /***/
	    },
	    /* 66 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10);

	      var defineProperty = function () {
	        try {
	          var func = getNative(Object, 'defineProperty');
	          func({}, '', {});
	          return func;
	        } catch (e) {}
	      }();

	      module.exports = defineProperty;

	      /***/
	    },
	    /* 67 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseTimes = __webpack_require__(163),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isIndex = __webpack_require__(68),
	          isTypedArray = __webpack_require__(23);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Creates an array of the enumerable property names of the array-like `value`.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @param {boolean} inherited Specify returning inherited property names.
	       * @returns {Array} Returns the array of property names.
	       */
	      function arrayLikeKeys(value, inherited) {
	        var isArr = isArray(value),
	            isArg = !isArr && isArguments(value),
	            isBuff = !isArr && !isArg && isBuffer(value),
	            isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	            skipIndexes = isArr || isArg || isBuff || isType,
	            result = skipIndexes ? baseTimes(value.length, String) : [],
	            length = result.length;

	        for (var key in value) {
	          if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	          // Safari 9 has enumerable `arguments.length` in strict mode.
	          key == 'length' ||
	          // Node.js 0.10 has enumerable non-index properties on buffers.
	          isBuff && (key == 'offset' || key == 'parent') ||
	          // PhantomJS 2 has enumerable non-index properties on typed arrays.
	          isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	          // Skip index properties.
	          isIndex(key, length)))) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = arrayLikeKeys;

	      /***/
	    },
	    /* 68 */
	    /***/function (module, exports) {

	      /** Used as references for various `Number` constants. */
	      var MAX_SAFE_INTEGER = 9007199254740991;

	      /** Used to detect unsigned integer values. */
	      var reIsUint = /^(?:0|[1-9]\d*)$/;

	      /**
	       * Checks if `value` is a valid array-like index.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	       * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	       */
	      function isIndex(value, length) {
	        length = length == null ? MAX_SAFE_INTEGER : length;
	        return !!length && (typeof value == 'number' || reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	      }

	      module.exports = isIndex;

	      /***/
	    },
	    /* 69 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var root = __webpack_require__(4);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Built-in value references. */
	        var Buffer = moduleExports ? root.Buffer : undefined,
	            allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	        /**
	         * Creates a clone of  `buffer`.
	         *
	         * @private
	         * @param {Buffer} buffer The buffer to clone.
	         * @param {boolean} [isDeep] Specify a deep clone.
	         * @returns {Buffer} Returns the cloned buffer.
	         */
	        function cloneBuffer(buffer, isDeep) {
	          if (isDeep) {
	            return buffer.slice();
	          }
	          var length = buffer.length,
	              result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	          buffer.copy(result);
	          return result;
	        }

	        module.exports = cloneBuffer;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 70 */
	    /***/function (module, exports) {

	      /**
	       * This method returns a new empty array.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.13.0
	       * @category Util
	       * @returns {Array} Returns the new empty array.
	       * @example
	       *
	       * var arrays = _.times(2, _.stubArray);
	       *
	       * console.log(arrays);
	       * // => [[], []]
	       *
	       * console.log(arrays[0] === arrays[1]);
	       * // => false
	       */
	      function stubArray() {
	        return [];
	      }

	      module.exports = stubArray;

	      /***/
	    },
	    /* 71 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayPush = __webpack_require__(72),
	          getPrototype = __webpack_require__(40),
	          getSymbols = __webpack_require__(39),
	          stubArray = __webpack_require__(70);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeGetSymbols = Object.getOwnPropertySymbols;

	      /**
	       * Creates an array of the own and inherited enumerable symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of symbols.
	       */
	      var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
	        var result = [];
	        while (object) {
	          arrayPush(result, getSymbols(object));
	          object = getPrototype(object);
	        }
	        return result;
	      };

	      module.exports = getSymbolsIn;

	      /***/
	    },
	    /* 72 */
	    /***/function (module, exports) {

	      /**
	       * Appends the elements of `values` to `array`.
	       *
	       * @private
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to append.
	       * @returns {Array} Returns `array`.
	       */
	      function arrayPush(array, values) {
	        var index = -1,
	            length = values.length,
	            offset = array.length;

	        while (++index < length) {
	          array[offset + index] = values[index];
	        }
	        return array;
	      }

	      module.exports = arrayPush;

	      /***/
	    },
	    /* 73 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetAllKeys = __webpack_require__(74),
	          getSymbols = __webpack_require__(39),
	          keys = __webpack_require__(13);

	      /**
	       * Creates an array of own enumerable property names and symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function getAllKeys(object) {
	        return baseGetAllKeys(object, keys, getSymbols);
	      }

	      module.exports = getAllKeys;

	      /***/
	    },
	    /* 74 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayPush = __webpack_require__(72),
	          isArray = __webpack_require__(6);

	      /**
	       * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	       * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	       * symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {Function} keysFunc The function to get the keys of `object`.
	       * @param {Function} symbolsFunc The function to get the symbols of `object`.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	        var result = keysFunc(object);
	        return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	      }

	      module.exports = baseGetAllKeys;

	      /***/
	    },
	    /* 75 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Built-in value references. */
	      var Uint8Array = root.Uint8Array;

	      module.exports = Uint8Array;

	      /***/
	    },
	    /* 76 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.reduce` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @param {*} [accumulator] The initial value.
	       * @param {boolean} [initAccum] Specify using the first element of `array` as
	       *  the initial value.
	       * @returns {*} Returns the accumulated value.
	       */
	      function arrayReduce(array, iteratee, accumulator, initAccum) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        if (initAccum && length) {
	          accumulator = array[++index];
	        }
	        while (++index < length) {
	          accumulator = iteratee(accumulator, array[index], index, array);
	        }
	        return accumulator;
	      }

	      module.exports = arrayReduce;

	      /***/
	    },
	    /* 77 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41);

	      /**
	       * Creates a clone of `typedArray`.
	       *
	       * @private
	       * @param {Object} typedArray The typed array to clone.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned typed array.
	       */
	      function cloneTypedArray(typedArray, isDeep) {
	        var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	        return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	      }

	      module.exports = cloneTypedArray;

	      /***/
	    },
	    /* 78 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseCreate = __webpack_require__(180),
	          getPrototype = __webpack_require__(40),
	          isPrototype = __webpack_require__(17);

	      /**
	       * Initializes an object clone.
	       *
	       * @private
	       * @param {Object} object The object to clone.
	       * @returns {Object} Returns the initialized clone.
	       */
	      function initCloneObject(object) {
	        return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	      }

	      module.exports = initCloneObject;

	      /***/
	    },
	    /* 79 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseRest = __webpack_require__(80),
	          isIterateeCall = __webpack_require__(188);

	      /**
	       * Creates a function like `_.assign`.
	       *
	       * @private
	       * @param {Function} assigner The function to assign values.
	       * @returns {Function} Returns the new assigner function.
	       */
	      function createAssigner(assigner) {
	        return baseRest(function (object, sources) {
	          var index = -1,
	              length = sources.length,
	              customizer = length > 1 ? sources[length - 1] : undefined,
	              guard = length > 2 ? sources[2] : undefined;

	          customizer = assigner.length > 3 && typeof customizer == 'function' ? (length--, customizer) : undefined;

	          if (guard && isIterateeCall(sources[0], sources[1], guard)) {
	            customizer = length < 3 ? undefined : customizer;
	            length = 1;
	          }
	          object = Object(object);
	          while (++index < length) {
	            var source = sources[index];
	            if (source) {
	              assigner(object, source, index, customizer);
	            }
	          }
	          return object;
	        });
	      }

	      module.exports = createAssigner;

	      /***/
	    },
	    /* 80 */
	    /***/function (module, exports, __webpack_require__) {

	      var identity = __webpack_require__(44),
	          overRest = __webpack_require__(182),
	          setToString = __webpack_require__(184);

	      /**
	       * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	       *
	       * @private
	       * @param {Function} func The function to apply a rest parameter to.
	       * @param {number} [start=func.length-1] The start position of the rest parameter.
	       * @returns {Function} Returns the new function.
	       */
	      function baseRest(func, start) {
	        return setToString(overRest(func, start, identity), func + '');
	      }

	      module.exports = baseRest;

	      /***/
	    },
	    /* 81 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseAssignValue = __webpack_require__(38),
	          eq = __webpack_require__(19);

	      /**
	       * This function is like `assignValue` except that it doesn't assign
	       * `undefined` values.
	       *
	       * @private
	       * @param {Object} object The object to modify.
	       * @param {string} key The key of the property to assign.
	       * @param {*} value The value to assign.
	       */
	      function assignMergeValue(object, key, value) {
	        if (value !== undefined && !eq(object[key], value) || value === undefined && !(key in object)) {
	          baseAssignValue(object, key, value);
	        }
	      }

	      module.exports = assignMergeValue;

	      /***/
	    },
	    /* 82 */
	    /***/function (module, exports, __webpack_require__) {

	      var createBaseFor = __webpack_require__(191);

	      /**
	       * The base implementation of `baseForOwn` which iterates over `object`
	       * properties returned by `keysFunc` and invokes `iteratee` for each property.
	       * Iteratee functions may exit iteration early by explicitly returning `false`.
	       *
	       * @private
	       * @param {Object} object The object to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @param {Function} keysFunc The function to get the keys of `object`.
	       * @returns {Object} Returns `object`.
	       */
	      var baseFor = createBaseFor();

	      module.exports = baseFor;

	      /***/
	    },
	    /* 83 */
	    /***/function (module, exports) {

	      /** Used to compose unicode character classes. */
	      var rsAstralRange = '\\ud800-\\udfff',
	          rsComboMarksRange = '\\u0300-\\u036f',
	          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	          rsComboSymbolsRange = '\\u20d0-\\u20ff',
	          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	          rsVarRange = '\\ufe0e\\ufe0f';

	      /** Used to compose unicode capture groups. */
	      var rsZWJ = '\\u200d';

	      /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	      var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

	      /**
	       * Checks if `string` contains Unicode symbols.
	       *
	       * @private
	       * @param {string} string The string to inspect.
	       * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	       */
	      function hasUnicode(string) {
	        return reHasUnicode.test(string);
	      }

	      module.exports = hasUnicode;

	      /***/
	    },
	    /* 84 */
	    /***/function (module, exports, __webpack_require__) {

	      var asciiToArray = __webpack_require__(200),
	          hasUnicode = __webpack_require__(83),
	          unicodeToArray = __webpack_require__(201);

	      /**
	       * Converts `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function stringToArray(string) {
	        return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
	      }

	      module.exports = stringToArray;

	      /***/
	    },
	    /* 85 */
	    /***/function (module, exports, __webpack_require__) {

	      var SetCache = __webpack_require__(218),
	          arraySome = __webpack_require__(221),
	          cacheHas = __webpack_require__(222);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1,
	          COMPARE_UNORDERED_FLAG = 2;

	      /**
	       * A specialized version of `baseIsEqualDeep` for arrays with support for
	       * partial deep comparisons.
	       *
	       * @private
	       * @param {Array} array The array to compare.
	       * @param {Array} other The other array to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `array` and `other` objects.
	       * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	       */
	      function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	            arrLength = array.length,
	            othLength = other.length;

	        if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	          return false;
	        }
	        // Assume cyclic values are equal.
	        var stacked = stack.get(array);
	        if (stacked && stack.get(other)) {
	          return stacked == other;
	        }
	        var index = -1,
	            result = true,
	            seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

	        stack.set(array, other);
	        stack.set(other, array);

	        // Ignore non-index properties.
	        while (++index < arrLength) {
	          var arrValue = array[index],
	              othValue = other[index];

	          if (customizer) {
	            var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	          }
	          if (compared !== undefined) {
	            if (compared) {
	              continue;
	            }
	            result = false;
	            break;
	          }
	          // Recursively compare arrays (susceptible to call stack limits).
	          if (seen) {
	            if (!arraySome(other, function (othValue, othIndex) {
	              if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	                return seen.push(othIndex);
	              }
	            })) {
	              result = false;
	              break;
	            }
	          } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	            result = false;
	            break;
	          }
	        }
	        stack['delete'](array);
	        stack['delete'](other);
	        return result;
	      }

	      module.exports = equalArrays;

	      /***/
	    },
	    /* 86 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(16);

	      var TABLE = document.createElement('table');
	      var TABLE_TR = document.createElement('tr');
	      var FRAGMENT_REG = /^\s*<(\w+|!)[^>]*>/;
	      var CONTAINERS = {
	        tr: document.createElement('tbody'),
	        tbody: TABLE,
	        thead: TABLE,
	        tfoot: TABLE,
	        td: TABLE_TR,
	        th: TABLE_TR,
	        '*': document.createElement('div')
	      };

	      module.exports = {
	        getBoundingClientRect: function getBoundingClientRect(node, defaultValue) {
	          if (node && node.getBoundingClientRect) {
	            var rect = node.getBoundingClientRect();
	            var top = document.documentElement.clientTop;
	            var left = document.documentElement.clientLeft;
	            return {
	              top: rect.top - top,
	              bottom: rect.bottom - top,
	              left: rect.left - left,
	              right: rect.right - left
	            };
	          }
	          return defaultValue || null;
	        },

	        /**
	         * 获取样式
	         * @param  {Object} dom DOM节点
	         * @param  {String} name 样式名
	         * @param  {Any} defaultValue 默认值
	         * @return {String} 属性值
	         */
	        getStyle: function getStyle(dom, name, defaultValue) {
	          try {
	            if (window.getComputedStyle) {
	              return window.getComputedStyle(dom, null)[name];
	            }
	            return dom.currentStyle[name];
	          } catch (e) {
	            if (!Util.isNil(defaultValue)) {
	              return defaultValue;
	            }
	            return null;
	          }
	        },
	        modifyCSS: function modifyCSS(dom, css) {
	          if (dom) {
	            for (var key in css) {
	              if (css.hasOwnProperty(key)) {
	                dom.style[key] = css[key];
	              }
	            }
	          }
	          return dom;
	        },

	        /**
	         * 创建DOM 节点
	         * @param  {String} str Dom 字符串
	         * @return {HTMLElement}  DOM 节点
	         */
	        createDom: function createDom(str) {
	          var name = FRAGMENT_REG.test(str) && RegExp.$1;
	          if (!(name in CONTAINERS)) {
	            name = '*';
	          }
	          var container = CONTAINERS[name];
	          str = str.replace(/(^\s*)|(\s*$)/g, '');
	          container.innerHTML = '' + str;
	          var dom = container.childNodes[0];
	          container.removeChild(dom);
	          return dom;
	        },
	        getRatio: function getRatio() {
	          return window.devicePixelRatio ? window.devicePixelRatio : 2;
	        },

	        /**
	         * 获取宽度
	         * @param  {HTMLElement} el  dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 宽度
	         */
	        getWidth: function getWidth(el, defaultValue) {
	          var width = this.getStyle(el, 'width', defaultValue);
	          if (width === 'auto') {
	            width = el.offsetWidth;
	          }
	          return parseFloat(width);
	        },

	        /**
	         * 获取高度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 高度
	         */
	        getHeight: function getHeight(el, defaultValue) {
	          var height = this.getStyle(el, 'height', defaultValue);
	          if (height === 'auto') {
	            height = el.offsetHeight;
	          }
	          return parseFloat(height);
	        },

	        /**
	         * 获取外层高度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 高度
	         */
	        getOuterHeight: function getOuterHeight(el, defaultValue) {
	          var height = this.getHeight(el, defaultValue);
	          var bTop = parseFloat(this.getStyle(el, 'borderTopWidth')) || 0;
	          var pTop = parseFloat(this.getStyle(el, 'paddingTop')) || 0;
	          var pBottom = parseFloat(this.getStyle(el, 'paddingBottom')) || 0;
	          var bBottom = parseFloat(this.getStyle(el, 'borderBottomWidth')) || 0;
	          return height + bTop + bBottom + pTop + pBottom;
	        },

	        /**
	         * 获取外层宽度
	         * @param  {HTMLElement} el dom节点
	         * @param  {Number} defaultValue 默认值
	         * @return {Number} 宽度
	         */
	        getOuterWidth: function getOuterWidth(el, defaultValue) {
	          var width = this.getWidth(el, defaultValue);
	          var bLeft = parseFloat(this.getStyle(el, 'borderLeftWidth')) || 0;
	          var pLeft = parseFloat(this.getStyle(el, 'paddingLeft')) || 0;
	          var pRight = parseFloat(this.getStyle(el, 'paddingRight')) || 0;
	          var bRight = parseFloat(this.getStyle(el, 'borderRightWidth')) || 0;
	          return width + bLeft + bRight + pLeft + pRight;
	        },

	        /**
	         * 添加事件监听器
	         * @param  {Object} target DOM对象
	         * @param  {String} eventType 事件名
	         * @param  {Funtion} callback 回调函数
	         * @return {Object} 返回对象
	         */
	        addEventListener: function addEventListener(target, eventType, callback) {
	          if (target) {
	            if (target.addEventListener) {
	              target.addEventListener(eventType, callback, false);
	              return {
	                remove: function remove() {
	                  target.removeEventListener(eventType, callback, false);
	                }
	              };
	            } else if (target.attachEvent) {
	              target.attachEvent('on' + eventType, callback);
	              return {
	                remove: function remove() {
	                  target.detachEvent('on' + eventType, callback);
	                }
	              };
	            }
	          }
	        },
	        requestAnimationFrame: function requestAnimationFrame(fn) {
	          var method = window.requestAnimationFrame || window.webkitRequestAnimationFrame || function (fn) {
	            return setTimeout(fn, 16);
	          };

	          return method(fn);
	        }
	      };

	      /***/
	    },
	    /* 87 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var Event = function Event(type, event, bubbles, cancelable) {
	        this.type = type; // 事件类型
	        this.target = null; // 目标
	        this.currentTarget = null; // 当前目标
	        this.bubbles = bubbles; // 冒泡
	        this.cancelable = cancelable; // 是否能够阻止
	        this.timeStamp = new Date().getTime(); // 时间戳
	        this.defaultPrevented = false; // 阻止默认
	        this.propagationStopped = false; // 阻止冒泡
	        this.removed = false; // 是否被移除
	        this.event = event; // 触发的原生事件
	      };

	      Util.augment(Event, {
	        preventDefault: function preventDefault() {
	          this.defaultPrevented = this.cancelable && true;
	        },
	        stopPropagation: function stopPropagation() {
	          this.propagationStopped = true;
	        },
	        remove: function remove() {
	          this.remove = true;
	        },
	        clone: function clone() {
	          return Util.clone(this);
	        },
	        toString: function toString() {
	          return '[Event (type=' + this.type + ')]';
	        }
	      });

	      module.exports = Event;

	      /***/
	    },
	    /* 88 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Element = __webpack_require__(89);
	      var Shape = __webpack_require__(263);
	      var SHAPE_MAP = {}; // 缓存图形类型
	      var INDEX = '_INDEX';

	      function find(children, x, y) {
	        var rst = void 0;
	        for (var i = children.length - 1; i >= 0; i--) {
	          var child = children[i];
	          if (child.__cfg.visible && child.__cfg.capture) {
	            if (child.isGroup) {
	              rst = child.getShape(x, y);
	            } else if (child.isHit(x, y)) {
	              rst = child;
	            }
	          }
	          if (rst) {
	            break;
	          }
	        }
	        return rst;
	      }

	      function getComparer(compare) {
	        return function (left, right) {
	          var result = compare(left, right);
	          return result === 0 ? left[INDEX] - right[INDEX] : result;
	        };
	      }

	      var Group = function Group(cfg) {
	        Group.superclass.constructor.call(this, cfg);
	        this.set('children', []);

	        this._beforeRenderUI();
	        this._renderUI();
	        this._bindUI();
	      };

	      function initClassCfgs(c) {
	        if (c.__cfg || c === Group) {
	          return;
	        }
	        var superCon = c.superclass.constructor;
	        if (superCon && !superCon.__cfg) {
	          initClassCfgs(superCon);
	        }
	        c.__cfg = {};

	        Util.merge(c.__cfg, superCon.__cfg);
	        Util.merge(c.__cfg, c.CFG);
	      }

	      Util.extend(Group, Element);

	      Util.augment(Group, {
	        isGroup: true,
	        canFill: true,
	        canStroke: true,
	        getDefaultCfg: function getDefaultCfg() {
	          initClassCfgs(this.constructor);
	          return Util.merge({}, this.constructor.__cfg);
	        },
	        _beforeRenderUI: function _beforeRenderUI() {},
	        _renderUI: function _renderUI() {},
	        _bindUI: function _bindUI() {},
	        addShape: function addShape(type, cfg) {
	          var canvas = this.get('canvas');
	          cfg = cfg || {};
	          var shapeType = SHAPE_MAP[type];
	          if (!shapeType) {
	            shapeType = Util.upperFirst(type);
	            SHAPE_MAP[type] = shapeType;
	          }
	          if (cfg.attrs) {
	            var attrs = cfg.attrs;
	            if (type === 'text') {
	              // 临时解决
	              var topFontFamily = canvas.get('fontFamily');
	              if (topFontFamily) {
	                attrs.fontFamily = attrs.fontFamily ? attrs.fontFamily : topFontFamily;
	              }
	            }
	          }
	          cfg.canvas = canvas;
	          cfg.type = type;
	          var rst = new Shape[shapeType](cfg);
	          this.add(rst);
	          return rst;
	        },

	        /** 添加图组
	         * @param  {Function|Object|undefined} param 图组类
	         * @param  {Object} cfg 配置项
	         * @return {Object} rst 图组
	         */
	        addGroup: function addGroup(param, cfg) {
	          var canvas = this.get('canvas');
	          var rst = void 0;
	          cfg = Util.merge({}, cfg);
	          if (Util.isFunction(param)) {
	            if (cfg) {
	              cfg.canvas = canvas;
	              cfg.parent = this;
	              rst = new param(cfg);
	            } else {
	              rst = new param({
	                canvas: canvas,
	                parent: this
	              });
	            }
	            this.add(rst);
	          } else if (Util.isObject(param)) {
	            param.canvas = canvas;
	            rst = new Group(param);
	            this.add(rst);
	          } else if (param === undefined) {
	            rst = new Group();
	            this.add(rst);
	          } else {
	            return false;
	          }
	          return rst;
	        },

	        /** 绘制背景
	         * @param  {Array} padding 内边距
	         * @param  {Attrs} attrs 图形属性
	         * @param  {Shape} backShape 背景图形
	         * @return {Object} 背景层对象
	         */
	        renderBack: function renderBack(padding, attrs) {
	          var backShape = this.get('backShape');
	          var innerBox = this.getBBox();
	          // const parent = this.get('parent'); // getParent
	          Util.merge(attrs, {
	            x: innerBox.minX - padding[3],
	            y: innerBox.minY - padding[0],
	            width: innerBox.width + padding[1] + padding[3],
	            height: innerBox.height + padding[0] + padding[2]
	          });
	          if (backShape) {
	            backShape.attr(attrs);
	          } else {
	            backShape = this.addShape('rect', {
	              zIndex: -1,
	              attrs: attrs
	            });
	          }
	          this.set('backShape', backShape);
	          this.sort();
	          return backShape;
	        },
	        removeChild: function removeChild(item, destroy) {
	          if (arguments.length >= 2) {
	            if (this.contain(item)) {
	              item.remove(destroy);
	            }
	          } else {
	            if (arguments.length === 1) {
	              if (Util.isBoolean(item)) {
	                destroy = item;
	              } else {
	                if (this.contain(item)) {
	                  item.remove(true);
	                }
	                return this;
	              }
	            }
	            if (arguments.length === 0) {
	              destroy = true;
	            }

	            Group.superclass.remove.call(this, destroy);
	          }
	          return this;
	        },

	        /**
	         * 向组中添加shape或者group
	         * @param {Object} items 图形或者分组
	         * @return {Object} group 本尊
	         */
	        add: function add(items) {
	          var self = this;
	          var children = self.get('children');
	          if (Util.isArray(items)) {
	            Util.each(items, function (item) {
	              var parent = item.get('parent');
	              if (parent) {
	                parent.removeChild(item, false);
	              }
	              self.__setEvn(item);
	            });
	            children.push.apply(children, items);
	          } else {
	            var item = items;
	            var parent = item.get('parent');
	            if (parent) {
	              parent.removeChild(item, false);
	            }
	            self.__setEvn(item);
	            children.push(item);
	          }
	          return self;
	        },
	        contain: function contain(item) {
	          var children = this.get('children');
	          return children.indexOf(item) > -1;
	        },
	        getChildByIndex: function getChildByIndex(index) {
	          var children = this.get('children');
	          return children[index];
	        },
	        getFirst: function getFirst() {
	          return this.getChildByIndex(0);
	        },
	        getLast: function getLast() {
	          var lastIndex = this.get('children').length - 1;
	          return this.getChildByIndex(lastIndex);
	        },
	        __setEvn: function __setEvn(item) {
	          var self = this;
	          item.__cfg.parent = self;
	          item.__cfg.context = self.__cfg.context;
	          item.__cfg.canvas = self.__cfg.canvas;
	          var clip = item.__attrs.clip;
	          if (clip) {
	            clip.setSilent('parent', self);
	            clip.setSilent('context', self.get('context'));
	          }
	          var children = item.__cfg.children;
	          if (children) {
	            Util.each(children, function (child) {
	              item.__setEvn(child);
	            });
	          }
	        },
	        getBBox: function getBBox() {
	          var self = this;
	          var minX = Infinity;
	          var maxX = -Infinity;
	          var minY = Infinity;
	          var maxY = -Infinity;
	          var children = self.get('children');
	          Util.each(children, function (child) {
	            if (child.get('visible')) {
	              var _box = child.getBBox();
	              if (!_box) {
	                return true;
	              }

	              var leftTop = [_box.minX, _box.minY, 1];
	              var leftBottom = [_box.minX, _box.maxY, 1];
	              var rightTop = [_box.maxX, _box.minY, 1];
	              var rightBottom = [_box.maxX, _box.maxY, 1];

	              child.apply(leftTop);
	              child.apply(leftBottom);
	              child.apply(rightTop);
	              child.apply(rightBottom);

	              var boxMinX = Math.min(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
	              var boxMaxX = Math.max(leftTop[0], leftBottom[0], rightTop[0], rightBottom[0]);
	              var boxMinY = Math.min(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);
	              var boxMaxY = Math.max(leftTop[1], leftBottom[1], rightTop[1], rightBottom[1]);

	              if (boxMinX < minX) {
	                minX = boxMinX;
	              }

	              if (boxMaxX > maxX) {
	                maxX = boxMaxX;
	              }

	              if (boxMinY < minY) {
	                minY = boxMinY;
	              }

	              if (boxMaxY > maxY) {
	                maxY = boxMaxY;
	              }
	            }
	          });
	          var box = {
	            minX: minX,
	            minY: minY,
	            maxX: maxX,
	            maxY: maxY
	          };
	          box.x = box.minX;
	          box.y = box.minY;
	          box.width = box.maxX - box.minX;
	          box.height = box.maxY - box.minY;
	          return box;
	        },
	        drawInner: function drawInner(context) {
	          var children = this.get('children');
	          for (var i = 0; i < children.length; i++) {
	            var child = children[i];
	            child.draw(context);
	          }
	          return this;
	        },
	        getCount: function getCount() {
	          return this.get('children').length;
	        },
	        sort: function sort() {
	          var children = this.get('children');
	          // 稳定排序
	          Util.each(children, function (child, index) {
	            child[INDEX] = index;
	            return child;
	          });

	          children.sort(getComparer(function (obj1, obj2) {
	            return obj1.get('zIndex') - obj2.get('zIndex');
	          }));

	          return this;
	        },
	        find: function find(id) {
	          return this.findBy(function (item) {
	            return item.get('id') === id;
	          });
	        },

	        /**
	         * 根据查找函数查找分组或者图形
	         * @param  {Function} fn 匹配函数
	         * @return {Canvas.Base} 分组或者图形
	         */
	        findBy: function findBy(fn) {
	          var children = this.get('children');
	          var rst = null;

	          Util.each(children, function (item) {
	            if (fn(item)) {
	              rst = item;
	            } else if (item.findBy) {
	              rst = item.findBy(fn);
	            }
	            if (rst) {
	              return false;
	            }
	          });
	          return rst;
	        },
	        findAllBy: function findAllBy(fn) {
	          var children = this.get('children');
	          var rst = [];
	          var childRst = [];
	          Util.each(children, function (item) {
	            if (fn(item)) {
	              rst.push(item);
	            }
	            if (item.findAllBy) {
	              childRst = item.findAllBy(fn);
	              rst = rst.concat(childRst);
	            }
	          });
	          return rst;
	        },

	        /**
	         * 根据x，y轴坐标获取对应的图形
	         * @param  {Number} x x坐标
	         * @param  {Number} y y坐标
	         * @return {Object}  最上面的图形
	         */
	        getShape: function getShape(x, y) {
	          var self = this;
	          var clip = self.__attrs.clip;
	          var children = self.__cfg.children;
	          var rst = void 0;
	          if (clip) {
	            if (clip.inside(x, y)) {
	              rst = find(children, x, y);
	            }
	          } else {
	            rst = find(children, x, y);
	          }
	          return rst;
	        },
	        clearTotalMatrix: function clearTotalMatrix() {
	          var m = this.get('totalMatrix');
	          if (m) {
	            this.setSilent('totalMatrix', null);
	            var children = this.__cfg.children;
	            for (var i = 0; i < children.length; i++) {
	              var child = children[i];
	              child.clearTotalMatrix();
	            }
	          }
	        },
	        clear: function clear() {
	          var children = this.get('children');

	          while (children.length !== 0) {
	            children[children.length - 1].remove();
	          }
	          return this;
	        },
	        destroy: function destroy() {
	          if (this.get('destroyed')) {
	            return;
	          }
	          this.clear();
	          Group.superclass.destroy.call(this);
	        }
	      });

	      module.exports = Group;

	      /***/
	    },
	    /* 89 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Attribute = __webpack_require__(229);
	      var Transform = __webpack_require__(230);
	      var Animate = __webpack_require__(234);
	      var Format = __webpack_require__(98);
	      var EventEmitter = __webpack_require__(262);

	      var SHAPE_ATTRS = ['fillStyle', 'font', 'globalAlpha', 'lineCap', 'lineWidth', 'lineJoin', 'miterLimit', 'shadowBlur', 'shadowColor', 'shadowOffsetX', 'shadowOffsetY', 'strokeStyle', 'textAlign', 'textBaseline', 'lineDash', 'lineDashOffset'];

	      var Element = function Element(cfg) {
	        this.__cfg = {
	          zIndex: 0,
	          capture: true,
	          visible: true,
	          destroyed: false
	        }; // 配置存放地

	        Util.assign(this.__cfg, this.getDefaultCfg(), cfg); // Element.CFG不合并，提升性能 合并默认配置，用户配置->继承默认配置->Element默认配置
	        this.initAttrs(this.__cfg.attrs); // 初始化绘图属性
	        this.initTransform(); // 初始化变换
	        this.init(); // 类型初始化
	      };

	      Element.CFG = {
	        /**
	         * 唯一标示
	         * @type {Number}
	         */
	        id: null,
	        /**
	         * Z轴的层叠关系，Z值越大离用户越近
	         * @type {Number}
	         */
	        zIndex: 0,
	        /**
	         * Canvas对象
	         * @type: {Object}
	         */
	        canvas: null,
	        /**
	         * 父元素指针
	         * @type {Object}
	         */
	        parent: null,
	        /**
	         * 用来设置当前对象是否能被捕捉
	         * true 能
	         * false 不能
	         * 对象默认是都可以被捕捉的, 当capture为false时，group.getShape(x, y)方法无法获得该元素
	         * 通过将不必要捕捉的元素的该属性设置成false, 来提高捕捉性能
	         * @type {Boolean}
	         **/
	        capture: true,
	        /**
	         * 画布的上下文
	         * @type {Object}
	         */
	        context: null,
	        /**
	         * 是否显示
	         * @type {Boolean}
	         */
	        visible: true,
	        /**
	         * 是否被销毁
	         * @type: {Boolean}
	         */
	        destroyed: false
	      };

	      Util.augment(Element, Attribute, Transform, EventEmitter, Animate, {
	        init: function init() {
	          this.setSilent('animable', true);
	          this.setSilent('animating', false); // 初始时不处于动画状态
	          var attrs = this.__attrs;
	          if (attrs && attrs.rotate) {
	            this.rotateAtStart(attrs.rotate);
	          }
	        },
	        getParent: function getParent() {
	          return this.get('parent');
	        },

	        /**
	         * 获取默认的配置信息
	         * @protected
	         * @return {Object} 默认的属性
	         */
	        getDefaultCfg: function getDefaultCfg() {
	          return {};
	        },
	        set: function set(name, value) {
	          var m = '__set' + Util.upperFirst(name);

	          if (this[m]) {
	            value = this[m](value);
	          }
	          this.__cfg[name] = value;
	          return this;
	        },
	        setSilent: function setSilent(name, value) {
	          this.__cfg[name] = value;
	        },
	        get: function get(name) {
	          return this.__cfg[name];
	        },
	        draw: function draw(context) {
	          if (this.get('destroyed')) {
	            return;
	          }
	          if (this.get('visible')) {
	            this.setContext(context);
	            this.drawInner(context);
	            this.restoreContext(context);
	          }
	        },
	        setContext: function setContext(context) {
	          var clip = this.__attrs.clip;
	          context.save();
	          if (clip) {
	            // context.save();
	            clip.resetTransform(context);
	            clip.createPath(context);
	            context.clip();
	            // context.restore();
	          }
	          this.resetContext(context);
	          this.resetTransform(context);
	        },
	        restoreContext: function restoreContext(context) {
	          context.restore();
	        },
	        resetContext: function resetContext(context) {
	          var elAttrs = this.__attrs;
	          // var canvas = this.get('canvas');
	          if (!this.isGroup) {
	            // canvas.registShape(this); // 快速拾取方案暂时不执行
	            for (var k in elAttrs) {
	              if (SHAPE_ATTRS.indexOf(k) > -1) {
	                // 非canvas属性不附加
	                var v = elAttrs[k];
	                if (k === 'fillStyle') {
	                  v = Format.parseStyle(v, this);
	                }
	                if (k === 'strokeStyle') {
	                  v = Format.parseStyle(v, this);
	                }
	                if (k === 'lineDash' && context.setLineDash) {
	                  if (Util.isArray(v)) {
	                    context.setLineDash(v);
	                  } else if (Util.isString(v)) {
	                    context.setLineDash(v.split(' '));
	                  }
	                } else {
	                  context[k] = v;
	                }
	              }
	            }
	          }
	        },
	        drawInner: function drawInner() /* context */{},
	        show: function show() {
	          this.set('visible', true);
	          return this;
	        },
	        hide: function hide() {
	          this.set('visible', false);
	          return this;
	        },
	        remove: function remove(destroy) {
	          if (destroy === undefined) {
	            destroy = true;
	          }

	          if (this.get('parent')) {
	            var parent = this.get('parent');
	            var children = parent.get('children');
	            Util.remove(children, this);
	          }

	          if (destroy) {
	            this.destroy();
	          }

	          return this;
	        },
	        destroy: function destroy() {
	          var destroyed = this.get('destroyed');
	          if (destroyed) {
	            return;
	          }
	          // 如果正在执行动画，清理动画
	          if (this.get('animating')) {
	            var timer = this.get('animateTimer');
	            timer && timer.stop();
	          }
	          this.__cfg = {};
	          this.__attrs = null;
	          this.removeEvent(); // 移除所有的事件
	          this.set('destroyed', true);
	        },
	        __setZIndex: function __setZIndex(zIndex) {
	          this.__cfg.zIndex = zIndex;

	          if (!Util.isNil(this.get('parent'))) {
	            this.get('parent').sort();
	          }
	          return zIndex;
	        },
	        __setAttrs: function __setAttrs(attrs) {
	          this.attr(attrs);
	          return attrs;
	        },
	        setZIndex: function setZIndex(zIndex) {
	          this.__cfg.zIndex = zIndex;
	          return zIndex;
	        },
	        clone: function clone() {
	          return Util.clone(this);
	        },
	        getBBox: function getBBox() {
	          return {
	            minX: 0,
	            maxX: 0,
	            minY: 0,
	            maxY: 0
	          };
	        }
	      });

	      module.exports = Element;

	      /***/
	    },
	    /* 90 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return deg2rad;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return rad2deg;
	      });
	      var deg2rad = Math.PI / 180;
	      var rad2deg = 180 / Math.PI;

	      /***/
	    },
	    /* 91 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return rgbBasis;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return rgbBasisClosed;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(51);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(92);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(20);

	      /* harmony default export */__webpack_exports__["a"] = function rgbGamma(y) {
	        var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

	        function rgb(start, end) {
	          var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
	              g = color(start.g, end.g),
	              b = color(start.b, end.b),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.r = r(t);
	            start.g = g(t);
	            start.b = b(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        }

	        rgb.gamma = rgbGamma;

	        return rgb;
	      }(1);

	      function rgbSpline(spline) {
	        return function (colors) {
	          var n = colors.length,
	              r = new Array(n),
	              g = new Array(n),
	              b = new Array(n),
	              i,
	              color;
	          for (i = 0; i < n; ++i) {
	            color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
	            r[i] = color.r || 0;
	            g[i] = color.g || 0;
	            b[i] = color.b || 0;
	          }
	          r = spline(r);
	          g = spline(g);
	          b = spline(b);
	          color.opacity = 1;
	          return function (t) {
	            color.r = r(t);
	            color.g = g(t);
	            color.b = b(t);
	            return color + "";
	          };
	        };
	      }

	      var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
	      var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);

	      /***/
	    },
	    /* 92 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(51);

	      /* harmony default export */__webpack_exports__["a"] = function (values) {
	        var n = values.length;
	        return function (t) {
	          var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	              v0 = values[(i + n - 1) % n],
	              v1 = values[i % n],
	              v2 = values[(i + 1) % n],
	              v3 = values[(i + 2) % n];
	          return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
	        };
	      };

	      /***/
	    },
	    /* 93 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (x) {
	        return function () {
	          return x;
	        };
	      };

	      /***/
	    },
	    /* 94 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var nb = b ? b.length : 0,
	            na = a ? Math.min(nb, a.length) : 0,
	            x = new Array(na),
	            c = new Array(nb),
	            i;

	        for (i = 0; i < na; ++i) {
	          x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
	        }for (; i < nb; ++i) {
	          c[i] = b[i];
	        }return function (t) {
	          for (i = 0; i < na; ++i) {
	            c[i] = x[i](t);
	          }return c;
	        };
	      };

	      /***/
	    },
	    /* 95 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        var d = new Date();
	        return a = +a, b -= a, function (t) {
	          return d.setTime(a + b * t), d;
	        };
	      };

	      /***/
	    },
	    /* 96 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(48);
	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var i = {},
	            c = {},
	            k;

	        if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
	        if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

	        for (k in b) {
	          if (k in a) {
	            i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
	          } else {
	            c[k] = b[k];
	          }
	        }

	        return function (t) {
	          for (k in i) {
	            c[k] = i[k](t);
	          }return c;
	        };
	      };

	      /***/
	    },
	    /* 97 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(30);

	      var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	          reB = new RegExp(reA.source, "g");

	      function zero(b) {
	        return function () {
	          return b;
	        };
	      }

	      function one(b) {
	        return function (t) {
	          return b(t) + "";
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = function (a, b) {
	        var bi = reA.lastIndex = reB.lastIndex = 0,

	        // scan index for next number in b
	        am,

	        // current match in a
	        bm,

	        // current match in b
	        bs,

	        // string preceding current number in b, if any
	        i = -1,

	        // index in s
	        s = [],

	        // string constants and placeholders
	        q = []; // number interpolators

	        // Coerce inputs to strings.
	        a = a + "", b = b + "";

	        // Interpolate pairs of numbers in a & b.
	        while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	          if ((bs = bm.index) > bi) {
	            // a string precedes the next number in b
	            bs = b.slice(bi, bs);
	            if (s[i]) s[i] += bs; // coalesce with previous string
	            else s[++i] = bs;
	          }
	          if ((am = am[0]) === (bm = bm[0])) {
	            // numbers in a & b match
	            if (s[i]) s[i] += bm; // coalesce with previous string
	            else s[++i] = bm;
	          } else {
	            // interpolate non-matching numbers
	            s[++i] = null;
	            q.push({ i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm) });
	          }
	          bi = reB.lastIndex;
	        }

	        // Add remains of b.
	        if (bi < b.length) {
	          bs = b.slice(bi);
	          if (s[i]) s[i] += bs; // coalesce with previous string
	          else s[++i] = bs;
	        }

	        // Special optimization for only a single match.
	        // Otherwise, interpolate each of the numbers and rejoin the string.
	        return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	          for (var i = 0, o; i < b; ++i) {
	            s[(o = q[i]).i] = o.x(t);
	          }return s.join("");
	        });
	      };

	      /***/
	    },
	    /* 98 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var regexTags = /[MLHVQTCSAZ]([^MLHVQTCSAZ]*)/ig;
	      var regexDot = /[^\s\,]+/ig;
	      var regexLG = /^l\s*\(\s*([\d.]+)\s*\)\s*(.*)/i;
	      var regexRG = /^r\s*\(\s*([\d.]+)\s*,\s*([\d.]+)\s*,\s*([\d.]+)\s*\)\s*(.*)/i;
	      var regexPR = /^p\s*\(\s*([axyn])\s*\)\s*(.*)/i;
	      var regexColorStop = /[\d.]+:(#[^\s]+|[^\)]+\))/ig;
	      var numColorCache = {};

	      function addStop(steps, gradient) {
	        var arr = steps.match(regexColorStop);
	        Util.each(arr, function (item) {
	          item = item.split(':');
	          gradient.addColorStop(item[0], item[1]);
	        });
	      }

	      function parseLineGradient(color, self) {
	        var arr = regexLG.exec(color);
	        var angle = Util.mod(Util.toRadian(parseFloat(arr[1])), Math.PI * 2);
	        var steps = arr[2];
	        var box = self.getBBox();
	        var start = void 0;
	        var end = void 0;

	        if (angle >= 0 && angle < 0.5 * Math.PI) {
	          start = {
	            x: box.minX,
	            y: box.minY
	          };
	          end = {
	            x: box.maxX,
	            y: box.maxY
	          };
	        } else if (0.5 * Math.PI <= angle && angle < Math.PI) {
	          start = {
	            x: box.maxX,
	            y: box.minY
	          };
	          end = {
	            x: box.minX,
	            y: box.maxY
	          };
	        } else if (Math.PI <= angle && angle < 1.5 * Math.PI) {
	          start = {
	            x: box.maxX,
	            y: box.maxY
	          };
	          end = {
	            x: box.minX,
	            y: box.minY
	          };
	        } else {
	          start = {
	            x: box.minX,
	            y: box.maxY
	          };
	          end = {
	            x: box.maxX,
	            y: box.minY
	          };
	        }

	        var tanTheta = Math.tan(angle);
	        var tanTheta2 = tanTheta * tanTheta;

	        var x = (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.x;
	        var y = tanTheta * (end.x - start.x + tanTheta * (end.y - start.y)) / (tanTheta2 + 1) + start.y;
	        var context = self.get('context');
	        var gradient = context.createLinearGradient(start.x, start.y, x, y);
	        addStop(steps, gradient);
	        return gradient;
	      }

	      function parseRadialGradient(color, self) {
	        var arr = regexRG.exec(color);
	        var fx = parseFloat(arr[1]);
	        var fy = parseFloat(arr[2]);
	        var fr = parseFloat(arr[3]);
	        var steps = arr[4];
	        var box = self.getBBox();
	        var context = self.get('context');
	        var width = box.maxX - box.minX;
	        var height = box.maxY - box.minY;
	        var r = Math.sqrt(width * width + height * height) / 2;
	        var gradient = context.createRadialGradient(box.minX + width * fx, box.minY + height * fy, fr * r, box.minX + width / 2, box.minY + height / 2, r);
	        addStop(steps, gradient);
	        return gradient;
	      }

	      function parsePattern(color, self) {
	        if (self.get('patternSource') && self.get('patternSource') === color) {
	          return self.get('pattern');
	        }
	        var pattern = void 0;
	        var img = void 0;
	        var arr = regexPR.exec(color);
	        var repeat = arr[1];
	        var source = arr[2];

	        // Function to be called when pattern loads
	        function onload() {
	          // Create pattern
	          var context = self.get('context');
	          pattern = context.createPattern(img, repeat);
	          self.setSilent('pattern', pattern); // be a cache
	          self.setSilent('patternSource', color);
	        }

	        switch (repeat) {
	          case 'a':
	            repeat = 'repeat';
	            break;
	          case 'x':
	            repeat = 'repeat-x';
	            break;
	          case 'y':
	            repeat = 'repeat-y';
	            break;
	          case 'n':
	            repeat = 'no-repeat';
	            break;
	          default:
	            repeat = 'no-repeat';
	        }

	        img = new Image();
	        // If source URL is not a data URL
	        if (!source.match(/^data:/i)) {
	          // Set crossOrigin for this image
	          img.crossOrigin = 'Anonymous';
	        }
	        img.src = source;

	        if (img.complete) {
	          onload();
	        } else {
	          img.onload = onload;
	          // Fix onload() bug in IE9
	          img.src = img.src;
	        }

	        return pattern;
	      }

	      module.exports = {
	        parsePath: function parsePath(path) {
	          path = path || [];
	          if (Util.isArray(path)) {
	            return path;
	          }

	          if (Util.isString(path)) {
	            path = path.match(regexTags);
	            Util.each(path, function (item, index) {
	              item = item.match(regexDot);
	              if (item[0].length > 1) {
	                var tag = item[0].charAt(0);
	                item.splice(1, 0, item[0].substr(1));
	                item[0] = tag;
	              }
	              Util.each(item, function (sub, i) {
	                if (!isNaN(sub)) {
	                  item[i] = +sub;
	                }
	              });
	              path[index] = item;
	            });
	            return path;
	          }
	        },
	        parseStyle: function parseStyle(color, self) {
	          if (Util.isString(color)) {
	            if (color[1] === '(' || color[2] === '(') {
	              if (color[0] === 'l') {
	                // regexLG.test(color)
	                return parseLineGradient(color, self);
	              } else if (color[0] === 'r') {
	                // regexRG.test(color)
	                return parseRadialGradient(color, self);
	              } else if (color[0] === 'p') {
	                // regexPR.test(color)
	                return parsePattern(color, self);
	              }
	            }
	            return color;
	          }
	        },
	        numberToColor: function numberToColor(num) {
	          // 增加缓存
	          var color = numColorCache[num];
	          if (!color) {
	            var str = num.toString(16);
	            for (var i = str.length; i < 6; i++) {
	              str = '0' + str;
	            }
	            color = '#' + str;
	            numColorCache[num] = color;
	          }
	          return color;
	        }
	      };

	      /***/
	    },
	    /* 99 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Circle = function Circle(cfg) {
	        Circle.superclass.constructor.call(this, cfg);
	      };

	      Circle.ATTRS = {
	        x: 0,
	        y: 0,
	        r: 0,
	        lineWidth: 1
	      };

	      Util.extend(Circle, Shape);

	      Util.augment(Circle, {
	        canFill: true,
	        canStroke: true,
	        type: 'circle',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2 + r;
	          return {
	            minX: cx - halfWidth,
	            minY: cy - halfWidth,
	            maxX: cx + halfWidth,
	            maxY: cy + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();
	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;

	          return Inside.circle(cx, cy, r, x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          var lineWidth = this.getHitLineWidth();

	          return Inside.arcline(cx, cy, r, 0, Math.PI * 2, false, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r;
	          context = context || self.get('context');

	          context.beginPath();
	          context.arc(cx, cy, r, 0, Math.PI * 2, false);
	        }
	      });

	      module.exports = Circle;

	      /***/
	    },
	    /* 100 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var mat3 = __webpack_require__(3).mat3;
	      var vec3 = __webpack_require__(3).vec3;

	      var Ellipse = function Ellipse(cfg) {
	        Ellipse.superclass.constructor.call(this, cfg);
	      };

	      Ellipse.ATTRS = {
	        x: 0,
	        y: 0,
	        rx: 1,
	        ry: 1,
	        lineWidth: 1
	      };

	      Util.extend(Ellipse, Shape);

	      Util.augment(Ellipse, {
	        canFill: true,
	        canStroke: true,
	        type: 'ellipse',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;
	          var lineWidth = this.getHitLineWidth();
	          var halfXWidth = rx + lineWidth / 2;
	          var halfYWidth = ry + lineWidth / 2;

	          return {
	            minX: cx - halfXWidth,
	            minY: cy - halfYWidth,
	            maxX: cx + halfXWidth,
	            maxY: cy + halfYWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();

	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;

	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;

	          var p = [x, y, 1];
	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          var inm = mat3.invert([], m);
	          vec3.transformMat3(p, p, inm);

	          return Inside.circle(0, 0, r, p[0], p[1]);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;
	          var lineWidth = this.getHitLineWidth();

	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;
	          var p = [x, y, 1];
	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          var inm = mat3.invert([], m);
	          vec3.transformMat3(p, p, inm);

	          return Inside.arcline(0, 0, r, 0, Math.PI * 2, false, lineWidth, p[0], p[1]);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rx = attrs.rx;
	          var ry = attrs.ry;

	          context = context || self.get('context');
	          var r = rx > ry ? rx : ry;
	          var scaleX = rx > ry ? 1 : rx / ry;
	          var scaleY = rx > ry ? ry / rx : 1;

	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          mat3.scale(m, m, [scaleX, scaleY]);
	          mat3.translate(m, m, [cx, cy]);
	          context.beginPath();
	          context.save();
	          context.transform(m[0], m[1], m[3], m[4], m[6], m[7]);
	          context.arc(0, 0, r, 0, Math.PI * 2);
	          context.restore();
	          context.closePath();
	        }
	      });

	      module.exports = Ellipse;

	      /***/
	    },
	    /* 101 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var PathSegment = __webpack_require__(102);
	      var Format = __webpack_require__(98);
	      var Arrow = __webpack_require__(15);
	      var PathUtil = __webpack_require__(46);
	      var CubicMath = __webpack_require__(31);

	      var Path = function Path(cfg) {
	        Path.superclass.constructor.call(this, cfg);
	      };

	      Path.ATTRS = {
	        path: null,
	        lineWidth: 1,
	        curve: null, // 曲线path
	        tCache: null,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Path, Shape);

	      Util.augment(Path, {
	        canFill: true,
	        canStroke: true,
	        type: 'path',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        __afterSetAttrPath: function __afterSetAttrPath(path) {
	          var self = this;
	          if (Util.isNil(path)) {
	            self.setSilent('segments', null);
	            self.setSilent('box', undefined);
	            return;
	          }
	          var pathArray = Format.parsePath(path);
	          var preSegment = void 0;
	          var segments = [];

	          if (!Util.isArray(pathArray) || pathArray.length === 0 || pathArray[0][0] !== 'M' && pathArray[0][0] !== 'm') {
	            return;
	          }
	          var count = pathArray.length;
	          for (var i = 0; i < pathArray.length; i++) {
	            var item = pathArray[i];
	            preSegment = new PathSegment(item, preSegment, i === count - 1);
	            segments.push(preSegment);
	          }
	          self.setSilent('segments', segments);
	          self.set('tCache', null);
	          this.setSilent('box', null);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll(objs) {
	          if (objs.path) {
	            this.__afterSetAttrPath(objs.path);
	          }
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var segments = self.get('segments');

	          if (!segments) {
	            return null;
	          }
	          var lineWidth = this.getHitLineWidth();
	          var minX = Infinity;
	          var maxX = -Infinity;
	          var minY = Infinity;
	          var maxY = -Infinity;
	          Util.each(segments, function (segment) {
	            segment.getBBox(lineWidth);
	            var box = segment.box;
	            if (box) {
	              if (box.minX < minX) {
	                minX = box.minX;
	              }

	              if (box.maxX > maxX) {
	                maxX = box.maxX;
	              }

	              if (box.minY < minY) {
	                minY = box.minY;
	              }

	              if (box.maxY > maxY) {
	                maxY = box.maxY;
	              }
	            }
	          });
	          return {
	            minX: minX,
	            minY: minY,
	            maxX: maxX,
	            maxY: maxY
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var self = this;
	          var context = self.get('context');
	          if (!context) return undefined;
	          self.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var segments = self.get('segments');
	          if (!Util.isEmpty(segments)) {
	            var lineWidth = self.getHitLineWidth();
	            for (var i = 0, l = segments.length; i < l; i++) {
	              if (segments[i].isInside(x, y, lineWidth)) {
	                return true;
	              }
	            }
	          }

	          return false;
	        },
	        __setTcache: function __setTcache() {
	          var totalLength = 0;
	          var tempLength = 0;
	          var tCache = [];
	          var segmentT = void 0;
	          var segmentL = void 0;
	          var segmentN = void 0;
	          var l = void 0;
	          var curve = this.curve;

	          if (!curve) {
	            return;
	          }

	          Util.each(curve, function (segment, i) {
	            segmentN = curve[i + 1];
	            l = segment.length;
	            if (segmentN) {
	              totalLength += CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	            }
	          });

	          Util.each(curve, function (segment, i) {
	            segmentN = curve[i + 1];
	            l = segment.length;
	            if (segmentN) {
	              segmentT = [];
	              segmentT[0] = tempLength / totalLength;
	              segmentL = CubicMath.len(segment[l - 2], segment[l - 1], segmentN[1], segmentN[2], segmentN[3], segmentN[4], segmentN[5], segmentN[6]);
	              tempLength += segmentL;
	              segmentT[1] = tempLength / totalLength;
	              tCache.push(segmentT);
	            }
	          });

	          this.tCache = tCache;
	        },
	        __calculateCurve: function __calculateCurve() {
	          var self = this;
	          var attrs = self.__attrs;
	          var path = attrs.path;
	          this.curve = PathUtil.pathTocurve(path);
	        },
	        getPoint: function getPoint(t) {
	          var tCache = this.tCache;
	          var subt = void 0;
	          var index = void 0;

	          if (!tCache) {
	            this.__calculateCurve();
	            this.__setTcache();
	            tCache = this.tCache;
	          }

	          var curve = this.curve;

	          if (!tCache) {
	            if (curve) {
	              return {
	                x: curve[0][1],
	                y: curve[0][2]
	              };
	            }
	            return null;
	          }
	          Util.each(tCache, function (v, i) {
	            if (t >= v[0] && t <= v[1]) {
	              subt = (t - v[0]) / (v[1] - v[0]);
	              index = i;
	            }
	          });
	          var seg = curve[index];
	          if (Util.isNil(seg) || Util.isNil(index)) {
	            return null;
	          }
	          var l = seg.length;
	          var nextSeg = curve[index + 1];
	          return {
	            x: CubicMath.at(seg[l - 2], nextSeg[1], nextSeg[3], nextSeg[5], 1 - subt),
	            y: CubicMath.at(seg[l - 1], nextSeg[2], nextSeg[4], nextSeg[6], 1 - subt)
	          };
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var segments = self.get('segments');

	          if (!Util.isArray(segments)) return;

	          context = context || self.get('context');

	          context.beginPath();

	          var path = attrs.path;
	          var startPoint = void 0;
	          var endPoint = void 0;
	          var closed = false;
	          if (path[path.length - 1] === 'z' || path[path.length - 1] === 'Z' || attrs.fill) {
	            // 闭合路径不绘制箭头
	            closed = true;
	          }

	          var segmentsLen = segments.length;
	          if (segmentsLen > 1 && !closed) {
	            startPoint = segments[0].endPoint;
	            endPoint = segments[1].endPoint;
	            Arrow.addStartArrow(context, attrs, endPoint.x, endPoint.y, startPoint.x, startPoint.y);
	          }

	          for (var i = 0, l = segmentsLen; i < l; i++) {
	            segments[i].draw(context);
	          }

	          if (segmentsLen > 1 && !closed) {
	            startPoint = segments[segmentsLen - 2].endPoint;
	            endPoint = segments[segmentsLen - 1].endPoint;
	            Arrow.addEndArrow(context, attrs, startPoint.x, startPoint.y, endPoint.x, endPoint.y);
	          }
	        }
	      });

	      module.exports = Path;

	      /***/
	    },
	    /* 102 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Inside = __webpack_require__(2);
	      var Cubic = __webpack_require__(31);
	      var Quadratic = __webpack_require__(53);
	      var Ellipse = __webpack_require__(264);
	      var vec3 = __webpack_require__(3).vec3;
	      var mat3 = __webpack_require__(3).mat3;

	      var ARR_CMD = ['m', 'l', 'c', 'a', 'q', 'h', 'v', 't', 's', 'z'];

	      function toAbsolute(x, y, curPoint) {
	        // 获取绝对坐标
	        return {
	          x: curPoint.x + x,
	          y: curPoint.y + y
	        };
	      }

	      function toSymmetry(point, center) {
	        // 点对称
	        return {
	          x: center.x + (center.x - point.x),
	          y: center.y + (center.y - point.y)
	        };
	      }

	      function vMag(v) {
	        return Math.sqrt(v[0] * v[0] + v[1] * v[1]);
	      }

	      function vRatio(u, v) {
	        return (u[0] * v[0] + u[1] * v[1]) / (vMag(u) * vMag(v));
	      }

	      function vAngle(u, v) {
	        return (u[0] * v[1] < u[1] * v[0] ? -1 : 1) * Math.acos(vRatio(u, v));
	      }

	      function getArcParams(point1, point2, fa, fs, rx, ry, psiDeg) {
	        var psi = Util.mod(Util.toRadian(psiDeg), Math.PI * 2);
	        var x1 = point1.x;
	        var y1 = point1.y;
	        var x2 = point2.x;
	        var y2 = point2.y;
	        var xp = Math.cos(psi) * (x1 - x2) / 2.0 + Math.sin(psi) * (y1 - y2) / 2.0;
	        var yp = -1 * Math.sin(psi) * (x1 - x2) / 2.0 + Math.cos(psi) * (y1 - y2) / 2.0;
	        var lambda = xp * xp / (rx * rx) + yp * yp / (ry * ry);

	        if (lambda > 1) {
	          rx *= Math.sqrt(lambda);
	          ry *= Math.sqrt(lambda);
	        }

	        var f = Math.sqrt((rx * rx * (ry * ry) - rx * rx * (yp * yp) - ry * ry * (xp * xp)) / (rx * rx * (yp * yp) + ry * ry * (xp * xp)));

	        if (fa === fs) {
	          f *= -1;
	        }
	        if (isNaN(f)) {
	          f = 0;
	        }

	        var cxp = f * rx * yp / ry;
	        var cyp = f * -ry * xp / rx;

	        var cx = (x1 + x2) / 2.0 + Math.cos(psi) * cxp - Math.sin(psi) * cyp;
	        var cy = (y1 + y2) / 2.0 + Math.sin(psi) * cxp + Math.cos(psi) * cyp;

	        var theta = vAngle([1, 0], [(xp - cxp) / rx, (yp - cyp) / ry]);
	        var u = [(xp - cxp) / rx, (yp - cyp) / ry];
	        var v = [(-1 * xp - cxp) / rx, (-1 * yp - cyp) / ry];
	        var dTheta = vAngle(u, v);

	        if (vRatio(u, v) <= -1) {
	          dTheta = Math.PI;
	        }
	        if (vRatio(u, v) >= 1) {
	          dTheta = 0;
	        }
	        if (fs === 0 && dTheta > 0) {
	          dTheta = dTheta - 2 * Math.PI;
	        }
	        if (fs === 1 && dTheta < 0) {
	          dTheta = dTheta + 2 * Math.PI;
	        }
	        return [point1, cx, cy, rx, ry, theta, dTheta, psi, fs];
	      }

	      var PathSegment = function PathSegment(item, preSegment, isLast) {
	        this.preSegment = preSegment;
	        this.isLast = isLast;
	        this.init(item, preSegment);
	      };

	      Util.augment(PathSegment, {
	        init: function init(item, preSegment) {
	          var command = item[0];
	          preSegment = preSegment || {
	            endPoint: {
	              x: 0,
	              y: 0
	            }
	          };
	          var relative = ARR_CMD.indexOf(command) >= 0; // /[a-z]/.test(command);
	          var cmd = relative ? command.toUpperCase() : command;
	          var p = item;
	          var point1 = void 0;
	          var point2 = void 0;
	          var point3 = void 0;
	          var point = void 0;
	          var preEndPoint = preSegment.endPoint;

	          var p1 = p[1];
	          var p2 = p[2];
	          switch (cmd) {
	            default:
	              break;
	            case 'M':
	              if (relative) {
	                point = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              this.command = 'M';
	              this.params = [preEndPoint, point];
	              this.subStart = point;
	              this.endPoint = point;
	              break;
	            case 'L':
	              if (relative) {
	                point = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'H':
	              if (relative) {
	                point = toAbsolute(p1, 0, preEndPoint);
	              } else {
	                point = {
	                  x: p1,
	                  y: preEndPoint.y
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'V':
	              if (relative) {
	                point = toAbsolute(0, p1, preEndPoint);
	              } else {
	                point = {
	                  x: preEndPoint.x,
	                  y: p1
	                };
	              }
	              this.command = 'L';
	              this.params = [preEndPoint, point];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point;
	              this.endTangent = function () {
	                return [point.x - preEndPoint.x, point.y - preEndPoint.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point.x, preEndPoint.y - point.y];
	              };
	              break;
	            case 'Q':
	              if (relative) {
	                point1 = toAbsolute(p1, p2, preEndPoint);
	                point2 = toAbsolute(p[3], p[4], preEndPoint);
	              } else {
	                point1 = {
	                  x: p1,
	                  y: p2
	                };
	                point2 = {
	                  x: p[3],
	                  y: p[4]
	                };
	              }
	              this.command = 'Q';
	              this.params = [preEndPoint, point1, point2];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point2;
	              this.endTangent = function () {
	                return [point2.x - point1.x, point2.y - point1.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	              };
	              break;
	            case 'T':
	              if (relative) {
	                point2 = toAbsolute(p1, p2, preEndPoint);
	              } else {
	                point2 = {
	                  x: p1,
	                  y: p2
	                };
	              }
	              if (preSegment.command === 'Q') {
	                point1 = toSymmetry(preSegment.params[1], preEndPoint);
	                this.command = 'Q';
	                this.params = [preEndPoint, point1, point2];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point2;
	                this.endTangent = function () {
	                  return [point2.x - point1.x, point2.y - point1.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	                };
	              } else {
	                this.command = 'TL';
	                this.params = [preEndPoint, point2];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point2;
	                this.endTangent = function () {
	                  return [point2.x - preEndPoint.x, point2.y - preEndPoint.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point2.x, preEndPoint.y - point2.y];
	                };
	              }

	              break;
	            case 'C':
	              if (relative) {
	                point1 = toAbsolute(p1, p2, preEndPoint);
	                point2 = toAbsolute(p[3], p[4], preEndPoint);
	                point3 = toAbsolute(p[5], p[6], preEndPoint);
	              } else {
	                point1 = {
	                  x: p1,
	                  y: p2
	                };
	                point2 = {
	                  x: p[3],
	                  y: p[4]
	                };
	                point3 = {
	                  x: p[5],
	                  y: p[6]
	                };
	              }
	              this.command = 'C';
	              this.params = [preEndPoint, point1, point2, point3];
	              this.subStart = preSegment.subStart;
	              this.endPoint = point3;
	              this.endTangent = function () {
	                return [point3.x - point2.x, point3.y - point2.y];
	              };
	              this.startTangent = function () {
	                return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	              };
	              break;
	            case 'S':
	              if (relative) {
	                point2 = toAbsolute(p1, p2, preEndPoint);
	                point3 = toAbsolute(p[3], p[4], preEndPoint);
	              } else {
	                point2 = {
	                  x: p1,
	                  y: p2
	                };
	                point3 = {
	                  x: p[3],
	                  y: p[4]
	                };
	              }
	              if (preSegment.command === 'C') {
	                point1 = toSymmetry(preSegment.params[2], preEndPoint);
	                this.command = 'C';
	                this.params = [preEndPoint, point1, point2, point3];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point3;
	                this.endTangent = function () {
	                  return [point3.x - point2.x, point3.y - point2.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point1.x, preEndPoint.y - point1.y];
	                };
	              } else {
	                this.command = 'SQ';
	                this.params = [preEndPoint, point2, point3];
	                this.subStart = preSegment.subStart;
	                this.endPoint = point3;
	                this.endTangent = function () {
	                  return [point3.x - point2.x, point3.y - point2.y];
	                };
	                this.startTangent = function () {
	                  return [preEndPoint.x - point2.x, preEndPoint.y - point2.y];
	                };
	              }
	              break;
	            case 'A':
	              {
	                var rx = p1;
	                var ry = p2;
	                var psi = p[3];
	                var fa = p[4];
	                var fs = p[5];
	                if (relative) {
	                  point = toAbsolute(p[6], p[7], preEndPoint);
	                } else {
	                  point = {
	                    x: p[6],
	                    y: p[7]
	                  };
	                }

	                this.command = 'A';
	                this.params = getArcParams(preEndPoint, point, fa, fs, rx, ry, psi);
	                this.subStart = preSegment.subStart;
	                this.endPoint = point;
	                break;
	              }
	            case 'Z':
	              {
	                this.command = 'Z';
	                this.params = [preEndPoint, preSegment.subStart];
	                this.subStart = preSegment.subStart;
	                this.endPoint = preSegment.subStart;
	              }
	          }
	        },
	        isInside: function isInside(x, y, lineWidth) {
	          var self = this;
	          var command = self.command;
	          var params = self.params;
	          var box = self.box;
	          if (box) {
	            if (!Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y)) {
	              return false;
	            }
	          }
	          switch (command) {
	            default:
	              break;
	            case 'M':
	              return false;
	            case 'TL':
	            case 'L':
	            case 'Z':
	              return Inside.line(params[0].x, params[0].y, params[1].x, params[1].y, lineWidth, x, y);
	            case 'SQ':
	            case 'Q':
	              return Inside.quadraticline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, lineWidth, x, y);
	            case 'C':
	              {
	                return Inside.cubicline(params[0].x, params[0].y, params[1].x, params[1].y, params[2].x, params[2].y, params[3].x, params[3].y, lineWidth, x, y);
	              }
	            case 'A':
	              {
	                var p = params;
	                var cx = p[1];
	                var cy = p[2];
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];

	                var r = rx > ry ? rx : ry;
	                var scaleX = rx > ry ? 1 : rx / ry;
	                var scaleY = rx > ry ? ry / rx : 1;

	                p = [x, y, 1];
	                var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	                mat3.translate(m, m, [-cx, -cy]);
	                mat3.rotate(m, m, -psi);
	                mat3.scale(m, m, [1 / scaleX, 1 / scaleY]);
	                vec3.transformMat3(p, p, m);
	                return Inside.arcline(0, 0, r, theta, theta + dTheta, 1 - fs, lineWidth, p[0], p[1]);
	              }
	          }
	          return false;
	        },
	        draw: function draw(context) {
	          var command = this.command;
	          var params = this.params;
	          var point1 = void 0;
	          var point2 = void 0;
	          var point3 = void 0;

	          switch (command) {
	            default:
	              break;
	            case 'M':
	              context.moveTo(params[1].x, params[1].y);
	              break;
	            case 'TL':
	            case 'L':
	              context.lineTo(params[1].x, params[1].y);
	              break;
	            case 'SQ':
	            case 'Q':
	              point1 = params[1];
	              point2 = params[2];
	              context.quadraticCurveTo(point1.x, point1.y, point2.x, point2.y);
	              break;
	            case 'C':
	              point1 = params[1];
	              point2 = params[2];
	              point3 = params[3];
	              context.bezierCurveTo(point1.x, point1.y, point2.x, point2.y, point3.x, point3.y);
	              break;
	            case 'A':
	              {
	                var p = params;
	                var p1 = p[1];
	                var p2 = p[2];
	                var cx = p1;
	                var cy = p2;
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];

	                var r = rx > ry ? rx : ry;
	                var scaleX = rx > ry ? 1 : rx / ry;
	                var scaleY = rx > ry ? ry / rx : 1;

	                context.translate(cx, cy);
	                context.rotate(psi);
	                context.scale(scaleX, scaleY);
	                context.arc(0, 0, r, theta, theta + dTheta, 1 - fs);
	                context.scale(1 / scaleX, 1 / scaleY);
	                context.rotate(-psi);
	                context.translate(-cx, -cy);
	                break;
	              }
	            case 'Z':
	              context.closePath();
	              break;
	          }
	        },
	        getBBox: function getBBox(lineWidth) {
	          var halfWidth = lineWidth / 2;
	          var params = this.params;
	          var yDims = void 0;
	          var xDims = void 0;
	          var i = void 0;
	          var l = void 0;

	          switch (this.command) {
	            default:
	            case 'M':
	            case 'Z':
	              break;
	            case 'TL':
	            case 'L':
	              this.box = {
	                minX: Math.min(params[0].x, params[1].x) - halfWidth,
	                maxX: Math.max(params[0].x, params[1].x) + halfWidth,
	                minY: Math.min(params[0].y, params[1].y) - halfWidth,
	                maxY: Math.max(params[0].y, params[1].y) + halfWidth
	              };
	              break;
	            case 'SQ':
	            case 'Q':
	              xDims = Quadratic.extrema(params[0].x, params[1].x, params[2].x);
	              for (i = 0, l = xDims.length; i < l; i++) {
	                xDims[i] = Quadratic.at(params[0].x, params[1].x, params[2].x, xDims[i]);
	              }
	              xDims.push(params[0].x, params[2].x);
	              yDims = Quadratic.extrema(params[0].y, params[1].y, params[2].y);
	              for (i = 0, l = yDims.length; i < l; i++) {
	                yDims[i] = Quadratic.at(params[0].y, params[1].y, params[2].y, yDims);
	              }
	              yDims.push(params[0].y, params[2].y);
	              this.box = {
	                minX: Math.min.apply(Math, xDims) - halfWidth,
	                maxX: Math.max.apply(Math, xDims) + halfWidth,
	                minY: Math.min.apply(Math, yDims) - halfWidth,
	                maxY: Math.max.apply(Math, yDims) + halfWidth
	              };
	              break;
	            case 'C':
	              xDims = Cubic.extrema(params[0].x, params[1].x, params[2].x, params[3].x);
	              for (i = 0, l = xDims.length; i < l; i++) {
	                xDims[i] = Cubic.at(params[0].x, params[1].x, params[2].x, params[3].x, xDims[i]);
	              }
	              yDims = Cubic.extrema(params[0].y, params[1].y, params[2].y, params[3].y);
	              for (i = 0, l = yDims.length; i < l; i++) {
	                yDims[i] = Cubic.at(params[0].y, params[1].y, params[2].y, params[3].y, yDims[i]);
	              }
	              xDims.push(params[0].x, params[3].x);
	              yDims.push(params[0].y, params[3].y);
	              this.box = {
	                minX: Math.min.apply(Math, xDims) - halfWidth,
	                maxX: Math.max.apply(Math, xDims) + halfWidth,
	                minY: Math.min.apply(Math, yDims) - halfWidth,
	                maxY: Math.max.apply(Math, yDims) + halfWidth
	              };
	              break;
	            case 'A':
	              {
	                // todo 待优化
	                var p = params;
	                var cx = p[1];
	                var cy = p[2];
	                var rx = p[3];
	                var ry = p[4];
	                var theta = p[5];
	                var dTheta = p[6];
	                var psi = p[7];
	                var fs = p[8];
	                var start = theta;
	                var end = theta + dTheta;

	                var xDim = Ellipse.xExtrema(psi, rx, ry);
	                var minX = Infinity;
	                var maxX = -Infinity;
	                var xs = [start, end];
	                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	                  var xAngle = xDim + i;
	                  if (fs === 1) {
	                    if (start < xAngle && xAngle < end) {
	                      xs.push(xAngle);
	                    }
	                  } else {
	                    if (end < xAngle && xAngle < start) {
	                      xs.push(xAngle);
	                    }
	                  }
	                }

	                for (i = 0, l = xs.length; i < l; i++) {
	                  var x = Ellipse.xAt(psi, rx, ry, cx, xs[i]);
	                  if (x < minX) {
	                    minX = x;
	                  }
	                  if (x > maxX) {
	                    maxX = x;
	                  }
	                }

	                var yDim = Ellipse.yExtrema(psi, rx, ry);
	                var minY = Infinity;
	                var maxY = -Infinity;
	                var ys = [start, end];
	                for (i = -Math.PI * 2; i <= Math.PI * 2; i += Math.PI) {
	                  var yAngle = yDim + i;
	                  if (fs === 1) {
	                    if (start < yAngle && yAngle < end) {
	                      ys.push(yAngle);
	                    }
	                  } else {
	                    if (end < yAngle && yAngle < start) {
	                      ys.push(yAngle);
	                    }
	                  }
	                }

	                for (i = 0, l = ys.length; i < l; i++) {
	                  var y = Ellipse.yAt(psi, rx, ry, cy, ys[i]);
	                  if (y < minY) {
	                    minY = y;
	                  }
	                  if (y > maxY) {
	                    maxY = y;
	                  }
	                }
	                this.box = {
	                  minX: minX - halfWidth,
	                  maxX: maxX + halfWidth,
	                  minY: minY - halfWidth,
	                  maxY: maxY + halfWidth
	                };
	                break;
	              }
	          }
	        }
	      });

	      module.exports = PathSegment;

	      /***/
	    },
	    /* 103 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var CText = function CText(cfg) {
	        CText.superclass.constructor.call(this, cfg);
	      };

	      CText.ATTRS = {
	        x: 0,
	        y: 0,
	        text: null,
	        fontSize: 12,
	        fontFamily: 'sans-serif',
	        fontStyle: 'normal',
	        fontWeight: 'normal',
	        fontVariant: 'normal',
	        textAlign: 'start',
	        textBaseline: 'bottom',
	        lineHeight: null,
	        textArr: null
	      };

	      Util.extend(CText, Shape);

	      Util.augment(CText, {
	        canFill: true,
	        canStroke: true,
	        type: 'text',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            lineCount: 1,
	            fontSize: 12,
	            fontFamily: 'sans-serif',
	            fontStyle: 'normal',
	            fontWeight: 'normal',
	            fontVariant: 'normal',
	            textAlign: 'start',
	            textBaseline: 'bottom'
	          };
	        },
	        initTransform: function initTransform() {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	          var fontSize = this.__attrs.fontSize;
	          if (fontSize && +fontSize < 12) {
	            // 小于 12 像素的文本进行 scale 处理
	            this.transform([['t', -1 * this.__attrs.x, -1 * this.__attrs.y], ['s', +fontSize / 12, +fontSize / 12], ['t', this.__attrs.x, this.__attrs.y]]);
	          }
	        },
	        __assembleFont: function __assembleFont() {
	          // var self = this;
	          var attrs = this.__attrs;
	          var fontSize = attrs.fontSize;
	          var fontFamily = attrs.fontFamily;
	          var fontWeight = attrs.fontWeight;
	          var fontStyle = attrs.fontStyle; // self.attr('fontStyle');
	          var fontVariant = attrs.fontVariant; // self.attr('fontVariant');
	          // self.attr('font', [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' '));
	          attrs.font = [fontStyle, fontVariant, fontWeight, fontSize + 'px', fontFamily].join(' ');
	        },
	        __afterSetAttrFontSize: function __afterSetAttrFontSize() {
	          /* this.attr({
	            height: this.__getTextHeight()
	          }); */
	          this.__assembleFont();
	        },
	        __afterSetAttrFontFamily: function __afterSetAttrFontFamily() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontWeight: function __afterSetAttrFontWeight() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontStyle: function __afterSetAttrFontStyle() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFontVariant: function __afterSetAttrFontVariant() {
	          this.__assembleFont();
	        },
	        __afterSetAttrFont: function __afterSetAttrFont() {
	          // this.attr('width', this.measureText());
	        },
	        __afterSetAttrText: function __afterSetAttrText() {
	          var attrs = this.__attrs;
	          var text = attrs.text;
	          var textArr = void 0;
	          if (Util.isString(text) && text.indexOf('\n') !== -1) {
	            textArr = text.split('\n');
	            var lineCount = textArr.length;
	            attrs.lineCount = lineCount;
	            attrs.textArr = textArr;
	          }
	          // attrs.height = this.__getTextHeight();
	          // attrs.width = this.measureText();
	        },
	        __getTextHeight: function __getTextHeight() {
	          var attrs = this.__attrs;
	          var lineCount = attrs.lineCount;
	          var fontSize = attrs.fontSize * 1;
	          if (lineCount > 1) {
	            var spaceingY = this.__getSpaceingY();
	            return fontSize * lineCount + spaceingY * (lineCount - 1);
	          }
	          return fontSize;
	        },

	        // 计算浪费，效率低，待优化
	        __afterSetAttrAll: function __afterSetAttrAll(objs) {
	          var self = this;
	          if ('fontSize' in objs || 'fontWeight' in objs || 'fontStyle' in objs || 'fontVariant' in objs || 'fontFamily' in objs) {
	            self.__assembleFont();
	          }

	          if ('text' in objs) {
	            self.__afterSetAttrText(objs.text);
	          }
	        },
	        isHitBox: function isHitBox() {
	          return false;
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = self.measureText(); // attrs.width
	          if (!width) {
	            // 如果width不存在，四点共其实点
	            return {
	              minX: x,
	              minY: y,
	              maxX: x,
	              maxY: y
	            };
	          }
	          var height = self.__getTextHeight(); // attrs.height
	          var textAlign = attrs.textAlign;
	          var textBaseline = attrs.textBaseline;
	          var lineWidth = self.getHitLineWidth();
	          var point = {
	            x: x,
	            y: y - height
	          };

	          if (textAlign) {
	            if (textAlign === 'end' || textAlign === 'right') {
	              point.x -= width;
	            } else if (textAlign === 'center') {
	              point.x -= width / 2;
	            }
	          }

	          if (textBaseline) {
	            if (textBaseline === 'top') {
	              point.y += height;
	            } else if (textBaseline === 'middle') {
	              point.y += height / 2;
	            }
	          }

	          this.set('startPoint', point);
	          var halfWidth = lineWidth / 2;
	          return {
	            minX: point.x - halfWidth,
	            minY: point.y - halfWidth,
	            maxX: point.x + width + halfWidth,
	            maxY: point.y + height + halfWidth
	          };
	        },
	        __getSpaceingY: function __getSpaceingY() {
	          var attrs = this.__attrs;
	          var lineHeight = attrs.lineHeight;
	          var fontSize = attrs.fontSize * 1;
	          return lineHeight ? lineHeight - fontSize : fontSize * 0.14;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var box = self.getBBox();
	          if (self.hasFill() || self.hasStroke()) {
	            return Inside.box(box.minX, box.maxX, box.minY, box.maxY, x, y);
	          }
	        },
	        drawInner: function drawInner(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var text = attrs.text;
	          if (!text) {
	            return;
	          }
	          var textArr = attrs.textArr;
	          var fontSize = attrs.fontSize * 1;
	          var spaceingY = self.__getSpaceingY();
	          var x = attrs.x;
	          var y = attrs.y;
	          var textBaseline = attrs.textBaseline;
	          var height = void 0;
	          if (textArr) {
	            var box = self.getBBox();
	            height = box.maxY - box.minY;
	          }
	          var subY = void 0;

	          context.beginPath();
	          if (self.hasFill()) {
	            var fillOpacity = attrs.fillOpacity;
	            if (!Util.isNil(fillOpacity) && fillOpacity !== 1) {
	              context.globalAlpha = fillOpacity;
	            }
	            if (textArr) {
	              Util.each(textArr, function (subText, index) {
	                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	                if (textBaseline === 'top') subY += height - fontSize;
	                context.fillText(subText, x, subY);
	              });
	            } else {
	              context.fillText(text, x, y);
	            }
	          }

	          if (self.hasStroke()) {
	            if (textArr) {
	              Util.each(textArr, function (subText, index) {
	                subY = y + index * (spaceingY + fontSize) - height + fontSize; // bottom;
	                if (textBaseline === 'middle') subY += height - fontSize - (height - fontSize) / 2;
	                if (textBaseline === 'top') subY += height - fontSize;
	                context.strokeText(subText, x, subY);
	              });
	            } else {
	              context.strokeText(text, x, y);
	            }
	          }
	        },
	        measureText: function measureText() {
	          var self = this;
	          var attrs = self.__attrs;
	          var text = attrs.text;
	          var font = attrs.font;
	          var textArr = attrs.textArr;
	          var measureWidth = void 0;
	          var width = 0;

	          if (Util.isNil(text)) return undefined;
	          var context = document.createElement('canvas').getContext('2d');
	          context.save();
	          context.font = font;
	          if (textArr) {
	            Util.each(textArr, function (subText) {
	              measureWidth = context.measureText(subText).width;
	              if (width < measureWidth) {
	                width = measureWidth;
	              }
	              context.restore();
	            });
	          } else {
	            width = context.measureText(text).width;
	            context.restore();
	          }
	          return width;
	        }
	      });

	      module.exports = CText;

	      /***/
	    },
	    /* 104 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var LineMath = __webpack_require__(52);

	      var Line = function Line(cfg) {
	        Line.superclass.constructor.call(this, cfg);
	      };

	      Line.ATTRS = {
	        x1: 0,
	        y1: 0,
	        x2: 0,
	        y2: 0,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Line, Shape);

	      Util.augment(Line, {
	        canStroke: true,
	        type: 'line',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          var lineWidth = this.getHitLineWidth();
	          return LineMath.box(x1, y1, x2, y2, lineWidth);
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          var lineWidth = this.getHitLineWidth();

	          if (this.hasStroke()) {
	            return Inside.line(x1, y1, x2, y2, lineWidth, x, y);
	          }

	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x1 = attrs.x1,
	              y1 = attrs.y1,
	              x2 = attrs.x2,
	              y2 = attrs.y2;

	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
	          context.moveTo(x1, y1);
	          context.lineTo(x2, y2);
	          Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: LineMath.at(attrs.x1, attrs.x2, t),
	            y: LineMath.at(attrs.y1, attrs.y2, t)
	          };
	        }
	      });

	      module.exports = Line;

	      /***/
	    },
	    /* 105 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var CImage = function CImage(cfg) {
	        CImage.superclass.constructor.call(this, cfg);
	      };

	      CImage.ATTRS = {
	        x: 0,
	        y: 0,
	        img: undefined,
	        width: 0,
	        height: 0,
	        sx: null,
	        sy: null,
	        swidth: null,
	        sheight: null
	      };

	      Util.extend(CImage, Shape);

	      Util.augment(CImage, {
	        type: 'image',
	        __afterSetAttrImg: function __afterSetAttrImg(img) {
	          this.__setAttrImg(img);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll(params) {
	          if (params.img) {
	            this.__setAttrImg(params.img);
	          }
	        },
	        isHitBox: function isHitBox() {
	          return false;
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;

	          return {
	            minX: x,
	            minY: y,
	            maxX: x + width,
	            maxY: y + height
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          if (this.get('toDraw') || !attrs.img) {
	            return false;
	          }
	          var rx = attrs.x;
	          var ry = attrs.y;
	          var width = attrs.width;
	          var height = attrs.height;
	          return Inside.rect(rx, ry, width, height, x, y);
	        },
	        __setLoading: function __setLoading(loading) {
	          var canvas = this.get('canvas');
	          if (loading === false && this.get('toDraw') === true) {
	            this.__cfg.loading = false;
	            canvas.draw();
	          }
	          return loading;
	        },
	        __setAttrImg: function __setAttrImg(img) {
	          var self = this;
	          var attrs = self.__attrs;
	          if (Util.isString(img)) {
	            var image = new Image();
	            image.onload = function () {
	              if (self.get('destroyed')) return false;
	              self.attr('imgSrc', img);
	              self.attr('img', image);
	              var callback = self.get('callback');
	              if (callback) {
	                callback.call(self);
	              }
	              self.set('loading', false);
	            };
	            image.src = img;
	            self.set('loading', true);
	          } else if (img instanceof Image) {
	            if (!attrs.width) {
	              self.attr('width', img.width);
	            }

	            if (!attrs.height) {
	              self.attr('height', img.height);
	            }
	            return img;
	          } else if (img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
	            if (!attrs.width) {
	              self.attr('width', Number(img.getAttribute('width')));
	            }

	            if (!attrs.height) {
	              self.attr('height', Number(img.getAttribute('height')));
	            }
	            return img;
	          } else if (img instanceof ImageData) {
	            if (!attrs.width) {
	              self.attr('width', img.width);
	            }

	            if (!attrs.height) {
	              self.attr('height', img.height);
	            }
	            return img;
	          } else {
	            return null;
	          }
	        },
	        drawInner: function drawInner(context) {
	          if (this.get('loading')) {
	            this.set('toDraw', true);
	            return;
	          }
	          this.__drawImage(context);
	        },
	        __drawImage: function __drawImage(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var img = attrs.img;
	          var width = attrs.width;
	          var height = attrs.height;
	          var sx = attrs.sx;
	          var sy = attrs.sy;
	          var swidth = attrs.swidth;
	          var sheight = attrs.sheight;
	          this.set('toDraw', false);

	          if (img instanceof Image || img instanceof HTMLElement && Util.isString(img.nodeName) && img.nodeName.toUpperCase() === 'CANVAS') {
	            if (Util.isNil(sx) || Util.isNil(sy) || Util.isNil(swidth) || Util.isNil(sheight)) {
	              context.drawImage(img, x, y, width, height);
	              return;
	            }
	            if (!Util.isNil(sx) && !Util.isNil(sy) && !Util.isNil(swidth) && !Util.isNil(sheight)) {
	              context.drawImage(img, sx, sy, swidth, sheight, x, y, width, height);
	              return;
	            }
	          } else if (img instanceof ImageData) {
	            context.putImageData(img, x, y, sx || 0, sy || 0, swidth || width, sheight || height);
	            return;
	          }
	          return;
	        }
	      });

	      module.exports = CImage;

	      /***/
	    },
	    /* 106 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Polygon = function Polygon(cfg) {
	        Polygon.superclass.constructor.call(this, cfg);
	      };

	      Polygon.ATTRS = {
	        points: null,
	        lineWidth: 1
	      };

	      Util.extend(Polygon, Shape);

	      Util.augment(Polygon, {
	        canFill: true,
	        canStroke: true,
	        type: 'polygon',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var lineWidth = this.getHitLineWidth();
	          if (!points || points.length === 0) {
	            return null;
	          }
	          var minX = Infinity;
	          var minY = Infinity;
	          var maxX = -Infinity;
	          var maxY = -Infinity;

	          Util.each(points, function (point) {
	            var x = point[0];
	            var y = point[1];
	            if (x < minX) {
	              minX = x;
	            }
	            if (x > maxX) {
	              maxX = x;
	            }

	            if (y < minY) {
	              minY = y;
	            }

	            if (y > maxY) {
	              maxY = y;
	            }
	          });

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var fill = self.hasFill();
	          var stroke = self.hasStroke();

	          if (fill && stroke) {
	            return self.__isPointInFill(x, y) || self.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return self.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return self.__isPointInStroke(x, y);
	          }

	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var self = this;
	          var context = self.get('context');
	          self.createPath();
	          return context.isPointInPath(x, y);
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          if (points.length < 2) {
	            return false;
	          }
	          var lineWidth = this.getHitLineWidth();
	          var outPoints = points.slice(0);
	          if (points.length >= 3) {
	            outPoints.push(points[0]);
	          }

	          return Inside.polyline(outPoints, lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          if (points.length < 2) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();
	          Util.each(points, function (point, index) {
	            if (index === 0) {
	              context.moveTo(point[0], point[1]);
	            } else {
	              context.lineTo(point[0], point[1]);
	            }
	          });
	          context.closePath();
	        }
	      });

	      module.exports = Polygon;

	      /***/
	    },
	    /* 107 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var LineMath = __webpack_require__(52);

	      var Polyline = function Polyline(cfg) {
	        Polyline.superclass.constructor.call(this, cfg);
	      };

	      Polyline.ATTRS = {
	        points: null,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false,
	        tCache: null
	      };

	      Util.extend(Polyline, Shape);

	      Util.augment(Polyline, {
	        canStroke: true,
	        type: 'polyline',
	        tCache: null, // 缓存各点的t
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var lineWidth = this.getHitLineWidth();
	          var points = attrs.points;
	          if (!points || points.length === 0) {
	            return null;
	          }
	          var minX = Infinity;
	          var minY = Infinity;
	          var maxX = -Infinity;
	          var maxY = -Infinity;

	          Util.each(points, function (point) {
	            var x = point[0];
	            var y = point[1];
	            if (x < minX) {
	              minX = x;
	            }
	            if (x > maxX) {
	              maxX = x;
	            }

	            if (y < minY) {
	              minY = y;
	            }

	            if (y > maxY) {
	              maxY = y;
	            }
	          });

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        __setTcache: function __setTcache() {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var totalLength = 0;
	          var tempLength = 0;
	          var tCache = [];
	          var segmentT = void 0;
	          var segmentL = void 0;
	          if (!points || points.length === 0) {
	            return;
	          }

	          Util.each(points, function (p, i) {
	            if (points[i + 1]) {
	              totalLength += LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	            }
	          });
	          if (totalLength <= 0) {
	            return;
	          }
	          Util.each(points, function (p, i) {
	            if (points[i + 1]) {
	              segmentT = [];
	              segmentT[0] = tempLength / totalLength;
	              segmentL = LineMath.len(p[0], p[1], points[i + 1][0], points[i + 1][1]);
	              tempLength += segmentL;
	              segmentT[1] = tempLength / totalLength;
	              tCache.push(segmentT);
	            }
	          });
	          this.tCache = tCache;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          if (self.hasStroke()) {
	            var points = attrs.points;
	            if (points.length < 2) {
	              return false;
	            }
	            var lineWidth = attrs.lineWidth;
	            return Inside.polyline(points, lineWidth, x, y);
	          }
	          return false;
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var points = attrs.points;
	          var l = void 0;
	          var i = void 0;

	          if (points.length < 2) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, points[1][0], points[1][1], points[0][0], points[0][1]);
	          context.moveTo(points[0][0], points[0][1]);
	          for (i = 1, l = points.length - 1; i < l; i++) {
	            context.lineTo(points[i][0], points[i][1]);
	          }
	          context.lineTo(points[l][0], points[l][1]);
	          Arrow.addEndArrow(context, attrs, points[l - 1][0], points[l - 1][1], points[l][0], points[l][1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          var points = attrs.points;
	          var tCache = this.tCache;
	          var subt = void 0;
	          var index = void 0;
	          if (!tCache) {
	            this.__setTcache();
	            tCache = this.tCache;
	          }
	          Util.each(tCache, function (v, i) {
	            if (t >= v[0] && t <= v[1]) {
	              subt = (t - v[0]) / (v[1] - v[0]);
	              index = i;
	            }
	          });
	          return {
	            x: LineMath.at(points[index][0], points[index + 1][0], subt),
	            y: LineMath.at(points[index][1], points[index + 1][1], subt)
	          };
	        }
	      });

	      module.exports = Polyline;

	      /***/
	    },
	    /* 108 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var ArcMath = __webpack_require__(54);
	      var Arrow = __webpack_require__(15);

	      function _getArcX(x, radius, angle) {
	        return x + radius * Math.cos(angle);
	      }
	      function _getArcY(y, radius, angle) {
	        return y + radius * Math.sin(angle);
	      }

	      var Arc = function Arc(cfg) {
	        Arc.superclass.constructor.call(this, cfg);
	      };

	      Arc.ATTRS = {
	        x: 0,
	        y: 0,
	        r: 0,
	        startAngle: 0,
	        endAngle: 0,
	        clockwise: false,
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Arc, Shape);

	      Util.augment(Arc, {
	        canStroke: true,
	        type: 'arc',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            x: 0,
	            y: 0,
	            r: 0,
	            startAngle: 0,
	            endAngle: 0,
	            clockwise: false,
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var x = attrs.x,
	              y = attrs.y,
	              r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2;
	          var box = ArcMath.box(x, y, r, startAngle, endAngle, clockwise);
	          box.minX -= halfWidth;
	          box.minY -= halfWidth;
	          box.maxX += halfWidth;
	          box.maxY += halfWidth;
	          return box;
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var lineWidth = this.getHitLineWidth();
	          if (this.hasStroke()) {
	            return Inside.arcline(cx, cy, r, startAngle, endAngle, clockwise, lineWidth, x, y);
	          }
	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x,
	              y = attrs.y,
	              r = attrs.r,
	              startAngle = attrs.startAngle,
	              endAngle = attrs.endAngle,
	              clockwise = attrs.clockwise;

	          var diff = void 0;
	          var x1 = void 0;
	          var y1 = void 0;
	          var x2 = void 0;
	          var y2 = void 0;

	          context = context || self.get('context');
	          context.beginPath();

	          if (attrs.startArrow) {
	            diff = Math.PI / 180;
	            if (clockwise) {
	              diff *= -1;
	            }

	            // Calculate coordinates for start arrow
	            x1 = _getArcX(x, r, startAngle + diff);
	            y1 = _getArcY(y, r, startAngle + diff);
	            x2 = _getArcX(x, r, startAngle);
	            y2 = _getArcY(y, r, startAngle);
	            Arrow.addStartArrow(context, attrs, x1, y1, x2, y2);
	          }
	          context.arc(x, y, r, startAngle, endAngle, clockwise);

	          if (attrs.endArrow) {
	            diff = Math.PI / 180;
	            if (clockwise) {
	              diff *= -1;
	            }

	            // Calculate coordinates for start arrow
	            x1 = _getArcX(x, r, endAngle + diff);
	            y1 = _getArcY(y, r, endAngle + diff);
	            x2 = _getArcX(x, r, endAngle);
	            y2 = _getArcY(y, r, endAngle);
	            Arrow.addEndArrow(context, attrs, x2, y2, x1, y1);
	          }
	        }
	      });

	      module.exports = Arc;

	      /***/
	    },
	    /* 109 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var ArcMath = __webpack_require__(54);
	      var vec2 = __webpack_require__(3).vec2;

	      var Fan = function Fan(cfg) {
	        Fan.superclass.constructor.call(this, cfg);
	      };

	      Fan.ATTRS = {
	        x: 0,
	        y: 0,
	        rs: 0,
	        re: 0,
	        startAngle: 0,
	        endAngle: 0,
	        clockwise: false,
	        lineWidth: 1
	      };

	      Util.extend(Fan, Shape);

	      Util.augment(Fan, {
	        canFill: true,
	        canStroke: true,
	        type: 'fan',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            clockwise: false,
	            lineWidth: 1,
	            rs: 0,
	            re: 0
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var lineWidth = this.getHitLineWidth();

	          var boxs = ArcMath.box(cx, cy, rs, startAngle, endAngle, clockwise);
	          var boxe = ArcMath.box(cx, cy, re, startAngle, endAngle, clockwise);
	          var minX = Math.min(boxs.minX, boxe.minX);
	          var minY = Math.min(boxs.minY, boxe.minY);
	          var maxX = Math.max(boxs.maxX, boxe.maxX);
	          var maxY = Math.max(boxs.maxY, boxe.maxY);

	          var halfWidth = lineWidth / 2;
	          return {
	            minX: minX - halfWidth,
	            minY: minY - halfWidth,
	            maxX: maxX + halfWidth,
	            maxY: maxY + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var fill = this.hasFill();
	          var stroke = this.hasStroke();

	          if (fill && stroke) {
	            return this.__isPointInFill(x, y) || this.__isPointInStroke(x, y);
	          }

	          if (fill) {
	            return this.__isPointInFill(x, y);
	          }

	          if (stroke) {
	            return this.__isPointInStroke(x, y);
	          }
	          return false;
	        },
	        __isPointInFill: function __isPointInFill(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var v1 = [1, 0];
	          var subv = [x - cx, y - cy];
	          var angle = vec2.angleTo(v1, subv);

	          var angle1 = ArcMath.nearAngle(angle, startAngle, endAngle, clockwise);

	          if (Util.isNumberEqual(angle, angle1)) {
	            var ls = vec2.squaredLength(subv);
	            if (rs * rs <= ls && ls <= re * re) {
	              return true;
	            }
	          }
	          return false;
	        },
	        __isPointInStroke: function __isPointInStroke(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;
	          var lineWidth = this.getHitLineWidth();

	          var ssp = {
	            x: Math.cos(startAngle) * rs + cx,
	            y: Math.sin(startAngle) * rs + cy
	          };
	          var sep = {
	            x: Math.cos(startAngle) * re + cx,
	            y: Math.sin(startAngle) * re + cy
	          };
	          var esp = {
	            x: Math.cos(endAngle) * rs + cx,
	            y: Math.sin(endAngle) * rs + cy
	          };
	          var eep = {
	            x: Math.cos(endAngle) * re + cx,
	            y: Math.sin(endAngle) * re + cy
	          };

	          if (Inside.line(ssp.x, ssp.y, sep.x, sep.y, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.line(esp.x, esp.y, eep.x, eep.y, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.arcline(cx, cy, rs, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	            return true;
	          }

	          if (Inside.arcline(cx, cy, re, startAngle, endAngle, clockwise, lineWidth, x, y)) {
	            return true;
	          }

	          return false;
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var rs = attrs.rs;
	          var re = attrs.re;
	          var startAngle = attrs.startAngle;
	          var endAngle = attrs.endAngle;
	          var clockwise = attrs.clockwise;

	          var ssp = {
	            x: Math.cos(startAngle) * rs + cx,
	            y: Math.sin(startAngle) * rs + cy
	          };
	          var sep = {
	            x: Math.cos(startAngle) * re + cx,
	            y: Math.sin(startAngle) * re + cy
	          };
	          var esp = {
	            x: Math.cos(endAngle) * rs + cx,
	            y: Math.sin(endAngle) * rs + cy
	          };

	          context = context || self.get('context');
	          context.beginPath();
	          context.moveTo(ssp.x, ssp.y);
	          context.lineTo(sep.x, sep.y);
	          context.arc(cx, cy, re, startAngle, endAngle, clockwise);
	          context.lineTo(esp.x, esp.y);
	          context.arc(cx, cy, rs, endAngle, startAngle, !clockwise);
	          context.closePath();
	        }
	      });

	      module.exports = Fan;

	      /***/
	    },
	    /* 110 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var CubicMath = __webpack_require__(31);

	      var Cubic = function Cubic(cfg) {
	        Cubic.superclass.constructor.call(this, cfg);
	      };

	      Cubic.ATTRS = {
	        p1: null, // 起始点
	        p2: null, // 第一个控制点
	        p3: null, // 第二个控制点
	        p4: null, // 终点
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Cubic, Shape);

	      Util.augment(Cubic, {
	        canStroke: true,
	        type: 'cubic',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          var lineWidth = this.getHitLineWidth();
	          var i = void 0;
	          var l = void 0;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
	            return null;
	          }
	          var halfWidth = lineWidth / 2;

	          var xDim = CubicMath.extrema(p1[0], p2[0], p3[0], p4[0]);
	          for (i = 0, l = xDim.length; i < l; i++) {
	            xDim[i] = CubicMath.at(p1[0], p2[0], p3[0], p4[0], xDim[i]);
	          }
	          var yDim = CubicMath.extrema(p1[1], p2[1], p3[1], p4[1]);
	          for (i = 0, l = yDim.length; i < l; i++) {
	            yDim[i] = CubicMath.at(p1[1], p2[1], p3[1], p4[1], yDim[i]);
	          }
	          xDim.push(p1[0], p4[0]);
	          yDim.push(p1[1], p4[1]);

	          return {
	            minX: Math.min.apply(Math, xDim) - halfWidth,
	            maxX: Math.max.apply(Math, xDim) + halfWidth,
	            minY: Math.min.apply(Math, yDim) - halfWidth,
	            maxY: Math.max.apply(Math, yDim) + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          var lineWidth = this.getHitLineWidth();
	          return Inside.cubicline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], p4[0], p4[1], lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3,
	              p4 = attrs.p4;

	          context = context || self.get('context');
	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3) || Util.isNil(p4)) {
	            return;
	          }

	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
	          context.moveTo(p1[0], p1[1]);
	          context.bezierCurveTo(p2[0], p2[1], p3[0], p3[1], p4[0], p4[1]);
	          Arrow.addEndArrow(context, attrs, p3[0], p3[1], p4[0], p4[1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: CubicMath.at(attrs.p4[0], attrs.p3[0], attrs.p2[0], attrs.p1[0], t),
	            y: CubicMath.at(attrs.p4[1], attrs.p3[1], attrs.p2[1], attrs.p1[1], t)
	          };
	        }
	      });

	      module.exports = Cubic;

	      /***/
	    },
	    /* 111 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);
	      var Arrow = __webpack_require__(15);
	      var QuadraticMath = __webpack_require__(53);

	      var Quadratic = function Quadratic(cfg) {
	        Quadratic.superclass.constructor.call(this, cfg);
	      };

	      Quadratic.ATTRS = {
	        p1: null, // 起始点
	        p2: null, // 控制点
	        p3: null, // 结束点
	        lineWidth: 1,
	        startArrow: false,
	        endArrow: false
	      };

	      Util.extend(Quadratic, Shape);

	      Util.augment(Quadratic, {
	        canStroke: true,
	        type: 'quadratic',
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            lineWidth: 1,
	            startArrow: false,
	            endArrow: false
	          };
	        },
	        calculateBox: function calculateBox() {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          var lineWidth = this.getHitLineWidth();
	          var i = void 0;
	          var l = void 0;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
	            return null;
	          }
	          var halfWidth = lineWidth / 2;
	          var xDims = QuadraticMath.extrema(p1[0], p2[0], p3[0]);
	          for (i = 0, l = xDims.length; i < l; i++) {
	            xDims[i] = QuadraticMath.at(p1[0], p2[0], p3[0], xDims[i]);
	          }
	          xDims.push(p1[0], p3[0]);
	          var yDims = QuadraticMath.extrema(p1[1], p2[1], p3[1]);
	          for (i = 0, l = yDims.length; i < l; i++) {
	            yDims[i] = QuadraticMath.at(p1[1], p2[1], p3[1], yDims[i]);
	          }
	          yDims.push(p1[1], p3[1]);

	          return {
	            minX: Math.min.apply(Math, xDims) - halfWidth,
	            maxX: Math.max.apply(Math, xDims) + halfWidth,
	            minY: Math.min.apply(Math, yDims) - halfWidth,
	            maxY: Math.max.apply(Math, yDims) + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          var lineWidth = this.getHitLineWidth();

	          return Inside.quadraticline(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1], lineWidth, x, y);
	        },
	        createPath: function createPath(context) {
	          var self = this;
	          var attrs = self.__attrs;
	          var p1 = attrs.p1,
	              p2 = attrs.p2,
	              p3 = attrs.p3;

	          if (Util.isNil(p1) || Util.isNil(p2) || Util.isNil(p3)) {
	            return;
	          }
	          context = context || self.get('context');
	          context.beginPath();

	          Arrow.addStartArrow(context, attrs, p2[0], p2[1], p1[0], p1[1]);
	          context.moveTo(p1[0], p1[1]);
	          context.quadraticCurveTo(p2[0], p2[1], p3[0], p3[1]);
	          Arrow.addEndArrow(context, attrs, p2[0], p2[1], p3[0], p3[1]);
	        },
	        getPoint: function getPoint(t) {
	          var attrs = this.__attrs;
	          return {
	            x: QuadraticMath.at(attrs.p1[0], attrs.p2[0], attrs.p3[0], t),
	            y: QuadraticMath.at(attrs.p1[1], attrs.p2[1], attrs.p3[1], t)
	          };
	        }
	      });

	      module.exports = Quadratic;

	      /***/
	    },
	    /* 112 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Shape = __webpack_require__(1);
	      var Inside = __webpack_require__(2);

	      var Marker = function Marker(cfg) {
	        Marker.superclass.constructor.call(this, cfg);
	      };

	      Marker.Symbols = {
	        // 圆
	        circle: function circle(x, y, r, ctx) {
	          ctx.arc(x, y, r, 0, Math.PI * 2, false);
	        },

	        // 正方形
	        square: function square(x, y, r, ctx) {
	          ctx.moveTo(x - r, y - r);
	          ctx.lineTo(x + r, y - r);
	          ctx.lineTo(x + r, y + r);
	          ctx.lineTo(x - r, y + r);
	          ctx.closePath();
	        },

	        // 菱形
	        diamond: function diamond(x, y, r, ctx) {
	          ctx.moveTo(x - r, y);
	          ctx.lineTo(x, y - r);
	          ctx.lineTo(x + r, y);
	          ctx.lineTo(x, y + r);
	          ctx.closePath();
	        },

	        // 三角形
	        triangle: function triangle(x, y, r, ctx) {
	          var diffY = r * Math.sin(1 / 3 * Math.PI);
	          ctx.moveTo(x - r, y + diffY);
	          ctx.lineTo(x, y - diffY);
	          ctx.lineTo(x + r, y + diffY);
	          ctx.closePath();
	        },

	        // 倒三角形
	        'triangle-down': function triangleDown(x, y, r, ctx) {
	          var diffY = r * Math.sin(1 / 3 * Math.PI);
	          ctx.moveTo(x - r, y - diffY);
	          ctx.lineTo(x + r, y - diffY);
	          ctx.lineTo(x, y + diffY);
	          ctx.closePath();
	        }
	      };

	      Marker.ATTRS = {
	        path: null,
	        lineWidth: 1
	      };

	      Util.extend(Marker, Shape);

	      Util.augment(Marker, {
	        type: 'marker',
	        canFill: true,
	        canStroke: true,
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {
	            x: 0,
	            y: 0,
	            lineWidth: 1
	          };
	        },
	        calculateBox: function calculateBox() {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.radius;
	          var lineWidth = this.getHitLineWidth();
	          var halfWidth = lineWidth / 2 + r;
	          return {
	            minX: cx - halfWidth,
	            minY: cy - halfWidth,
	            maxX: cx + halfWidth,
	            maxY: cy + halfWidth
	          };
	        },
	        isPointInPath: function isPointInPath(x, y) {
	          var attrs = this.__attrs;
	          var cx = attrs.x;
	          var cy = attrs.y;
	          var r = attrs.radius;
	          var lineWidth = this.getHitLineWidth();
	          return Inside.circle(cx, cy, r + lineWidth / 2, x, y);
	        },
	        createPath: function createPath(context) {
	          var attrs = this.__attrs;
	          var x = attrs.x;
	          var y = attrs.y;
	          var r = attrs.radius;
	          var symbol = attrs.symbol || 'circle';
	          var method = void 0;
	          if (Util.isFunction(symbol)) {
	            method = symbol;
	          } else {
	            method = Marker.Symbols[symbol];
	          }
	          context.beginPath();
	          method(x, y, r, context, this);
	        }
	      });

	      module.exports = Marker;

	      /***/
	    },
	    /* 113 */
	    /***/function (module, exports, __webpack_require__) {

	      module.exports = {
	        Canvas: __webpack_require__(114),
	        Group: __webpack_require__(88),
	        Shape: __webpack_require__(1),
	        Rect: __webpack_require__(55),
	        Circle: __webpack_require__(99),
	        Ellipse: __webpack_require__(100),
	        Path: __webpack_require__(101),
	        Text: __webpack_require__(103),
	        Line: __webpack_require__(104),
	        Image: __webpack_require__(105),
	        Polygon: __webpack_require__(106),
	        Polyline: __webpack_require__(107),
	        Arc: __webpack_require__(108),
	        Fan: __webpack_require__(109),
	        Cubic: __webpack_require__(110),
	        Quadratic: __webpack_require__(111),
	        Marker: __webpack_require__(112),
	        PathUtil: __webpack_require__(46),
	        PathSegment: __webpack_require__(102),
	        MatrixUtil: __webpack_require__(3),
	        CommonUtil: __webpack_require__(16),
	        DomUtil: __webpack_require__(86),
	        Event: __webpack_require__(87),
	        version: '2.0.7-beta.3'
	      };

	      /***/
	    },
	    /* 114 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var Event = __webpack_require__(87);
	      var Group = __webpack_require__(88);

	      var Canvas = function Canvas(cfg) {
	        Canvas.superclass.constructor.call(this, cfg);
	      };

	      Canvas.CFG = {
	        eventEnable: true,
	        /**
	         * 像素宽度
	         * @type {Number}
	         */
	        width: null,
	        /**
	         * 像素高度
	         * @type {Number}
	         */
	        height: null,
	        /**
	         * 画布宽度
	         * @type {Number}
	         */
	        widthCanvas: null,
	        /**
	         * 画布高度
	         * @type {Number}
	         */
	        heightCanvas: null,
	        /**
	         * CSS宽
	         * @type {String}
	         */
	        widthStyle: null,
	        /**
	         * CSS高
	         * @type {String}
	         */
	        heightStyle: null,
	        /**
	         * 容器DOM
	         * @type {Object}
	         */
	        containerDOM: null,
	        /**
	         * 当前Canvas的DOM
	         * @type {Object}
	         */
	        canvasDOM: null,
	        /**
	         * 屏幕像素比
	         * @type {Number}
	         */
	        pixelRatio: null
	      };

	      Util.extend(Canvas, Group);

	      Util.augment(Canvas, {
	        init: function init() {
	          Canvas.superclass.init.call(this);
	          this._setGlobalParam();
	          this._setDOM();
	          this._setInitSize();
	          this._setCanvas();
	          this._scale();
	          if (this.get('eventEnable')) {
	            this._registEvents();
	          }
	        },
	        getEmitter: function getEmitter(element, event) {
	          if (element) {
	            if (Util.isEmpty(element._getEvents())) {
	              var parent = element.get('parent');
	              if (parent && !event.propagationStopped) {
	                return this.getEmitter(parent, event);
	              }
	            } else {
	              return element;
	            }
	          }
	        },
	        _getEventObj: function _getEventObj(type, e, point, target) {
	          var event = new Event(type, e, true, true);
	          event.x = point.x;
	          event.y = point.y;
	          event.clientX = e.clientX;
	          event.clientY = e.clientY;
	          event.currentTarget = target;
	          event.target = target;
	          return event;
	        },
	        _triggerEvent: function _triggerEvent(type, e) {
	          var point = this.getPointByClient(e.clientX, e.clientY);
	          var shape = this.getShape(point.x, point.y);
	          var emitObj = void 0;
	          if (type === 'mousemove') {
	            var canvasmousemove = this._getEventObj('mousemove', e, point, this);
	            this.emit('mousemove', canvasmousemove);

	            var preShape = this.get('preShape');
	            if (preShape && preShape !== shape) {
	              var mouseleave = this._getEventObj('mouseleave', e, point, preShape);
	              emitObj = this.getEmitter(preShape, e);
	              emitObj && emitObj.emit('mouseleave', mouseleave);
	            }

	            if (shape) {
	              var mousemove = this._getEventObj('mousemove', e, point, shape);
	              emitObj = this.getEmitter(shape, e);
	              emitObj && emitObj.emit('mousemove', mousemove);

	              if (preShape !== shape) {
	                var mouseenter = this._getEventObj('mouseenter', e, point, shape);
	                emitObj && emitObj.emit('mouseenter', mouseenter, e);
	              }
	            }

	            this.set('preShape', shape);
	          } else {
	            var event = this._getEventObj(type, e, point, shape || this);
	            emitObj = this.getEmitter(shape, e);
	            if (emitObj && emitObj !== this) {
	              emitObj.emit(type, event);
	            }
	            this.emit(type, event);
	          }

	          var el = this.get('el');
	          if (shape && !shape.get('destroyed')) {
	            el.style.cursor = shape.attr('cursor') || 'default';
	          }
	        },
	        _registEvents: function _registEvents() {
	          var self = this;
	          var el = self.get('el');

	          el.addEventListener('mouseout', function (e) {
	            self._triggerEvent('mouseleave', e);
	          }, false);

	          el.addEventListener('mouseover', function (e) {
	            self._triggerEvent('mouseenter', e);
	          }, false);

	          el.addEventListener('mousemove', function (e) {
	            self._triggerEvent('mousemove', e);
	          }, false);

	          el.addEventListener('mousedown', function (e) {
	            self._triggerEvent('mousedown', e);
	          }, false);

	          el.addEventListener('mouseup', function (e) {
	            self._triggerEvent('mouseup', e);
	          }, false);

	          el.addEventListener('click', function (e) {
	            self._triggerEvent('click', e);
	          }, false);

	          el.addEventListener('dblclick', function (e) {
	            self._triggerEvent('dblclick', e);
	          }, false);

	          el.addEventListener('touchstart', function (e) {
	            if (!Util.isEmpty(e.touches)) {
	              self._triggerEvent('touchstart', e.touches[0]);
	            }
	          }, false);

	          el.addEventListener('touchmove', function (e) {
	            if (!Util.isEmpty(e.touches)) {
	              self._triggerEvent('touchmove', e.touches[0]);
	            }
	          }, false);

	          el.addEventListener('touchend', function (e) {
	            if (!Util.isEmpty(e.changedTouches)) {
	              self._triggerEvent('touchend', e.changedTouches[0]);
	            }
	          }, false);
	        },
	        _scale: function _scale() {
	          var pixelRatio = this.get('pixelRatio');
	          this.scale(pixelRatio, pixelRatio);
	        },
	        _setCanvas: function _setCanvas() {
	          var canvasDOM = this.get('canvasDOM');
	          this.set('el', canvasDOM);
	          this.set('context', canvasDOM.getContext('2d'));
	          this.set('canvas', this);
	        },
	        _setGlobalParam: function _setGlobalParam() {
	          var pixelRatio = this.get('pixelRatio');
	          if (!pixelRatio) {
	            this.set('pixelRatio', Util.getRatio());
	          }
	          return;
	        },
	        _setDOM: function _setDOM() {
	          this._setContainer();
	          this._setLayer();
	        },
	        _setContainer: function _setContainer() {
	          var containerId = this.get('containerId');
	          var containerDOM = this.get('containerDOM');
	          if (!containerDOM) {
	            containerDOM = document.getElementById(containerId);
	            this.set('containerDOM', containerDOM);
	          }
	          Util.modifyCSS(containerDOM, {
	            position: 'relative'
	          });
	        },
	        _setLayer: function _setLayer() {
	          var containerDOM = this.get('containerDOM');
	          var canvasId = Util.uniqueId('canvas_');
	          if (containerDOM) {
	            var canvasDOM = Util.createDom('<canvas id="' + canvasId + '"></canvas>');
	            containerDOM.appendChild(canvasDOM);
	            this.set('canvasDOM', canvasDOM);
	          }
	        },
	        _setInitSize: function _setInitSize() {
	          this.changeSize(this.get('width'), this.get('height'));
	        },
	        _reSize: function _reSize() {
	          var canvasDOM = this.get('canvasDOM');
	          var widthCanvas = this.get('widthCanvas');
	          var heightCanvas = this.get('heightCanvas');
	          var widthStyle = this.get('widthStyle');
	          var heightStyle = this.get('heightStyle');

	          canvasDOM.style.width = widthStyle;
	          canvasDOM.style.height = heightStyle;
	          canvasDOM.setAttribute('width', widthCanvas);
	          canvasDOM.setAttribute('height', heightCanvas);
	        },
	        getWidth: function getWidth() {
	          var pixelRatio = this.get('pixelRatio');
	          var width = this.get('width');
	          return width * pixelRatio;
	        },
	        getHeight: function getHeight() {
	          var pixelRatio = this.get('pixelRatio');
	          var height = this.get('height');
	          return height * pixelRatio;
	        },
	        changeSize: function changeSize(width, height) {
	          var pixelRatio = this.get('pixelRatio');
	          var widthCanvas = width * pixelRatio;
	          var heightCanvas = height * pixelRatio;

	          this.set('widthCanvas', widthCanvas);
	          this.set('heightCanvas', heightCanvas);
	          this.set('widthStyle', width + 'px');
	          this.set('heightStyle', height + 'px');
	          this.set('width', width);
	          this.set('height', height);
	          this._reSize();
	        },

	        /**
	         * 将窗口坐标转变成 canvas 坐标
	         * @param  {Number} clientX 窗口x坐标
	         * @param  {Number} clientY 窗口y坐标
	         * @return {Object} canvas坐标
	         */
	        getPointByClient: function getPointByClient(clientX, clientY) {
	          var el = this.get('el');
	          var bbox = el.getBoundingClientRect();
	          var width = bbox.right - bbox.left;
	          var height = bbox.bottom - bbox.top;
	          return {
	            x: (clientX - bbox.left) * (el.width / width),
	            y: (clientY - bbox.top) * (el.height / height)
	          };
	        },
	        getClientByPoint: function getClientByPoint(x, y) {
	          var el = this.get('el');
	          var bbox = el.getBoundingClientRect();
	          var width = bbox.right - bbox.left;
	          var height = bbox.bottom - bbox.top;
	          return {
	            clientX: x / (el.width / width) + bbox.left,
	            clientY: y / (el.height / height) + bbox.top
	          };
	        },
	        beforeDraw: function beforeDraw() {
	          var context = this.get('context');
	          var el = this.get('el');
	          context && context.clearRect(0, 0, el.width, el.height);
	        },
	        _beginDraw: function _beginDraw() {
	          this.setSilent('toDraw', true);
	        },
	        _endDraw: function _endDraw() {
	          this.setSilent('toDraw', false);
	        },
	        draw: function draw() {
	          var self = this;
	          function drawInner() {
	            self.setSilent('animateHandler', Util.requestAnimationFrame(function () {
	              self.setSilent('animateHandler', undefined);
	              if (self.get('toDraw')) {
	                drawInner();
	              }
	            }));
	            self.beforeDraw();
	            try {
	              var context = self.get('context');
	              Canvas.superclass.draw.call(self, context);
	              // self._drawCanvas();
	            } catch (ev) {
	              // 绘制时异常，中断重绘
	              console.warn('error in draw canvas, detail as:');
	              console.warn(ev);
	              self._endDraw();
	            }
	            self._endDraw();
	          }

	          if (self.get('destroyed')) {
	            return;
	          }
	          if (self.get('animateHandler')) {
	            this._beginDraw();
	          } else {
	            drawInner();
	          }
	        },
	        destroy: function destroy() {
	          var containerDOM = this.get('containerDOM');
	          var canvasDOM = this.get('canvasDOM');
	          if (canvasDOM && containerDOM) {
	            containerDOM.removeChild(canvasDOM);
	          }
	          Canvas.superclass.destroy.call(this);
	        }
	      });

	      module.exports = Canvas;

	      /***/
	    },
	    /* 115 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var g;

	      // This works in non-strict mode
	      g = function () {
	        return this;
	      }();

	      try {
	        // This works if eval is allowed (see CSP)
	        g = g || Function("return this")() || (1, eval)("this");
	      } catch (e) {
	        // This works if the window reference is available
	        if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	      }

	      // g can still be undefined, but nothing to do about it...
	      // We return undefined, instead of nothing here, so it's
	      // easier to handle this case. if(!global) { ...}

	      module.exports = g;

	      /***/
	    },
	    /* 116 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Used to resolve the
	       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	       * of values.
	       */
	      var nativeObjectToString = objectProto.toString;

	      /** Built-in value references. */
	      var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	      /**
	       * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	       *
	       * @private
	       * @param {*} value The value to query.
	       * @returns {string} Returns the raw `toStringTag`.
	       */
	      function getRawTag(value) {
	        var isOwn = hasOwnProperty.call(value, symToStringTag),
	            tag = value[symToStringTag];

	        try {
	          value[symToStringTag] = undefined;
	          var unmasked = true;
	        } catch (e) {}

	        var result = nativeObjectToString.call(value);
	        if (unmasked) {
	          if (isOwn) {
	            value[symToStringTag] = tag;
	          } else {
	            delete value[symToStringTag];
	          }
	        }
	        return result;
	      }

	      module.exports = getRawTag;

	      /***/
	    },
	    /* 117 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /**
	       * Used to resolve the
	       * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	       * of values.
	       */
	      var nativeObjectToString = objectProto.toString;

	      /**
	       * Converts `value` to a string using `Object.prototype.toString`.
	       *
	       * @private
	       * @param {*} value The value to convert.
	       * @returns {string} Returns the converted string.
	       */
	      function objectToString(value) {
	        return nativeObjectToString.call(value);
	      }

	      module.exports = objectToString;

	      /***/
	    },
	    /* 118 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]';

	      /**
	       * Checks if `value` is classified as a boolean primitive or object.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
	       * @example
	       *
	       * _.isBoolean(false);
	       * // => true
	       *
	       * _.isBoolean(null);
	       * // => false
	       */
	      function isBoolean(value) {
	        return value === true || value === false || isObjectLike(value) && baseGetTag(value) == boolTag;
	      }

	      module.exports = isBoolean;

	      /***/
	    },
	    /* 119 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is `null` or `undefined`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
	       * @example
	       *
	       * _.isNil(null);
	       * // => true
	       *
	       * _.isNil(void 0);
	       * // => true
	       *
	       * _.isNil(NaN);
	       * // => false
	       */
	      function isNil(value) {
	        return value == null;
	      }

	      module.exports = isNil;

	      /***/
	    },
	    /* 120 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var numberTag = '[object Number]';

	      /**
	       * Checks if `value` is classified as a `Number` primitive or object.
	       *
	       * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	       * classified as numbers, use the `_.isFinite` method.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	       * @example
	       *
	       * _.isNumber(3);
	       * // => true
	       *
	       * _.isNumber(Number.MIN_VALUE);
	       * // => true
	       *
	       * _.isNumber(Infinity);
	       * // => true
	       *
	       * _.isNumber('3');
	       * // => false
	       */
	      function isNumber(value) {
	        return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
	      }

	      module.exports = isNumber;

	      /***/
	    },
	    /* 121 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseKeys = __webpack_require__(58),
	          getTag = __webpack_require__(22),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isArrayLike = __webpack_require__(9),
	          isBuffer = __webpack_require__(18),
	          isPrototype = __webpack_require__(17),
	          isTypedArray = __webpack_require__(23);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          setTag = '[object Set]';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Checks if `value` is an empty object, collection, map, or set.
	       *
	       * Objects are considered empty if they have no own enumerable string keyed
	       * properties.
	       *
	       * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	       * jQuery-like collections are considered empty if they have a `length` of `0`.
	       * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	       * @example
	       *
	       * _.isEmpty(null);
	       * // => true
	       *
	       * _.isEmpty(true);
	       * // => true
	       *
	       * _.isEmpty(1);
	       * // => true
	       *
	       * _.isEmpty([1, 2, 3]);
	       * // => false
	       *
	       * _.isEmpty({ 'a': 1 });
	       * // => false
	       */
	      function isEmpty(value) {
	        if (value == null) {
	          return true;
	        }
	        if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	          return !value.length;
	        }
	        var tag = getTag(value);
	        if (tag == mapTag || tag == setTag) {
	          return !value.size;
	        }
	        if (isPrototype(value)) {
	          return !baseKeys(value).length;
	        }
	        for (var key in value) {
	          if (hasOwnProperty.call(value, key)) {
	            return false;
	          }
	        }
	        return true;
	      }

	      module.exports = isEmpty;

	      /***/
	    },
	    /* 122 */
	    /***/function (module, exports, __webpack_require__) {

	      var overArg = __webpack_require__(59);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeKeys = overArg(Object.keys, Object);

	      module.exports = nativeKeys;

	      /***/
	    },
	    /* 123 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var DataView = getNative(root, 'DataView');

	      module.exports = DataView;

	      /***/
	    },
	    /* 124 */
	    /***/function (module, exports, __webpack_require__) {

	      var isFunction = __webpack_require__(21),
	          isMasked = __webpack_require__(125),
	          isObject = __webpack_require__(8),
	          toSource = __webpack_require__(60);

	      /**
	       * Used to match `RegExp`
	       * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	       */
	      var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	      /** Used to detect host constructors (Safari). */
	      var reIsHostCtor = /^\[object .+?Constructor\]$/;

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype,
	          objectProto = Object.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Used to detect if a method is native. */
	      var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	      /**
	       * The base implementation of `_.isNative` without bad shim checks.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a native function,
	       *  else `false`.
	       */
	      function baseIsNative(value) {
	        if (!isObject(value) || isMasked(value)) {
	          return false;
	        }
	        var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	        return pattern.test(toSource(value));
	      }

	      module.exports = baseIsNative;

	      /***/
	    },
	    /* 125 */
	    /***/function (module, exports, __webpack_require__) {

	      var coreJsData = __webpack_require__(126);

	      /** Used to detect methods masquerading as native. */
	      var maskSrcKey = function () {
	        var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	        return uid ? 'Symbol(src)_1.' + uid : '';
	      }();

	      /**
	       * Checks if `func` has its source masked.
	       *
	       * @private
	       * @param {Function} func The function to check.
	       * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	       */
	      function isMasked(func) {
	        return !!maskSrcKey && maskSrcKey in func;
	      }

	      module.exports = isMasked;

	      /***/
	    },
	    /* 126 */
	    /***/function (module, exports, __webpack_require__) {

	      var root = __webpack_require__(4);

	      /** Used to detect overreaching core-js shims. */
	      var coreJsData = root['__core-js_shared__'];

	      module.exports = coreJsData;

	      /***/
	    },
	    /* 127 */
	    /***/function (module, exports) {

	      /**
	       * Gets the value at `key` of `object`.
	       *
	       * @private
	       * @param {Object} [object] The object to query.
	       * @param {string} key The key of the property to get.
	       * @returns {*} Returns the property value.
	       */
	      function getValue(object, key) {
	        return object == null ? undefined : object[key];
	      }

	      module.exports = getValue;

	      /***/
	    },
	    /* 128 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Promise = getNative(root, 'Promise');

	      module.exports = Promise;

	      /***/
	    },
	    /* 129 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var Set = getNative(root, 'Set');

	      module.exports = Set;

	      /***/
	    },
	    /* 130 */
	    /***/function (module, exports, __webpack_require__) {

	      var getNative = __webpack_require__(10),
	          root = __webpack_require__(4);

	      /* Built-in method references that are verified to be native. */
	      var WeakMap = getNative(root, 'WeakMap');

	      module.exports = WeakMap;

	      /***/
	    },
	    /* 131 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]';

	      /**
	       * The base implementation of `_.isArguments`.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	       */
	      function baseIsArguments(value) {
	        return isObjectLike(value) && baseGetTag(value) == argsTag;
	      }

	      module.exports = baseIsArguments;

	      /***/
	    },
	    /* 132 */
	    /***/function (module, exports) {

	      /**
	       * This method returns `false`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.13.0
	       * @category Util
	       * @returns {boolean} Returns `false`.
	       * @example
	       *
	       * _.times(2, _.stubFalse);
	       * // => [false, false]
	       */
	      function stubFalse() {
	        return false;
	      }

	      module.exports = stubFalse;

	      /***/
	    },
	    /* 133 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          isLength = __webpack_require__(61),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          funcTag = '[object Function]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          objectTag = '[object Object]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          weakMapTag = '[object WeakMap]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /** Used to identify `toStringTag` values of typed arrays. */
	      var typedArrayTags = {};
	      typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	      typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	      /**
	       * The base implementation of `_.isTypedArray` without Node.js optimizations.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	       */
	      function baseIsTypedArray(value) {
	        return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	      }

	      module.exports = baseIsTypedArray;

	      /***/
	    },
	    /* 134 */
	    /***/function (module, exports, __webpack_require__) {

	      /* WEBPACK VAR INJECTION */(function (module) {
	        var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	          return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        } : function (obj) {
	          return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	        };

	        var freeGlobal = __webpack_require__(56);

	        /** Detect free variable `exports`. */
	        var freeExports = (false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	        /** Detect free variable `module`. */
	        var freeModule = freeExports && (false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	        /** Detect the popular CommonJS extension `module.exports`. */
	        var moduleExports = freeModule && freeModule.exports === freeExports;

	        /** Detect free variable `process` from Node.js. */
	        var freeProcess = moduleExports && freeGlobal.process;

	        /** Used to access faster Node.js helpers. */
	        var nodeUtil = function () {
	          try {
	            return freeProcess && freeProcess.binding && freeProcess.binding('util');
	          } catch (e) {}
	        }();

	        module.exports = nodeUtil;
	        /* WEBPACK VAR INJECTION */
	      }).call(exports, __webpack_require__(34)(module));

	      /***/
	    },
	    /* 135 */
	    /***/function (module, exports, __webpack_require__) {

	      var toString = __webpack_require__(63);

	      /** Used to generate unique IDs. */
	      var idCounter = 0;

	      /**
	       * Generates a unique ID. If `prefix` is given, the ID is appended to it.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Util
	       * @param {string} [prefix=''] The value to prefix the ID with.
	       * @returns {string} Returns the unique ID.
	       * @example
	       *
	       * _.uniqueId('contact_');
	       * // => 'contact_104'
	       *
	       * _.uniqueId();
	       * // => '105'
	       */
	      function uniqueId(prefix) {
	        var id = ++idCounter;
	        return toString(prefix) + id;
	      }

	      module.exports = uniqueId;

	      /***/
	    },
	    /* 136 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          arrayMap = __webpack_require__(35),
	          isArray = __webpack_require__(6),
	          isSymbol = __webpack_require__(137);

	      /** Used as references for various `Number` constants. */
	      var INFINITY = 1 / 0;

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolToString = symbolProto ? symbolProto.toString : undefined;

	      /**
	       * The base implementation of `_.toString` which doesn't convert nullish
	       * values to empty strings.
	       *
	       * @private
	       * @param {*} value The value to process.
	       * @returns {string} Returns the string.
	       */
	      function baseToString(value) {
	        // Exit early for strings to avoid a performance hit in some environments.
	        if (typeof value == 'string') {
	          return value;
	        }
	        if (isArray(value)) {
	          // Recursively convert values (susceptible to call stack limits).
	          return arrayMap(value, baseToString) + '';
	        }
	        if (isSymbol(value)) {
	          return symbolToString ? symbolToString.call(value) : '';
	        }
	        var result = value + '';
	        return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	      }

	      module.exports = baseToString;

	      /***/
	    },
	    /* 137 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var baseGetTag = __webpack_require__(7),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var symbolTag = '[object Symbol]';

	      /**
	       * Checks if `value` is classified as a `Symbol` primitive or object.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	       * @example
	       *
	       * _.isSymbol(Symbol.iterator);
	       * // => true
	       *
	       * _.isSymbol('abc');
	       * // => false
	       */
	      function isSymbol(value) {
	        return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	      }

	      module.exports = isSymbol;

	      /***/
	    },
	    /* 138 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseClone = __webpack_require__(139);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_SYMBOLS_FLAG = 4;

	      /**
	       * Creates a shallow clone of `value`.
	       *
	       * **Note:** This method is loosely based on the
	       * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
	       * and supports cloning arrays, array buffers, booleans, date objects, maps,
	       * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
	       * arrays. The own enumerable properties of `arguments` objects are cloned
	       * as plain objects. An empty object is returned for uncloneable values such
	       * as error objects, functions, DOM nodes, and WeakMaps.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to clone.
	       * @returns {*} Returns the cloned value.
	       * @see _.cloneDeep
	       * @example
	       *
	       * var objects = [{ 'a': 1 }, { 'b': 2 }];
	       *
	       * var shallow = _.clone(objects);
	       * console.log(shallow[0] === objects[0]);
	       * // => true
	       */
	      function clone(value) {
	        return baseClone(value, CLONE_SYMBOLS_FLAG);
	      }

	      module.exports = clone;

	      /***/
	    },
	    /* 139 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          arrayEach = __webpack_require__(65),
	          assignValue = __webpack_require__(37),
	          baseAssign = __webpack_require__(162),
	          baseAssignIn = __webpack_require__(164),
	          cloneBuffer = __webpack_require__(69),
	          copyArray = __webpack_require__(29),
	          copySymbols = __webpack_require__(167),
	          copySymbolsIn = __webpack_require__(169),
	          getAllKeys = __webpack_require__(73),
	          getAllKeysIn = __webpack_require__(170),
	          getTag = __webpack_require__(22),
	          initCloneArray = __webpack_require__(171),
	          initCloneByTag = __webpack_require__(172),
	          initCloneObject = __webpack_require__(78),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isObject = __webpack_require__(8),
	          keys = __webpack_require__(13);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1,
	          CLONE_FLAT_FLAG = 2,
	          CLONE_SYMBOLS_FLAG = 4;

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          funcTag = '[object Function]',
	          genTag = '[object GeneratorFunction]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          objectTag = '[object Object]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]',
	          weakMapTag = '[object WeakMap]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /** Used to identify `toStringTag` values supported by `_.clone`. */
	      var cloneableTags = {};
	      cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	      cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	      /**
	       * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	       * traversed objects.
	       *
	       * @private
	       * @param {*} value The value to clone.
	       * @param {boolean} bitmask The bitmask flags.
	       *  1 - Deep clone
	       *  2 - Flatten inherited properties
	       *  4 - Clone symbols
	       * @param {Function} [customizer] The function to customize cloning.
	       * @param {string} [key] The key of `value`.
	       * @param {Object} [object] The parent object of `value`.
	       * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	       * @returns {*} Returns the cloned value.
	       */
	      function baseClone(value, bitmask, customizer, key, object, stack) {
	        var result,
	            isDeep = bitmask & CLONE_DEEP_FLAG,
	            isFlat = bitmask & CLONE_FLAT_FLAG,
	            isFull = bitmask & CLONE_SYMBOLS_FLAG;

	        if (customizer) {
	          result = object ? customizer(value, key, object, stack) : customizer(value);
	        }
	        if (result !== undefined) {
	          return result;
	        }
	        if (!isObject(value)) {
	          return value;
	        }
	        var isArr = isArray(value);
	        if (isArr) {
	          result = initCloneArray(value);
	          if (!isDeep) {
	            return copyArray(value, result);
	          }
	        } else {
	          var tag = getTag(value),
	              isFunc = tag == funcTag || tag == genTag;

	          if (isBuffer(value)) {
	            return cloneBuffer(value, isDeep);
	          }
	          if (tag == objectTag || tag == argsTag || isFunc && !object) {
	            result = isFlat || isFunc ? {} : initCloneObject(value);
	            if (!isDeep) {
	              return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	            }
	          } else {
	            if (!cloneableTags[tag]) {
	              return object ? value : {};
	            }
	            result = initCloneByTag(value, tag, baseClone, isDeep);
	          }
	        }
	        // Check for circular references and return its corresponding clone.
	        stack || (stack = new Stack());
	        var stacked = stack.get(value);
	        if (stacked) {
	          return stacked;
	        }
	        stack.set(value, result);

	        var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

	        var props = isArr ? undefined : keysFunc(value);
	        arrayEach(props || value, function (subValue, key) {
	          if (props) {
	            key = subValue;
	            subValue = value[key];
	          }
	          // Recursively populate clone (susceptible to call stack limits).
	          assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	        });
	        return result;
	      }

	      module.exports = baseClone;

	      /***/
	    },
	    /* 140 */
	    /***/function (module, exports) {

	      /**
	       * Removes all key-value entries from the list cache.
	       *
	       * @private
	       * @name clear
	       * @memberOf ListCache
	       */
	      function listCacheClear() {
	        this.__data__ = [];
	        this.size = 0;
	      }

	      module.exports = listCacheClear;

	      /***/
	    },
	    /* 141 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /** Used for built-in method references. */
	      var arrayProto = Array.prototype;

	      /** Built-in value references. */
	      var splice = arrayProto.splice;

	      /**
	       * Removes `key` and its value from the list cache.
	       *
	       * @private
	       * @name delete
	       * @memberOf ListCache
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function listCacheDelete(key) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        if (index < 0) {
	          return false;
	        }
	        var lastIndex = data.length - 1;
	        if (index == lastIndex) {
	          data.pop();
	        } else {
	          splice.call(data, index, 1);
	        }
	        --this.size;
	        return true;
	      }

	      module.exports = listCacheDelete;

	      /***/
	    },
	    /* 142 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Gets the list cache value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf ListCache
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function listCacheGet(key) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        return index < 0 ? undefined : data[index][1];
	      }

	      module.exports = listCacheGet;

	      /***/
	    },
	    /* 143 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Checks if a list cache value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf ListCache
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function listCacheHas(key) {
	        return assocIndexOf(this.__data__, key) > -1;
	      }

	      module.exports = listCacheHas;

	      /***/
	    },
	    /* 144 */
	    /***/function (module, exports, __webpack_require__) {

	      var assocIndexOf = __webpack_require__(25);

	      /**
	       * Sets the list cache `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf ListCache
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the list cache instance.
	       */
	      function listCacheSet(key, value) {
	        var data = this.__data__,
	            index = assocIndexOf(data, key);

	        if (index < 0) {
	          ++this.size;
	          data.push([key, value]);
	        } else {
	          data[index][1] = value;
	        }
	        return this;
	      }

	      module.exports = listCacheSet;

	      /***/
	    },
	    /* 145 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24);

	      /**
	       * Removes all key-value entries from the stack.
	       *
	       * @private
	       * @name clear
	       * @memberOf Stack
	       */
	      function stackClear() {
	        this.__data__ = new ListCache();
	        this.size = 0;
	      }

	      module.exports = stackClear;

	      /***/
	    },
	    /* 146 */
	    /***/function (module, exports) {

	      /**
	       * Removes `key` and its value from the stack.
	       *
	       * @private
	       * @name delete
	       * @memberOf Stack
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function stackDelete(key) {
	        var data = this.__data__,
	            result = data['delete'](key);

	        this.size = data.size;
	        return result;
	      }

	      module.exports = stackDelete;

	      /***/
	    },
	    /* 147 */
	    /***/function (module, exports) {

	      /**
	       * Gets the stack value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf Stack
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function stackGet(key) {
	        return this.__data__.get(key);
	      }

	      module.exports = stackGet;

	      /***/
	    },
	    /* 148 */
	    /***/function (module, exports) {

	      /**
	       * Checks if a stack value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf Stack
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function stackHas(key) {
	        return this.__data__.has(key);
	      }

	      module.exports = stackHas;

	      /***/
	    },
	    /* 149 */
	    /***/function (module, exports, __webpack_require__) {

	      var ListCache = __webpack_require__(24),
	          Map = __webpack_require__(32),
	          MapCache = __webpack_require__(64);

	      /** Used as the size to enable large array optimizations. */
	      var LARGE_ARRAY_SIZE = 200;

	      /**
	       * Sets the stack `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf Stack
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the stack cache instance.
	       */
	      function stackSet(key, value) {
	        var data = this.__data__;
	        if (data instanceof ListCache) {
	          var pairs = data.__data__;
	          if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	            pairs.push([key, value]);
	            this.size = ++data.size;
	            return this;
	          }
	          data = this.__data__ = new MapCache(pairs);
	        }
	        data.set(key, value);
	        this.size = data.size;
	        return this;
	      }

	      module.exports = stackSet;

	      /***/
	    },
	    /* 150 */
	    /***/function (module, exports, __webpack_require__) {

	      var Hash = __webpack_require__(151),
	          ListCache = __webpack_require__(24),
	          Map = __webpack_require__(32);

	      /**
	       * Removes all key-value entries from the map.
	       *
	       * @private
	       * @name clear
	       * @memberOf MapCache
	       */
	      function mapCacheClear() {
	        this.size = 0;
	        this.__data__ = {
	          'hash': new Hash(),
	          'map': new (Map || ListCache)(),
	          'string': new Hash()
	        };
	      }

	      module.exports = mapCacheClear;

	      /***/
	    },
	    /* 151 */
	    /***/function (module, exports, __webpack_require__) {

	      var hashClear = __webpack_require__(152),
	          hashDelete = __webpack_require__(153),
	          hashGet = __webpack_require__(154),
	          hashHas = __webpack_require__(155),
	          hashSet = __webpack_require__(156);

	      /**
	       * Creates a hash object.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [entries] The key-value pairs to cache.
	       */
	      function Hash(entries) {
	        var index = -1,
	            length = entries == null ? 0 : entries.length;

	        this.clear();
	        while (++index < length) {
	          var entry = entries[index];
	          this.set(entry[0], entry[1]);
	        }
	      }

	      // Add methods to `Hash`.
	      Hash.prototype.clear = hashClear;
	      Hash.prototype['delete'] = hashDelete;
	      Hash.prototype.get = hashGet;
	      Hash.prototype.has = hashHas;
	      Hash.prototype.set = hashSet;

	      module.exports = Hash;

	      /***/
	    },
	    /* 152 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /**
	       * Removes all key-value entries from the hash.
	       *
	       * @private
	       * @name clear
	       * @memberOf Hash
	       */
	      function hashClear() {
	        this.__data__ = nativeCreate ? nativeCreate(null) : {};
	        this.size = 0;
	      }

	      module.exports = hashClear;

	      /***/
	    },
	    /* 153 */
	    /***/function (module, exports) {

	      /**
	       * Removes `key` and its value from the hash.
	       *
	       * @private
	       * @name delete
	       * @memberOf Hash
	       * @param {Object} hash The hash to modify.
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function hashDelete(key) {
	        var result = this.has(key) && delete this.__data__[key];
	        this.size -= result ? 1 : 0;
	        return result;
	      }

	      module.exports = hashDelete;

	      /***/
	    },
	    /* 154 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Gets the hash value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf Hash
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function hashGet(key) {
	        var data = this.__data__;
	        if (nativeCreate) {
	          var result = data[key];
	          return result === HASH_UNDEFINED ? undefined : result;
	        }
	        return hasOwnProperty.call(data, key) ? data[key] : undefined;
	      }

	      module.exports = hashGet;

	      /***/
	    },
	    /* 155 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Checks if a hash value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf Hash
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function hashHas(key) {
	        var data = this.__data__;
	        return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	      }

	      module.exports = hashHas;

	      /***/
	    },
	    /* 156 */
	    /***/function (module, exports, __webpack_require__) {

	      var nativeCreate = __webpack_require__(26);

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /**
	       * Sets the hash `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf Hash
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the hash instance.
	       */
	      function hashSet(key, value) {
	        var data = this.__data__;
	        this.size += this.has(key) ? 0 : 1;
	        data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	        return this;
	      }

	      module.exports = hashSet;

	      /***/
	    },
	    /* 157 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Removes `key` and its value from the map.
	       *
	       * @private
	       * @name delete
	       * @memberOf MapCache
	       * @param {string} key The key of the value to remove.
	       * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	       */
	      function mapCacheDelete(key) {
	        var result = getMapData(this, key)['delete'](key);
	        this.size -= result ? 1 : 0;
	        return result;
	      }

	      module.exports = mapCacheDelete;

	      /***/
	    },
	    /* 158 */
	    /***/function (module, exports) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /**
	       * Checks if `value` is suitable for use as unique object key.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	       */
	      function isKeyable(value) {
	        var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	        return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	      }

	      module.exports = isKeyable;

	      /***/
	    },
	    /* 159 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Gets the map value for `key`.
	       *
	       * @private
	       * @name get
	       * @memberOf MapCache
	       * @param {string} key The key of the value to get.
	       * @returns {*} Returns the entry value.
	       */
	      function mapCacheGet(key) {
	        return getMapData(this, key).get(key);
	      }

	      module.exports = mapCacheGet;

	      /***/
	    },
	    /* 160 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Checks if a map value for `key` exists.
	       *
	       * @private
	       * @name has
	       * @memberOf MapCache
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function mapCacheHas(key) {
	        return getMapData(this, key).has(key);
	      }

	      module.exports = mapCacheHas;

	      /***/
	    },
	    /* 161 */
	    /***/function (module, exports, __webpack_require__) {

	      var getMapData = __webpack_require__(27);

	      /**
	       * Sets the map `key` to `value`.
	       *
	       * @private
	       * @name set
	       * @memberOf MapCache
	       * @param {string} key The key of the value to set.
	       * @param {*} value The value to set.
	       * @returns {Object} Returns the map cache instance.
	       */
	      function mapCacheSet(key, value) {
	        var data = getMapData(this, key),
	            size = data.size;

	        data.set(key, value);
	        this.size += data.size == size ? 0 : 1;
	        return this;
	      }

	      module.exports = mapCacheSet;

	      /***/
	    },
	    /* 162 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keys = __webpack_require__(13);

	      /**
	       * The base implementation of `_.assign` without support for multiple sources
	       * or `customizer` functions.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @returns {Object} Returns `object`.
	       */
	      function baseAssign(object, source) {
	        return object && copyObject(source, keys(source), object);
	      }

	      module.exports = baseAssign;

	      /***/
	    },
	    /* 163 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.times` without support for iteratee shorthands
	       * or max array length checks.
	       *
	       * @private
	       * @param {number} n The number of times to invoke `iteratee`.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array} Returns the array of results.
	       */
	      function baseTimes(n, iteratee) {
	        var index = -1,
	            result = Array(n);

	        while (++index < n) {
	          result[index] = iteratee(index);
	        }
	        return result;
	      }

	      module.exports = baseTimes;

	      /***/
	    },
	    /* 164 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keysIn = __webpack_require__(28);

	      /**
	       * The base implementation of `_.assignIn` without support for multiple sources
	       * or `customizer` functions.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @returns {Object} Returns `object`.
	       */
	      function baseAssignIn(object, source) {
	        return object && copyObject(source, keysIn(source), object);
	      }

	      module.exports = baseAssignIn;

	      /***/
	    },
	    /* 165 */
	    /***/function (module, exports, __webpack_require__) {

	      var isObject = __webpack_require__(8),
	          isPrototype = __webpack_require__(17),
	          nativeKeysIn = __webpack_require__(166);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function baseKeysIn(object) {
	        if (!isObject(object)) {
	          return nativeKeysIn(object);
	        }
	        var isProto = isPrototype(object),
	            result = [];

	        for (var key in object) {
	          if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = baseKeysIn;

	      /***/
	    },
	    /* 166 */
	    /***/function (module, exports) {

	      /**
	       * This function is like
	       * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	       * except that it includes inherited enumerable properties.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names.
	       */
	      function nativeKeysIn(object) {
	        var result = [];
	        if (object != null) {
	          for (var key in Object(object)) {
	            result.push(key);
	          }
	        }
	        return result;
	      }

	      module.exports = nativeKeysIn;

	      /***/
	    },
	    /* 167 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          getSymbols = __webpack_require__(39);

	      /**
	       * Copies own symbols of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy symbols from.
	       * @param {Object} [object={}] The object to copy symbols to.
	       * @returns {Object} Returns `object`.
	       */
	      function copySymbols(source, object) {
	        return copyObject(source, getSymbols(source), object);
	      }

	      module.exports = copySymbols;

	      /***/
	    },
	    /* 168 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.filter` for arrays without support for
	       * iteratee shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} predicate The function invoked per iteration.
	       * @returns {Array} Returns the new filtered array.
	       */
	      function arrayFilter(array, predicate) {
	        var index = -1,
	            length = array == null ? 0 : array.length,
	            resIndex = 0,
	            result = [];

	        while (++index < length) {
	          var value = array[index];
	          if (predicate(value, index, array)) {
	            result[resIndex++] = value;
	          }
	        }
	        return result;
	      }

	      module.exports = arrayFilter;

	      /***/
	    },
	    /* 169 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          getSymbolsIn = __webpack_require__(71);

	      /**
	       * Copies own and inherited symbols of `source` to `object`.
	       *
	       * @private
	       * @param {Object} source The object to copy symbols from.
	       * @param {Object} [object={}] The object to copy symbols to.
	       * @returns {Object} Returns `object`.
	       */
	      function copySymbolsIn(source, object) {
	        return copyObject(source, getSymbolsIn(source), object);
	      }

	      module.exports = copySymbolsIn;

	      /***/
	    },
	    /* 170 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetAllKeys = __webpack_require__(74),
	          getSymbolsIn = __webpack_require__(71),
	          keysIn = __webpack_require__(28);

	      /**
	       * Creates an array of own and inherited enumerable property names and
	       * symbols of `object`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property names and symbols.
	       */
	      function getAllKeysIn(object) {
	        return baseGetAllKeys(object, keysIn, getSymbolsIn);
	      }

	      module.exports = getAllKeysIn;

	      /***/
	    },
	    /* 171 */
	    /***/function (module, exports) {

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Initializes an array clone.
	       *
	       * @private
	       * @param {Array} array The array to clone.
	       * @returns {Array} Returns the initialized clone.
	       */
	      function initCloneArray(array) {
	        var length = array.length,
	            result = array.constructor(length);

	        // Add properties assigned by `RegExp#exec`.
	        if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	          result.index = array.index;
	          result.input = array.input;
	        }
	        return result;
	      }

	      module.exports = initCloneArray;

	      /***/
	    },
	    /* 172 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41),
	          cloneDataView = __webpack_require__(173),
	          cloneMap = __webpack_require__(174),
	          cloneRegExp = __webpack_require__(176),
	          cloneSet = __webpack_require__(177),
	          cloneSymbol = __webpack_require__(179),
	          cloneTypedArray = __webpack_require__(77);

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]',
	          float32Tag = '[object Float32Array]',
	          float64Tag = '[object Float64Array]',
	          int8Tag = '[object Int8Array]',
	          int16Tag = '[object Int16Array]',
	          int32Tag = '[object Int32Array]',
	          uint8Tag = '[object Uint8Array]',
	          uint8ClampedTag = '[object Uint8ClampedArray]',
	          uint16Tag = '[object Uint16Array]',
	          uint32Tag = '[object Uint32Array]';

	      /**
	       * Initializes an object clone based on its `toStringTag`.
	       *
	       * **Note:** This function only supports cloning values with tags of
	       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	       *
	       * @private
	       * @param {Object} object The object to clone.
	       * @param {string} tag The `toStringTag` of the object to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the initialized clone.
	       */
	      function initCloneByTag(object, tag, cloneFunc, isDeep) {
	        var Ctor = object.constructor;
	        switch (tag) {
	          case arrayBufferTag:
	            return cloneArrayBuffer(object);

	          case boolTag:
	          case dateTag:
	            return new Ctor(+object);

	          case dataViewTag:
	            return cloneDataView(object, isDeep);

	          case float32Tag:case float64Tag:
	          case int8Tag:case int16Tag:case int32Tag:
	          case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	            return cloneTypedArray(object, isDeep);

	          case mapTag:
	            return cloneMap(object, isDeep, cloneFunc);

	          case numberTag:
	          case stringTag:
	            return new Ctor(object);

	          case regexpTag:
	            return cloneRegExp(object);

	          case setTag:
	            return cloneSet(object, isDeep, cloneFunc);

	          case symbolTag:
	            return cloneSymbol(object);
	        }
	      }

	      module.exports = initCloneByTag;

	      /***/
	    },
	    /* 173 */
	    /***/function (module, exports, __webpack_require__) {

	      var cloneArrayBuffer = __webpack_require__(41);

	      /**
	       * Creates a clone of `dataView`.
	       *
	       * @private
	       * @param {Object} dataView The data view to clone.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned data view.
	       */
	      function cloneDataView(dataView, isDeep) {
	        var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	        return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	      }

	      module.exports = cloneDataView;

	      /***/
	    },
	    /* 174 */
	    /***/function (module, exports, __webpack_require__) {

	      var addMapEntry = __webpack_require__(175),
	          arrayReduce = __webpack_require__(76),
	          mapToArray = __webpack_require__(42);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1;

	      /**
	       * Creates a clone of `map`.
	       *
	       * @private
	       * @param {Object} map The map to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned map.
	       */
	      function cloneMap(map, isDeep, cloneFunc) {
	        var array = isDeep ? cloneFunc(mapToArray(map), CLONE_DEEP_FLAG) : mapToArray(map);
	        return arrayReduce(array, addMapEntry, new map.constructor());
	      }

	      module.exports = cloneMap;

	      /***/
	    },
	    /* 175 */
	    /***/function (module, exports) {

	      /**
	       * Adds the key-value `pair` to `map`.
	       *
	       * @private
	       * @param {Object} map The map to modify.
	       * @param {Array} pair The key-value pair to add.
	       * @returns {Object} Returns `map`.
	       */
	      function addMapEntry(map, pair) {
	        // Don't return `map.set` because it's not chainable in IE 11.
	        map.set(pair[0], pair[1]);
	        return map;
	      }

	      module.exports = addMapEntry;

	      /***/
	    },
	    /* 176 */
	    /***/function (module, exports) {

	      /** Used to match `RegExp` flags from their coerced string values. */
	      var reFlags = /\w*$/;

	      /**
	       * Creates a clone of `regexp`.
	       *
	       * @private
	       * @param {Object} regexp The regexp to clone.
	       * @returns {Object} Returns the cloned regexp.
	       */
	      function cloneRegExp(regexp) {
	        var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	        result.lastIndex = regexp.lastIndex;
	        return result;
	      }

	      module.exports = cloneRegExp;

	      /***/
	    },
	    /* 177 */
	    /***/function (module, exports, __webpack_require__) {

	      var addSetEntry = __webpack_require__(178),
	          arrayReduce = __webpack_require__(76),
	          setToArray = __webpack_require__(43);

	      /** Used to compose bitmasks for cloning. */
	      var CLONE_DEEP_FLAG = 1;

	      /**
	       * Creates a clone of `set`.
	       *
	       * @private
	       * @param {Object} set The set to clone.
	       * @param {Function} cloneFunc The function to clone values.
	       * @param {boolean} [isDeep] Specify a deep clone.
	       * @returns {Object} Returns the cloned set.
	       */
	      function cloneSet(set, isDeep, cloneFunc) {
	        var array = isDeep ? cloneFunc(setToArray(set), CLONE_DEEP_FLAG) : setToArray(set);
	        return arrayReduce(array, addSetEntry, new set.constructor());
	      }

	      module.exports = cloneSet;

	      /***/
	    },
	    /* 178 */
	    /***/function (module, exports) {

	      /**
	       * Adds `value` to `set`.
	       *
	       * @private
	       * @param {Object} set The set to modify.
	       * @param {*} value The value to add.
	       * @returns {Object} Returns `set`.
	       */
	      function addSetEntry(set, value) {
	        // Don't return `set.add` because it's not chainable in IE 11.
	        set.add(value);
	        return set;
	      }

	      module.exports = addSetEntry;

	      /***/
	    },
	    /* 179 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11);

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	      /**
	       * Creates a clone of the `symbol` object.
	       *
	       * @private
	       * @param {Object} symbol The symbol object to clone.
	       * @returns {Object} Returns the cloned symbol object.
	       */
	      function cloneSymbol(symbol) {
	        return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	      }

	      module.exports = cloneSymbol;

	      /***/
	    },
	    /* 180 */
	    /***/function (module, exports, __webpack_require__) {

	      var isObject = __webpack_require__(8);

	      /** Built-in value references. */
	      var objectCreate = Object.create;

	      /**
	       * The base implementation of `_.create` without support for assigning
	       * properties to the created object.
	       *
	       * @private
	       * @param {Object} proto The object to inherit from.
	       * @returns {Object} Returns the new object.
	       */
	      var baseCreate = function () {
	        function object() {}
	        return function (proto) {
	          if (!isObject(proto)) {
	            return {};
	          }
	          if (objectCreate) {
	            return objectCreate(proto);
	          }
	          object.prototype = proto;
	          var result = new object();
	          object.prototype = undefined;
	          return result;
	        };
	      }();

	      module.exports = baseCreate;

	      /***/
	    },
	    /* 181 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignValue = __webpack_require__(37),
	          copyObject = __webpack_require__(12),
	          createAssigner = __webpack_require__(79),
	          isArrayLike = __webpack_require__(9),
	          isPrototype = __webpack_require__(17),
	          keys = __webpack_require__(13);

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * Assigns own enumerable string keyed properties of source objects to the
	       * destination object. Source objects are applied from left to right.
	       * Subsequent sources overwrite property assignments of previous sources.
	       *
	       * **Note:** This method mutates `object` and is loosely based on
	       * [`Object.assign`](https://mdn.io/Object/assign).
	       *
	       * @static
	       * @memberOf _
	       * @since 0.10.0
	       * @category Object
	       * @param {Object} object The destination object.
	       * @param {...Object} [sources] The source objects.
	       * @returns {Object} Returns `object`.
	       * @see _.assignIn
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       * }
	       *
	       * function Bar() {
	       *   this.c = 3;
	       * }
	       *
	       * Foo.prototype.b = 2;
	       * Bar.prototype.d = 4;
	       *
	       * _.assign({ 'a': 0 }, new Foo, new Bar);
	       * // => { 'a': 1, 'c': 3 }
	       */
	      var assign = createAssigner(function (object, source) {
	        if (isPrototype(source) || isArrayLike(source)) {
	          copyObject(source, keys(source), object);
	          return;
	        }
	        for (var key in source) {
	          if (hasOwnProperty.call(source, key)) {
	            assignValue(object, key, source[key]);
	          }
	        }
	      });

	      module.exports = assign;

	      /***/
	    },
	    /* 182 */
	    /***/function (module, exports, __webpack_require__) {

	      var apply = __webpack_require__(183);

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeMax = Math.max;

	      /**
	       * A specialized version of `baseRest` which transforms the rest array.
	       *
	       * @private
	       * @param {Function} func The function to apply a rest parameter to.
	       * @param {number} [start=func.length-1] The start position of the rest parameter.
	       * @param {Function} transform The rest array transform.
	       * @returns {Function} Returns the new function.
	       */
	      function overRest(func, start, transform) {
	        start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	        return function () {
	          var args = arguments,
	              index = -1,
	              length = nativeMax(args.length - start, 0),
	              array = Array(length);

	          while (++index < length) {
	            array[index] = args[start + index];
	          }
	          index = -1;
	          var otherArgs = Array(start + 1);
	          while (++index < start) {
	            otherArgs[index] = args[index];
	          }
	          otherArgs[start] = transform(array);
	          return apply(func, this, otherArgs);
	        };
	      }

	      module.exports = overRest;

	      /***/
	    },
	    /* 183 */
	    /***/function (module, exports) {

	      /**
	       * A faster alternative to `Function#apply`, this function invokes `func`
	       * with the `this` binding of `thisArg` and the arguments of `args`.
	       *
	       * @private
	       * @param {Function} func The function to invoke.
	       * @param {*} thisArg The `this` binding of `func`.
	       * @param {Array} args The arguments to invoke `func` with.
	       * @returns {*} Returns the result of `func`.
	       */
	      function apply(func, thisArg, args) {
	        switch (args.length) {
	          case 0:
	            return func.call(thisArg);
	          case 1:
	            return func.call(thisArg, args[0]);
	          case 2:
	            return func.call(thisArg, args[0], args[1]);
	          case 3:
	            return func.call(thisArg, args[0], args[1], args[2]);
	        }
	        return func.apply(thisArg, args);
	      }

	      module.exports = apply;

	      /***/
	    },
	    /* 184 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseSetToString = __webpack_require__(185),
	          shortOut = __webpack_require__(187);

	      /**
	       * Sets the `toString` method of `func` to return `string`.
	       *
	       * @private
	       * @param {Function} func The function to modify.
	       * @param {Function} string The `toString` result.
	       * @returns {Function} Returns `func`.
	       */
	      var setToString = shortOut(baseSetToString);

	      module.exports = setToString;

	      /***/
	    },
	    /* 185 */
	    /***/function (module, exports, __webpack_require__) {

	      var constant = __webpack_require__(186),
	          defineProperty = __webpack_require__(66),
	          identity = __webpack_require__(44);

	      /**
	       * The base implementation of `setToString` without support for hot loop shorting.
	       *
	       * @private
	       * @param {Function} func The function to modify.
	       * @param {Function} string The `toString` result.
	       * @returns {Function} Returns `func`.
	       */
	      var baseSetToString = !defineProperty ? identity : function (func, string) {
	        return defineProperty(func, 'toString', {
	          'configurable': true,
	          'enumerable': false,
	          'value': constant(string),
	          'writable': true
	        });
	      };

	      module.exports = baseSetToString;

	      /***/
	    },
	    /* 186 */
	    /***/function (module, exports) {

	      /**
	       * Creates a function that returns `value`.
	       *
	       * @static
	       * @memberOf _
	       * @since 2.4.0
	       * @category Util
	       * @param {*} value The value to return from the new function.
	       * @returns {Function} Returns the new constant function.
	       * @example
	       *
	       * var objects = _.times(2, _.constant({ 'a': 1 }));
	       *
	       * console.log(objects);
	       * // => [{ 'a': 1 }, { 'a': 1 }]
	       *
	       * console.log(objects[0] === objects[1]);
	       * // => true
	       */
	      function constant(value) {
	        return function () {
	          return value;
	        };
	      }

	      module.exports = constant;

	      /***/
	    },
	    /* 187 */
	    /***/function (module, exports) {

	      /** Used to detect hot functions by number of calls within a span of milliseconds. */
	      var HOT_COUNT = 800,
	          HOT_SPAN = 16;

	      /* Built-in method references for those with the same name as other `lodash` methods. */
	      var nativeNow = Date.now;

	      /**
	       * Creates a function that'll short out and invoke `identity` instead
	       * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	       * milliseconds.
	       *
	       * @private
	       * @param {Function} func The function to restrict.
	       * @returns {Function} Returns the new shortable function.
	       */
	      function shortOut(func) {
	        var count = 0,
	            lastCalled = 0;

	        return function () {
	          var stamp = nativeNow(),
	              remaining = HOT_SPAN - (stamp - lastCalled);

	          lastCalled = stamp;
	          if (remaining > 0) {
	            if (++count >= HOT_COUNT) {
	              return arguments[0];
	            }
	          } else {
	            count = 0;
	          }
	          return func.apply(undefined, arguments);
	        };
	      }

	      module.exports = shortOut;

	      /***/
	    },
	    /* 188 */
	    /***/function (module, exports, __webpack_require__) {

	      var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      var eq = __webpack_require__(19),
	          isArrayLike = __webpack_require__(9),
	          isIndex = __webpack_require__(68),
	          isObject = __webpack_require__(8);

	      /**
	       * Checks if the given arguments are from an iteratee call.
	       *
	       * @private
	       * @param {*} value The potential iteratee value argument.
	       * @param {*} index The potential iteratee index or key argument.
	       * @param {*} object The potential iteratee object argument.
	       * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
	       *  else `false`.
	       */
	      function isIterateeCall(value, index, object) {
	        if (!isObject(object)) {
	          return false;
	        }
	        var type = typeof index === 'undefined' ? 'undefined' : _typeof(index);
	        if (type == 'number' ? isArrayLike(object) && isIndex(index, object.length) : type == 'string' && index in object) {
	          return eq(object[index], value);
	        }
	        return false;
	      }

	      module.exports = isIterateeCall;

	      /***/
	    },
	    /* 189 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseMerge = __webpack_require__(190),
	          createAssigner = __webpack_require__(79);

	      /**
	       * This method is like `_.assign` except that it recursively merges own and
	       * inherited enumerable string keyed properties of source objects into the
	       * destination object. Source properties that resolve to `undefined` are
	       * skipped if a destination value exists. Array and plain object properties
	       * are merged recursively. Other objects and value types are overridden by
	       * assignment. Source objects are applied from left to right. Subsequent
	       * sources overwrite property assignments of previous sources.
	       *
	       * **Note:** This method mutates `object`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.5.0
	       * @category Object
	       * @param {Object} object The destination object.
	       * @param {...Object} [sources] The source objects.
	       * @returns {Object} Returns `object`.
	       * @example
	       *
	       * var object = {
	       *   'a': [{ 'b': 2 }, { 'd': 4 }]
	       * };
	       *
	       * var other = {
	       *   'a': [{ 'c': 3 }, { 'e': 5 }]
	       * };
	       *
	       * _.merge(object, other);
	       * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
	       */
	      var merge = createAssigner(function (object, source, srcIndex) {
	        baseMerge(object, source, srcIndex);
	      });

	      module.exports = merge;

	      /***/
	    },
	    /* 190 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          assignMergeValue = __webpack_require__(81),
	          baseFor = __webpack_require__(82),
	          baseMergeDeep = __webpack_require__(192),
	          isObject = __webpack_require__(8),
	          keysIn = __webpack_require__(28);

	      /**
	       * The base implementation of `_.merge` without support for multiple sources.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @param {number} srcIndex The index of `source`.
	       * @param {Function} [customizer] The function to customize merged values.
	       * @param {Object} [stack] Tracks traversed source values and their merged
	       *  counterparts.
	       */
	      function baseMerge(object, source, srcIndex, customizer, stack) {
	        if (object === source) {
	          return;
	        }
	        baseFor(source, function (srcValue, key) {
	          if (isObject(srcValue)) {
	            stack || (stack = new Stack());
	            baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
	          } else {
	            var newValue = customizer ? customizer(object[key], srcValue, key + '', object, source, stack) : undefined;

	            if (newValue === undefined) {
	              newValue = srcValue;
	            }
	            assignMergeValue(object, key, newValue);
	          }
	        }, keysIn);
	      }

	      module.exports = baseMerge;

	      /***/
	    },
	    /* 191 */
	    /***/function (module, exports) {

	      /**
	       * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	       *
	       * @private
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {Function} Returns the new base function.
	       */
	      function createBaseFor(fromRight) {
	        return function (object, iteratee, keysFunc) {
	          var index = -1,
	              iterable = Object(object),
	              props = keysFunc(object),
	              length = props.length;

	          while (length--) {
	            var key = props[fromRight ? length : ++index];
	            if (iteratee(iterable[key], key, iterable) === false) {
	              break;
	            }
	          }
	          return object;
	        };
	      }

	      module.exports = createBaseFor;

	      /***/
	    },
	    /* 192 */
	    /***/function (module, exports, __webpack_require__) {

	      var assignMergeValue = __webpack_require__(81),
	          cloneBuffer = __webpack_require__(69),
	          cloneTypedArray = __webpack_require__(77),
	          copyArray = __webpack_require__(29),
	          initCloneObject = __webpack_require__(78),
	          isArguments = __webpack_require__(33),
	          isArray = __webpack_require__(6),
	          isArrayLikeObject = __webpack_require__(193),
	          isBuffer = __webpack_require__(18),
	          isFunction = __webpack_require__(21),
	          isObject = __webpack_require__(8),
	          isPlainObject = __webpack_require__(194),
	          isTypedArray = __webpack_require__(23),
	          toPlainObject = __webpack_require__(195);

	      /**
	       * A specialized version of `baseMerge` for arrays and objects which performs
	       * deep merges and tracks traversed objects enabling objects with circular
	       * references to be merged.
	       *
	       * @private
	       * @param {Object} object The destination object.
	       * @param {Object} source The source object.
	       * @param {string} key The key of the value to merge.
	       * @param {number} srcIndex The index of `source`.
	       * @param {Function} mergeFunc The function to merge values.
	       * @param {Function} [customizer] The function to customize assigned values.
	       * @param {Object} [stack] Tracks traversed source values and their merged
	       *  counterparts.
	       */
	      function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
	        var objValue = object[key],
	            srcValue = source[key],
	            stacked = stack.get(srcValue);

	        if (stacked) {
	          assignMergeValue(object, key, stacked);
	          return;
	        }
	        var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;

	        var isCommon = newValue === undefined;

	        if (isCommon) {
	          var isArr = isArray(srcValue),
	              isBuff = !isArr && isBuffer(srcValue),
	              isTyped = !isArr && !isBuff && isTypedArray(srcValue);

	          newValue = srcValue;
	          if (isArr || isBuff || isTyped) {
	            if (isArray(objValue)) {
	              newValue = objValue;
	            } else if (isArrayLikeObject(objValue)) {
	              newValue = copyArray(objValue);
	            } else if (isBuff) {
	              isCommon = false;
	              newValue = cloneBuffer(srcValue, true);
	            } else if (isTyped) {
	              isCommon = false;
	              newValue = cloneTypedArray(srcValue, true);
	            } else {
	              newValue = [];
	            }
	          } else if (isPlainObject(srcValue) || isArguments(srcValue)) {
	            newValue = objValue;
	            if (isArguments(objValue)) {
	              newValue = toPlainObject(objValue);
	            } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {
	              newValue = initCloneObject(srcValue);
	            }
	          } else {
	            isCommon = false;
	          }
	        }
	        if (isCommon) {
	          // Recursively merge objects and arrays (susceptible to call stack limits).
	          stack.set(srcValue, newValue);
	          mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
	          stack['delete'](srcValue);
	        }
	        assignMergeValue(object, key, newValue);
	      }

	      module.exports = baseMergeDeep;

	      /***/
	    },
	    /* 193 */
	    /***/function (module, exports, __webpack_require__) {

	      var isArrayLike = __webpack_require__(9),
	          isObjectLike = __webpack_require__(5);

	      /**
	       * This method is like `_.isArrayLike` except that it also checks if `value`
	       * is an object.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is an array-like object,
	       *  else `false`.
	       * @example
	       *
	       * _.isArrayLikeObject([1, 2, 3]);
	       * // => true
	       *
	       * _.isArrayLikeObject(document.body.children);
	       * // => true
	       *
	       * _.isArrayLikeObject('abc');
	       * // => false
	       *
	       * _.isArrayLikeObject(_.noop);
	       * // => false
	       */
	      function isArrayLikeObject(value) {
	        return isObjectLike(value) && isArrayLike(value);
	      }

	      module.exports = isArrayLikeObject;

	      /***/
	    },
	    /* 194 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseGetTag = __webpack_require__(7),
	          getPrototype = __webpack_require__(40),
	          isObjectLike = __webpack_require__(5);

	      /** `Object#toString` result references. */
	      var objectTag = '[object Object]';

	      /** Used for built-in method references. */
	      var funcProto = Function.prototype,
	          objectProto = Object.prototype;

	      /** Used to resolve the decompiled source of functions. */
	      var funcToString = funcProto.toString;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /** Used to infer the `Object` constructor. */
	      var objectCtorString = funcToString.call(Object);

	      /**
	       * Checks if `value` is a plain object, that is, an object created by the
	       * `Object` constructor or one with a `[[Prototype]]` of `null`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.8.0
	       * @category Lang
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       * }
	       *
	       * _.isPlainObject(new Foo);
	       * // => false
	       *
	       * _.isPlainObject([1, 2, 3]);
	       * // => false
	       *
	       * _.isPlainObject({ 'x': 0, 'y': 0 });
	       * // => true
	       *
	       * _.isPlainObject(Object.create(null));
	       * // => true
	       */
	      function isPlainObject(value) {
	        if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	          return false;
	        }
	        var proto = getPrototype(value);
	        if (proto === null) {
	          return true;
	        }
	        var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	        return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	      }

	      module.exports = isPlainObject;

	      /***/
	    },
	    /* 195 */
	    /***/function (module, exports, __webpack_require__) {

	      var copyObject = __webpack_require__(12),
	          keysIn = __webpack_require__(28);

	      /**
	       * Converts `value` to a plain object flattening inherited enumerable string
	       * keyed properties of `value` to own properties of the plain object.
	       *
	       * @static
	       * @memberOf _
	       * @since 3.0.0
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {Object} Returns the converted plain object.
	       * @example
	       *
	       * function Foo() {
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.assign({ 'a': 1 }, new Foo);
	       * // => { 'a': 1, 'b': 2 }
	       *
	       * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
	       * // => { 'a': 1, 'b': 2, 'c': 3 }
	       */
	      function toPlainObject(value) {
	        return copyObject(value, keysIn(value));
	      }

	      module.exports = toPlainObject;

	      /***/
	    },
	    /* 196 */
	    /***/function (module, exports, __webpack_require__) {

	      var createCaseFirst = __webpack_require__(197);

	      /**
	       * Converts the first character of `string` to upper case.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category String
	       * @param {string} [string=''] The string to convert.
	       * @returns {string} Returns the converted string.
	       * @example
	       *
	       * _.upperFirst('fred');
	       * // => 'Fred'
	       *
	       * _.upperFirst('FRED');
	       * // => 'FRED'
	       */
	      var upperFirst = createCaseFirst('toUpperCase');

	      module.exports = upperFirst;

	      /***/
	    },
	    /* 197 */
	    /***/function (module, exports, __webpack_require__) {

	      var castSlice = __webpack_require__(198),
	          hasUnicode = __webpack_require__(83),
	          stringToArray = __webpack_require__(84),
	          toString = __webpack_require__(63);

	      /**
	       * Creates a function like `_.lowerFirst`.
	       *
	       * @private
	       * @param {string} methodName The name of the `String` case method to use.
	       * @returns {Function} Returns the new case function.
	       */
	      function createCaseFirst(methodName) {
	        return function (string) {
	          string = toString(string);

	          var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

	          var chr = strSymbols ? strSymbols[0] : string.charAt(0);

	          var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

	          return chr[methodName]() + trailing;
	        };
	      }

	      module.exports = createCaseFirst;

	      /***/
	    },
	    /* 198 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseSlice = __webpack_require__(199);

	      /**
	       * Casts `array` to a slice if it's needed.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {number} start The start position.
	       * @param {number} [end=array.length] The end position.
	       * @returns {Array} Returns the cast slice.
	       */
	      function castSlice(array, start, end) {
	        var length = array.length;
	        end = end === undefined ? length : end;
	        return !start && end >= length ? array : baseSlice(array, start, end);
	      }

	      module.exports = castSlice;

	      /***/
	    },
	    /* 199 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.slice` without an iteratee call guard.
	       *
	       * @private
	       * @param {Array} array The array to slice.
	       * @param {number} [start=0] The start position.
	       * @param {number} [end=array.length] The end position.
	       * @returns {Array} Returns the slice of `array`.
	       */
	      function baseSlice(array, start, end) {
	        var index = -1,
	            length = array.length;

	        if (start < 0) {
	          start = -start > length ? 0 : length + start;
	        }
	        end = end > length ? length : end;
	        if (end < 0) {
	          end += length;
	        }
	        length = start > end ? 0 : end - start >>> 0;
	        start >>>= 0;

	        var result = Array(length);
	        while (++index < length) {
	          result[index] = array[index + start];
	        }
	        return result;
	      }

	      module.exports = baseSlice;

	      /***/
	    },
	    /* 200 */
	    /***/function (module, exports) {

	      /**
	       * Converts an ASCII `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function asciiToArray(string) {
	        return string.split('');
	      }

	      module.exports = asciiToArray;

	      /***/
	    },
	    /* 201 */
	    /***/function (module, exports) {

	      /** Used to compose unicode character classes. */
	      var rsAstralRange = '\\ud800-\\udfff',
	          rsComboMarksRange = '\\u0300-\\u036f',
	          reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	          rsComboSymbolsRange = '\\u20d0-\\u20ff',
	          rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	          rsVarRange = '\\ufe0e\\ufe0f';

	      /** Used to compose unicode capture groups. */
	      var rsAstral = '[' + rsAstralRange + ']',
	          rsCombo = '[' + rsComboRange + ']',
	          rsFitz = '\\ud83c[\\udffb-\\udfff]',
	          rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	          rsNonAstral = '[^' + rsAstralRange + ']',
	          rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	          rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	          rsZWJ = '\\u200d';

	      /** Used to compose unicode regexes. */
	      var reOptMod = rsModifier + '?',
	          rsOptVar = '[' + rsVarRange + ']?',
	          rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	          rsSeq = rsOptVar + reOptMod + rsOptJoin,
	          rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	      /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	      var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	      /**
	       * Converts a Unicode `string` to an array.
	       *
	       * @private
	       * @param {string} string The string to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function unicodeToArray(string) {
	        return string.match(reUnicode) || [];
	      }

	      module.exports = unicodeToArray;

	      /***/
	    },
	    /* 202 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseRest = __webpack_require__(80),
	          pullAll = __webpack_require__(203);

	      /**
	       * Removes all given values from `array` using
	       * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	       * for equality comparisons.
	       *
	       * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
	       * to remove elements from an array by predicate.
	       *
	       * @static
	       * @memberOf _
	       * @since 2.0.0
	       * @category Array
	       * @param {Array} array The array to modify.
	       * @param {...*} [values] The values to remove.
	       * @returns {Array} Returns `array`.
	       * @example
	       *
	       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	       *
	       * _.pull(array, 'a', 'c');
	       * console.log(array);
	       * // => ['b', 'b']
	       */
	      var pull = baseRest(pullAll);

	      module.exports = pull;

	      /***/
	    },
	    /* 203 */
	    /***/function (module, exports, __webpack_require__) {

	      var basePullAll = __webpack_require__(204);

	      /**
	       * This method is like `_.pull` except that it accepts an array of values to remove.
	       *
	       * **Note:** Unlike `_.difference`, this method mutates `array`.
	       *
	       * @static
	       * @memberOf _
	       * @since 4.0.0
	       * @category Array
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to remove.
	       * @returns {Array} Returns `array`.
	       * @example
	       *
	       * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
	       *
	       * _.pullAll(array, ['a', 'c']);
	       * console.log(array);
	       * // => ['b', 'b']
	       */
	      function pullAll(array, values) {
	        return array && array.length && values && values.length ? basePullAll(array, values) : array;
	      }

	      module.exports = pullAll;

	      /***/
	    },
	    /* 204 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayMap = __webpack_require__(35),
	          baseIndexOf = __webpack_require__(205),
	          baseIndexOfWith = __webpack_require__(209),
	          baseUnary = __webpack_require__(62),
	          copyArray = __webpack_require__(29);

	      /** Used for built-in method references. */
	      var arrayProto = Array.prototype;

	      /** Built-in value references. */
	      var splice = arrayProto.splice;

	      /**
	       * The base implementation of `_.pullAllBy` without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} array The array to modify.
	       * @param {Array} values The values to remove.
	       * @param {Function} [iteratee] The iteratee invoked per element.
	       * @param {Function} [comparator] The comparator invoked per element.
	       * @returns {Array} Returns `array`.
	       */
	      function basePullAll(array, values, iteratee, comparator) {
	        var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
	            index = -1,
	            length = values.length,
	            seen = array;

	        if (array === values) {
	          values = copyArray(values);
	        }
	        if (iteratee) {
	          seen = arrayMap(array, baseUnary(iteratee));
	        }
	        while (++index < length) {
	          var fromIndex = 0,
	              value = values[index],
	              computed = iteratee ? iteratee(value) : value;

	          while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
	            if (seen !== array) {
	              splice.call(seen, fromIndex, 1);
	            }
	            splice.call(array, fromIndex, 1);
	          }
	        }
	        return array;
	      }

	      module.exports = basePullAll;

	      /***/
	    },
	    /* 205 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseFindIndex = __webpack_require__(206),
	          baseIsNaN = __webpack_require__(207),
	          strictIndexOf = __webpack_require__(208);

	      /**
	       * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseIndexOf(array, value, fromIndex) {
	        return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	      }

	      module.exports = baseIndexOf;

	      /***/
	    },
	    /* 206 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.findIndex` and `_.findLastIndex` without
	       * support for iteratee shorthands.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {Function} predicate The function invoked per iteration.
	       * @param {number} fromIndex The index to search from.
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseFindIndex(array, predicate, fromIndex, fromRight) {
	        var length = array.length,
	            index = fromIndex + (fromRight ? 1 : -1);

	        while (fromRight ? index-- : ++index < length) {
	          if (predicate(array[index], index, array)) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = baseFindIndex;

	      /***/
	    },
	    /* 207 */
	    /***/function (module, exports) {

	      /**
	       * The base implementation of `_.isNaN` without support for number objects.
	       *
	       * @private
	       * @param {*} value The value to check.
	       * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	       */
	      function baseIsNaN(value) {
	        return value !== value;
	      }

	      module.exports = baseIsNaN;

	      /***/
	    },
	    /* 208 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.indexOf` which performs strict equality
	       * comparisons of values, i.e. `===`.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function strictIndexOf(array, value, fromIndex) {
	        var index = fromIndex - 1,
	            length = array.length;

	        while (++index < length) {
	          if (array[index] === value) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = strictIndexOf;

	      /***/
	    },
	    /* 209 */
	    /***/function (module, exports) {

	      /**
	       * This function is like `baseIndexOf` except that it accepts a comparator.
	       *
	       * @private
	       * @param {Array} array The array to inspect.
	       * @param {*} value The value to search for.
	       * @param {number} fromIndex The index to search from.
	       * @param {Function} comparator The comparator invoked per element.
	       * @returns {number} Returns the index of the matched value, else `-1`.
	       */
	      function baseIndexOfWith(array, value, fromIndex, comparator) {
	        var index = fromIndex - 1,
	            length = array.length;

	        while (++index < length) {
	          if (comparator(array[index], value)) {
	            return index;
	          }
	        }
	        return -1;
	      }

	      module.exports = baseIndexOfWith;

	      /***/
	    },
	    /* 210 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayEach = __webpack_require__(65),
	          baseEach = __webpack_require__(211),
	          castFunction = __webpack_require__(214),
	          isArray = __webpack_require__(6);

	      /**
	       * Iterates over elements of `collection` and invokes `iteratee` for each element.
	       * The iteratee is invoked with three arguments: (value, index|key, collection).
	       * Iteratee functions may exit iteration early by explicitly returning `false`.
	       *
	       * **Note:** As with other "Collections" methods, objects with a "length"
	       * property are iterated like arrays. To avoid this behavior use `_.forIn`
	       * or `_.forOwn` for object iteration.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @alias each
	       * @category Collection
	       * @param {Array|Object} collection The collection to iterate over.
	       * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	       * @returns {Array|Object} Returns `collection`.
	       * @see _.forEachRight
	       * @example
	       *
	       * _.forEach([1, 2], function(value) {
	       *   console.log(value);
	       * });
	       * // => Logs `1` then `2`.
	       *
	       * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
	       *   console.log(key);
	       * });
	       * // => Logs 'a' then 'b' (iteration order is not guaranteed).
	       */
	      function forEach(collection, iteratee) {
	        var func = isArray(collection) ? arrayEach : baseEach;
	        return func(collection, castFunction(iteratee));
	      }

	      module.exports = forEach;

	      /***/
	    },
	    /* 211 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseForOwn = __webpack_require__(212),
	          createBaseEach = __webpack_require__(213);

	      /**
	       * The base implementation of `_.forEach` without support for iteratee shorthands.
	       *
	       * @private
	       * @param {Array|Object} collection The collection to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Array|Object} Returns `collection`.
	       */
	      var baseEach = createBaseEach(baseForOwn);

	      module.exports = baseEach;

	      /***/
	    },
	    /* 212 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseFor = __webpack_require__(82),
	          keys = __webpack_require__(13);

	      /**
	       * The base implementation of `_.forOwn` without support for iteratee shorthands.
	       *
	       * @private
	       * @param {Object} object The object to iterate over.
	       * @param {Function} iteratee The function invoked per iteration.
	       * @returns {Object} Returns `object`.
	       */
	      function baseForOwn(object, iteratee) {
	        return object && baseFor(object, iteratee, keys);
	      }

	      module.exports = baseForOwn;

	      /***/
	    },
	    /* 213 */
	    /***/function (module, exports, __webpack_require__) {

	      var isArrayLike = __webpack_require__(9);

	      /**
	       * Creates a `baseEach` or `baseEachRight` function.
	       *
	       * @private
	       * @param {Function} eachFunc The function to iterate over a collection.
	       * @param {boolean} [fromRight] Specify iterating from right to left.
	       * @returns {Function} Returns the new base function.
	       */
	      function createBaseEach(eachFunc, fromRight) {
	        return function (collection, iteratee) {
	          if (collection == null) {
	            return collection;
	          }
	          if (!isArrayLike(collection)) {
	            return eachFunc(collection, iteratee);
	          }
	          var length = collection.length,
	              index = fromRight ? length : -1,
	              iterable = Object(collection);

	          while (fromRight ? index-- : ++index < length) {
	            if (iteratee(iterable[index], index, iterable) === false) {
	              break;
	            }
	          }
	          return collection;
	        };
	      }

	      module.exports = createBaseEach;

	      /***/
	    },
	    /* 214 */
	    /***/function (module, exports, __webpack_require__) {

	      var identity = __webpack_require__(44);

	      /**
	       * Casts `value` to `identity` if it's not a function.
	       *
	       * @private
	       * @param {*} value The value to inspect.
	       * @returns {Function} Returns cast function.
	       */
	      function castFunction(value) {
	        return typeof value == 'function' ? value : identity;
	      }

	      module.exports = castFunction;

	      /***/
	    },
	    /* 215 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsEqual = __webpack_require__(216);

	      /**
	       * Performs a deep comparison between two values to determine if they are
	       * equivalent.
	       *
	       * **Note:** This method supports comparing arrays, array buffers, booleans,
	       * date objects, error objects, maps, numbers, `Object` objects, regexes,
	       * sets, strings, symbols, and typed arrays. `Object` objects are compared
	       * by their own, not inherited, enumerable properties. Functions and DOM
	       * nodes are compared by strict equality, i.e. `===`.
	       *
	       * @static
	       * @memberOf _
	       * @since 0.1.0
	       * @category Lang
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       * @example
	       *
	       * var object = { 'a': 1 };
	       * var other = { 'a': 1 };
	       *
	       * _.isEqual(object, other);
	       * // => true
	       *
	       * object === other;
	       * // => false
	       */
	      function isEqual(value, other) {
	        return baseIsEqual(value, other);
	      }

	      module.exports = isEqual;

	      /***/
	    },
	    /* 216 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseIsEqualDeep = __webpack_require__(217),
	          isObjectLike = __webpack_require__(5);

	      /**
	       * The base implementation of `_.isEqual` which supports partial comparisons
	       * and tracks traversed objects.
	       *
	       * @private
	       * @param {*} value The value to compare.
	       * @param {*} other The other value to compare.
	       * @param {boolean} bitmask The bitmask flags.
	       *  1 - Unordered comparison
	       *  2 - Partial comparison
	       * @param {Function} [customizer] The function to customize comparisons.
	       * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	       * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	       */
	      function baseIsEqual(value, other, bitmask, customizer, stack) {
	        if (value === other) {
	          return true;
	        }
	        if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	          return value !== value && other !== other;
	        }
	        return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	      }

	      module.exports = baseIsEqual;

	      /***/
	    },
	    /* 217 */
	    /***/function (module, exports, __webpack_require__) {

	      var Stack = __webpack_require__(36),
	          equalArrays = __webpack_require__(85),
	          equalByTag = __webpack_require__(223),
	          equalObjects = __webpack_require__(224),
	          getTag = __webpack_require__(22),
	          isArray = __webpack_require__(6),
	          isBuffer = __webpack_require__(18),
	          isTypedArray = __webpack_require__(23);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1;

	      /** `Object#toString` result references. */
	      var argsTag = '[object Arguments]',
	          arrayTag = '[object Array]',
	          objectTag = '[object Object]';

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * A specialized version of `baseIsEqual` for arrays and objects which performs
	       * deep comparisons and tracks traversed objects enabling objects with circular
	       * references to be compared.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	        var objIsArr = isArray(object),
	            othIsArr = isArray(other),
	            objTag = objIsArr ? arrayTag : getTag(object),
	            othTag = othIsArr ? arrayTag : getTag(other);

	        objTag = objTag == argsTag ? objectTag : objTag;
	        othTag = othTag == argsTag ? objectTag : othTag;

	        var objIsObj = objTag == objectTag,
	            othIsObj = othTag == objectTag,
	            isSameTag = objTag == othTag;

	        if (isSameTag && isBuffer(object)) {
	          if (!isBuffer(other)) {
	            return false;
	          }
	          objIsArr = true;
	          objIsObj = false;
	        }
	        if (isSameTag && !objIsObj) {
	          stack || (stack = new Stack());
	          return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	        }
	        if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	          var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	              othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	          if (objIsWrapped || othIsWrapped) {
	            var objUnwrapped = objIsWrapped ? object.value() : object,
	                othUnwrapped = othIsWrapped ? other.value() : other;

	            stack || (stack = new Stack());
	            return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	          }
	        }
	        if (!isSameTag) {
	          return false;
	        }
	        stack || (stack = new Stack());
	        return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	      }

	      module.exports = baseIsEqualDeep;

	      /***/
	    },
	    /* 218 */
	    /***/function (module, exports, __webpack_require__) {

	      var MapCache = __webpack_require__(64),
	          setCacheAdd = __webpack_require__(219),
	          setCacheHas = __webpack_require__(220);

	      /**
	       *
	       * Creates an array cache object to store unique values.
	       *
	       * @private
	       * @constructor
	       * @param {Array} [values] The values to cache.
	       */
	      function SetCache(values) {
	        var index = -1,
	            length = values == null ? 0 : values.length;

	        this.__data__ = new MapCache();
	        while (++index < length) {
	          this.add(values[index]);
	        }
	      }

	      // Add methods to `SetCache`.
	      SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	      SetCache.prototype.has = setCacheHas;

	      module.exports = SetCache;

	      /***/
	    },
	    /* 219 */
	    /***/function (module, exports) {

	      /** Used to stand-in for `undefined` hash values. */
	      var HASH_UNDEFINED = '__lodash_hash_undefined__';

	      /**
	       * Adds `value` to the array cache.
	       *
	       * @private
	       * @name add
	       * @memberOf SetCache
	       * @alias push
	       * @param {*} value The value to cache.
	       * @returns {Object} Returns the cache instance.
	       */
	      function setCacheAdd(value) {
	        this.__data__.set(value, HASH_UNDEFINED);
	        return this;
	      }

	      module.exports = setCacheAdd;

	      /***/
	    },
	    /* 220 */
	    /***/function (module, exports) {

	      /**
	       * Checks if `value` is in the array cache.
	       *
	       * @private
	       * @name has
	       * @memberOf SetCache
	       * @param {*} value The value to search for.
	       * @returns {number} Returns `true` if `value` is found, else `false`.
	       */
	      function setCacheHas(value) {
	        return this.__data__.has(value);
	      }

	      module.exports = setCacheHas;

	      /***/
	    },
	    /* 221 */
	    /***/function (module, exports) {

	      /**
	       * A specialized version of `_.some` for arrays without support for iteratee
	       * shorthands.
	       *
	       * @private
	       * @param {Array} [array] The array to iterate over.
	       * @param {Function} predicate The function invoked per iteration.
	       * @returns {boolean} Returns `true` if any element passes the predicate check,
	       *  else `false`.
	       */
	      function arraySome(array, predicate) {
	        var index = -1,
	            length = array == null ? 0 : array.length;

	        while (++index < length) {
	          if (predicate(array[index], index, array)) {
	            return true;
	          }
	        }
	        return false;
	      }

	      module.exports = arraySome;

	      /***/
	    },
	    /* 222 */
	    /***/function (module, exports) {

	      /**
	       * Checks if a `cache` value for `key` exists.
	       *
	       * @private
	       * @param {Object} cache The cache to query.
	       * @param {string} key The key of the entry to check.
	       * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	       */
	      function cacheHas(cache, key) {
	        return cache.has(key);
	      }

	      module.exports = cacheHas;

	      /***/
	    },
	    /* 223 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          Uint8Array = __webpack_require__(75),
	          eq = __webpack_require__(19),
	          equalArrays = __webpack_require__(85),
	          mapToArray = __webpack_require__(42),
	          setToArray = __webpack_require__(43);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1,
	          COMPARE_UNORDERED_FLAG = 2;

	      /** `Object#toString` result references. */
	      var boolTag = '[object Boolean]',
	          dateTag = '[object Date]',
	          errorTag = '[object Error]',
	          mapTag = '[object Map]',
	          numberTag = '[object Number]',
	          regexpTag = '[object RegExp]',
	          setTag = '[object Set]',
	          stringTag = '[object String]',
	          symbolTag = '[object Symbol]';

	      var arrayBufferTag = '[object ArrayBuffer]',
	          dataViewTag = '[object DataView]';

	      /** Used to convert symbols to primitives and strings. */
	      var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	          symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	      /**
	       * A specialized version of `baseIsEqualDeep` for comparing objects of
	       * the same `toStringTag`.
	       *
	       * **Note:** This function only supports comparing values with tags of
	       * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {string} tag The `toStringTag` of the objects to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	        switch (tag) {
	          case dataViewTag:
	            if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	              return false;
	            }
	            object = object.buffer;
	            other = other.buffer;

	          case arrayBufferTag:
	            if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	              return false;
	            }
	            return true;

	          case boolTag:
	          case dateTag:
	          case numberTag:
	            // Coerce booleans to `1` or `0` and dates to milliseconds.
	            // Invalid dates are coerced to `NaN`.
	            return eq(+object, +other);

	          case errorTag:
	            return object.name == other.name && object.message == other.message;

	          case regexpTag:
	          case stringTag:
	            // Coerce regexes to strings and treat strings, primitives and objects,
	            // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	            // for more details.
	            return object == other + '';

	          case mapTag:
	            var convert = mapToArray;

	          case setTag:
	            var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	            convert || (convert = setToArray);

	            if (object.size != other.size && !isPartial) {
	              return false;
	            }
	            // Assume cyclic values are equal.
	            var stacked = stack.get(object);
	            if (stacked) {
	              return stacked == other;
	            }
	            bitmask |= COMPARE_UNORDERED_FLAG;

	            // Recursively compare objects (susceptible to call stack limits).
	            stack.set(object, other);
	            var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	            stack['delete'](object);
	            return result;

	          case symbolTag:
	            if (symbolValueOf) {
	              return symbolValueOf.call(object) == symbolValueOf.call(other);
	            }
	        }
	        return false;
	      }

	      module.exports = equalByTag;

	      /***/
	    },
	    /* 224 */
	    /***/function (module, exports, __webpack_require__) {

	      var getAllKeys = __webpack_require__(73);

	      /** Used to compose bitmasks for value comparisons. */
	      var COMPARE_PARTIAL_FLAG = 1;

	      /** Used for built-in method references. */
	      var objectProto = Object.prototype;

	      /** Used to check objects for own properties. */
	      var hasOwnProperty = objectProto.hasOwnProperty;

	      /**
	       * A specialized version of `baseIsEqualDeep` for objects with support for
	       * partial deep comparisons.
	       *
	       * @private
	       * @param {Object} object The object to compare.
	       * @param {Object} other The other object to compare.
	       * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	       * @param {Function} customizer The function to customize comparisons.
	       * @param {Function} equalFunc The function to determine equivalents of values.
	       * @param {Object} stack Tracks traversed `object` and `other` objects.
	       * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	       */
	      function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	        var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	            objProps = getAllKeys(object),
	            objLength = objProps.length,
	            othProps = getAllKeys(other),
	            othLength = othProps.length;

	        if (objLength != othLength && !isPartial) {
	          return false;
	        }
	        var index = objLength;
	        while (index--) {
	          var key = objProps[index];
	          if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	            return false;
	          }
	        }
	        // Assume cyclic values are equal.
	        var stacked = stack.get(object);
	        if (stacked && stack.get(other)) {
	          return stacked == other;
	        }
	        var result = true;
	        stack.set(object, other);
	        stack.set(other, object);

	        var skipCtor = isPartial;
	        while (++index < objLength) {
	          key = objProps[index];
	          var objValue = object[key],
	              othValue = other[key];

	          if (customizer) {
	            var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	          }
	          // Recursively compare objects (susceptible to call stack limits).
	          if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	            result = false;
	            break;
	          }
	          skipCtor || (skipCtor = key == 'constructor');
	        }
	        if (result && !skipCtor) {
	          var objCtor = object.constructor,
	              othCtor = other.constructor;

	          // Non `Object` object instances with different constructors are not equal.
	          if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	            result = false;
	          }
	        }
	        stack['delete'](object);
	        stack['delete'](other);
	        return result;
	      }

	      module.exports = equalObjects;

	      /***/
	    },
	    /* 225 */
	    /***/function (module, exports, __webpack_require__) {

	      var _Symbol = __webpack_require__(11),
	          copyArray = __webpack_require__(29),
	          getTag = __webpack_require__(22),
	          isArrayLike = __webpack_require__(9),
	          isString = __webpack_require__(57),
	          iteratorToArray = __webpack_require__(226),
	          mapToArray = __webpack_require__(42),
	          setToArray = __webpack_require__(43),
	          stringToArray = __webpack_require__(84),
	          values = __webpack_require__(227);

	      /** `Object#toString` result references. */
	      var mapTag = '[object Map]',
	          setTag = '[object Set]';

	      /** Built-in value references. */
	      var symIterator = _Symbol ? _Symbol.iterator : undefined;

	      /**
	       * Converts `value` to an array.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Lang
	       * @param {*} value The value to convert.
	       * @returns {Array} Returns the converted array.
	       * @example
	       *
	       * _.toArray({ 'a': 1, 'b': 2 });
	       * // => [1, 2]
	       *
	       * _.toArray('abc');
	       * // => ['a', 'b', 'c']
	       *
	       * _.toArray(1);
	       * // => []
	       *
	       * _.toArray(null);
	       * // => []
	       */
	      function toArray(value) {
	        if (!value) {
	          return [];
	        }
	        if (isArrayLike(value)) {
	          return isString(value) ? stringToArray(value) : copyArray(value);
	        }
	        if (symIterator && value[symIterator]) {
	          return iteratorToArray(value[symIterator]());
	        }
	        var tag = getTag(value),
	            func = tag == mapTag ? mapToArray : tag == setTag ? setToArray : values;

	        return func(value);
	      }

	      module.exports = toArray;

	      /***/
	    },
	    /* 226 */
	    /***/function (module, exports) {

	      /**
	       * Converts `iterator` to an array.
	       *
	       * @private
	       * @param {Object} iterator The iterator to convert.
	       * @returns {Array} Returns the converted array.
	       */
	      function iteratorToArray(iterator) {
	        var data,
	            result = [];

	        while (!(data = iterator.next()).done) {
	          result.push(data.value);
	        }
	        return result;
	      }

	      module.exports = iteratorToArray;

	      /***/
	    },
	    /* 227 */
	    /***/function (module, exports, __webpack_require__) {

	      var baseValues = __webpack_require__(228),
	          keys = __webpack_require__(13);

	      /**
	       * Creates an array of the own enumerable string keyed property values of `object`.
	       *
	       * **Note:** Non-object values are coerced to objects.
	       *
	       * @static
	       * @since 0.1.0
	       * @memberOf _
	       * @category Object
	       * @param {Object} object The object to query.
	       * @returns {Array} Returns the array of property values.
	       * @example
	       *
	       * function Foo() {
	       *   this.a = 1;
	       *   this.b = 2;
	       * }
	       *
	       * Foo.prototype.c = 3;
	       *
	       * _.values(new Foo);
	       * // => [1, 2] (iteration order is not guaranteed)
	       *
	       * _.values('hi');
	       * // => ['h', 'i']
	       */
	      function values(object) {
	        return object == null ? [] : baseValues(object, keys(object));
	      }

	      module.exports = values;

	      /***/
	    },
	    /* 228 */
	    /***/function (module, exports, __webpack_require__) {

	      var arrayMap = __webpack_require__(35);

	      /**
	       * The base implementation of `_.values` and `_.valuesIn` which creates an
	       * array of `object` property values corresponding to the property names
	       * of `props`.
	       *
	       * @private
	       * @param {Object} object The object to query.
	       * @param {Array} props The property names to get values for.
	       * @returns {Object} Returns the array of property values.
	       */
	      function baseValues(object, props) {
	        return arrayMap(props, function (key) {
	          return object[key];
	        });
	      }

	      module.exports = baseValues;

	      /***/
	    },
	    /* 229 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);

	      var ALIAS_ATTRS = ['strokeStyle', 'fillStyle', 'globalAlpha'];
	      var CLIP_SHAPES = ['circle', 'ellipse', 'fan', 'polygon', 'rect', 'path'];
	      var CAPITALIZED_ATTRS_MAP = {
	        r: 'R',
	        opacity: 'Opacity',
	        lineWidth: 'LineWidth',
	        clip: 'Clip',
	        stroke: 'Stroke',
	        fill: 'Fill',
	        strokeOpacity: 'Stroke',
	        fillOpacity: 'Fill',
	        x: 'X',
	        y: 'Y',
	        rx: 'Rx',
	        ry: 'Ry',
	        re: 'Re',
	        rs: 'Rs',
	        width: 'Width',
	        height: 'Height',
	        img: 'Img',
	        x1: 'X1',
	        x2: 'X2',
	        y1: 'Y1',
	        y2: 'Y2',
	        points: 'Points',
	        p1: 'P1',
	        p2: 'P2',
	        p3: 'P3',
	        p4: 'P4',
	        text: 'Text',
	        radius: 'Radius',
	        textAlign: 'TextAlign',
	        textBaseline: 'TextBaseline',
	        font: 'Font',
	        fontSize: 'FontSize',
	        fontStyle: 'FontStyle',
	        fontVariant: 'FontVariant',
	        fontWeight: 'FontWeight',
	        fontFamily: 'FontFamily',
	        clockwise: 'Clockwise',
	        startAngle: 'StartAngle',
	        endAngle: 'EndAngle',
	        path: 'Path'
	      };
	      var ALIAS_ATTRS_MAP = {
	        stroke: 'strokeStyle',
	        fill: 'fillStyle',
	        opacity: 'globalAlpha'
	      };

	      module.exports = {
	        canFill: false,
	        canStroke: false,
	        initAttrs: function initAttrs(attrs) {
	          this.__attrs = {
	            opacity: 1,
	            fillOpacity: 1,
	            strokeOpacity: 1
	          };
	          this.attr(Util.assign(this.getDefaultAttrs(), attrs));
	          return this;
	        },
	        getDefaultAttrs: function getDefaultAttrs() {
	          return {};
	        },

	        /**
	         * 设置或者设置属性，有以下 4 种情形：
	         *   - name 不存在, 则返回属性集合
	         *   - name 为字符串，value 为空，获取属性值
	         *   - name 为字符串，value 不为空，设置属性值，返回 this
	         *   - name 为键值对，value 为空，设置属性值
	         *
	         * @param  {String | Object} name  属性名
	         * @param  {*} value 属性值
	         * @return {*} 属性值
	         */
	        attr: function attr(name, value) {
	          var self = this;
	          if (arguments.length === 0) {
	            return self.__attrs;
	          }

	          if (Util.isObject(name)) {
	            for (var k in name) {
	              if (ALIAS_ATTRS.indexOf(k) === -1) {
	                var v = name[k];
	                self._setAttr(k, v);
	              }
	            }
	            if (self.__afterSetAttrAll) {
	              self.__afterSetAttrAll(name);
	            }
	            // self.setSilent('box', null);
	            self.clearBBox();
	            return self;
	          }
	          if (arguments.length === 2) {
	            if (self._setAttr(name, value) !== false) {
	              var m = '__afterSetAttr' + CAPITALIZED_ATTRS_MAP[name];
	              if (self[m]) {
	                self[m](value);
	              }
	            }
	            // self.setSilent('box', null);
	            self.clearBBox();
	            return self;
	          }
	          return self._getAttr(name);
	        },
	        clearBBox: function clearBBox() {
	          this.setSilent('box', null);
	        },
	        __afterSetAttrAll: function __afterSetAttrAll() {},

	        // 属性获取触发函数
	        _getAttr: function _getAttr(name) {
	          return this.__attrs[name];
	        },

	        // 属性设置触发函数
	        _setAttr: function _setAttr(name, value) {
	          var self = this;
	          if (name === 'clip') {
	            self.__setAttrClip(value);
	            self.__attrs.clip = value;
	          } else if (name === 'transform') {
	            self.__setAttrTrans(value);
	          } else {
	            self.__attrs[name] = value;
	            var alias = ALIAS_ATTRS_MAP[name];
	            if (alias) {
	              self.__attrs[alias] = value;
	            }
	          }
	          return self;
	        },
	        hasFill: function hasFill() {
	          return this.canFill && this.__attrs.fillStyle;
	        },
	        hasStroke: function hasStroke() {
	          return this.canStroke && this.__attrs.strokeStyle;
	        },

	        // 设置透明度
	        __setAttrOpacity: function __setAttrOpacity(v) {
	          this.__attrs.globalAlpha = v;
	          return v;
	        },
	        __setAttrClip: function __setAttrClip(clip) {
	          var self = this;
	          if (clip && CLIP_SHAPES.indexOf(clip.type) > -1) {
	            if (clip.get('canvas') === null) {
	              clip = Util.clone(clip);
	            }
	            clip.set('parent', self.get('parent'));
	            clip.set('context', self.get('context'));
	            clip.inside = function (x, y) {
	              var v = [x, y, 1];
	              clip.invert(v, self.get('canvas')); // 已经在外面转换
	              return clip.__isPointInFill(v[0], v[1]);
	            };
	            return clip;
	          }
	          return null;
	        },
	        __setAttrTrans: function __setAttrTrans(value) {
	          return this.transform(value);
	        }
	      };

	      /***/
	    },
	    /* 230 */
	    /***/function (module, exports, __webpack_require__) {

	      var Util = __webpack_require__(0);
	      var mat3 = __webpack_require__(3).mat3;
	      var vec3 = __webpack_require__(3).vec3;

	      // 是否未改变
	      function isUnchanged(m) {
	        return m[0] === 1 && m[1] === 0 && m[3] === 0 && m[4] === 1 && m[6] === 0 && m[7] === 0;
	      }

	      // 是否仅仅是scale
	      function isScale(m) {
	        return m[1] === 0 && m[3] === 0 && m[6] === 0 && m[7] === 0;
	      }

	      function multiple(m1, m2) {
	        if (!isUnchanged(m2)) {
	          if (isScale(m2)) {
	            m1[0] *= m2[0];
	            m1[4] *= m2[4];
	          } else {
	            mat3.multiply(m1, m1, m2);
	          }
	        }
	      }

	      module.exports = {
	        initTransform: function initTransform() {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	        },
	        translate: function translate(tx, ty) {
	          var matrix = this.attr('matrix');
	          mat3.translate(matrix, matrix, [tx, ty]);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },
	        rotate: function rotate(radian) {
	          var matrix = this.attr('matrix');
	          mat3.rotate(matrix, matrix, radian);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },
	        scale: function scale(s1, s2) {
	          var matrix = this.attr('matrix');
	          mat3.scale(matrix, matrix, [s1, s2]);
	          this.clearTotalMatrix();
	          this.attr('matrix', matrix);
	          return this;
	        },

	        /**
	         * 绕起始点旋转
	         * @param  {Number} rotate 0～360
	         */
	        rotateAtStart: function rotateAtStart(rotate) {
	          var x = this.attr('x');
	          var y = this.attr('y');
	          if (Math.abs(rotate) > Math.PI * 2) {
	            rotate = rotate / 180 * Math.PI;
	          }
	          this.transform([['t', -x, -y], ['r', rotate], ['t', x, y]]);
	        },

	        /**
	         * 移动的到位置
	         * @param  {Number} x 移动到x
	         * @param  {Number} y 移动到y
	         */
	        move: function move(x, y) {
	          var cx = this.get('x') || 0; // 当前的x
	          var cy = this.get('y') || 0; // 当前的y
	          this.translate(x - cx, y - cy);
	          this.set('x', x);
	          this.set('y', y);
	        },
	        transform: function transform(ts) {
	          var self = this;
	          var matrix = self.attr('matrix');

	          Util.each(ts, function (t) {
	            switch (t[0]) {
	              case 't':
	                self.translate(t[1], t[2]);
	                break;
	              case 's':
	                self.scale(t[1], t[2]);
	                break;
	              case 'r':
	                self.rotate(t[1]);
	                break;
	              case 'm':
	                self.attr('matrix', mat3.multiply([], matrix, t[1]));
	                self.clearTotalMatrix();
	                break;
	              default:
	                break;
	            }
	          });
	          return self;
	        },
	        setTransform: function setTransform(ts) {
	          this.attr('matrix', [1, 0, 0, 0, 1, 0, 0, 0, 1]);
	          return this.transform(ts);
	        },
	        getMatrix: function getMatrix() {
	          return this.attr('matrix');
	        },
	        setMatrix: function setMatrix(m) {
	          this.attr('matrix', m);
	          this.clearTotalMatrix();
	          return this;
	        },
	        apply: function apply(v, root) {
	          var m = void 0;
	          if (root) {
	            m = this._getMatrixByRoot(root);
	          } else {
	            m = this.attr('matrix');
	          }
	          vec3.transformMat3(v, v, m);
	          return this;
	        },

	        // 获取到达指定根节点的矩阵
	        _getMatrixByRoot: function _getMatrixByRoot(root) {
	          var self = this;
	          root = root || self;
	          var parent = self;
	          var parents = [];

	          while (parent !== root) {
	            parents.unshift(parent);
	            parent = parent.get('parent');
	          }
	          parents.unshift(parent);

	          var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	          Util.each(parents, function (child) {
	            mat3.multiply(m, child.attr('matrix'), m);
	          });
	          return m;
	        },

	        /**
	         * 应用到当前元素上的总的矩阵
	         * @return {Matrix} 矩阵
	         */
	        getTotalMatrix: function getTotalMatrix() {
	          var m = this.__cfg.totalMatrix;
	          if (!m) {
	            m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	            var parent = this.__cfg.parent;
	            if (parent) {
	              var pm = parent.getTotalMatrix();
	              multiple(m, pm);
	            }

	            multiple(m, this.attr('matrix'));
	            this.__cfg.totalMatrix = m;
	          }
	          return m;
	        },

	        // 清除当前的矩阵
	        clearTotalMatrix: function clearTotalMatrix() {
	          // this.__cfg.totalMatrix = null;
	        },
	        invert: function invert(v) {
	          var m = this.getTotalMatrix();
	          // 单精屏幕下大多数矩阵没变化
	          if (isScale(m)) {
	            v[0] /= m[0];
	            v[1] /= m[4];
	          } else {
	            var inm = mat3.invert([], m);
	            if (inm) {
	              vec3.transformMat3(v, v, inm);
	            }
	          }
	          return this;
	        },
	        resetTransform: function resetTransform(context) {
	          var mo = this.attr('matrix');
	          // 不改变时
	          if (!isUnchanged(mo)) {
	            context.transform(mo[0], mo[1], mo[3], mo[4], mo[6], mo[7]);
	          }
	        }
	      };

	      /***/
	    },
	    /* 231 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 3x3 Matrix
	       * @name mat3
	       */
	      var mat3 = {};

	      /**
	       * Creates a new identity mat3
	       *
	       * @returns {mat3} a new 3x3 matrix
	       */
	      mat3.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Copies the upper-left 3x3 values into the given mat3.
	       *
	       * @param {mat3} out the receiving 3x3 matrix
	       * @param {mat4} a   the source 4x4 matrix
	       * @returns {mat3} out
	       */
	      mat3.fromMat4 = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[4];
	        out[4] = a[5];
	        out[5] = a[6];
	        out[6] = a[8];
	        out[7] = a[9];
	        out[8] = a[10];
	        return out;
	      };

	      /**
	       * Creates a new mat3 initialized with values from an existing matrix
	       *
	       * @param {mat3} a matrix to clone
	       * @returns {mat3} a new 3x3 matrix
	       */
	      mat3.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4];
	        out[5] = a[5];
	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Copy the values from one mat3 to another
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        out[3] = a[3];
	        out[4] = a[4];
	        out[5] = a[5];
	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Create a new mat3 with the given values
	       *
	       * @param {Number} m00 Component in column 0, row 0 position (index 0)
	       * @param {Number} m01 Component in column 0, row 1 position (index 1)
	       * @param {Number} m02 Component in column 0, row 2 position (index 2)
	       * @param {Number} m10 Component in column 1, row 0 position (index 3)
	       * @param {Number} m11 Component in column 1, row 1 position (index 4)
	       * @param {Number} m12 Component in column 1, row 2 position (index 5)
	       * @param {Number} m20 Component in column 2, row 0 position (index 6)
	       * @param {Number} m21 Component in column 2, row 1 position (index 7)
	       * @param {Number} m22 Component in column 2, row 2 position (index 8)
	       * @returns {mat3} A new mat3
	       */
	      mat3.fromValues = function (m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	        var out = new glMatrix.ARRAY_TYPE(9);
	        out[0] = m00;
	        out[1] = m01;
	        out[2] = m02;
	        out[3] = m10;
	        out[4] = m11;
	        out[5] = m12;
	        out[6] = m20;
	        out[7] = m21;
	        out[8] = m22;
	        return out;
	      };

	      /**
	       * Set the components of a mat3 to the given values
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {Number} m00 Component in column 0, row 0 position (index 0)
	       * @param {Number} m01 Component in column 0, row 1 position (index 1)
	       * @param {Number} m02 Component in column 0, row 2 position (index 2)
	       * @param {Number} m10 Component in column 1, row 0 position (index 3)
	       * @param {Number} m11 Component in column 1, row 1 position (index 4)
	       * @param {Number} m12 Component in column 1, row 2 position (index 5)
	       * @param {Number} m20 Component in column 2, row 0 position (index 6)
	       * @param {Number} m21 Component in column 2, row 1 position (index 7)
	       * @param {Number} m22 Component in column 2, row 2 position (index 8)
	       * @returns {mat3} out
	       */
	      mat3.set = function (out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	        out[0] = m00;
	        out[1] = m01;
	        out[2] = m02;
	        out[3] = m10;
	        out[4] = m11;
	        out[5] = m12;
	        out[6] = m20;
	        out[7] = m21;
	        out[8] = m22;
	        return out;
	      };

	      /**
	       * Set a mat3 to the identity matrix
	       *
	       * @param {mat3} out the receiving matrix
	       * @returns {mat3} out
	       */
	      mat3.identity = function (out) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Transpose the values of a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.transpose = function (out, a) {
	        // If we are transposing ourselves we can skip a few steps but have to cache some values
	        if (out === a) {
	          var a01 = a[1],
	              a02 = a[2],
	              a12 = a[5];
	          out[1] = a[3];
	          out[2] = a[6];
	          out[3] = a01;
	          out[5] = a[7];
	          out[6] = a02;
	          out[7] = a12;
	        } else {
	          out[0] = a[0];
	          out[1] = a[3];
	          out[2] = a[6];
	          out[3] = a[1];
	          out[4] = a[4];
	          out[5] = a[7];
	          out[6] = a[2];
	          out[7] = a[5];
	          out[8] = a[8];
	        }

	        return out;
	      };

	      /**
	       * Inverts a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.invert = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            b01 = a22 * a11 - a12 * a21,
	            b11 = -a22 * a10 + a12 * a20,
	            b21 = a21 * a10 - a11 * a20,


	        // Calculate the determinant
	        det = a00 * b01 + a01 * b11 + a02 * b21;

	        if (!det) {
	          return null;
	        }
	        det = 1.0 / det;

	        out[0] = b01 * det;
	        out[1] = (-a22 * a01 + a02 * a21) * det;
	        out[2] = (a12 * a01 - a02 * a11) * det;
	        out[3] = b11 * det;
	        out[4] = (a22 * a00 - a02 * a20) * det;
	        out[5] = (-a12 * a00 + a02 * a10) * det;
	        out[6] = b21 * det;
	        out[7] = (-a21 * a00 + a01 * a20) * det;
	        out[8] = (a11 * a00 - a01 * a10) * det;
	        return out;
	      };

	      /**
	       * Calculates the adjugate of a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the source matrix
	       * @returns {mat3} out
	       */
	      mat3.adjoint = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8];

	        out[0] = a11 * a22 - a12 * a21;
	        out[1] = a02 * a21 - a01 * a22;
	        out[2] = a01 * a12 - a02 * a11;
	        out[3] = a12 * a20 - a10 * a22;
	        out[4] = a00 * a22 - a02 * a20;
	        out[5] = a02 * a10 - a00 * a12;
	        out[6] = a10 * a21 - a11 * a20;
	        out[7] = a01 * a20 - a00 * a21;
	        out[8] = a00 * a11 - a01 * a10;
	        return out;
	      };

	      /**
	       * Calculates the determinant of a mat3
	       *
	       * @param {mat3} a the source matrix
	       * @returns {Number} determinant of a
	       */
	      mat3.determinant = function (a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8];

	        return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	      };

	      /**
	       * Multiplies two mat3's
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.multiply = function (out, a, b) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            b00 = b[0],
	            b01 = b[1],
	            b02 = b[2],
	            b10 = b[3],
	            b11 = b[4],
	            b12 = b[5],
	            b20 = b[6],
	            b21 = b[7],
	            b22 = b[8];

	        out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	        out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	        out[2] = b00 * a02 + b01 * a12 + b02 * a22;

	        out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	        out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	        out[5] = b10 * a02 + b11 * a12 + b12 * a22;

	        out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	        out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	        out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	        return out;
	      };

	      /**
	       * Alias for {@link mat3.multiply}
	       * @function
	       */
	      mat3.mul = mat3.multiply;

	      /**
	       * Translate a mat3 by the given vector
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to translate
	       * @param {vec2} v vector to translate by
	       * @returns {mat3} out
	       */
	      mat3.translate = function (out, a, v) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            x = v[0],
	            y = v[1];

	        out[0] = a00;
	        out[1] = a01;
	        out[2] = a02;

	        out[3] = a10;
	        out[4] = a11;
	        out[5] = a12;

	        out[6] = x * a00 + y * a10 + a20;
	        out[7] = x * a01 + y * a11 + a21;
	        out[8] = x * a02 + y * a12 + a22;
	        return out;
	      };

	      /**
	       * Rotates a mat3 by the given angle
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to rotate
	       * @param {Number} rad the angle to rotate the matrix by
	       * @returns {mat3} out
	       */
	      mat3.rotate = function (out, a, rad) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a10 = a[3],
	            a11 = a[4],
	            a12 = a[5],
	            a20 = a[6],
	            a21 = a[7],
	            a22 = a[8],
	            s = Math.sin(rad),
	            c = Math.cos(rad);

	        out[0] = c * a00 + s * a10;
	        out[1] = c * a01 + s * a11;
	        out[2] = c * a02 + s * a12;

	        out[3] = c * a10 - s * a00;
	        out[4] = c * a11 - s * a01;
	        out[5] = c * a12 - s * a02;

	        out[6] = a20;
	        out[7] = a21;
	        out[8] = a22;
	        return out;
	      };

	      /**
	       * Scales the mat3 by the dimensions in the given vec2
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to rotate
	       * @param {vec2} v the vec2 to scale the matrix by
	       * @returns {mat3} out
	       **/
	      mat3.scale = function (out, a, v) {
	        var x = v[0],
	            y = v[1];

	        out[0] = x * a[0];
	        out[1] = x * a[1];
	        out[2] = x * a[2];

	        out[3] = y * a[3];
	        out[4] = y * a[4];
	        out[5] = y * a[5];

	        out[6] = a[6];
	        out[7] = a[7];
	        out[8] = a[8];
	        return out;
	      };

	      /**
	       * Creates a matrix from a vector translation
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.translate(dest, dest, vec);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {vec2} v Translation vector
	       * @returns {mat3} out
	       */
	      mat3.fromTranslation = function (out, v) {
	        out[0] = 1;
	        out[1] = 0;
	        out[2] = 0;
	        out[3] = 0;
	        out[4] = 1;
	        out[5] = 0;
	        out[6] = v[0];
	        out[7] = v[1];
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Creates a matrix from a given angle
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.rotate(dest, dest, rad);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {Number} rad the angle to rotate the matrix by
	       * @returns {mat3} out
	       */
	      mat3.fromRotation = function (out, rad) {
	        var s = Math.sin(rad),
	            c = Math.cos(rad);

	        out[0] = c;
	        out[1] = s;
	        out[2] = 0;

	        out[3] = -s;
	        out[4] = c;
	        out[5] = 0;

	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Creates a matrix from a vector scaling
	       * This is equivalent to (but much faster than):
	       *
	       *     mat3.identity(dest);
	       *     mat3.scale(dest, dest, vec);
	       *
	       * @param {mat3} out mat3 receiving operation result
	       * @param {vec2} v Scaling vector
	       * @returns {mat3} out
	       */
	      mat3.fromScaling = function (out, v) {
	        out[0] = v[0];
	        out[1] = 0;
	        out[2] = 0;

	        out[3] = 0;
	        out[4] = v[1];
	        out[5] = 0;

	        out[6] = 0;
	        out[7] = 0;
	        out[8] = 1;
	        return out;
	      };

	      /**
	       * Copies the values from a mat2d into a mat3
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat2d} a the matrix to copy
	       * @returns {mat3} out
	       **/
	      mat3.fromMat2d = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = 0;

	        out[3] = a[2];
	        out[4] = a[3];
	        out[5] = 0;

	        out[6] = a[4];
	        out[7] = a[5];
	        out[8] = 1;
	        return out;
	      };

	      /**
	      * Calculates a 3x3 matrix from the given quaternion
	      *
	      * @param {mat3} out mat3 receiving operation result
	      * @param {quat} q Quaternion to create matrix from
	      *
	      * @returns {mat3} out
	      */
	      mat3.fromQuat = function (out, q) {
	        var x = q[0],
	            y = q[1],
	            z = q[2],
	            w = q[3],
	            x2 = x + x,
	            y2 = y + y,
	            z2 = z + z,
	            xx = x * x2,
	            yx = y * x2,
	            yy = y * y2,
	            zx = z * x2,
	            zy = z * y2,
	            zz = z * z2,
	            wx = w * x2,
	            wy = w * y2,
	            wz = w * z2;

	        out[0] = 1 - yy - zz;
	        out[3] = yx - wz;
	        out[6] = zx + wy;

	        out[1] = yx + wz;
	        out[4] = 1 - xx - zz;
	        out[7] = zy - wx;

	        out[2] = zx - wy;
	        out[5] = zy + wx;
	        out[8] = 1 - xx - yy;

	        return out;
	      };

	      /**
	      * Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	      *
	      * @param {mat3} out mat3 receiving operation result
	      * @param {mat4} a Mat4 to derive the normal matrix from
	      *
	      * @returns {mat3} out
	      */
	      mat3.normalFromMat4 = function (out, a) {
	        var a00 = a[0],
	            a01 = a[1],
	            a02 = a[2],
	            a03 = a[3],
	            a10 = a[4],
	            a11 = a[5],
	            a12 = a[6],
	            a13 = a[7],
	            a20 = a[8],
	            a21 = a[9],
	            a22 = a[10],
	            a23 = a[11],
	            a30 = a[12],
	            a31 = a[13],
	            a32 = a[14],
	            a33 = a[15],
	            b00 = a00 * a11 - a01 * a10,
	            b01 = a00 * a12 - a02 * a10,
	            b02 = a00 * a13 - a03 * a10,
	            b03 = a01 * a12 - a02 * a11,
	            b04 = a01 * a13 - a03 * a11,
	            b05 = a02 * a13 - a03 * a12,
	            b06 = a20 * a31 - a21 * a30,
	            b07 = a20 * a32 - a22 * a30,
	            b08 = a20 * a33 - a23 * a30,
	            b09 = a21 * a32 - a22 * a31,
	            b10 = a21 * a33 - a23 * a31,
	            b11 = a22 * a33 - a23 * a32,


	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;

	        if (!det) {
	          return null;
	        }
	        det = 1.0 / det;

	        out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	        out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	        out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;

	        out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	        out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	        out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;

	        out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	        out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	        out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;

	        return out;
	      };

	      /**
	       * Returns a string representation of a mat3
	       *
	       * @param {mat3} mat matrix to represent as a string
	       * @returns {String} string representation of the matrix
	       */
	      mat3.str = function (a) {
	        return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' + a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	      };

	      /**
	       * Returns Frobenius norm of a mat3
	       *
	       * @param {mat3} a the matrix to calculate Frobenius norm of
	       * @returns {Number} Frobenius norm
	       */
	      mat3.frob = function (a) {
	        return Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2));
	      };

	      /**
	       * Adds two mat3's
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        out[2] = a[2] + b[2];
	        out[3] = a[3] + b[3];
	        out[4] = a[4] + b[4];
	        out[5] = a[5] + b[5];
	        out[6] = a[6] + b[6];
	        out[7] = a[7] + b[7];
	        out[8] = a[8] + b[8];
	        return out;
	      };

	      /**
	       * Subtracts matrix b from matrix a
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @returns {mat3} out
	       */
	      mat3.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        out[2] = a[2] - b[2];
	        out[3] = a[3] - b[3];
	        out[4] = a[4] - b[4];
	        out[5] = a[5] - b[5];
	        out[6] = a[6] - b[6];
	        out[7] = a[7] - b[7];
	        out[8] = a[8] - b[8];
	        return out;
	      };

	      /**
	       * Alias for {@link mat3.subtract}
	       * @function
	       */
	      mat3.sub = mat3.subtract;

	      /**
	       * Multiply each element of the matrix by a scalar.
	       *
	       * @param {mat3} out the receiving matrix
	       * @param {mat3} a the matrix to scale
	       * @param {Number} b amount to scale the matrix's elements by
	       * @returns {mat3} out
	       */
	      mat3.multiplyScalar = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        out[2] = a[2] * b;
	        out[3] = a[3] * b;
	        out[4] = a[4] * b;
	        out[5] = a[5] * b;
	        out[6] = a[6] * b;
	        out[7] = a[7] * b;
	        out[8] = a[8] * b;
	        return out;
	      };

	      /**
	       * Adds two mat3's after multiplying each element of the second operand by a scalar value.
	       *
	       * @param {mat3} out the receiving vector
	       * @param {mat3} a the first operand
	       * @param {mat3} b the second operand
	       * @param {Number} scale the amount to scale b's elements by before adding
	       * @returns {mat3} out
	       */
	      mat3.multiplyScalarAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        out[2] = a[2] + b[2] * scale;
	        out[3] = a[3] + b[3] * scale;
	        out[4] = a[4] + b[4] * scale;
	        out[5] = a[5] + b[5] * scale;
	        out[6] = a[6] + b[6] * scale;
	        out[7] = a[7] + b[7] * scale;
	        out[8] = a[8] + b[8] * scale;
	        return out;
	      };

	      /*
	       * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	       *
	       * @param {mat3} a The first matrix.
	       * @param {mat3} b The second matrix.
	       * @returns {Boolean} True if the matrices are equal, false otherwise.
	       */
	      mat3.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
	      };

	      /**
	       * Returns whether or not the matrices have approximately the same elements in the same position.
	       *
	       * @param {mat3} a The first matrix.
	       * @param {mat3} b The second matrix.
	       * @returns {Boolean} True if the matrices are equal, false otherwise.
	       */
	      mat3.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1],
	            a2 = a[2],
	            a3 = a[3],
	            a4 = a[4],
	            a5 = a[5],
	            a6 = a[6],
	            a7 = a[7],
	            a8 = a[8];
	        var b0 = b[0],
	            b1 = b[1],
	            b2 = b[2],
	            b3 = b[3],
	            b4 = b[4],
	            b5 = b[5],
	            b6 = a[6],
	            b7 = b[7],
	            b8 = b[8];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2)) && Math.abs(a3 - b3) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a3), Math.abs(b3)) && Math.abs(a4 - b4) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a4), Math.abs(b4)) && Math.abs(a5 - b5) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a5), Math.abs(b5)) && Math.abs(a6 - b6) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a6), Math.abs(b6)) && Math.abs(a7 - b7) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a7), Math.abs(b7)) && Math.abs(a8 - b8) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a8), Math.abs(b8));
	      };

	      module.exports = mat3;

	      /***/
	    },
	    /* 232 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 3 Dimensional Vector
	       * @name vec3
	       */
	      var vec3 = {};

	      /**
	       * Creates a new, empty vec3
	       *
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = 0;
	        out[1] = 0;
	        out[2] = 0;
	        return out;
	      };

	      /**
	       * Creates a new vec3 initialized with values from an existing vector
	       *
	       * @param {vec3} a vector to clone
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        return out;
	      };

	      /**
	       * Creates a new vec3 initialized with the given values
	       *
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @param {Number} z Z component
	       * @returns {vec3} a new 3D vector
	       */
	      vec3.fromValues = function (x, y, z) {
	        var out = new glMatrix.ARRAY_TYPE(3);
	        out[0] = x;
	        out[1] = y;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Copy the values from one vec3 to another
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the source vector
	       * @returns {vec3} out
	       */
	      vec3.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        out[2] = a[2];
	        return out;
	      };

	      /**
	       * Set the components of a vec3 to the given values
	       *
	       * @param {vec3} out the receiving vector
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @param {Number} z Z component
	       * @returns {vec3} out
	       */
	      vec3.set = function (out, x, y, z) {
	        out[0] = x;
	        out[1] = y;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Adds two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        out[2] = a[2] + b[2];
	        return out;
	      };

	      /**
	       * Subtracts vector b from vector a
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        out[2] = a[2] - b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.subtract}
	       * @function
	       */
	      vec3.sub = vec3.subtract;

	      /**
	       * Multiplies two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.multiply = function (out, a, b) {
	        out[0] = a[0] * b[0];
	        out[1] = a[1] * b[1];
	        out[2] = a[2] * b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.multiply}
	       * @function
	       */
	      vec3.mul = vec3.multiply;

	      /**
	       * Divides two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.divide = function (out, a, b) {
	        out[0] = a[0] / b[0];
	        out[1] = a[1] / b[1];
	        out[2] = a[2] / b[2];
	        return out;
	      };

	      /**
	       * Alias for {@link vec3.divide}
	       * @function
	       */
	      vec3.div = vec3.divide;

	      /**
	       * Math.ceil the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to ceil
	       * @returns {vec3} out
	       */
	      vec3.ceil = function (out, a) {
	        out[0] = Math.ceil(a[0]);
	        out[1] = Math.ceil(a[1]);
	        out[2] = Math.ceil(a[2]);
	        return out;
	      };

	      /**
	       * Math.floor the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to floor
	       * @returns {vec3} out
	       */
	      vec3.floor = function (out, a) {
	        out[0] = Math.floor(a[0]);
	        out[1] = Math.floor(a[1]);
	        out[2] = Math.floor(a[2]);
	        return out;
	      };

	      /**
	       * Returns the minimum of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.min = function (out, a, b) {
	        out[0] = Math.min(a[0], b[0]);
	        out[1] = Math.min(a[1], b[1]);
	        out[2] = Math.min(a[2], b[2]);
	        return out;
	      };

	      /**
	       * Returns the maximum of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.max = function (out, a, b) {
	        out[0] = Math.max(a[0], b[0]);
	        out[1] = Math.max(a[1], b[1]);
	        out[2] = Math.max(a[2], b[2]);
	        return out;
	      };

	      /**
	       * Math.round the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to round
	       * @returns {vec3} out
	       */
	      vec3.round = function (out, a) {
	        out[0] = Math.round(a[0]);
	        out[1] = Math.round(a[1]);
	        out[2] = Math.round(a[2]);
	        return out;
	      };

	      /**
	       * Scales a vec3 by a scalar number
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to scale
	       * @param {Number} b amount to scale the vector by
	       * @returns {vec3} out
	       */
	      vec3.scale = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        out[2] = a[2] * b;
	        return out;
	      };

	      /**
	       * Adds two vec3's after scaling the second operand by a scalar value
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {Number} scale the amount to scale b by before adding
	       * @returns {vec3} out
	       */
	      vec3.scaleAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        out[2] = a[2] + b[2] * scale;
	        return out;
	      };

	      /**
	       * Calculates the euclidian distance between two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} distance between a and b
	       */
	      vec3.distance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1],
	            z = b[2] - a[2];
	        return Math.sqrt(x * x + y * y + z * z);
	      };

	      /**
	       * Alias for {@link vec3.distance}
	       * @function
	       */
	      vec3.dist = vec3.distance;

	      /**
	       * Calculates the squared euclidian distance between two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} squared distance between a and b
	       */
	      vec3.squaredDistance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1],
	            z = b[2] - a[2];
	        return x * x + y * y + z * z;
	      };

	      /**
	       * Alias for {@link vec3.squaredDistance}
	       * @function
	       */
	      vec3.sqrDist = vec3.squaredDistance;

	      /**
	       * Calculates the length of a vec3
	       *
	       * @param {vec3} a vector to calculate length of
	       * @returns {Number} length of a
	       */
	      vec3.length = function (a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        return Math.sqrt(x * x + y * y + z * z);
	      };

	      /**
	       * Alias for {@link vec3.length}
	       * @function
	       */
	      vec3.len = vec3.length;

	      /**
	       * Calculates the squared length of a vec3
	       *
	       * @param {vec3} a vector to calculate squared length of
	       * @returns {Number} squared length of a
	       */
	      vec3.squaredLength = function (a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        return x * x + y * y + z * z;
	      };

	      /**
	       * Alias for {@link vec3.squaredLength}
	       * @function
	       */
	      vec3.sqrLen = vec3.squaredLength;

	      /**
	       * Negates the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to negate
	       * @returns {vec3} out
	       */
	      vec3.negate = function (out, a) {
	        out[0] = -a[0];
	        out[1] = -a[1];
	        out[2] = -a[2];
	        return out;
	      };

	      /**
	       * Returns the inverse of the components of a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to invert
	       * @returns {vec3} out
	       */
	      vec3.inverse = function (out, a) {
	        out[0] = 1.0 / a[0];
	        out[1] = 1.0 / a[1];
	        out[2] = 1.0 / a[2];
	        return out;
	      };

	      /**
	       * Normalize a vec3
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a vector to normalize
	       * @returns {vec3} out
	       */
	      vec3.normalize = function (out, a) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        var len = x * x + y * y + z * z;
	        if (len > 0) {
	          //TODO: evaluate use of glm_invsqrt here?
	          len = 1 / Math.sqrt(len);
	          out[0] = a[0] * len;
	          out[1] = a[1] * len;
	          out[2] = a[2] * len;
	        }
	        return out;
	      };

	      /**
	       * Calculates the dot product of two vec3's
	       *
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {Number} dot product of a and b
	       */
	      vec3.dot = function (a, b) {
	        return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	      };

	      /**
	       * Computes the cross product of two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @returns {vec3} out
	       */
	      vec3.cross = function (out, a, b) {
	        var ax = a[0],
	            ay = a[1],
	            az = a[2],
	            bx = b[0],
	            by = b[1],
	            bz = b[2];

	        out[0] = ay * bz - az * by;
	        out[1] = az * bx - ax * bz;
	        out[2] = ax * by - ay * bx;
	        return out;
	      };

	      /**
	       * Performs a linear interpolation between two vec3's
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.lerp = function (out, a, b, t) {
	        var ax = a[0],
	            ay = a[1],
	            az = a[2];
	        out[0] = ax + t * (b[0] - ax);
	        out[1] = ay + t * (b[1] - ay);
	        out[2] = az + t * (b[2] - az);
	        return out;
	      };

	      /**
	       * Performs a hermite interpolation with two control points
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {vec3} c the third operand
	       * @param {vec3} d the fourth operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.hermite = function (out, a, b, c, d, t) {
	        var factorTimes2 = t * t,
	            factor1 = factorTimes2 * (2 * t - 3) + 1,
	            factor2 = factorTimes2 * (t - 2) + t,
	            factor3 = factorTimes2 * (t - 1),
	            factor4 = factorTimes2 * (3 - 2 * t);

	        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

	        return out;
	      };

	      /**
	       * Performs a bezier interpolation with two control points
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the first operand
	       * @param {vec3} b the second operand
	       * @param {vec3} c the third operand
	       * @param {vec3} d the fourth operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec3} out
	       */
	      vec3.bezier = function (out, a, b, c, d, t) {
	        var inverseFactor = 1 - t,
	            inverseFactorTimesTwo = inverseFactor * inverseFactor,
	            factorTimes2 = t * t,
	            factor1 = inverseFactorTimesTwo * inverseFactor,
	            factor2 = 3 * t * inverseFactorTimesTwo,
	            factor3 = 3 * factorTimes2 * inverseFactor,
	            factor4 = factorTimes2 * t;

	        out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	        out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	        out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;

	        return out;
	      };

	      /**
	       * Generates a random vector with the given scale
	       *
	       * @param {vec3} out the receiving vector
	       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	       * @returns {vec3} out
	       */
	      vec3.random = function (out, scale) {
	        scale = scale || 1.0;

	        var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	        var z = glMatrix.RANDOM() * 2.0 - 1.0;
	        var zScale = Math.sqrt(1.0 - z * z) * scale;

	        out[0] = Math.cos(r) * zScale;
	        out[1] = Math.sin(r) * zScale;
	        out[2] = z * scale;
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a mat4.
	       * 4th vector component is implicitly '1'
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {mat4} m matrix to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformMat4 = function (out, a, m) {
	        var x = a[0],
	            y = a[1],
	            z = a[2],
	            w = m[3] * x + m[7] * y + m[11] * z + m[15];
	        w = w || 1.0;
	        out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	        out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	        out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a mat3.
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {mat4} m the 3x3 matrix to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformMat3 = function (out, a, m) {
	        var x = a[0],
	            y = a[1],
	            z = a[2];
	        out[0] = x * m[0] + y * m[3] + z * m[6];
	        out[1] = x * m[1] + y * m[4] + z * m[7];
	        out[2] = x * m[2] + y * m[5] + z * m[8];
	        return out;
	      };

	      /**
	       * Transforms the vec3 with a quat
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec3} a the vector to transform
	       * @param {quat} q quaternion to transform with
	       * @returns {vec3} out
	       */
	      vec3.transformQuat = function (out, a, q) {
	        // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations

	        var x = a[0],
	            y = a[1],
	            z = a[2],
	            qx = q[0],
	            qy = q[1],
	            qz = q[2],
	            qw = q[3],


	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	            iy = qw * y + qz * x - qx * z,
	            iz = qw * z + qx * y - qy * x,
	            iw = -qx * x - qy * y - qz * z;

	        // calculate result * inverse quat
	        out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	        out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	        out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the x-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateX = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[0];
	        r[1] = p[1] * Math.cos(c) - p[2] * Math.sin(c);
	        r[2] = p[1] * Math.sin(c) + p[2] * Math.cos(c);

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the y-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateY = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[2] * Math.sin(c) + p[0] * Math.cos(c);
	        r[1] = p[1];
	        r[2] = p[2] * Math.cos(c) - p[0] * Math.sin(c);

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Rotate a 3D vector around the z-axis
	       * @param {vec3} out The receiving vec3
	       * @param {vec3} a The vec3 point to rotate
	       * @param {vec3} b The origin of the rotation
	       * @param {Number} c The angle of rotation
	       * @returns {vec3} out
	       */
	      vec3.rotateZ = function (out, a, b, c) {
	        var p = [],
	            r = [];
	        //Translate point to the origin
	        p[0] = a[0] - b[0];
	        p[1] = a[1] - b[1];
	        p[2] = a[2] - b[2];

	        //perform rotation
	        r[0] = p[0] * Math.cos(c) - p[1] * Math.sin(c);
	        r[1] = p[0] * Math.sin(c) + p[1] * Math.cos(c);
	        r[2] = p[2];

	        //translate to correct position
	        out[0] = r[0] + b[0];
	        out[1] = r[1] + b[1];
	        out[2] = r[2] + b[2];

	        return out;
	      };

	      /**
	       * Perform some operation over an array of vec3s.
	       *
	       * @param {Array} a the array of vectors to iterate over
	       * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	       * @param {Number} offset Number of elements to skip at the beginning of the array
	       * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	       * @param {Function} fn Function to call for each vector in the array
	       * @param {Object} [arg] additional argument to pass to fn
	       * @returns {Array} a
	       * @function
	       */
	      vec3.forEach = function () {
	        var vec = vec3.create();

	        return function (a, stride, offset, count, fn, arg) {
	          var i, l;
	          if (!stride) {
	            stride = 3;
	          }

	          if (!offset) {
	            offset = 0;
	          }

	          if (count) {
	            l = Math.min(count * stride + offset, a.length);
	          } else {
	            l = a.length;
	          }

	          for (i = offset; i < l; i += stride) {
	            vec[0] = a[i];vec[1] = a[i + 1];vec[2] = a[i + 2];
	            fn(vec, vec, arg);
	            a[i] = vec[0];a[i + 1] = vec[1];a[i + 2] = vec[2];
	          }

	          return a;
	        };
	      }();

	      /**
	       * Get the angle between two 3D vectors
	       * @param {vec3} a The first operand
	       * @param {vec3} b The second operand
	       * @returns {Number} The angle in radians
	       */
	      vec3.angle = function (a, b) {

	        var tempA = vec3.fromValues(a[0], a[1], a[2]);
	        var tempB = vec3.fromValues(b[0], b[1], b[2]);

	        vec3.normalize(tempA, tempA);
	        vec3.normalize(tempB, tempB);

	        var cosine = vec3.dot(tempA, tempB);

	        if (cosine > 1.0) {
	          return 0;
	        } else {
	          return Math.acos(cosine);
	        }
	      };

	      /**
	       * Returns a string representation of a vector
	       *
	       * @param {vec3} vec vector to represent as a string
	       * @returns {String} string representation of the vector
	       */
	      vec3.str = function (a) {
	        return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	      };

	      /**
	       * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
	       *
	       * @param {vec3} a The first vector.
	       * @param {vec3} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec3.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
	      };

	      /**
	       * Returns whether or not the vectors have approximately the same elements in the same position.
	       *
	       * @param {vec3} a The first vector.
	       * @param {vec3} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec3.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1],
	            a2 = a[2];
	        var b0 = b[0],
	            b1 = b[1],
	            b2 = b[2];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1)) && Math.abs(a2 - b2) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a2), Math.abs(b2));
	      };

	      module.exports = vec3;

	      /***/
	    },
	    /* 233 */
	    /***/function (module, exports, __webpack_require__) {

	      /* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	      
	      Permission is hereby granted, free of charge, to any person obtaining a copy
	      of this software and associated documentation files (the "Software"), to deal
	      in the Software without restriction, including without limitation the rights
	      to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	      copies of the Software, and to permit persons to whom the Software is
	      furnished to do so, subject to the following conditions:
	      
	      The above copyright notice and this permission notice shall be included in
	      all copies or substantial portions of the Software.
	      
	      THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	      IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	      FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	      AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	      LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	      OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	      THE SOFTWARE. */

	      var glMatrix = __webpack_require__(45);

	      /**
	       * @class 2 Dimensional Vector
	       * @name vec2
	       */
	      var vec2 = {};

	      /**
	       * Creates a new, empty vec2
	       *
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.create = function () {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = 0;
	        out[1] = 0;
	        return out;
	      };

	      /**
	       * Creates a new vec2 initialized with values from an existing vector
	       *
	       * @param {vec2} a vector to clone
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.clone = function (a) {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = a[0];
	        out[1] = a[1];
	        return out;
	      };

	      /**
	       * Creates a new vec2 initialized with the given values
	       *
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @returns {vec2} a new 2D vector
	       */
	      vec2.fromValues = function (x, y) {
	        var out = new glMatrix.ARRAY_TYPE(2);
	        out[0] = x;
	        out[1] = y;
	        return out;
	      };

	      /**
	       * Copy the values from one vec2 to another
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the source vector
	       * @returns {vec2} out
	       */
	      vec2.copy = function (out, a) {
	        out[0] = a[0];
	        out[1] = a[1];
	        return out;
	      };

	      /**
	       * Set the components of a vec2 to the given values
	       *
	       * @param {vec2} out the receiving vector
	       * @param {Number} x X component
	       * @param {Number} y Y component
	       * @returns {vec2} out
	       */
	      vec2.set = function (out, x, y) {
	        out[0] = x;
	        out[1] = y;
	        return out;
	      };

	      /**
	       * Adds two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.add = function (out, a, b) {
	        out[0] = a[0] + b[0];
	        out[1] = a[1] + b[1];
	        return out;
	      };

	      /**
	       * Subtracts vector b from vector a
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.subtract = function (out, a, b) {
	        out[0] = a[0] - b[0];
	        out[1] = a[1] - b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.subtract}
	       * @function
	       */
	      vec2.sub = vec2.subtract;

	      /**
	       * Multiplies two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.multiply = function (out, a, b) {
	        out[0] = a[0] * b[0];
	        out[1] = a[1] * b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.multiply}
	       * @function
	       */
	      vec2.mul = vec2.multiply;

	      /**
	       * Divides two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.divide = function (out, a, b) {
	        out[0] = a[0] / b[0];
	        out[1] = a[1] / b[1];
	        return out;
	      };

	      /**
	       * Alias for {@link vec2.divide}
	       * @function
	       */
	      vec2.div = vec2.divide;

	      /**
	       * Math.ceil the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to ceil
	       * @returns {vec2} out
	       */
	      vec2.ceil = function (out, a) {
	        out[0] = Math.ceil(a[0]);
	        out[1] = Math.ceil(a[1]);
	        return out;
	      };

	      /**
	       * Math.floor the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to floor
	       * @returns {vec2} out
	       */
	      vec2.floor = function (out, a) {
	        out[0] = Math.floor(a[0]);
	        out[1] = Math.floor(a[1]);
	        return out;
	      };

	      /**
	       * Returns the minimum of two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.min = function (out, a, b) {
	        out[0] = Math.min(a[0], b[0]);
	        out[1] = Math.min(a[1], b[1]);
	        return out;
	      };

	      /**
	       * Returns the maximum of two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec2} out
	       */
	      vec2.max = function (out, a, b) {
	        out[0] = Math.max(a[0], b[0]);
	        out[1] = Math.max(a[1], b[1]);
	        return out;
	      };

	      /**
	       * Math.round the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to round
	       * @returns {vec2} out
	       */
	      vec2.round = function (out, a) {
	        out[0] = Math.round(a[0]);
	        out[1] = Math.round(a[1]);
	        return out;
	      };

	      /**
	       * Scales a vec2 by a scalar number
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to scale
	       * @param {Number} b amount to scale the vector by
	       * @returns {vec2} out
	       */
	      vec2.scale = function (out, a, b) {
	        out[0] = a[0] * b;
	        out[1] = a[1] * b;
	        return out;
	      };

	      /**
	       * Adds two vec2's after scaling the second operand by a scalar value
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @param {Number} scale the amount to scale b by before adding
	       * @returns {vec2} out
	       */
	      vec2.scaleAndAdd = function (out, a, b, scale) {
	        out[0] = a[0] + b[0] * scale;
	        out[1] = a[1] + b[1] * scale;
	        return out;
	      };

	      /**
	       * Calculates the euclidian distance between two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} distance between a and b
	       */
	      vec2.distance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1];
	        return Math.sqrt(x * x + y * y);
	      };

	      /**
	       * Alias for {@link vec2.distance}
	       * @function
	       */
	      vec2.dist = vec2.distance;

	      /**
	       * Calculates the squared euclidian distance between two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} squared distance between a and b
	       */
	      vec2.squaredDistance = function (a, b) {
	        var x = b[0] - a[0],
	            y = b[1] - a[1];
	        return x * x + y * y;
	      };

	      /**
	       * Alias for {@link vec2.squaredDistance}
	       * @function
	       */
	      vec2.sqrDist = vec2.squaredDistance;

	      /**
	       * Calculates the length of a vec2
	       *
	       * @param {vec2} a vector to calculate length of
	       * @returns {Number} length of a
	       */
	      vec2.length = function (a) {
	        var x = a[0],
	            y = a[1];
	        return Math.sqrt(x * x + y * y);
	      };

	      /**
	       * Alias for {@link vec2.length}
	       * @function
	       */
	      vec2.len = vec2.length;

	      /**
	       * Calculates the squared length of a vec2
	       *
	       * @param {vec2} a vector to calculate squared length of
	       * @returns {Number} squared length of a
	       */
	      vec2.squaredLength = function (a) {
	        var x = a[0],
	            y = a[1];
	        return x * x + y * y;
	      };

	      /**
	       * Alias for {@link vec2.squaredLength}
	       * @function
	       */
	      vec2.sqrLen = vec2.squaredLength;

	      /**
	       * Negates the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to negate
	       * @returns {vec2} out
	       */
	      vec2.negate = function (out, a) {
	        out[0] = -a[0];
	        out[1] = -a[1];
	        return out;
	      };

	      /**
	       * Returns the inverse of the components of a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to invert
	       * @returns {vec2} out
	       */
	      vec2.inverse = function (out, a) {
	        out[0] = 1.0 / a[0];
	        out[1] = 1.0 / a[1];
	        return out;
	      };

	      /**
	       * Normalize a vec2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a vector to normalize
	       * @returns {vec2} out
	       */
	      vec2.normalize = function (out, a) {
	        var x = a[0],
	            y = a[1];
	        var len = x * x + y * y;
	        if (len > 0) {
	          //TODO: evaluate use of glm_invsqrt here?
	          len = 1 / Math.sqrt(len);
	          out[0] = a[0] * len;
	          out[1] = a[1] * len;
	        }
	        return out;
	      };

	      /**
	       * Calculates the dot product of two vec2's
	       *
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {Number} dot product of a and b
	       */
	      vec2.dot = function (a, b) {
	        return a[0] * b[0] + a[1] * b[1];
	      };

	      /**
	       * Computes the cross product of two vec2's
	       * Note that the cross product must by definition produce a 3D vector
	       *
	       * @param {vec3} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @returns {vec3} out
	       */
	      vec2.cross = function (out, a, b) {
	        var z = a[0] * b[1] - a[1] * b[0];
	        out[0] = out[1] = 0;
	        out[2] = z;
	        return out;
	      };

	      /**
	       * Performs a linear interpolation between two vec2's
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the first operand
	       * @param {vec2} b the second operand
	       * @param {Number} t interpolation amount between the two inputs
	       * @returns {vec2} out
	       */
	      vec2.lerp = function (out, a, b, t) {
	        var ax = a[0],
	            ay = a[1];
	        out[0] = ax + t * (b[0] - ax);
	        out[1] = ay + t * (b[1] - ay);
	        return out;
	      };

	      /**
	       * Generates a random vector with the given scale
	       *
	       * @param {vec2} out the receiving vector
	       * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	       * @returns {vec2} out
	       */
	      vec2.random = function (out, scale) {
	        scale = scale || 1.0;
	        var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	        out[0] = Math.cos(r) * scale;
	        out[1] = Math.sin(r) * scale;
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat2
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat2} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat2 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[2] * y;
	        out[1] = m[1] * x + m[3] * y;
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat2d
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat2d} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat2d = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[2] * y + m[4];
	        out[1] = m[1] * x + m[3] * y + m[5];
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat3
	       * 3rd vector component is implicitly '1'
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat3} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat3 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[3] * y + m[6];
	        out[1] = m[1] * x + m[4] * y + m[7];
	        return out;
	      };

	      /**
	       * Transforms the vec2 with a mat4
	       * 3rd vector component is implicitly '0'
	       * 4th vector component is implicitly '1'
	       *
	       * @param {vec2} out the receiving vector
	       * @param {vec2} a the vector to transform
	       * @param {mat4} m matrix to transform with
	       * @returns {vec2} out
	       */
	      vec2.transformMat4 = function (out, a, m) {
	        var x = a[0],
	            y = a[1];
	        out[0] = m[0] * x + m[4] * y + m[12];
	        out[1] = m[1] * x + m[5] * y + m[13];
	        return out;
	      };

	      /**
	       * Perform some operation over an array of vec2s.
	       *
	       * @param {Array} a the array of vectors to iterate over
	       * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	       * @param {Number} offset Number of elements to skip at the beginning of the array
	       * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	       * @param {Function} fn Function to call for each vector in the array
	       * @param {Object} [arg] additional argument to pass to fn
	       * @returns {Array} a
	       * @function
	       */
	      vec2.forEach = function () {
	        var vec = vec2.create();

	        return function (a, stride, offset, count, fn, arg) {
	          var i, l;
	          if (!stride) {
	            stride = 2;
	          }

	          if (!offset) {
	            offset = 0;
	          }

	          if (count) {
	            l = Math.min(count * stride + offset, a.length);
	          } else {
	            l = a.length;
	          }

	          for (i = offset; i < l; i += stride) {
	            vec[0] = a[i];vec[1] = a[i + 1];
	            fn(vec, vec, arg);
	            a[i] = vec[0];a[i + 1] = vec[1];
	          }

	          return a;
	        };
	      }();

	      /**
	       * Returns a string representation of a vector
	       *
	       * @param {vec2} vec vector to represent as a string
	       * @returns {String} string representation of the vector
	       */
	      vec2.str = function (a) {
	        return 'vec2(' + a[0] + ', ' + a[1] + ')';
	      };

	      /**
	       * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
	       *
	       * @param {vec2} a The first vector.
	       * @param {vec2} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec2.exactEquals = function (a, b) {
	        return a[0] === b[0] && a[1] === b[1];
	      };

	      /**
	       * Returns whether or not the vectors have approximately the same elements in the same position.
	       *
	       * @param {vec2} a The first vector.
	       * @param {vec2} b The second vector.
	       * @returns {Boolean} True if the vectors are equal, false otherwise.
	       */
	      vec2.equals = function (a, b) {
	        var a0 = a[0],
	            a1 = a[1];
	        var b0 = b[0],
	            b1 = b[1];
	        return Math.abs(a0 - b0) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a0), Math.abs(b0)) && Math.abs(a1 - b1) <= glMatrix.EPSILON * Math.max(1.0, Math.abs(a1), Math.abs(b1));
	      };

	      module.exports = vec2;

	      /***/
	    },
	    /* 234 */
	    /***/function (module, exports, __webpack_require__) {

	      var MatrixUtil = __webpack_require__(3);
	      var PathUtil = __webpack_require__(46);
	      var Util = __webpack_require__(0);
	      var d3Ease = __webpack_require__(235);
	      var d3Timer = __webpack_require__(246);

	      var _require = __webpack_require__(249),
	          interpolate = _require.interpolate,
	          interpolateArray = _require.interpolateArray; // 目前整体动画只需要数值和数组的差值计算


	      var ReservedProps = {
	        delay: 'delay'
	      };
	      module.exports = {
	        stopAnimate: function stopAnimate() {
	          var self = this;
	          var canvas = self.get('canvas');
	          if (self.get('destroyed')) {
	            return;
	          }
	          if (self.get('animating')) {
	            var clip = self.attr('clip');
	            // 如果 clip 在执行动画
	            if (clip && clip.get('animating')) {
	              clip.stopAnimate();
	            }
	            var timer = self.get('animateTimer');
	            if (timer) {
	              timer.stop();
	              self.setSilent('animateTimer', null);
	            }
	            var animateCfg = self.get('animateCfg');
	            if (animateCfg) {
	              self.attr(animateCfg.toAttrs);
	              if (animateCfg.toM) {
	                self.setMatrix(animateCfg.toM);
	              }
	              if (animateCfg.callback) {
	                animateCfg.callback();
	              }
	              self.setSilent('animateCfg', null);
	            }
	            self.setSilent('animating', false); // 动画停止
	            canvas.draw();
	          }
	        },

	        /**
	         * 执行动画
	         * @param  {Object}   toProps  动画最终状态
	         * @param  {Number}   duration 动画执行时间
	         * @param  {String}   easing   动画缓动效果
	         * @param  {Function} callback 动画执行后的回调
	         * @param  {Number}   delay    动画延迟时间
	         */
	        animate: function animate(toProps, duration, easing, callback) {
	          var delay = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;

	          var self = this;
	          var canvas = self.get('canvas');
	          var formatProps = getFormatProps(toProps);
	          var toAttrs = formatProps.attrs;
	          var toM = formatProps.M;
	          var fromAttrs = getfromAttrs(toAttrs);
	          var fromM = Util.clone(self.getMatrix());
	          var repeat = toProps.repeat;
	          var timer = self.get('animateTimer');
	          timer && timer.stop();
	          // 可能不设置 easing
	          if (Util.isNumber(callback)) {
	            delay = callback;
	            callback = null;
	          }
	          if (Util.isFunction(easing)) {
	            callback = easing;
	            easing = 'easeLinear';
	          } else {
	            easing = easing ? easing : 'easeLinear';
	          }

	          self.setSilent('animating', true); // 处于动画状态
	          self.setSilent('animateCfg', {
	            toAttrs: toAttrs,
	            toM: toM,
	            callback: callback
	          });

	          // 执行动画
	          timer = d3Timer.timer(function (elapsed) {
	            if (repeat) {
	              excuteRepeat(elapsed);
	            } else {
	              excuteOnce(elapsed);
	            }
	          }, delay);

	          self.setSilent('animateTimer', timer);

	          function excuteRepeat(elapsed) {
	            var ratio = elapsed % duration / duration;
	            ratio = d3Ease[easing](ratio);
	            update(ratio);
	          }

	          function excuteOnce(elapsed) {
	            var ratio = elapsed / duration;
	            if (ratio < 1) {
	              ratio = d3Ease[easing](ratio);
	              update(ratio);
	            } else {
	              update(1); // 保证最后一帧的绘制
	              callback && callback();
	              self.setSilent('animating', false); // 动画停止
	              self.setSilent('animateCfg', null);
	              self.setSilent('animateTimer', null);
	              timer.stop();
	            }
	          }

	          function update(ratio) {
	            var cProps = {}; // 此刻属性
	            if (self.get('destroyed')) {
	              return;
	            }
	            var interf = void 0; //  差值函数

	            for (var k in toAttrs) {
	              if (!Util.isEqual(fromAttrs[k], toAttrs[k])) {
	                if (k === 'path') {
	                  var toPath = PathUtil.parsePathString(toAttrs[k]); // 终点状态
	                  var fromPath = PathUtil.parsePathString(fromAttrs[k]); // 起始状态
	                  cProps[k] = [];
	                  for (var i = 0; i < toPath.length; i++) {
	                    var toPathPoint = toPath[i];
	                    var fromPathPoint = fromPath[i];
	                    var cPathPoint = [];
	                    for (var j = 0; j < toPathPoint.length; j++) {
	                      if (Util.isNumber(toPathPoint[j]) && fromPathPoint) {
	                        interf = interpolate(fromPathPoint[j], toPathPoint[j]);
	                        cPathPoint.push(interf(ratio));
	                      } else {
	                        cPathPoint.push(toPathPoint[j]);
	                      }
	                    }
	                    cProps[k].push(cPathPoint);
	                  }
	                } else {
	                  interf = interpolate(fromAttrs[k], toAttrs[k]);
	                  cProps[k] = interf(ratio);
	                }
	              }
	            }
	            if (toM) {
	              var mf = interpolateArray(fromM, toM);
	              var cM = mf(ratio);
	              self.setMatrix(cM);
	            }
	            self.attr(cProps);
	            canvas.draw();
	          }

	          function getFormatProps(props) {
	            var rst = {
	              M: null,
	              attrs: {}
	            };
	            for (var k in props) {
	              if (k === 'transform') {
	                rst.M = MatrixUtil.transform(self.getMatrix(), props[k]);
	              } else if (k === 'matrix') {
	                rst.M = props[k];
	              } else if (!ReservedProps[k]) {
	                rst.attrs[k] = props[k];
	              }
	            }
	            return rst;
	          }

	          function getfromAttrs(toAttrs) {
	            var rst = {};
	            for (var k in toAttrs) {
	              rst[k] = self.attr(k);
	            }
	            return rst;
	          }
	        }
	      };

	      /***/
	    },
	    /* 235 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(236);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeLinear", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_linear__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(237);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuad", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeQuadInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_quad__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(238);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubic", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCubicInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(239);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePoly", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easePolyInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_poly__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(240);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSin", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeSinInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_sin__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(241);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExp", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeExpInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_exp__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(242);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircle", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeCircleInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_circle__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(243);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounce", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBounceInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_bounce__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(244);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBack", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeBackInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_back__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(245);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElastic", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticIn", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "easeElasticInOut", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_elastic__["b"];
	      });

	      /***/
	    },
	    /* 236 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = linear;
	      function linear(t) {
	        return +t;
	      }

	      /***/
	    },
	    /* 237 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = quadIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = quadOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = quadInOut;
	      function quadIn(t) {
	        return t * t;
	      }

	      function quadOut(t) {
	        return t * (2 - t);
	      }

	      function quadInOut(t) {
	        return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	      }

	      /***/
	    },
	    /* 238 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = cubicIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = cubicOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = cubicInOut;
	      function cubicIn(t) {
	        return t * t * t;
	      }

	      function cubicOut(t) {
	        return --t * t * t + 1;
	      }

	      function cubicInOut(t) {
	        return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	      }

	      /***/
	    },
	    /* 239 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return polyIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return polyOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return polyInOut;
	      });
	      var exponent = 3;

	      var polyIn = function custom(e) {
	        e = +e;

	        function polyIn(t) {
	          return Math.pow(t, e);
	        }

	        polyIn.exponent = custom;

	        return polyIn;
	      }(exponent);

	      var polyOut = function custom(e) {
	        e = +e;

	        function polyOut(t) {
	          return 1 - Math.pow(1 - t, e);
	        }

	        polyOut.exponent = custom;

	        return polyOut;
	      }(exponent);

	      var polyInOut = function custom(e) {
	        e = +e;

	        function polyInOut(t) {
	          return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	        }

	        polyInOut.exponent = custom;

	        return polyInOut;
	      }(exponent);

	      /***/
	    },
	    /* 240 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = sinIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = sinOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = sinInOut;
	      var pi = Math.PI,
	          halfPi = pi / 2;

	      function sinIn(t) {
	        return 1 - Math.cos(t * halfPi);
	      }

	      function sinOut(t) {
	        return Math.sin(t * halfPi);
	      }

	      function sinInOut(t) {
	        return (1 - Math.cos(pi * t)) / 2;
	      }

	      /***/
	    },
	    /* 241 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = expIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = expOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = expInOut;
	      function expIn(t) {
	        return Math.pow(2, 10 * t - 10);
	      }

	      function expOut(t) {
	        return 1 - Math.pow(2, -10 * t);
	      }

	      function expInOut(t) {
	        return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	      }

	      /***/
	    },
	    /* 242 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = circleIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = circleOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = circleInOut;
	      function circleIn(t) {
	        return 1 - Math.sqrt(1 - t * t);
	      }

	      function circleOut(t) {
	        return Math.sqrt(1 - --t * t);
	      }

	      function circleInOut(t) {
	        return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	      }

	      /***/
	    },
	    /* 243 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = bounceIn;
	      /* harmony export (immutable) */__webpack_exports__["c"] = bounceOut;
	      /* harmony export (immutable) */__webpack_exports__["b"] = bounceInOut;
	      var b1 = 4 / 11,
	          b2 = 6 / 11,
	          b3 = 8 / 11,
	          b4 = 3 / 4,
	          b5 = 9 / 11,
	          b6 = 10 / 11,
	          b7 = 15 / 16,
	          b8 = 21 / 22,
	          b9 = 63 / 64,
	          b0 = 1 / b1 / b1;

	      function bounceIn(t) {
	        return 1 - bounceOut(1 - t);
	      }

	      function bounceOut(t) {
	        return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	      }

	      function bounceInOut(t) {
	        return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	      }

	      /***/
	    },
	    /* 244 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return backIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return backOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return backInOut;
	      });
	      var overshoot = 1.70158;

	      var backIn = function custom(s) {
	        s = +s;

	        function backIn(t) {
	          return t * t * ((s + 1) * t - s);
	        }

	        backIn.overshoot = custom;

	        return backIn;
	      }(overshoot);

	      var backOut = function custom(s) {
	        s = +s;

	        function backOut(t) {
	          return --t * t * ((s + 1) * t + s) + 1;
	        }

	        backOut.overshoot = custom;

	        return backOut;
	      }(overshoot);

	      var backInOut = function custom(s) {
	        s = +s;

	        function backInOut(t) {
	          return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	        }

	        backInOut.overshoot = custom;

	        return backInOut;
	      }(overshoot);

	      /***/
	    },
	    /* 245 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return elasticIn;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "c", function () {
	        return elasticOut;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return elasticInOut;
	      });
	      var tau = 2 * Math.PI,
	          amplitude = 1,
	          period = 0.3;

	      var elasticIn = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticIn(t) {
	          return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	        }

	        elasticIn.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticIn.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticIn;
	      }(amplitude, period);

	      var elasticOut = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticOut(t) {
	          return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	        }

	        elasticOut.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticOut.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticOut;
	      }(amplitude, period);

	      var elasticInOut = function custom(a, p) {
	        var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	        function elasticInOut(t) {
	          return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	        }

	        elasticInOut.amplitude = function (a) {
	          return custom(a, p * tau);
	        };
	        elasticInOut.period = function (p) {
	          return custom(a, p);
	        };

	        return elasticInOut;
	      }(amplitude, period);

	      /***/
	    },
	    /* 246 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(47);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "now", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timer", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timerFlush", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_timer__["d"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(247);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "timeout", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(248);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interval", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_interval__["a"];
	      });

	      /***/
	    },
	    /* 247 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

	      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
	        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */]();
	        delay = delay == null ? 0 : +delay;
	        t.restart(function (elapsed) {
	          t.stop();
	          callback(elapsed + delay);
	        }, delay, time);
	        return t;
	      };

	      /***/
	    },
	    /* 248 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony import */
	      var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(47);

	      /* harmony default export */__webpack_exports__["a"] = function (callback, delay, time) {
	        var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */](),
	            total = delay;
	        if (delay == null) return t.restart(callback, delay, time), t;
	        delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
	        t.restart(function tick(elapsed) {
	          elapsed += total;
	          t.restart(tick, total += delay, time);
	          callback(elapsed);
	        }, delay, time);
	        return t;
	      };

	      /***/
	    },
	    /* 249 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(48);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolate", function () {
	        return __WEBPACK_IMPORTED_MODULE_0__src_value__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(94);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateArray", function () {
	        return __WEBPACK_IMPORTED_MODULE_1__src_array__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(51);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasis", function () {
	        return __WEBPACK_IMPORTED_MODULE_2__src_basis__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(92);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateBasisClosed", function () {
	        return __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(95);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateDate", function () {
	        return __WEBPACK_IMPORTED_MODULE_4__src_date__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(30);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateNumber", function () {
	        return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(96);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateObject", function () {
	        return __WEBPACK_IMPORTED_MODULE_6__src_object__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(252);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRound", function () {
	        return __WEBPACK_IMPORTED_MODULE_7__src_round__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(97);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateString", function () {
	        return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(253);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformCss", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateTransformSvg", function () {
	        return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(256);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateZoom", function () {
	        return __WEBPACK_IMPORTED_MODULE_10__src_zoom__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(91);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgb", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasis", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateRgbBasisClosed", function () {
	        return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["c"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(257);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHsl", function () {
	        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHslLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_12__src_hsl__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(258);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateLab", function () {
	        return __WEBPACK_IMPORTED_MODULE_13__src_lab__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(259);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHcl", function () {
	        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["a"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateHclLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_14__src_hcl__["b"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(260);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelix", function () {
	        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["b"];
	      });
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "interpolateCubehelixLong", function () {
	        return __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__["a"];
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(261);
	      /* harmony reexport (binding) */__webpack_require__.d(__webpack_exports__, "quantize", function () {
	        return __WEBPACK_IMPORTED_MODULE_16__src_quantize__["a"];
	      });

	      /***/
	    },
	    /* 250 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = lab;
	      /* unused harmony export Lab */
	      /* harmony export (immutable) */__webpack_exports__["b"] = hcl;
	      /* unused harmony export Hcl */
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(90);

	      var Kn = 18,
	          Xn = 0.950470,

	      // D65 standard referent
	      Yn = 1,
	          Zn = 1.088830,
	          t0 = 4 / 29,
	          t1 = 6 / 29,
	          t2 = 3 * t1 * t1,
	          t3 = t1 * t1 * t1;

	      function labConvert(o) {
	        if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	        if (o instanceof Hcl) {
	          var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
	          return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	        }
	        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	        var b = rgb2xyz(o.r),
	            a = rgb2xyz(o.g),
	            l = rgb2xyz(o.b),
	            x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	            y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	            z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	        return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	      }

	      function lab(l, a, b, opacity) {
	        return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	      }

	      function Lab(l, a, b, opacity) {
	        this.l = +l;
	        this.a = +a;
	        this.b = +b;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	        },
	        darker: function darker(k) {
	          return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	        },
	        rgb: function rgb() {
	          var y = (this.l + 16) / 116,
	              x = isNaN(this.a) ? y : y + this.a / 500,
	              z = isNaN(this.b) ? y : y - this.b / 200;
	          y = Yn * lab2xyz(y);
	          x = Xn * lab2xyz(x);
	          z = Zn * lab2xyz(z);
	          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	          xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
	        }
	      }));

	      function xyz2lab(t) {
	        return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	      }

	      function lab2xyz(t) {
	        return t > t1 ? t * t * t : t2 * (t - t0);
	      }

	      function xyz2rgb(x) {
	        return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	      }

	      function rgb2xyz(x) {
	        return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	      }

	      function hclConvert(o) {
	        if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	        if (!(o instanceof Lab)) o = labConvert(o);
	        var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
	        return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	      }

	      function hcl(h, c, l, opacity) {
	        return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	      }

	      function Hcl(h, c, l, opacity) {
	        this.h = +h;
	        this.c = +c;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	        },
	        darker: function darker(k) {
	          return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	        },
	        rgb: function rgb() {
	          return labConvert(this).rgb();
	        }
	      }));

	      /***/
	    },
	    /* 251 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = cubehelix;
	      /* unused harmony export Cubehelix */
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(50);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(49);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(90);

	      var A = -0.14861,
	          B = +1.78277,
	          C = -0.29227,
	          D = -0.90649,
	          E = +1.97294,
	          ED = E * D,
	          EB = E * B,
	          BC_DA = B * C - D * A;

	      function cubehelixConvert(o) {
	        if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	        if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	        var r = o.r / 255,
	            g = o.g / 255,
	            b = o.b / 255,
	            l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	            bl = b - l,
	            k = (E * (g - l) - C * bl) / D,
	            s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),

	        // NaN if l=0 or l=1
	        h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
	        return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	      }

	      function cubehelix(h, s, l, opacity) {
	        return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	      }

	      function Cubehelix(h, s, l, opacity) {
	        this.h = +h;
	        this.s = +s;
	        this.l = +l;
	        this.opacity = +opacity;
	      }

	      Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	        brighter: function brighter(k) {
	          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
	          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	        },
	        darker: function darker(k) {
	          k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
	          return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	        },
	        rgb: function rgb() {
	          var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
	              l = +this.l,
	              a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	              cosh = Math.cos(h),
	              sinh = Math.sin(h);
	          return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
	        }
	      }));

	      /***/
	    },
	    /* 252 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (a, b) {
	        return a = +a, b -= a, function (t) {
	          return Math.round(a + b * t);
	        };
	      };

	      /***/
	    },
	    /* 253 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return interpolateTransformCss;
	      });
	      /* harmony export (binding) */__webpack_require__.d(__webpack_exports__, "b", function () {
	        return interpolateTransformSvg;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(30);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(254);

	      function interpolateTransform(parse, pxComma, pxParen, degParen) {

	        function pop(s) {
	          return s.length ? s.pop() + " " : "";
	        }

	        function translate(xa, ya, xb, yb, s, q) {
	          if (xa !== xb || ya !== yb) {
	            var i = s.push("translate(", null, pxComma, null, pxParen);
	            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	          } else if (xb || yb) {
	            s.push("translate(" + xb + pxComma + yb + pxParen);
	          }
	        }

	        function rotate(a, b, s, q) {
	          if (a !== b) {
	            if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
	            q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	          } else if (b) {
	            s.push(pop(s) + "rotate(" + b + degParen);
	          }
	        }

	        function skewX(a, b, s, q) {
	          if (a !== b) {
	            q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	          } else if (b) {
	            s.push(pop(s) + "skewX(" + b + degParen);
	          }
	        }

	        function scale(xa, ya, xb, yb, s, q) {
	          if (xa !== xb || ya !== yb) {
	            var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	            q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	          } else if (xb !== 1 || yb !== 1) {
	            s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	          }
	        }

	        return function (a, b) {
	          var s = [],

	          // string constants and placeholders
	          q = []; // number interpolators
	          a = parse(a), b = parse(b);
	          translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	          rotate(a.rotate, b.rotate, s, q);
	          skewX(a.skewX, b.skewX, s, q);
	          scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	          a = b = null; // gc
	          return function (t) {
	            var i = -1,
	                n = q.length,
	                o;
	            while (++i < n) {
	              s[(o = q[i]).i] = o.x(t);
	            }return s.join("");
	          };
	        };
	      }

	      var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
	      var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");

	      /***/
	    },
	    /* 254 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = parseCss;
	      /* harmony export (immutable) */__webpack_exports__["b"] = parseSvg;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(255);

	      var cssNode, cssRoot, cssView, svgNode;

	      function parseCss(value) {
	        if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	        cssNode.style.transform = value;
	        value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	        cssRoot.removeChild(cssNode);
	        value = value.slice(7, -1).split(",");
	        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	      }

	      function parseSvg(value) {
	        if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	        svgNode.setAttribute("transform", value);
	        if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	        value = value.matrix;
	        return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
	      }

	      /***/
	    },
	    /* 255 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return identity;
	      });
	      var degrees = 180 / Math.PI;

	      var identity = {
	        translateX: 0,
	        translateY: 0,
	        rotate: 0,
	        skewX: 0,
	        scaleX: 1,
	        scaleY: 1
	      };

	      /* harmony default export */__webpack_exports__["a"] = function (a, b, c, d, e, f) {
	        var scaleX, scaleY, skewX;
	        if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	        if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	        if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	        if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	        return {
	          translateX: e,
	          translateY: f,
	          rotate: Math.atan2(b, a) * degrees,
	          skewX: Math.atan(skewX) * degrees,
	          scaleX: scaleX,
	          scaleY: scaleY
	        };
	      };

	      /***/
	    },
	    /* 256 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";

	      var rho = Math.SQRT2,
	          rho2 = 2,
	          rho4 = 4,
	          epsilon2 = 1e-12;

	      function cosh(x) {
	        return ((x = Math.exp(x)) + 1 / x) / 2;
	      }

	      function sinh(x) {
	        return ((x = Math.exp(x)) - 1 / x) / 2;
	      }

	      function tanh(x) {
	        return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	      }

	      // p0 = [ux0, uy0, w0]
	      // p1 = [ux1, uy1, w1]
	      /* harmony default export */__webpack_exports__["a"] = function (p0, p1) {
	        var ux0 = p0[0],
	            uy0 = p0[1],
	            w0 = p0[2],
	            ux1 = p1[0],
	            uy1 = p1[1],
	            w1 = p1[2],
	            dx = ux1 - ux0,
	            dy = uy1 - uy0,
	            d2 = dx * dx + dy * dy,
	            i,
	            S;

	        // Special case for u0 ≅ u1.
	        if (d2 < epsilon2) {
	          S = Math.log(w1 / w0) / rho;
	          i = function i(t) {
	            return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
	          };
	        }

	        // General case.
	        else {
	            var d1 = Math.sqrt(d2),
	                b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	                b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	                r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	                r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	            S = (r1 - r0) / rho;
	            i = function i(t) {
	              var s = t * S,
	                  coshr0 = cosh(r0),
	                  u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	              return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
	            };
	          }

	        i.duration = S * 1000;

	        return i;
	      };

	      /***/
	    },
	    /* 257 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return hslLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function hsl(hue) {
	        return function (start, end) {
	          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
	              s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.h = h(t);
	            start.s = s(t);
	            start.l = l(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 258 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (immutable) */
	      __webpack_exports__["a"] = lab;
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function lab(start, end) {
	        var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
	            a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
	            b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
	            opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	        return function (t) {
	          start.l = l(t);
	          start.a = a(t);
	          start.b = b(t);
	          start.opacity = opacity(t);
	          return start + "";
	        };
	      }

	      /***/
	    },
	    /* 259 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "b", function () {
	        return hclLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function hcl(hue) {
	        return function (start, end) {
	          var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
	              c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
	              l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	              opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	          return function (t) {
	            start.h = h(t);
	            start.c = c(t);
	            start.l = l(t);
	            start.opacity = opacity(t);
	            return start + "";
	          };
	        };
	      }

	      /* harmony default export */__webpack_exports__["a"] = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 260 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony export (binding) */
	      __webpack_require__.d(__webpack_exports__, "a", function () {
	        return cubehelixLong;
	      });
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(14);
	      /* harmony import */var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(20);

	      function cubehelix(hue) {
	        return function cubehelixGamma(y) {
	          y = +y;

	          function cubehelix(start, end) {
	            var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
	                s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	                l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	                opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	            return function (t) {
	              start.h = h(t);
	              start.s = s(t);
	              start.l = l(Math.pow(t, y));
	              start.opacity = opacity(t);
	              return start + "";
	            };
	          }

	          cubehelix.gamma = cubehelixGamma;

	          return cubehelix;
	        }(1);
	      }

	      /* harmony default export */__webpack_exports__["b"] = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]);
	      var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	      /***/
	    },
	    /* 261 */
	    /***/function (module, __webpack_exports__, __webpack_require__) {

	      "use strict";
	      /* harmony default export */
	      __webpack_exports__["a"] = function (interpolator, n) {
	        var samples = new Array(n);
	        for (var i = 0; i < n; ++i) {
	          samples[i] = interpolator(i / (n - 1));
	        }return samples;
	      };

	      /***/
	    },
	    /* 262 */
	    /***/function (module, exports, __webpack_require__) {

	      var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	        return typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      } : function (obj) {
	        return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === 'undefined' ? 'undefined' : _typeof2(obj);
	      };

	      /*!
	       * EventEmitter v5.1.0 - git.io/ee
	       * Unlicense - http://unlicense.org/
	       * Oliver Caldwell - http://oli.me.uk/
	       * @preserve
	       */

	      ;(function (exports) {
	        'use strict';

	        /**
	         * Class for managing events.
	         * Can be extended to provide event functionality in other classes.
	         *
	         * @class EventEmitter Manages event registering and emitting.
	         */

	        function EventEmitter() {}

	        // Shortcuts to improve speed and size
	        var proto = EventEmitter.prototype;
	        var originalGlobalValue = exports.EventEmitter;

	        /**
	         * Finds the index of the listener for the event in its storage array.
	         *
	         * @param {Function[]} listeners Array of listeners to search through.
	         * @param {Function} listener Method to look for.
	         * @return {Number} Index of the specified listener, -1 if not found
	         * @api private
	         */
	        function indexOfListener(listeners, listener) {
	          var i = listeners.length;
	          while (i--) {
	            if (listeners[i].listener === listener) {
	              return i;
	            }
	          }

	          return -1;
	        }

	        /**
	         * Alias a method while keeping the context correct, to allow for overwriting of target method.
	         *
	         * @param {String} name The name of the target method.
	         * @return {Function} The aliased method
	         * @api private
	         */
	        function alias(name) {
	          return function aliasClosure() {
	            return this[name].apply(this, arguments);
	          };
	        }

	        /**
	         * Returns the listener array for the specified event.
	         * Will initialise the event object and listener arrays if required.
	         * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	         * Each property in the object response is an array of listener functions.
	         *
	         * @param {String|RegExp} evt Name of the event to return the listeners from.
	         * @return {Function[]|Object} All listener functions for the event.
	         */
	        proto.getListeners = function getListeners(evt) {
	          var events = this._getEvents();
	          var response;
	          var key;

	          // Return a concatenated array of all matching events if
	          // the selector is a regular expression.
	          if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	              if (events.hasOwnProperty(key) && evt.test(key)) {
	                response[key] = events[key];
	              }
	            }
	          } else {
	            response = events[evt] || (events[evt] = []);
	          }

	          return response;
	        };

	        /**
	         * Takes a list of listener objects and flattens it into a list of listener functions.
	         *
	         * @param {Object[]} listeners Raw listener objects.
	         * @return {Function[]} Just the listener functions.
	         */
	        proto.flattenListeners = function flattenListeners(listeners) {
	          var flatListeners = [];
	          var i;

	          for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	          }

	          return flatListeners;
	        };

	        /**
	         * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	         *
	         * @param {String|RegExp} evt Name of the event to return the listeners from.
	         * @return {Object} All listener functions for an event in an object.
	         */
	        proto.getListenersAsObject = function getListenersAsObject(evt) {
	          var listeners = this.getListeners(evt);
	          var response;

	          if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	          }

	          return response || listeners;
	        };

	        function isValidListener(listener) {
	          if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true;
	          } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
	            return isValidListener(listener.listener);
	          } else {
	            return false;
	          }
	        }

	        /**
	         * Adds a listener function to the specified event.
	         * The listener will not be added if it is a duplicate.
	         * If the listener returns true then it will be removed after it is called.
	         * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to attach the listener to.
	         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addListener = function addListener(evt, listener) {
	          if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	          }

	          var listeners = this.getListenersAsObject(evt);
	          var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
	          var key;

	          for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	              listeners[key].push(listenerIsWrapped ? listener : {
	                listener: listener,
	                once: false
	              });
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of addListener
	         */
	        proto.on = alias('addListener');

	        /**
	         * Semi-alias of addListener. It will add a listener that will be
	         * automatically removed after its first execution.
	         *
	         * @param {String|RegExp} evt Name of the event to attach the listener to.
	         * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addOnceListener = function addOnceListener(evt, listener) {
	          return this.addListener(evt, {
	            listener: listener,
	            once: true
	          });
	        };

	        /**
	         * Alias of addOnceListener.
	         */
	        proto.once = alias('addOnceListener');

	        /**
	         * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	         * You need to tell it what event names should be matched by a regex.
	         *
	         * @param {String} evt Name of the event to create.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.defineEvent = function defineEvent(evt) {
	          this.getListeners(evt);
	          return this;
	        };

	        /**
	         * Uses defineEvent to define multiple events.
	         *
	         * @param {String[]} evts An array of event names to define.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.defineEvents = function defineEvents(evts) {
	          for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	          }
	          return this;
	        };

	        /**
	         * Removes a listener function from the specified event.
	         * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to remove the listener from.
	         * @param {Function} listener Method to remove from the event.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeListener = function removeListener(evt, listener) {
	          var listeners = this.getListenersAsObject(evt);
	          var index;
	          var key;

	          for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	              index = indexOfListener(listeners[key], listener);

	              if (index !== -1) {
	                listeners[key].splice(index, 1);
	              }
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of removeListener
	         */
	        proto.off = alias('removeListener');

	        /**
	         * Adds listeners in bulk using the manipulateListeners method.
	         * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	         * You can also pass it a regular expression to add the array of listeners to all events that match it.
	         * Yeah, this function does quite a bit. That's probably a bad thing.
	         *
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to add.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.addListeners = function addListeners(evt, listeners) {
	          // Pass through to manipulateListeners
	          return this.manipulateListeners(false, evt, listeners);
	        };

	        /**
	         * Removes listeners in bulk using the manipulateListeners method.
	         * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	         * You can also pass it an event name and an array of listeners to be removed.
	         * You can also pass it a regular expression to remove the listeners from all events that match it.
	         *
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to remove.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeListeners = function removeListeners(evt, listeners) {
	          // Pass through to manipulateListeners
	          return this.manipulateListeners(true, evt, listeners);
	        };

	        /**
	         * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	         * The first argument will determine if the listeners are removed (true) or added (false).
	         * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	         * You can also pass it an event name and an array of listeners to be added/removed.
	         * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	         *
	         * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	         * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	         * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	          var i;
	          var value;
	          var single = remove ? this.removeListener : this.addListener;
	          var multiple = remove ? this.removeListeners : this.addListeners;

	          // If evt is an object then pass each of its properties to this method
	          if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	              if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                // Pass the single listener straight through to the singular method
	                if (typeof value === 'function') {
	                  single.call(this, i, value);
	                } else {
	                  // Otherwise pass back to the multiple function
	                  multiple.call(this, i, value);
	                }
	              }
	            }
	          } else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	              single.call(this, evt, listeners[i]);
	            }
	          }

	          return this;
	        };

	        /**
	         * Removes all listeners from a specified event.
	         * If you do not specify an event then all listeners will be removed.
	         * That means every event will be emptied.
	         * You can also pass a regex to remove all events that match it.
	         *
	         * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.removeEvent = function removeEvent(evt) {
	          var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
	          var events = this._getEvents();
	          var key;

	          // Remove different things depending on the state of evt
	          if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	          } else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	              if (events.hasOwnProperty(key) && evt.test(key)) {
	                delete events[key];
	              }
	            }
	          } else {
	            // Remove all listeners in all events
	            delete this._events;
	          }

	          return this;
	        };

	        /**
	         * Alias of removeEvent.
	         *
	         * Added to mirror the node API.
	         */
	        proto.removeAllListeners = alias('removeEvent');

	        /**
	         * Emits an event of your choice.
	         * When emitted, every listener attached to that event will be executed.
	         * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	         * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	         * So they will not arrive within the array on the other side, they will be separate.
	         * You can also pass a regular expression to emit to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	         * @param {Array} [args] Optional array of arguments to be passed to each listener.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.emitEvent = function emitEvent(evt, args) {
	          var listenersMap = this.getListenersAsObject(evt);
	          var listeners;
	          var listener;
	          var i;
	          var key;
	          var response;

	          for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	              listeners = listenersMap[key].slice(0);

	              for (i = 0; i < listeners.length; i++) {
	                // If the listener returns true then it shall be removed from the event
	                // The function is executed either with a basic call or an apply if there is an args array
	                listener = listeners[i];

	                if (listener.once === true) {
	                  this.removeListener(evt, listener.listener);
	                }

	                response = listener.listener.apply(this, args || []);

	                if (response === this._getOnceReturnValue()) {
	                  this.removeListener(evt, listener.listener);
	                }
	              }
	            }
	          }

	          return this;
	        };

	        /**
	         * Alias of emitEvent
	         */
	        proto.trigger = alias('emitEvent');

	        /**
	         * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	         * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	         *
	         * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	         * @param {...*} Optional additional arguments to be passed to each listener.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.emit = function emit(evt) {
	          var args = Array.prototype.slice.call(arguments, 1);
	          return this.emitEvent(evt, args);
	        };

	        /**
	         * Sets the current value to check against when executing listeners. If a
	         * listeners return value matches the one set here then it will be removed
	         * after execution. This value defaults to true.
	         *
	         * @param {*} value The new value to check for when executing listeners.
	         * @return {Object} Current instance of EventEmitter for chaining.
	         */
	        proto.setOnceReturnValue = function setOnceReturnValue(value) {
	          this._onceReturnValue = value;
	          return this;
	        };

	        /**
	         * Fetches the current value to check against when executing listeners. If
	         * the listeners return value matches this one then it should be removed
	         * automatically. It will return true by default.
	         *
	         * @return {*|Boolean} The current value to check for or the default, true.
	         * @api private
	         */
	        proto._getOnceReturnValue = function _getOnceReturnValue() {
	          if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	          } else {
	            return true;
	          }
	        };

	        /**
	         * Fetches the events object and creates one if required.
	         *
	         * @return {Object} The events storage object.
	         * @api private
	         */
	        proto._getEvents = function _getEvents() {
	          return this._events || (this._events = {});
	        };

	        /**
	         * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	         *
	         * @return {Function} Non conflicting EventEmitter class.
	         */
	        EventEmitter.noConflict = function noConflict() {
	          exports.EventEmitter = originalGlobalValue;
	          return EventEmitter;
	        };

	        // Expose the class either via AMD, CommonJS or the global object
	        if (true) {
	          !(__WEBPACK_AMD_DEFINE_RESULT__ = function () {
	            return EventEmitter;
	          }.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	        } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	          module.exports = EventEmitter;
	        } else {
	          exports.EventEmitter = EventEmitter;
	        }
	      })(this || {});

	      /***/
	    },
	    /* 263 */
	    /***/function (module, exports, __webpack_require__) {

	      var Shape = __webpack_require__(1);
	      Shape.Rect = __webpack_require__(55);
	      Shape.Rect = __webpack_require__(55);
	      Shape.Circle = __webpack_require__(99);
	      Shape.Ellipse = __webpack_require__(100);
	      Shape.Path = __webpack_require__(101);
	      Shape.Text = __webpack_require__(103);
	      Shape.Line = __webpack_require__(104);
	      Shape.Image = __webpack_require__(105);
	      Shape.Polygon = __webpack_require__(106);
	      Shape.Polyline = __webpack_require__(107);
	      Shape.Arc = __webpack_require__(108);
	      Shape.Fan = __webpack_require__(109);
	      Shape.Cubic = __webpack_require__(110);
	      Shape.Quadratic = __webpack_require__(111);
	      Shape.Marker = __webpack_require__(112);

	      module.exports = Shape;

	      /***/
	    },
	    /* 264 */
	    /***/function (module, exports) {

	      module.exports = {
	        xAt: function xAt(psi, rx, ry, cx, t) {
	          return rx * Math.cos(psi) * Math.cos(t) - ry * Math.sin(psi) * Math.sin(t) + cx;
	        },
	        yAt: function yAt(psi, rx, ry, cy, t) {
	          return rx * Math.sin(psi) * Math.cos(t) + ry * Math.cos(psi) * Math.sin(t) + cy;
	        },
	        xExtrema: function xExtrema(psi, rx, ry) {
	          return Math.atan(-ry / rx * Math.tan(psi));
	        },
	        yExtrema: function yExtrema(psi, rx, ry) {
	          return Math.atan(ry / (rx * Math.tan(psi)));
	        }
	      };

	      /***/
	    }]
	    /******/)
	  );
	});
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 2 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 全局变量
	 * @author dxq613
	 */
	var Util = __webpack_require__(0);
	var Theme = __webpack_require__(277);

	// const Global = {};
	var Global = {
	  version: '3.1.2', // TODO fix version
	  trackable: true,
	  animate: true,
	  snapArray: [0, 1, 2, 4, 5, 10],
	  // 指定固定 tick 数的逼近值
	  snapCountArray: [0, 1, 1.2, 1.5, 1.6, 2, 2.2, 2.4, 2.5, 3, 4, 5, 6, 7.5, 8, 10],
	  widthRatio: { // 宽度所占的分类的比例
	    column: 1 / 2, // 一般的柱状图占比 1/2
	    rose: 0.9999999, // 玫瑰图柱状占比 1
	    multiplePie: 1 / 1.3 // 多层的饼图、环图
	  },
	  // 折线图、区域图、path 当只有一个数据时，是否显示成点
	  showSinglePoint: false,
	  connectNulls: false,
	  scales: {}
	};

	function setTheme(theme) {
	  // for (const k in Global) {
	  //   if (Global.hasOwnProperty(k)) {
	  //     delete Global[k];
	  //   }
	  // }

	  var newTheme = {};
	  if (Util.isObject(theme)) {
	    newTheme = theme;
	  } else if (Util.indexOf(Object.keys(Theme), theme) !== -1) {
	    newTheme = Theme[theme];
	  } else {
	    newTheme = Theme.default;
	  }
	  Util.deepMix(Global, newTheme);
	}

	setTheme('default');

	Global.setTheme = setTheme;

	module.exports = Global;

	/***/ }),
	/* 3 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is classified as an `Array` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array, else `false`.
	 * @example
	 *
	 * _.isArray([1, 2, 3]);
	 * // => true
	 *
	 * _.isArray(document.body.children);
	 * // => false
	 *
	 * _.isArray('abc');
	 * // => false
	 *
	 * _.isArray(_.noop);
	 * // => false
	 */
	var isArray = Array.isArray;

	module.exports = isArray;

	/***/ }),
	/* 4 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var freeGlobal = __webpack_require__(66);

	/** Detect free variable `self`. */
	var freeSelf = (typeof self === 'undefined' ? 'undefined' : _typeof(self)) == 'object' && self && self.Object === Object && self;

	/** Used as a reference to the global object. */
	var root = freeGlobal || freeSelf || Function('return this')();

	module.exports = root;

	/***/ }),
	/* 5 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is object-like. A value is object-like if it's not `null`
	 * and has a `typeof` result of "object".
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
	 * @example
	 *
	 * _.isObjectLike({});
	 * // => true
	 *
	 * _.isObjectLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isObjectLike(_.noop);
	 * // => false
	 *
	 * _.isObjectLike(null);
	 * // => false
	 */
	function isObjectLike(value) {
	  return value != null && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object';
	}

	module.exports = isObjectLike;

	/***/ }),
	/* 6 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    getRawTag = __webpack_require__(133),
	    objectToString = __webpack_require__(134);

	/** `Object#toString` result references. */
	var nullTag = '[object Null]',
	    undefinedTag = '[object Undefined]';

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * The base implementation of `getTag` without fallbacks for buggy environments.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	function baseGetTag(value) {
	    if (value == null) {
	        return value === undefined ? undefinedTag : nullTag;
	    }
	    return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
	}

	module.exports = baseGetTag;

	/***/ }),
	/* 7 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is the
	 * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
	 * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an object, else `false`.
	 * @example
	 *
	 * _.isObject({});
	 * // => true
	 *
	 * _.isObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isObject(_.noop);
	 * // => true
	 *
	 * _.isObject(null);
	 * // => false
	 */
	function isObject(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return value != null && (type == 'object' || type == 'function');
	}

	module.exports = isObject;

	/***/ }),
	/* 8 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsNative = __webpack_require__(131),
	    getValue = __webpack_require__(137);

	/**
	 * Gets the native function at `key` of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {string} key The key of the method to get.
	 * @returns {*} Returns the function if it's native, else `undefined`.
	 */
	function getNative(object, key) {
	  var value = getValue(object, key);
	  return baseIsNative(value) ? value : undefined;
	}

	module.exports = getNative;

	/***/ }),
	/* 9 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var KEYWORDS = ['min', 'max', 'median'];

	function getFirstScale(scales) {
	  var firstScale = void 0;
	  Util.each(scales, function (scale) {
	    if (scale) {
	      firstScale = scale;
	      return false;
	    }
	  });
	  return firstScale;
	}

	var Base = function () {
	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 1,
	      xScales: null,
	      yScales: null,
	      el: null
	    };
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var defaultCfg = this.getDefaultCfg();
	    cfg = Util.deepMix({}, defaultCfg, cfg);
	    Util.mix(this, cfg);
	  }

	  /**
	   * 将原始数值归一化
	   * @param  {string | number} val   原始值
	   * @param  {Scale} scale 度量对象
	   * @return {Number}       返回归一化后的数值
	   */


	  Base.prototype._getNormalizedValue = function _getNormalizedValue(val, scale) {
	    var result = void 0;
	    if (Util.indexOf(KEYWORDS, val) !== -1) {
	      // 分类则对应索引值
	      var scaleValue = void 0;
	      if (val === 'median') {
	        scaleValue = scale.isCategory ? (scale.values.length - 1) / 2 : (scale.min + scale.max) / 2;
	        result = scale.scale(scaleValue);
	      } else {
	        if (scale.isCategory) {
	          scaleValue = val === 'min' ? 0 : scale.values.length - 1;
	        } else {
	          scaleValue = scale[val];
	        }
	        result = scale.scale(scaleValue);
	      }
	    } else {
	      result = scale.scale(val);
	    }

	    return result;
	  };

	  /**
	   * 将原始数值转换成坐标系上的点
	   * @protected
	   * @param  {Coord} coord  坐标系
	   * @param  {Object | Array | Function} position 位置点
	   * @return {Object} 转换成坐标系上的点
	   */


	  Base.prototype.parsePoint = function parsePoint(coord, position) {
	    var self = this;
	    var xScales = self.xScales;
	    var yScales = self.yScales;
	    if (Util.isFunction(position)) {
	      position = position(xScales, yScales); // position 必须是对象
	    }

	    var x = void 0;
	    var y = void 0;

	    // 如果数据格式是 ['50%', '50%'] 的格式
	    if (Util.isArray(position) && Util.isString(position[0]) && position[0].indexOf('%') !== -1) {
	      return this.parsePercentPoint(coord, position);
	    }

	    if (Util.isArray(position)) {
	      // 数组  [2, 1]
	      x = self._getNormalizedValue(position[0], getFirstScale(xScales));
	      y = self._getNormalizedValue(position[1], getFirstScale(yScales));
	    } else {
	      for (var field in position) {
	        var value = position[field];
	        if (xScales[field]) {
	          x = self._getNormalizedValue(value, xScales[field]);
	        }

	        if (yScales[field]) {
	          y = self._getNormalizedValue(value, yScales[field]);
	        }
	      }
	    }

	    if (!Util.isNil(x) && !Util.isNil(y)) {
	      return coord.convert({
	        x: x,
	        y: y
	      });
	    }
	  };
	  // 如果传入的值是百分比的格式，根据坐标系的起始点和宽高计算


	  Base.prototype.parsePercentPoint = function parsePercentPoint(coord, position) {
	    var xPercent = parseFloat(position[0]) / 100;
	    var yPercent = parseFloat(position[1]) / 100;
	    var start = coord.start;
	    var end = coord.end;
	    var topLeft = {
	      x: Math.min(start.x, end.x),
	      y: Math.min(start.y, end.y)
	    };
	    var x = coord.width * xPercent + topLeft.x;
	    var y = coord.height * yPercent + topLeft.y;
	    return {
	      x: x,
	      y: y
	    };
	  };

	  /**
	   * 设置显示、隐藏
	   * @param {Boolean} visible 是否可见
	   */


	  Base.prototype.setVisible = function setVisible(visible) {
	    var el = this.el;
	    if (el) {
	      if (el.set) {
	        el.set('visible', visible);
	      } else {
	        el.style.display = visible ? '' : 'none';
	      }
	    }
	  };

	  /**
	   * 渲染辅助元素
	   * @override
	   */


	  Base.prototype.render = function render() {};

	  /**
	   * 清理图形、元素
	   */


	  Base.prototype.remove = function remove() {
	    var self = this;
	    var el = self.el;
	    if (el) {
	      el.remove();
	    }
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 10 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 工厂类，管理各种类型的 shape
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var PathUtil = __webpack_require__(22);
	var GPath = __webpack_require__(1).PathUtil;
	var Shape = {};

	var ShapeBase = {
	  _coord: null,
	  /**
	   * 绘制图形
	   * @param {Object} cfg 配置项
	   * @param {Object} container 容器
	   * @return {Object} shape 创建的 shape
	   */
	  draw: function draw(cfg, container) {
	    if (this.drawShape) {
	      return this.drawShape(cfg, container);
	    }
	    return null;
	  },

	  /**
	   * 获取绘制图形需要的点, 可以不定义，则使用默认的
	  getPoints(cfg) {
	    if (this.getShapePoints) {
	      return this.getShapePoints(cfg);
	    }
	    return null;
	  },*/
	  /**
	   * 设置坐标系
	   * @param {Coord} coord 坐标系
	   */
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },

	  /**
	   * 0～1 path 转 画布 path
	   * @param  {path} path 路径
	   * @param  {Boolean} islineToArc 是否转换成圆弧
	   * @return {path} path 转换到画布坐标的path
	   */
	  parsePath: function parsePath(path, islineToArc) {
	    var coord = this._coord;
	    path = GPath.parsePathString(path);
	    if (coord.isPolar && islineToArc !== false) {
	      path = PathUtil.convertPolarPath(coord, path);
	    } else {
	      path = PathUtil.convertNormalPath(coord, path);
	    }
	    return path;
	  },

	  /**
	   * 0～1 point 转 画布 point
	   * @param  {point} point 节点
	   * @return {point} point 转换后的点
	   */
	  parsePoint: function parsePoint(point) {
	    var coord = this._coord;
	    return coord.convertPoint(point);
	  },

	  /**
	   * 0～1 points 转 画布 points
	   * @param  {points} points 节点集合
	   * @return {points} points 转换后的多个节点
	   */
	  parsePoints: function parsePoints(points) {
	    var coord = this._coord;
	    var rst = [];
	    Util.each(points, function (point) {
	      rst.push(coord.convertPoint(point));
	    });
	    return rst;
	  }
	};

	var ShapeFactoryBase = {
	  defaultShapeType: null,
	  setCoord: function setCoord(coord) {
	    this._coord = coord;
	  },
	  getShape: function getShape(type) {
	    var self = this;
	    if (Util.isArray(type)) {
	      type = type[0];
	    }
	    var shape = self[type] || self[self.defaultShapeType];
	    shape._coord = self._coord;
	    return shape;
	  },
	  getShapePoints: function getShapePoints(type, cfg) {
	    var shape = this.getShape(type);
	    var fn = shape.getPoints || shape.getShapePoints || this.getDefaultPoints;
	    var points = fn(cfg);
	    return points;
	  },
	  getDefaultPoints: function getDefaultPoints() /* cfg */{
	    return [];
	  },
	  getMarkerCfg: function getMarkerCfg(type, cfg) {
	    var shape = this.getShape(type);
	    if (!shape.getMarkerCfg) {
	      var defaultShapeType = this.defaultShapeType;
	      shape = this.getShape(defaultShapeType);
	    }
	    return shape.getMarkerCfg(cfg);
	  },
	  getSelectedCfg: function getSelectedCfg() /* type, cfg */{
	    return {};
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = shape.draw(cfg, container);
	    if (gShape) {
	      gShape.setSilent('origin', cfg.origin);
	      gShape._id = cfg.yIndex ? cfg._id + cfg.yIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  }
	};

	// 注册 Geometry 获取图形的入口
	Shape.registerFactory = function (factoryName, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var geomObj = Util.assign({}, ShapeFactoryBase, cfg);
	  Shape[className] = geomObj;
	  geomObj.name = factoryName;
	  return geomObj;
	};

	// 注册图形
	Shape.registerShape = function (factoryName, shapeType, cfg) {
	  var className = Util.upperFirst(factoryName);
	  var factory = Shape[className];
	  var shapeObj = Util.assign({}, ShapeBase, cfg);
	  factory[shapeType] = shapeObj;
	  return shapeObj;
	};

	// 获得Geom 对应的 shapeFactory
	Shape.getShapeFactory = function (factoryName) {
	  var self = this;
	  factoryName = factoryName || 'point';
	  var className = Util.upperFirst(factoryName);
	  return self[className];
	};

	module.exports = Shape;

	/***/ }),
	/* 11 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Built-in value references. */
	var _Symbol = root.Symbol;

	module.exports = _Symbol;

	/***/ }),
	/* 12 */
	/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(65),
	    isLength = __webpack_require__(48);

	/**
	 * Checks if `value` is array-like. A value is considered array-like if it's
	 * not a function and has a `value.length` that's an integer greater than or
	 * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
	 * @example
	 *
	 * _.isArrayLike([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLike(document.body.children);
	 * // => true
	 *
	 * _.isArrayLike('abc');
	 * // => true
	 *
	 * _.isArrayLike(_.noop);
	 * // => false
	 */
	function isArrayLike(value) {
	  return value != null && isLength(value.length) && !isFunction(value);
	}

	module.exports = isArrayLike;

	/***/ }),
	/* 13 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var baseMatches = __webpack_require__(186),
	    baseMatchesProperty = __webpack_require__(196),
	    identity = __webpack_require__(57),
	    isArray = __webpack_require__(3),
	    property = __webpack_require__(204);

	/**
	 * The base implementation of `_.iteratee`.
	 *
	 * @private
	 * @param {*} [value=_.identity] The value to convert to an iteratee.
	 * @returns {Function} Returns the iteratee.
	 */
	function baseIteratee(value) {
	  // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
	  // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
	  if (typeof value == 'function') {
	    return value;
	  }
	  if (value == null) {
	    return identity;
	  }
	  if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
	    return isArray(value) ? baseMatchesProperty(value[0], value[1]) : baseMatches(value);
	  }
	  return property(value);
	}

	module.exports = baseIteratee;

	/***/ }),
	/* 14 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseToString = __webpack_require__(201);

	/**
	 * Converts `value` to a string. An empty string is returned for `null`
	 * and `undefined` values. The sign of `-0` is preserved.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.toString(null);
	 * // => ''
	 *
	 * _.toString(-0);
	 * // => '-0'
	 *
	 * _.toString([1, 2, 3]);
	 * // => '1,2,3'
	 */
	function toString(value) {
	  return value == null ? '' : baseToString(value);
	}

	module.exports = toString;

	/***/ }),
	/* 15 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the Attribute base class
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);

	function toScaleString(scale, value) {
	  if (Util.isString(value)) {
	    return value;
	  }
	  return scale.invert(scale.scale(value));
	}
	/**
	 * 所有视觉通道属性的基类
	 * @class Attr
	 */

	var AttributeBase = function () {
	  function AttributeBase(cfg) {
	    _classCallCheck(this, AttributeBase);

	    /**
	     * 属性的类型
	     * @type {String}
	     */
	    this.type = 'base';

	    /**
	     * 属性的名称
	     * @type {String}
	     */
	    this.name = null;

	    /**
	     * 回调函数
	     * @type {Function}
	     */
	    this.method = null;

	    /**
	     * 备选的值数组
	     * @type {Array}
	     */
	    this.values = [];

	    /**
	     * 属性内部的度量
	     * @type {Array}
	     */
	    this.scales = [];

	    /**
	     * 是否通过线性取值, 如果未指定，则根据数值的类型判定
	     * @type {Boolean}
	     */
	    this.linear = null;

	    Util.mix(this, cfg);
	  }

	  AttributeBase.prototype.get = function get(name) {
	    return this[name];
	  };

	  AttributeBase.prototype.set = function set(name, value) {
	    this[name] = value;
	  };

	  // 获取属性值，将值映射到视觉通道


	  AttributeBase.prototype._getAttrValue = function _getAttrValue(scale, value) {
	    var values = this.values;
	    if (scale.isCategory && !this.linear) {
	      var index = scale.translate(value);
	      return values[index % values.length];
	    }
	    var percent = scale.scale(value);
	    return this.getLinearValue(percent);
	  };

	  /**
	   * 如果进行线性映射，返回对应的映射值
	   * @protected
	   * @param  {Number} percent 百分比
	   * @return {*}  颜色值、形状、大小等
	   */


	  AttributeBase.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var steps = values.length - 1;
	    var step = Math.floor(steps * percent);
	    var leftPercent = steps * percent - step;
	    var start = values[step];
	    var end = step === steps ? start : values[step + 1];
	    var rstValue = start + (end - start) * leftPercent;
	    return rstValue;
	  };

	  /**
	   * 默认的回调函数
	   * @param {*} value 回调函数的值
	   * @type {Function}
	   * @return {Array} 返回映射后的值
	   */


	  AttributeBase.prototype.callback = function callback(value) {
	    var self = this;
	    var scale = self.scales[0];
	    var rstValue = null;
	    if (scale.type === 'identity') {
	      rstValue = scale.value;
	    } else {
	      rstValue = self._getAttrValue(scale, value);
	    }
	    return rstValue;
	  };

	  /**
	   * 根据度量获取属性名
	   * @return {Array} dims of this Attribute
	   */


	  AttributeBase.prototype.getNames = function getNames() {
	    var scales = this.scales;
	    var names = this.names;
	    var length = Math.min(scales.length, names.length);
	    var rst = [];
	    for (var i = 0; i < length; i++) {
	      rst.push(names[i]);
	    }
	    return rst;
	  };

	  /**
	   * 根据度量获取维度名
	   * @return {Array} dims of this Attribute
	   */


	  AttributeBase.prototype.getFields = function getFields() {
	    var scales = this.scales;
	    var rst = [];
	    Util.each(scales, function (scale) {
	      rst.push(scale.field);
	    });
	    return rst;
	  };

	  /**
	   * 根据名称获取度量
	   * @param  {String} name the name of scale
	   * @return {Scale} scale
	   */


	  AttributeBase.prototype.getScale = function getScale(name) {
	    var scales = this.scales;
	    var names = this.names;
	    var index = names.indexOf(name);
	    return scales[index];
	  };

	  /**
	   * 映射数据
	   * @param {*} param1...paramn 多个数值
	   * @return {Array} 映射的值组成的数组
	   */


	  AttributeBase.prototype.mapping = function mapping() {
	    var scales = this.scales;
	    var callback = this.callback;

	    for (var _len = arguments.length, params = Array(_len), _key = 0; _key < _len; _key++) {
	      params[_key] = arguments[_key];
	    }

	    var values = params;
	    if (callback) {
	      for (var i = 0; i < params.length; i++) {
	        params[i] = this._toOriginParam(params[i], scales[i]);
	      }
	      values = callback.apply(this, params);
	    }
	    if (!Util.isArray(values)) {
	      values = [values];
	    }
	    return values;
	  };

	  // 原始的参数


	  AttributeBase.prototype._toOriginParam = function _toOriginParam(param, scale) {
	    var rst = param;
	    if (!scale.isLinear) {
	      if (Util.isArray(param)) {
	        rst = [];
	        for (var i = 0; i < param.length; i++) {
	          rst.push(toScaleString(scale, param[i]));
	        }
	      } else {
	        rst = toScaleString(scale, param);
	      }
	    }
	    return rst;
	  };

	  return AttributeBase;
	}();

	module.exports = AttributeBase;

	/***/ }),
	/* 16 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 所有 Geometry 的基类
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(58);
	var Attr = __webpack_require__(117);
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Adjust = __webpack_require__(279);
	var Labels = __webpack_require__(284);
	var Shape = __webpack_require__(10);
	var TooltipMixin = __webpack_require__(288);
	var ActiveMixin = __webpack_require__(289);
	var SelectMixin = __webpack_require__(290);
	var GROUP_ATTRS = ['color', 'shape', 'size'];
	var FIELD_ORIGIN = '_origin';

	function parseFields(field) {
	  if (Util.isArray(field)) {
	    return field;
	  }
	  if (Util.isString(field)) {
	    return field.split('*');
	  }
	  return [field];
	}

	// 转换成对象的数组 [{type: 'adjust'}]
	function parseAdjusts(adjusts) {
	  // 如果是字符串或者对象转换成数组
	  if (Util.isString(adjusts) || Util.isPlainObject(adjusts)) {
	    adjusts = [adjusts];
	  }
	  Util.each(adjusts, function (adjust, index) {
	    if (!Util.isObject(adjust)) {
	      adjusts[index] = { type: adjust };
	    }
	  });
	  return adjusts;
	}

	/**
	 * 几何标记
	 * @class Geom
	 */

	var GeomBase = function (_Base) {
	  _inherits(GeomBase, _Base);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  GeomBase.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 标记 _id 用于区分执行动画
	       * @type {String}
	       */
	      _id: null,
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'base',

	      /**
	       * 坐标系
	       * @type {Object}
	       */
	      coord: null,

	      /**
	       * 属性映射集
	       * @protected
	       * @type {Object}
	       */
	      attrs: {},

	      /**
	       * 所属的View
	       * @type {View}
	       */
	      view: null,

	      /**
	       * 几何标记显示的数据
	       * @type {Array}
	       */
	      data: [],

	      /**
	       * 相关的度量
	       * @type {Object}
	       */
	      scales: {},

	      /**
	       * 绘图容器
	       * @type {Object}
	       */
	      container: null,

	      /**
	       * 文本容器
	       * @type {Object}
	       */
	      labelContainer: null,

	      /**
	       * 图形容器
	       * @type {Object}
	       */
	      shapeContainer: null,

	      /**
	       * 几何标记的一些配置项，用于延迟生成图表
	       * @type {Object}
	       */
	      attrOptions: {},
	      // 样式配置项
	      styleOptions: null,
	      // 选中时的配置项
	      selectedOptions: null,
	      // active 时的配置项
	      activedOptions: null,
	      /**
	       * 某些类存在默认的adjust，不能更改 adjust
	       * @type {Boolean}
	       */
	      hasDefaultAdjust: false,
	      // 数据调整类型
	      adjusts: null,
	      /**
	       * 使用形状的类型
	       * @protected
	       * @type {String}
	       */
	      shapeType: null,
	      /**
	       * 是否生成多个点来绘制图形
	       * @protected
	       * @type {Boolean}
	       */
	      generatePoints: false,

	      /**
	       * 数据是否进行排序
	       * @type {Boolean}
	       */
	      sortable: false,

	      labelCfg: null,
	      /**
	       * 是否共享 tooltip
	       * @type {Boolean}
	       */
	      shareTooltip: true,
	      tooltipCfg: null,
	      /**
	       * 是否执行动画，默认执行
	       * @type {Boolean}
	       */
	      animate: true,
	      /**
	       * 动画配置
	       * @type {[type]}
	       */
	      animateCfg: null,
	      visible: true
	    };
	  };

	  function GeomBase(cfg) {
	    _classCallCheck(this, GeomBase);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    Util.assign(_this, TooltipMixin, ActiveMixin, SelectMixin);
	    if (_this.get('container')) {
	      _this._initContainer();
	    }
	    _this._initOptions();
	    return _this;
	  }

	  // 初始化时对配置项的格式化


	  GeomBase.prototype._initOptions = function _initOptions() {
	    var adjusts = this.get('adjusts');
	    if (adjusts) {
	      adjusts = parseAdjusts(adjusts);
	      this.set('adjusts', adjusts);
	    }
	  };

	  GeomBase.prototype._createScale = function _createScale(field, data) {
	    var scales = this.get('scales');
	    var scale = scales[field];
	    if (!scale) {
	      scale = this.get('view').createScale(field, data);
	      scales[field] = scale;
	    }
	    return scale;
	  };

	  GeomBase.prototype._setAttrOptions = function _setAttrOptions(attrName, attrCfg) {
	    var options = this.get('attrOptions');
	    options[attrName] = attrCfg;
	  };

	  GeomBase.prototype._createAttrOption = function _createAttrOption(attrName, field, cfg, defaultValues) {
	    var attrCfg = {};
	    attrCfg.field = field;
	    if (cfg) {
	      if (Util.isFunction(cfg)) {
	        attrCfg.callback = cfg;
	      } else {
	        attrCfg.values = cfg;
	      }
	    } else if (attrName !== 'color') {
	      attrCfg.values = defaultValues;
	    }
	    this._setAttrOptions(attrName, attrCfg);
	  };

	  /**
	   * 位置属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.position = function position(field) {
	    this._setAttrOptions('position', {
	      field: field
	    });
	    return this;
	  };

	  /**
	   * 颜色属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 颜色的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.color = function color(field, values) {
	    this._createAttrOption('color', field, values, Global.colors);
	    return this;
	  };

	  /**
	   * 大小属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 大小的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.size = function size(field, values) {
	    this._createAttrOption('size', field, values, Global.sizes);
	    return this;
	  };

	  /**
	   * 形状属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 大小的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.shape = function shape(field, values) {
	    var type = this.get('type');
	    var shapes = Global.shapes[type] || [];
	    this._createAttrOption('shape', field, values, shapes);
	    return this;
	  };

	  /**
	   * 透明度属性映射
	   * @chainable
	   * @param  {String} field 字段名
	   * @param  {Array|Function} values 透明度的数组或者回调函数
	   * @return {Geom} geom 当前几何标记
	   */


	  GeomBase.prototype.opacity = function opacity(field, values) {
	    this._createAttrOption('opacity', field, values, Global.opacities);
	    return this;
	  };

	  GeomBase.prototype.style = function style(field, cfg) {
	    var styleOptions = this.get('styleOptions');
	    if (!styleOptions) {
	      styleOptions = {};
	      this.set('styleOptions', styleOptions);
	    }
	    if (Util.isObject(field)) {
	      cfg = field;
	      field = null;
	    }
	    var fields = void 0;
	    if (field) {
	      fields = parseFields(field);
	    }
	    styleOptions.fields = fields;
	    styleOptions.style = cfg;
	    return this;
	  };

	  GeomBase.prototype.label = function label(field, callback, cfg) {
	    var self = this;
	    var labelCfg = self.get('labelCfg');
	    // const scales = Util.map(self.get('labelCfg').fields, field => self._createScale(field));
	    if (!labelCfg) {
	      labelCfg = {};
	      self.set('labelCfg', labelCfg);
	    }
	    var fields = void 0;
	    if (field) {
	      fields = parseFields(field);
	    }
	    labelCfg.fields = fields;
	    // 如果存在回调函数
	    if (Util.isFunction(callback)) {
	      if (!cfg) {
	        cfg = {};
	      }
	      cfg.content = callback;
	    } else if (Util.isObject(callback)) {
	      // 如果没有设置回调函数
	      cfg = callback;
	    }

	    labelCfg.cfg = cfg;

	    return this;
	  };

	  GeomBase.prototype.tooltip = function tooltip(field, cfg) {
	    var tooltipCfg = this.get('tooltipCfg');
	    if (!tooltipCfg) {
	      tooltipCfg = {};
	    }
	    if (field === false) {
	      // geom 关闭 tooltip
	      this.set('tooltipCfg', false);
	    } else {
	      var tooltipFields = void 0;
	      if (field) {
	        tooltipFields = parseFields(field);
	      }
	      tooltipCfg.fields = tooltipFields;
	      tooltipCfg.cfg = cfg;
	    }

	    this.set('tooltipCfg', tooltipCfg);
	    return this;
	  };

	  GeomBase.prototype.animate = function animate(cfg) {
	    this.set('animateCfg', cfg);
	    return this;
	  };

	  /**
	   * 是否允许使用默认的图形激活交互
	   * @param  {Boolean} enable 是否允许激活开关
	   * @param {Object} cfg 激活的配置项
	   * @return {Geom}    返回 geom 自身
	   */


	  GeomBase.prototype.active = function active(enable, cfg) {
	    if (enable === false) {
	      this.set('allowActive', false);
	    } else if (Util.isObject(enable)) {
	      this.set('allowActive', true);
	      this.set('activedOptions', enable);
	    } else {
	      this.set('allowActive', true);
	      this.set('activedOptions', cfg);
	    }
	    return this;
	  };

	  /**
	   * 对 geometry 进行数据调整
	   * @chainable
	   * @param  {String|Array|null} adjusts 数据调整的类型
	   * @return {Object} geometry 对象
	   */


	  GeomBase.prototype.adjust = function adjust(adjusts) {
	    if (!this.get('hasDefaultAdjust')) {
	      if (adjusts) {
	        adjusts = parseAdjusts(adjusts);
	      }
	      this.set('adjusts', adjusts);
	    }
	    return this;
	  };

	  /**
	   * 设置图形的选中模式
	   * @param  {Boolean|Object} enable 布尔类型用于模式开关，对象类型用于配置
	   * @param  {Object} cfg    选中配置项
	   * @return {Geom}          返回 geom 自身
	   */


	  GeomBase.prototype.select = function select(enable, cfg) {
	    if (enable === false) {
	      this.set('allowSelect', false);
	    } else if (Util.isObject(enable)) {
	      this.set('allowSelect', true);
	      this.set('selectedOptions', enable);
	    } else {
	      this.set('allowSelect', true);
	      this.set('selectedOptions', cfg);
	    }

	    return this;
	  };

	  GeomBase.prototype.hasAdjust = function hasAdjust(adjustType) {
	    var self = this;
	    var adjusts = self.get('adjusts');
	    if (!adjustType) {
	      return false;
	    }
	    var rst = false;
	    Util.each(adjusts, function (adjust) {
	      if (adjust.type === adjustType) {
	        rst = true;
	        return false;
	      }
	    });
	    return rst;
	  };

	  GeomBase.prototype.hasStack = function hasStack() {
	    var isStacked = this.get('isStacked');
	    if (Util.isNil(isStacked)) {
	      isStacked = this.hasAdjust('stack');
	      this.set('isStacked', isStacked);
	    }
	    return isStacked;
	  };

	  GeomBase.prototype.isInCircle = function isInCircle() {
	    var coord = this.get('coord');
	    return coord && coord.isPolar;
	  };

	  GeomBase.prototype._initContainer = function _initContainer() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    if (!shapeContainer) {
	      var container = self.get('container');
	      var view = self.get('view');
	      var viewId = view && view.get('_id');
	      shapeContainer = container.addGroup({
	        viewId: viewId,
	        visible: self.get('visible')
	      });
	      self.set('shapeContainer', shapeContainer);
	    }
	  };

	  GeomBase.prototype.init = function init() {
	    var self = this;
	    self._initContainer();
	    self._initAttrs();
	    if (self.get('tooltipCfg') && self.get('tooltipCfg').fields) {
	      var tooltipFields = self.get('tooltipCfg').fields;
	      Util.each(tooltipFields, function (field) {
	        self._createScale(field);
	      });
	    }
	    var dataArray = self._processData();
	    if (self.get('adjusts')) {
	      self._adjust(dataArray);
	    }
	    self.set('dataArray', dataArray);
	  };

	  // step 1: init attrs


	  GeomBase.prototype._initAttrs = function _initAttrs() {
	    var self = this;
	    var attrs = this.get('attrs');
	    var attrOptions = this.get('attrOptions');
	    var coord = self.get('coord');
	    var isPie = false;

	    for (var type in attrOptions) {
	      if (attrOptions.hasOwnProperty(type)) {
	        var option = attrOptions[type];
	        var className = Util.upperFirst(type);
	        var fields = parseFields(option.field);
	        if (type === 'position') {
	          option.coord = coord;
	          // 饼图坐标系下，填充一维
	          if (fields.length === 1 && coord.type === 'theta') {
	            fields.unshift('1');
	            isPie = true;
	          }
	        }
	        var scales = [];
	        for (var i = 0; i < fields.length; i++) {
	          var field = fields[i];
	          var scale = self._createScale(field);
	          if (type === 'color' && Util.isNil(option.values)) {
	            // 设置 color 的默认色值
	            if (scale.values.length <= 8) {
	              option.values = isPie ? Global.colors_pie : Global.colors;
	            } else if (scale.values.length <= 16) {
	              option.values = isPie ? Global.colors_pie_16 : Global.colors_16;
	            } else {
	              option.values = Global.colors_24;
	            }

	            if (Util.isNil(option.values)) {
	              option.values = Global.colors; // 防止主题没有声明诸如 colors_pie 的属性
	            }
	          }
	          scales.push(scale);
	        }
	        // 饼图需要填充满整个空间
	        if (coord.type === 'theta' && type === 'position' && scales.length > 1) {
	          var yScale = scales[1];
	          yScale.change({
	            nice: false,
	            min: 0,
	            max: Math.max.apply(null, yScale.values)
	          });
	        }
	        option.scales = scales;
	        var attr = new Attr[className](option);
	        attrs[type] = attr;
	      }
	    }
	  };
	  // step 2: 处理数据


	  GeomBase.prototype._processData = function _processData() {
	    var self = this;
	    var data = this.get('data');
	    var dataArray = [];
	    var groupedArray = this._groupData(data);
	    for (var i = 0; i < groupedArray.length; i++) {
	      var subData = groupedArray[i];
	      var tempData = self._saveOrigin(subData);
	      self._numberic(tempData);
	      dataArray.push(tempData);
	    }
	    return dataArray;
	  };

	  // step 2.1 数据分组


	  GeomBase.prototype._groupData = function _groupData(data) {
	    var groupScales = this._getGroupScales();
	    var fields = groupScales.map(function (scale) {
	      return scale.field;
	    });

	    return Util.Array.group(data, fields);
	  };

	  // step 2.2 数据调整前保存原始数据


	  GeomBase.prototype._saveOrigin = function _saveOrigin(data) {
	    var rst = [];
	    for (var i = 0; i < data.length; i++) {
	      var origin = data[i];
	      var obj = {};
	      for (var k in origin) {
	        obj[k] = origin[k];
	      }
	      // const obj = Util.mix({}, origin);
	      obj[FIELD_ORIGIN] = origin;
	      rst.push(obj);
	    }
	    return rst;
	  };

	  // step 2.3 将分类数据翻译成数据, 仅对位置相关的度量进行数字化处理


	  GeomBase.prototype._numberic = function _numberic(data) {
	    var positionAttr = this.getAttr('position');
	    var scales = positionAttr.scales;
	    for (var j = 0; j < data.length; j++) {
	      var obj = data[j];
	      for (var i = 0; i < Math.min(2, scales.length); i++) {
	        var scale = scales[i];
	        if (scale.isCategory) {
	          var field = scale.field;
	          obj[field] = scale.translate(obj[field]);
	        }
	      }
	    }
	  };

	  GeomBase.prototype._getGroupScales = function _getGroupScales() {
	    var self = this;
	    var scales = self.get('groupScales');
	    if (!scales) {
	      scales = [];
	      var attrs = self.get('attrs');
	      Util.each(attrs, function (attr) {
	        if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
	          var attrScales = attr.scales;
	          Util.each(attrScales, function (scale) {
	            if (scale.isCategory && Util.indexOf(scales, scale) === -1) {
	              scales.push(scale);
	            }
	          });
	        }
	      });
	      self.set('groupScales', scales);
	    }
	    return scales;
	  };

	  GeomBase.prototype._updateStackRange = function _updateStackRange(field, scale, dataArray) {
	    var mergeArray = Util.Array.merge(dataArray);
	    var min = scale.min;
	    var max = scale.max;
	    for (var i = 0; i < mergeArray.length; i++) {
	      var obj = mergeArray[i];
	      var tmpMin = Math.min.apply(null, obj[field]);
	      var tmpMax = Math.max.apply(null, obj[field]);
	      if (tmpMin < min) {
	        min = tmpMin;
	      }
	      if (tmpMax > max) {
	        max = tmpMax;
	      }
	    }
	    if (min < scale.min || max > scale.max) {
	      scale.change({
	        min: min,
	        max: max
	      });
	    }
	  };

	  // step 2.2 调整数据


	  GeomBase.prototype._adjust = function _adjust(dataArray) {
	    var self = this;
	    var adjusts = self.get('adjusts');

	    var yScale = self.getYScale();
	    var xScale = self.getXScale();
	    var xField = xScale.field;
	    var yField = yScale ? yScale.field : null;
	    Util.each(adjusts, function (adjust) {
	      var adjustCfg = Util.mix({
	        xField: xField,
	        yField: yField
	      }, adjust);
	      var adjustType = Util.upperFirst(adjust.type);
	      if (adjustType === 'Dodge') {
	        var adjustNames = [];
	        if (xScale.isCategory || xScale.isIdentity) {
	          adjustNames.push('x');
	        } else if (!yScale) {
	          adjustNames.push('y');
	        } else {
	          throw new Error('dodge is not support linear attribute, please use category attribute!');
	        }
	        adjustCfg.adjustNames = adjustNames;
	        /* if (self.isInCircle()) {
	          adjustCfg.dodgeRatio = 1;
	          adjustCfg.marginRatio = 0;
	        }*/
	      } else if (adjustType === 'Stack') {
	        var coord = self.get('coord');
	        if (!yScale) {
	          // 一维的情况下获取高度和默认size
	          adjustCfg.height = coord.getHeight();
	          var size = self.getDefaultValue('size') || 3;
	          adjustCfg.size = size;
	        }
	        // 不进行 transpose 时，用户又没有设置这个参数时，默认从上向下
	        if (!coord.isTransposed && Util.isNil(adjustCfg.reverseOrder)) {
	          adjustCfg.reverseOrder = true;
	        }
	      }
	      var adjustElement = new Adjust[adjustType](adjustCfg);
	      adjustElement.processAdjust(dataArray);
	      if (adjustType === 'Stack' && yScale) {
	        self._updateStackRange(yField, yScale, dataArray);
	      }
	    });
	  };

	  /**
	   * @internal 设置coord，通常外部容器变化时，coord 会发生变化
	   * @param {Object} coord 坐标系
	   */


	  GeomBase.prototype.setCoord = function setCoord(coord) {
	    this.set('coord', coord);
	    var position = this.getAttr('position');
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer.setMatrix(coord.matrix);
	    if (position) {
	      position.coord = coord;
	    }
	  };

	  // step 3 绘制


	  GeomBase.prototype.paint = function paint() {
	    var self = this;
	    var dataArray = self.get('dataArray');
	    var mappedArray = [];
	    var shapeFactory = self.getShapeFactory();
	    shapeFactory.setCoord(self.get('coord'));
	    var shapeContainer = self.get('shapeContainer');
	    self._beforeMapping(dataArray);
	    for (var i = 0; i < dataArray.length; i++) {
	      var data = dataArray[i];
	      var index = i;
	      data = self._mapping(data);
	      mappedArray.push(data);
	      self.draw(data, shapeContainer, shapeFactory, index);
	    }
	    if (self.get('labelCfg')) {
	      self._addLabels(Util.union.apply(null, mappedArray));
	    }

	    if (!self.get('sortable')) {
	      self._sort(mappedArray); // 便于数据的查找，需要对数据进行排序，用于 geom.findPoint()
	    } else {
	      self.set('dataArray', mappedArray);
	    }
	  };

	  GeomBase.prototype._sort = function _sort(mappedArray) {
	    var self = this;
	    var xScale = self.getXScale();
	    var xField = xScale.field;
	    Util.each(mappedArray, function (itemArr) {
	      itemArr.sort(function (obj1, obj2) {
	        return xScale.translate(obj1[FIELD_ORIGIN][xField]) - xScale.translate(obj2[FIELD_ORIGIN][xField]);
	      });
	    });

	    self.set('dataArray', mappedArray);
	  };

	  // step 3.1 before mapping


	  GeomBase.prototype._beforeMapping = function _beforeMapping(dataArray) {
	    var self = this;
	    if (self.get('sortable')) {
	      var xScale = self.getXScale();
	      var field = xScale.field;
	      Util.each(dataArray, function (data) {
	        data.sort(function (v1, v2) {
	          return xScale.translate(v1[field]) - xScale.translate(v2[field]);
	        });
	      });
	    }
	    if (self.get('generatePoints')) {
	      Util.each(dataArray, function (data) {
	        self._generatePoints(data);
	      });
	      Util.each(dataArray, function (data, index) {
	        var nextData = dataArray[index + 1];
	        if (nextData) {
	          data[0].nextPoints = nextData[0].points;
	        }
	      });
	    }
	  };

	  // step 3.2 add labels


	  GeomBase.prototype._addLabels = function _addLabels(points) {
	    var self = this;
	    var type = self.get('type');
	    var coord = self.get('coord');
	    var C = Labels.getLabelsClass(coord.type, type);
	    var container = self.get('container');
	    var scales = Util.map(self.get('labelCfg').fields, function (field) {
	      return self._createScale(field);
	    });
	    var labelContainer = container.addGroup(C, {
	      _id: this.get('_id'),
	      labelCfg: Util.mix({
	        scales: scales
	      }, self.get('labelCfg')),
	      coord: coord,
	      geom: self,
	      geomType: type,
	      visible: self.get('visible')
	    });
	    labelContainer.showLabels(points);
	    self.set('labelContainer', labelContainer);
	  };

	  /**
	   * @protected
	   * 获取图形的工厂类
	   * @return {Object} 工厂类对象
	   */


	  GeomBase.prototype.getShapeFactory = function getShapeFactory() {
	    var shapeFactory = this.get('shapeFactory');
	    if (!shapeFactory) {
	      var shapeType = this.get('shapeType');
	      shapeFactory = Shape.getShapeFactory(shapeType);
	      this.set('shapeFactory', shapeFactory);
	    }
	    return shapeFactory;
	  };

	  // step 3.2 generate points


	  GeomBase.prototype._generatePoints = function _generatePoints(data) {
	    var self = this;
	    var shapeFactory = self.getShapeFactory();
	    var shapeAttr = self.getAttr('shape');
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var cfg = self.createShapePointsCfg(obj);
	      var shape = shapeAttr ? self._getAttrValues(shapeAttr, obj) : null;
	      var points = shapeFactory.getShapePoints(shape, cfg);
	      obj.points = points;
	    }
	  };

	  /**
	   * 获取图形对应点的配置项
	   * @protected
	   * @param  {Object} obj 数据对象
	   * @return {Object} cfg 获取图形对应点的配置项
	   */


	  GeomBase.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var x = this._normalizeValues(obj[xScale.field], xScale);
	    var y = void 0; // 存在没有 y 的情况

	    if (yScale) {
	      y = this._normalizeValues(obj[yScale.field], yScale);
	    } else {
	      y = obj.y ? obj.y : 0.1;
	    }

	    return {
	      x: x,
	      y: y,
	      y0: yScale ? yScale.scale(this.getYMinValue()) : undefined
	    };
	  };

	  /**
	   * @protected
	   * 如果y轴的最小值小于0则返回0，否则返回最小值
	   * @return {Number} y轴上的最小值
	   */


	  GeomBase.prototype.getYMinValue = function getYMinValue() {
	    var yScale = this.getYScale();
	    var min = yScale.min;
	    var value = void 0;
	    if (min >= 0) {
	      value = min;
	    } else {
	      value = 0;
	    }
	    return value;
	  };

	  // 将数据归一化


	  GeomBase.prototype._normalizeValues = function _normalizeValues(values, scale) {
	    var rst = [];
	    if (Util.isArray(values)) {
	      for (var i = 0; i < values.length; i++) {
	        var v = values[i];
	        rst.push(scale.scale(v));
	      }
	    } else {
	      rst = scale.scale(values);
	    }
	    return rst;
	  };

	  // step 3.2 mapping


	  GeomBase.prototype._mapping = function _mapping(data) {
	    var self = this;
	    var attrs = self.get('attrs');
	    var mappedData = [];
	    for (var i = 0; i < data.length; i++) {
	      var record = data[i];
	      var newRecord = {};
	      newRecord[FIELD_ORIGIN] = record[FIELD_ORIGIN];
	      newRecord.points = record.points;
	      newRecord.nextPoints = record.nextPoints;
	      for (var k in attrs) {
	        if (attrs.hasOwnProperty(k)) {
	          var attr = attrs[k];
	          var names = attr.names;
	          var values = self._getAttrValues(attr, record);
	          if (names.length > 1) {
	            // position 之类的生成多个字段的属性
	            for (var j = 0; j < values.length; j++) {
	              var val = values[j];
	              var name = names[j];
	              newRecord[name] = Util.isArray(val) && val.length === 1 ? val[0] : val; // 只有一个值时返回第一个属性值
	            }
	          } else {
	            newRecord[names[0]] = values.length === 1 ? values[0] : values;
	          }
	        }
	      }
	      mappedData.push(newRecord);
	    }

	    return mappedData;
	  };

	  // 获取属性映射的值


	  GeomBase.prototype._getAttrValues = function _getAttrValues(attr, record) {
	    var scales = attr.scales;
	    var params = [];
	    for (var i = 0; i < scales.length; i++) {
	      var scale = scales[i];
	      var field = scale.field;
	      if (scale.type === 'identity') {
	        params.push(scale.value);
	      } else {
	        params.push(record[field]);
	      }
	    }
	    var values = attr.mapping.apply(attr, params);
	    return values;
	  };

	  GeomBase.prototype.getAttrValue = function getAttrValue(attrName, record) {
	    var attr = this.getAttr(attrName);
	    var rst = null;
	    if (attr) {
	      var values = this._getAttrValues(attr, record);
	      rst = values[0];
	    }
	    return rst;
	  };

	  GeomBase.prototype.getDefaultValue = function getDefaultValue(attrName) {
	    var value = this.get(attrName);
	    var attr = this.getAttr(attrName);
	    if (attr) {
	      var scale = attr.getScale(attrName);
	      if (scale.type === 'identity') {
	        value = scale.value;
	      }
	    }
	    return value;
	  };

	  /**
	   * step 3.3 draw
	   * @protected
	   * @param  {Array} data 绘制图形
	   * @param {Object} container 绘图容器
	   * @param {Object} shapeFactory 绘制图形的工厂类
	   * @param {Number} index 每个 shape 的索引值
	   */


	  GeomBase.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      self.drawPoint(obj, container, shapeFactory, index + i);
	    }
	  };

	  GeomBase.prototype.getCallbackCfg = function getCallbackCfg(fields, cfg, origin) {
	    if (!fields) {
	      return cfg;
	    }
	    var tmpCfg = {};
	    var params = fields.map(function (field) {
	      return origin[field];
	    });
	    Util.each(cfg, function (v, k) {
	      if (Util.isFunction(v)) {
	        tmpCfg[k] = v.apply(null, params);
	      } else {
	        tmpCfg[k] = v;
	      }
	    });
	    return tmpCfg;
	  };

	  GeomBase.prototype._getShapeId = function _getShapeId(dataObj) {
	    var id = this.get('_id');
	    var keyFields = this.get('keyFields');
	    if (keyFields && keyFields.length > 0) {
	      Util.each(keyFields, function (key) {
	        id += '-' + dataObj[key];
	      });
	    } else {
	      var type = this.get('type');
	      var xScale = this.getXScale();
	      var yScale = this.getYScale();
	      var xField = xScale.field || 'x';
	      var yField = yScale.field || 'y';
	      var yVal = dataObj[yField];
	      var xVal = void 0;
	      if (xScale.isIdentity) {
	        xVal = xScale.value;
	      } else {
	        xVal = dataObj[xField];
	      }

	      if (type === 'interval' || type === 'schema') {
	        id += '-' + xVal;
	      } else if (type === 'line' || type === 'area' || type === 'path') {
	        id += '-' + type;
	      } else {
	        id += '-' + xVal + '-' + yVal;
	      }

	      var groupScales = this._getGroupScales();
	      if (!Util.isEmpty(groupScales)) {
	        Util.each(groupScales, function (groupScale) {
	          var field = groupScale.field;
	          if (groupScale.type !== 'identity') {
	            id += '-' + dataObj[field];
	          }
	        });
	      }
	    }

	    return id;
	  };

	  GeomBase.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var self = this;
	    var cfg = {
	      origin: obj,
	      x: obj.x,
	      y: obj.y,
	      color: obj.color,
	      size: obj.size,
	      shape: obj.shape,
	      isInCircle: self.isInCircle(),
	      opacity: obj.opacity
	    };
	    var styleOptions = self.get('styleOptions');
	    if (styleOptions && styleOptions.style) {
	      cfg.style = self.getCallbackCfg(styleOptions.fields, styleOptions.style, obj[FIELD_ORIGIN]);
	    }
	    if (this.get('generatePoints')) {
	      cfg.points = obj.points;
	      cfg.nextPoints = obj.nextPoints;
	    }
	    if (this.get('animate')) {
	      // _id 字段仅用于动画
	      cfg._id = self._getShapeId(obj[FIELD_ORIGIN]);
	    }
	    return cfg;
	  };

	  GeomBase.prototype.appendShapeInfo = function appendShapeInfo(shape, index) {
	    if (shape) {
	      shape.setSilent('index', index);
	      shape.setSilent('coord', this.get('coord'));

	      if (this.get('animate') && this.get('animateCfg')) {
	        shape.setSilent('animateCfg', this.get('animateCfg'));
	      }
	    }
	  };

	  GeomBase.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
	    var shape = obj.shape;
	    var cfg = this.getDrawCfg(obj);
	    var geomShape = shapeFactory.drawShape(shape, cfg, container);
	    this.appendShapeInfo(geomShape, index);
	  };

	  /**
	   * 获取属性
	   * @protected
	   * @param {String} name 属性名
	   * @return {Scale} 度量
	   */


	  GeomBase.prototype.getAttr = function getAttr(name) {
	    return this.get('attrs')[name];
	  };

	  /**
	   * 获取 x 对应的度量
	   * @return {Scale} x 对应的度量
	   */


	  GeomBase.prototype.getXScale = function getXScale() {
	    return this.getAttr('position').scales[0];
	  };

	  /**
	   * 获取 y 对应的度量
	   * @return {Scale} y 对应的度量
	   */


	  GeomBase.prototype.getYScale = function getYScale() {
	    return this.getAttr('position').scales[1];
	  };

	  GeomBase.prototype.getShapes = function getShapes() {
	    var result = [];
	    var shapeContainer = this.get('shapeContainer');
	    var children = shapeContainer.get('children');
	    Util.each(children, function (child) {
	      if (child.get('origin')) {
	        // 过滤 label
	        result.push(child);
	      }
	    });
	    return result;
	  };

	  GeomBase.prototype.getAttrsForLegend = function getAttrsForLegend() {
	    var attrs = this.get('attrs');
	    var rst = [];
	    Util.each(attrs, function (attr) {
	      if (GROUP_ATTRS.indexOf(attr.type) !== -1) {
	        rst.push(attr);
	      }
	    });
	    return rst;
	  };

	  GeomBase.prototype.getFieldsForLegend = function getFieldsForLegend() {
	    var fields = [];
	    var attrOptions = this.get('attrOptions');
	    Util.each(GROUP_ATTRS, function (attrName) {
	      var attrCfg = attrOptions[attrName];
	      if (attrCfg && attrCfg.field && Util.isString(attrCfg.field)) {
	        fields = fields.concat(attrCfg.field.split('*'));
	      }
	    });
	    return Util.uniq(fields);
	  };

	  GeomBase.prototype.changeVisible = function changeVisible(visible, stopDraw) {
	    var me = this;
	    me.set('visible', visible);
	    var shapeContainer = this.get('shapeContainer');
	    if (shapeContainer) {
	      shapeContainer.set('visible', visible);
	    }
	    var labelContainer = this.get('labelContainer');
	    if (labelContainer) {
	      labelContainer.set('visible', visible);
	    }
	    if (!stopDraw && shapeContainer) {
	      var canvas = shapeContainer.get('canvas');
	      canvas.draw();
	    }
	  };

	  GeomBase.prototype.reset = function reset() {
	    this.set('attrOptions', {});
	    this.clearInner();
	  };

	  GeomBase.prototype.clearInner = function clearInner() {
	    this.clearActivedShapes();
	    this.clearSelected();
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer && shapeContainer.clear();

	    // 由于 Labels 对应的模块需要生成group，所以这个地方需要删除
	    var labelContainer = this.get('labelContainer');
	    labelContainer && labelContainer.remove();
	    this.set('attrs', {});
	    this.set('groupScales', null);
	    // if (!this.get('hasDefaultAdjust')) {
	    //   this.set('adjusts', null);
	    // }
	    this.set('labelContainer', null);
	    this.set('xDistance', null);
	    this.set('isStacked', null);
	  };

	  GeomBase.prototype.clear = function clear() {
	    this.clearInner();
	    this.set('scales', {});
	  };

	  GeomBase.prototype.destroy = function destroy() {
	    this.clear();
	    var shapeContainer = this.get('shapeContainer');
	    shapeContainer && shapeContainer.remove();
	    this.offEvents();
	    _Base.prototype.destroy.call(this);
	  };

	  GeomBase.prototype.bindEvents = function bindEvents() {
	    if (this.get('view')) {
	      this._bindActiveAction();
	      this._bindSelectedAction();
	    }
	  };

	  GeomBase.prototype.offEvents = function offEvents() {
	    if (this.get('view')) {
	      this._offActiveAction();
	      this._offSelectedAction();
	    }
	  };

	  return GeomBase;
	}(Base);

	module.exports = GeomBase;

	/***/ }),
	/* 17 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(69),
	    baseKeys = __webpack_require__(70),
	    isArrayLike = __webpack_require__(12);

	/**
	 * Creates an array of the own enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects. See the
	 * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * for more details.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keys(new Foo);
	 * // => ['a', 'b'] (iteration order is not guaranteed)
	 *
	 * _.keys('hi');
	 * // => ['0', '1']
	 */
	function keys(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
	}

	module.exports = keys;

	/***/ }),
	/* 18 */
	/***/ (function(module, exports, __webpack_require__) {

	var DataView = __webpack_require__(165),
	    Map = __webpack_require__(42),
	    Promise = __webpack_require__(166),
	    Set = __webpack_require__(78),
	    WeakMap = __webpack_require__(167),
	    baseGetTag = __webpack_require__(6),
	    toSource = __webpack_require__(67);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    objectTag = '[object Object]',
	    promiseTag = '[object Promise]',
	    setTag = '[object Set]',
	    weakMapTag = '[object WeakMap]';

	var dataViewTag = '[object DataView]';

	/** Used to detect maps, sets, and weakmaps. */
	var dataViewCtorString = toSource(DataView),
	    mapCtorString = toSource(Map),
	    promiseCtorString = toSource(Promise),
	    setCtorString = toSource(Set),
	    weakMapCtorString = toSource(WeakMap);

	/**
	 * Gets the `toStringTag` of `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the `toStringTag`.
	 */
	var getTag = baseGetTag;

	// Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
	if (DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag || Map && getTag(new Map()) != mapTag || Promise && getTag(Promise.resolve()) != promiseTag || Set && getTag(new Set()) != setTag || WeakMap && getTag(new WeakMap()) != weakMapTag) {
	    getTag = function getTag(value) {
	        var result = baseGetTag(value),
	            Ctor = result == objectTag ? value.constructor : undefined,
	            ctorString = Ctor ? toSource(Ctor) : '';

	        if (ctorString) {
	            switch (ctorString) {
	                case dataViewCtorString:
	                    return dataViewTag;
	                case mapCtorString:
	                    return mapTag;
	                case promiseCtorString:
	                    return promiseTag;
	                case setCtorString:
	                    return setTag;
	                case weakMapCtorString:
	                    return weakMapTag;
	            }
	        }
	        return result;
	    };
	}

	module.exports = getTag;

	/***/ }),
	/* 19 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var symbolTag = '[object Symbol]';

	/**
	 * Checks if `value` is classified as a `Symbol` primitive or object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
	 * @example
	 *
	 * _.isSymbol(Symbol.iterator);
	 * // => true
	 *
	 * _.isSymbol('abc');
	 * // => false
	 */
	function isSymbol(value) {
	    return (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;
	}

	module.exports = isSymbol;

	/***/ }),
	/* 20 */
	/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Converts `value` to a string key if it's not a string or symbol.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @returns {string|symbol} Returns the key.
	 */
	function toKey(value) {
	  if (typeof value == 'string' || isSymbol(value)) {
	    return value;
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	module.exports = toKey;

	/***/ }),
	/* 21 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview adjust the points position
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var DEFAULT_Y = 0; // 默认的y的值

	/**
	 * 数据调整的基类
	 * @class Adjust
	 */

	var Adjust = function () {
	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Adjust.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 调整对应的x方向对应的字段名称
	       * @type {Scale}
	       */
	      xField: null,
	      /**
	       * 调整对应的y方向对应的字段名称
	       * @type {Scale}
	       */
	      yField: null,

	      /**
	       * 调整的维度，默认,x,y都做调整
	       * @type {Array}
	       */
	      adjustNames: ['x', 'y'], // 指x,y

	      /**
	       * 参与分组的数据维度
	       * @type {Array}
	       */
	      groupFields: null
	    };
	  };

	  function Adjust(cfg) {
	    _classCallCheck(this, Adjust);

	    var defaultCfg = this.getDefaultCfg();
	    Util.assign(this, defaultCfg, cfg);
	  }

	  /**
	   * 对应的维度是否可以调整
	   * @protected
	   * @param  {String}  dimName 可以调整的维度 x,y
	   * @return {Boolean} 是否可以调整
	   */


	  Adjust.prototype.isAdjust = function isAdjust(dimName) {
	    return this.adjustNames.indexOf(dimName) >= 0;
	  };

	  /**
	   * @protected
	   * adjust data
	   * @param  {Array} dataArray data array
	   */


	  Adjust.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);

	    self.adjDataArray = dataArray;
	    self.mergeData = mergeData;
	    self.adjustData(dataArray, mergeData);
	    self.adjFrames = null;
	    self.mergeData = null;
	  };

	  /**
	   * @protected
	   * 获取可调整度量对应的值
	   * @param  {Frame} mergeData 数据
	   * @return {Object} 值的映射
	   */


	  Adjust.prototype._getDimValues = function _getDimValues(mergeData) {
	    var self = this;
	    var valuesMap = {};
	    var dims = [];
	    if (self.xField && self.isAdjust('x')) {
	      dims.push(self.xField);
	    }
	    if (self.yField && self.isAdjust('y')) {
	      dims.push(self.yField);
	    }
	    Util.each(dims, function (dim) {
	      var values = Util.Array.values(mergeData, dim);
	      values.sort(function (v1, v2) {
	        return v1 - v2;
	      });
	      valuesMap[dim] = values;
	    });
	    if (!self.yField && self.isAdjust('y')) {
	      // 只有一维的情况下,同时调整y
	      var dim = 'y';
	      var values = [DEFAULT_Y, 1]; // 默认分布在y轴的 0.1 与 0.2 之间
	      valuesMap[dim] = values;
	    }
	    return valuesMap;
	  };

	  Adjust.prototype.adjustData = function adjustData(dataArray, mergeData) {
	    var self = this;
	    var valuesMap = self._getDimValues(mergeData);
	    Util.each(dataArray, function (data, index) {
	      // 遍历所有数据集合
	      Util.each(valuesMap, function (values, dim) {
	        // 根据不同的度量分别调整位置
	        self.adjustDim(dim, values, data, dataArray.length, index);
	      });
	    });
	  };

	  Adjust.prototype.adjustDim = function adjustDim() /* dim, values, data, length, index */{};

	  Adjust.prototype.getAdjustRange = function getAdjustRange(dim, key, values) {
	    var self = this;
	    var index = values.indexOf(key);
	    var length = values.length;
	    var pre = void 0;
	    var next = void 0;
	    if (!self.yField && self.isAdjust('y')) {
	      pre = 0;
	      next = 1;
	    } else if (length > 1) {
	      pre = index === 0 ? values[0] : values[index - 1];
	      next = index === length - 1 ? values[length - 1] : values[index + 1];

	      if (index !== 0) {
	        pre += (key - pre) / 2;
	      } else {
	        pre -= (next - key) / 2;
	      }
	      if (index !== length - 1) {
	        next -= (next - key) / 2;
	      } else {
	        next += (key - values[length - 2]) / 2;
	      }
	    } else {
	      pre = key === 0 ? 0 : key - 0.5;
	      next = key === 0 ? 1 : key + 0.5;
	    }

	    return {
	      pre: pre,
	      next: next
	    };
	  };

	  /**
	   * 对数据进行分组
	   * @param  {Array} data 数据
	   * @param  {String} dim 分组的字段
	   * @return {Object}  分组的键值对映射
	   */


	  Adjust.prototype.groupData = function groupData(data, dim) {
	    var groups = {};

	    Util.each(data, function (record) {
	      var value = record[dim];
	      if (value === undefined) {
	        value = record[dim] = DEFAULT_Y;
	      }
	      if (!groups[value]) {
	        groups[value] = [];
	      }
	      groups[value].push(record);
	    });

	    return groups;
	  };

	  return Adjust;
	}();

	module.exports = Adjust;

	/***/ }),
	/* 22 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算path 使用的工具方法
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Spline = __webpack_require__(286);

	function points2path(points, isInCircle) {
	  if (!points.length) {
	    return [];
	  }
	  var path = [];

	  for (var i = 0, length = points.length; i < length; i++) {
	    var item = points[i];
	    if (i === 0) {
	      path.push(['M', item.x, item.y]);
	    } else {
	      path.push(['L', item.x, item.y]);
	    }
	  }

	  if (isInCircle) {
	    path.push(['Z']);
	  }
	  return path;
	}

	function _getPointRadius(coord, point) {
	  var center = coord.getCenter();
	  var r = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	  return r;
	}

	function convertArr(arr, coord) {
	  var len = arr.length;
	  var tmp = [arr[0]];
	  for (var i = 1; i < len; i = i + 2) {
	    var point = coord.convertPoint({
	      x: arr[i],
	      y: arr[i + 1]
	    });
	    tmp.push(point.x, point.y);
	  }
	  return tmp;
	}

	function _convertPolarPath(pre, cur, coord) {
	  // const radius = coord.getRadius();
	  // const inner = coord.innerRadius || 0;
	  // let innerRadius = inner * radius;
	  var transposed = coord.isTransposed;
	  var startAngle = coord.startAngle;
	  var endAngle = coord.endAngle;

	  var prePoint = {
	    x: pre[1],
	    y: pre[2]
	  };
	  var curPoint = {
	    x: cur[1],
	    y: cur[2]
	  };
	  var rst = [];
	  // innerRadius = innerRadius || 0;
	  var xDim = transposed ? 'y' : 'x';
	  var angleRange = Math.abs(curPoint[xDim] - prePoint[xDim]) * (endAngle - startAngle);
	  var direction = curPoint[xDim] >= prePoint[xDim] ? 1 : 0; // 圆弧的方向
	  var flag = angleRange > Math.PI ? 1 : 0; // 大弧还是小弧标志位
	  var convertPoint = coord.convertPoint(curPoint);
	  var r = _getPointRadius(coord, convertPoint);
	  if (r >= 0.5) {
	    // 小于1像素的圆在图像上无法识别
	    if (angleRange === Math.PI * 2) {
	      var middlePoint = {
	        x: (curPoint.x + prePoint.x) / 2,
	        y: (curPoint.y + prePoint.y) / 2
	      };
	      var middleConvertPoint = coord.convertPoint(middlePoint);
	      rst.push(['A', r, r, 0, flag, direction, middleConvertPoint.x, middleConvertPoint.y]);
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    } else {
	      rst.push(['A', r, r, 0, flag, direction, convertPoint.x, convertPoint.y]);
	    }
	  }
	  return rst;
	}

	// 当存在整体的圆时，去除圆前面和后面的线，防止出现直线穿过整个圆的情形
	function filterFullCirleLine(path) {
	  Util.each(path, function (subPath, index) {
	    var cur = subPath;
	    if (cur[0].toLowerCase() === 'a') {
	      var pre = path[index - 1];
	      var next = path[index + 1];
	      if (next && next[0].toLowerCase() === 'a') {
	        if (pre && pre[0].toLowerCase() === 'l') {
	          pre[0] = 'M';
	        }
	      } else if (pre && pre[0].toLowerCase() === 'a') {
	        if (next && next[0].toLowerCase() === 'l') {
	          next[0] = 'M';
	        }
	      }
	    }
	  });
	}

	var PathUtil = {
	  // 线的path
	  getLinePath: function getLinePath(points, isInCircle) {
	    return points2path(points, isInCircle);
	  },

	  // get spline： 限定了范围的平滑线
	  getSplinePath: function getSplinePath(points, isInCircle, constaint) {
	    var data = [];
	    var first = points[0];
	    var prePoint = null;
	    if (points.length <= 2) {
	      return PathUtil.getLinePath(points, isInCircle);
	    }
	    Util.each(points, function (point) {
	      if (!prePoint || !(prePoint.x === point.x && prePoint.y === point.y)) {
	        data.push(point.x);
	        data.push(point.y);
	        prePoint = point;
	      }
	    });
	    constaint = constaint || [// 范围
	    [0, 0], [1, 1]];
	    var splinePath = Spline.catmullRom2bezier(data, isInCircle, constaint);
	    splinePath.unshift(['M', first.x, first.y]);
	    return splinePath;
	  },
	  getPointRadius: function getPointRadius(coord, point) {
	    var result = _getPointRadius(coord, point);
	    return result;
	  },
	  getPointAngle: function getPointAngle(coord, point) {
	    var center = coord.getCenter();
	    var angle = Math.atan2(point.y - center.y, point.x - center.x);
	    return angle;
	  },
	  convertNormalPath: function convertNormalPath(coord, path) {
	    var tmp = [];
	    Util.each(path, function (subPath) {
	      var action = subPath[0];
	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'l':
	        case 'c':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    return tmp;
	  },
	  convertPolarPath: function convertPolarPath(coord, path) {
	    var tmp = [];
	    var pre = void 0;
	    var cur = void 0;
	    var transposed = void 0;
	    var equals = void 0;
	    Util.each(path, function (subPath, index) {
	      var action = subPath[0];

	      switch (action.toLowerCase()) {
	        case 'm':
	        case 'c':
	        case 'q':
	          tmp.push(convertArr(subPath, coord));
	          break;
	        case 'l':
	          pre = path[index - 1];
	          cur = subPath;
	          transposed = coord.isTransposed;
	          // 是否半径相同，转换成圆弧
	          equals = transposed ? pre[pre.length - 2] === cur[1] : pre[pre.length - 1] === cur[2];
	          if (equals) {
	            tmp = tmp.concat(_convertPolarPath(pre, cur, coord));
	          } else {
	            // y 不相等，所以直接转换
	            tmp.push(convertArr(subPath, coord));
	          }
	          break;
	        case 'z':
	        default:
	          tmp.push(subPath);
	          break;
	      }
	    });
	    filterFullCirleLine(tmp); // 过滤多余的直线
	    return tmp;
	  }
	};

	module.exports = PathUtil;

	/***/ }),
	/* 23 */
	/***/ (function(module, exports) {

	module.exports = function (module) {
		if (!module.webpackPolyfill) {
			module.deprecate = function () {};
			module.paths = [];
			// module.parent = undefined by default
			if (!module.children) module.children = [];
			Object.defineProperty(module, "loaded", {
				enumerable: true,
				get: function get() {
					return module.l;
				}
			});
			Object.defineProperty(module, "id", {
				enumerable: true,
				get: function get() {
					return module.i;
				}
			});
			module.webpackPolyfill = 1;
		}
		return module;
	};

	/***/ }),
	/* 24 */
	/***/ (function(module, exports, __webpack_require__) {

	var listCacheClear = __webpack_require__(121),
	    listCacheDelete = __webpack_require__(122),
	    listCacheGet = __webpack_require__(123),
	    listCacheHas = __webpack_require__(124),
	    listCacheSet = __webpack_require__(125);

	/**
	 * Creates an list cache object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function ListCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `ListCache`.
	ListCache.prototype.clear = listCacheClear;
	ListCache.prototype['delete'] = listCacheDelete;
	ListCache.prototype.get = listCacheGet;
	ListCache.prototype.has = listCacheHas;
	ListCache.prototype.set = listCacheSet;

	module.exports = ListCache;

	/***/ }),
	/* 25 */
	/***/ (function(module, exports, __webpack_require__) {

	var eq = __webpack_require__(41);

	/**
	 * Gets the index at which the `key` is found in `array` of key-value pairs.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} key The key to search for.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function assocIndexOf(array, key) {
	  var length = array.length;
	  while (length--) {
	    if (eq(array[length][0], key)) {
	      return length;
	    }
	  }
	  return -1;
	}

	module.exports = assocIndexOf;

	/***/ }),
	/* 26 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8);

	/* Built-in method references that are verified to be native. */
	var nativeCreate = getNative(Object, 'create');

	module.exports = nativeCreate;

	/***/ }),
	/* 27 */
	/***/ (function(module, exports, __webpack_require__) {

	var isKeyable = __webpack_require__(146);

	/**
	 * Gets the data for `map`.
	 *
	 * @private
	 * @param {Object} map The map to query.
	 * @param {string} key The reference key.
	 * @returns {*} Returns the map data.
	 */
	function getMapData(map, key) {
	  var data = map.__data__;
	  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;
	}

	module.exports = getMapData;

	/***/ }),
	/* 28 */
	/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(44),
	    baseAssignValue = __webpack_require__(45);

	/**
	 * Copies properties of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy properties from.
	 * @param {Array} props The property identifiers to copy.
	 * @param {Object} [object={}] The object to copy properties to.
	 * @param {Function} [customizer] The function to customize copied values.
	 * @returns {Object} Returns `object`.
	 */
	function copyObject(source, props, object, customizer) {
	  var isNew = !object;
	  object || (object = {});

	  var index = -1,
	      length = props.length;

	  while (++index < length) {
	    var key = props[index];

	    var newValue = customizer ? customizer(object[key], source[key], key, object, source) : undefined;

	    if (newValue === undefined) {
	      newValue = source[key];
	    }
	    if (isNew) {
	      baseAssignValue(object, key, newValue);
	    } else {
	      assignValue(object, key, newValue);
	    }
	  }
	  return object;
	}

	module.exports = copyObject;

	/***/ }),
	/* 29 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsArguments = __webpack_require__(153),
	    isObjectLike = __webpack_require__(5);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/**
	 * Checks if `value` is likely an `arguments` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArguments(function() { return arguments; }());
	 * // => true
	 *
	 * _.isArguments([1, 2, 3]);
	 * // => false
	 */
	var isArguments = baseIsArguments(function () {
	    return arguments;
	}()) ? baseIsArguments : function (value) {
	    return isObjectLike(value) && hasOwnProperty.call(value, 'callee') && !propertyIsEnumerable.call(value, 'callee');
	};

	module.exports = isArguments;

	/***/ }),
	/* 30 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var root = __webpack_require__(4),
	    stubFalse = __webpack_require__(154);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

	/**
	 * Checks if `value` is a buffer.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
	 * @example
	 *
	 * _.isBuffer(new Buffer(2));
	 * // => true
	 *
	 * _.isBuffer(new Uint8Array(2));
	 * // => false
	 */
	var isBuffer = nativeIsBuffer || stubFalse;

	module.exports = isBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 31 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.unary` without support for storing metadata.
	 *
	 * @private
	 * @param {Function} func The function to cap arguments for.
	 * @returns {Function} Returns the new capped function.
	 */
	function baseUnary(func) {
	  return function (value) {
	    return func(value);
	  };
	}

	module.exports = baseUnary;

	/***/ }),
	/* 32 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var freeGlobal = __webpack_require__(66);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Detect free variable `process` from Node.js. */
	var freeProcess = moduleExports && freeGlobal.process;

	/** Used to access faster Node.js helpers. */
	var nodeUtil = function () {
	  try {
	    return freeProcess && freeProcess.binding && freeProcess.binding('util');
	  } catch (e) {}
	}();

	module.exports = nodeUtil;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 33 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Checks if `value` is likely a prototype object.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
	 */
	function isPrototype(value) {
	  var Ctor = value && value.constructor,
	      proto = typeof Ctor == 'function' && Ctor.prototype || objectProto;

	  return value === proto;
	}

	module.exports = isPrototype;

	/***/ }),
	/* 34 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseForOwn = __webpack_require__(182),
	    createBaseEach = __webpack_require__(185);

	/**
	 * The base implementation of `_.forEach` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array|Object} Returns `collection`.
	 */
	var baseEach = createBaseEach(baseForOwn);

	module.exports = baseEach;

	/***/ }),
	/* 35 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArray = __webpack_require__(3),
	    isKey = __webpack_require__(56),
	    stringToPath = __webpack_require__(198),
	    toString = __webpack_require__(14);

	/**
	 * Casts `value` to a path array if it's not one.
	 *
	 * @private
	 * @param {*} value The value to inspect.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {Array} Returns the cast property path array.
	 */
	function castPath(value, object) {
	  if (isArray(value)) {
	    return value;
	  }
	  return isKey(value, object) ? [value] : stringToPath(toString(value));
	}

	module.exports = castPath;

	/***/ }),
	/* 36 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of scale
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	/**
	 * 度量的构造函数
	 * @class Scale
	 */

	var Scale = function () {

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Scale.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'base',

	      /**
	       * 格式化函数,输出文本或者tick时的格式化函数
	       * @type {Function}
	       */
	      formatter: null,

	      /**
	       * 输出的值域
	       * @type {Array}
	       */
	      range: [0, 1],

	      /**
	       * 度量的标记
	       * @type {Array}
	       */
	      ticks: null,

	      /**
	       * 参与度量计算的值，可选项
	       * @type {Array}
	       */
	      values: []
	    };
	  };

	  function Scale(cfg) {
	    _classCallCheck(this, Scale);

	    var defaultCfg = this.getDefaultCfg();
	    Util.mix(this, defaultCfg, cfg);
	    this.init();
	  }

	  /**
	   * 度量初始化
	   * @protected
	   */


	  Scale.prototype.init = function init() {};

	  /**
	   * 获取该度量的ticks,返回的是多个对象，
	   *   - text: tick 的文本
	   *   - value: 对应的度量转换后的值
	   * <code>
	   *   [
	   *     {text: 0,value:0}
	   *     {text: 1,value:0.2}
	   *     {text: 2,value:0.4}
	   *     {text: 3,value:0.6}
	   *     {text: 4,value:0.8}
	   *     {text: 5,value:1}
	   *   ]
	   * </code>
	   * @param {Number} count 输出tick的个数的近似值，默认是 10
	   * @return {Array} 返回 ticks 数组
	   */


	  Scale.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = self.ticks;
	    var rst = [];
	    Util.each(ticks, function (tick) {
	      var obj = void 0;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: self.getText(tick),
	          tickValue: tick,
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  /**
	   * 获取格式化后的文本
	   * @param  {*} value 输入的数据
	   * @return {String} 格式化的文本
	   */


	  Scale.prototype.getText = function getText(value) {
	    var formatter = this.formatter;
	    value = formatter ? formatter(value) : value;
	    if (Util.isNil(value) || !value.toString) {
	      value = '';
	    }
	    return value.toString();
	  };
	  /**
	   * 输出的值域最小值
	   * @protected
	   * @return {Number} 返回最小的值
	   */


	  Scale.prototype.rangeMin = function rangeMin() {
	    return this.range[0];
	  };
	  /**
	   * 输出的值域最大值
	   * @protected
	   * @return {Number} 返回最大的值
	   */


	  Scale.prototype.rangeMax = function rangeMax() {
	    var range = this.range;
	    return range[range.length - 1];
	  };

	  /**
	   * 度量转换后的结果，翻转回输入域
	   * @param  {Number} value 需要翻转的数值
	   * @return {*} 度量的输入值
	   */


	  Scale.prototype.invert = function invert(value) {
	    return value;
	  };
	  /**
	   * 将传入的值从非数值转换成数值格式，如分类字符串、时间字符串等
	   * @param  {*} value 传入的值
	   * @return {Number} 转换的值
	   */


	  Scale.prototype.translate = function translate(value) {
	    return value;
	  };
	  /**
	   * 进行度量转换
	   * @param  {*} value 输入值
	   * @return {Number} 输出值，在设定的输出值域之间，默认[0,1]
	   */


	  Scale.prototype.scale = function scale(value) {
	    return value;
	  };
	  /**
	   * 克隆一个新的scale,拥有跟当前scale相同的输入域、输出域等
	   * @return {Scale} 克隆的度量
	   */


	  Scale.prototype.clone = function clone() {
	    var self = this;
	    var constr = self.constructor;
	    var cfg = {};
	    Util.each(self, function (v, k) {
	      cfg[k] = self[k];
	    });
	    return new constr(cfg);
	  };
	  /**
	   * 更改度量的属性信息
	   * @param  {Object} info 属性信息
	   * @chainable
	   * @return {Scale} 返回自身的引用
	   */


	  Scale.prototype.change = function change(info) {
	    this.ticks = null;
	    Util.mix(this, info);
	    this.init();
	    return this;
	  };

	  return Scale;
	}();

	module.exports = Scale;

	/***/ }),
	/* 37 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);
	var numberAuto = __webpack_require__(292);

	/**
	 * 线性度量
	 * @class Scale.Linear
	 */

	var Linear = function (_Base) {
	  _inherits(Linear, _Base);

	  function Linear() {
	    _classCallCheck(this, Linear);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Linear.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'linear',

	      /**
	       * 是否线性
	       * @type {Boolean}
	       * @readOnly
	       * @default true
	       */
	      isLinear: true,

	      /**
	       * min value of the scale
	       * @type {Number}
	       * @default null
	       */
	      min: null,

	      /**
	       * min value limitted of the scale
	       * @type {Number}
	       * @default null
	       */
	      minLimit: null,

	      /**
	       * max value of the scale
	       * @type {Number}
	       * @default null
	       */
	      max: null,

	      /**
	       * max value limitted of the scale
	       * @type {Number}
	       * @default null
	       */
	      maxLimit: null,

	      /**
	       * 是否为了用户习惯，优化min,max和ticks，如果进行优化，则会根据生成的ticks调整min,max，否则舍弃(min,max)范围之外的ticks
	       * @type {Boolean}
	       * @default false
	       */
	      nice: false,

	      /**
	       * 自动生成标记时的个数
	       * @type {Number}
	       * @default null
	       */
	      tickCount: null,

	      /**
	       * 坐标轴点之间的间距，指的是真实数据的差值
	       * @type {Number}
	       * @default null
	       */
	      tickInterval: null,

	      /**
	       * 用于计算坐标点时逼近的数组
	       * @type {Array}
	       */
	      snapArray: null
	    });
	  };
	  /**
	   * @protected
	   * @override
	   */


	  Linear.prototype.init = function init() {
	    var self = this;
	    if (!self.ticks) {
	      self.min = self.translate(self.min);
	      self.max = self.translate(self.max);
	      self.initTicks();
	    } else {
	      var ticks = self.ticks;
	      var firstValue = self.translate(ticks[0]);
	      var lastValue = self.translate(ticks[ticks.length - 1]);
	      if (Util.isNil(self.min) || self.min > firstValue) {
	        self.min = firstValue;
	      }
	      if (Util.isNil(self.max) || self.max < lastValue) {
	        self.max = lastValue;
	      }
	    }
	  };

	  /**
	   * 计算坐标点
	   * @protected
	   * @return {Array} 计算完成的坐标点
	   */


	  Linear.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    if (max < min) {
	      throw new Error('max: ' + max + ' should not be less than min: ' + min);
	    }
	    var tmp = numberAuto({
	      min: min,
	      max: max,
	      minLimit: self.minLimit,
	      maxLimit: self.maxLimit,
	      minCount: count,
	      maxCount: count,
	      interval: interval,
	      snapArray: this.snapArray
	    });
	    return tmp.ticks;
	  };

	  // 初始化ticks


	  Linear.prototype.initTicks = function initTicks() {
	    var self = this;
	    var calTicks = self.calculateTicks();
	    if (self.nice) {
	      // 如果需要优化显示的tick
	      self.ticks = calTicks;
	      self.min = calTicks[0];
	      self.max = calTicks[calTicks.length - 1];
	    } else {
	      var ticks = [];
	      Util.each(calTicks, function (tick) {
	        if (tick >= self.min && tick <= self.max) {
	          ticks.push(tick);
	        }
	      });
	      // 如果 ticks 为空，直接输入最小值、最大值
	      if (!ticks.length) {
	        ticks.push(self.min);
	        ticks.push(self.max);
	      }
	      self.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */


	  Linear.prototype.scale = function scale(value) {
	    if (value === null || value === undefined) {
	      return NaN;
	    }
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }

	    var percent = (value - min) / (max - min);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Linear.prototype.invert = function invert(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    return this.min + percent * (this.max - this.min);
	  };

	  return Linear;
	}(Base);

	module.exports = Linear;

	/***/ }),
	/* 38 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview the base class of Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var mat3 = MatrixUtil.mat3;
	var vec3 = MatrixUtil.vec3;

	var Coord = function () {
	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Coord.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * Mark x y is transposed.
	       * @type {Boolean}
	       */
	      isTransposed: false,
	      /**
	       * The matrix of coordinate
	       * @type {Array}
	       */
	      matrix: [1, 0, 0, 0, 1, 0, 0, 0, 1]
	    };
	  };

	  function Coord(cfg) {
	    _classCallCheck(this, Coord);

	    var defaultCfg = this.getDefaultCfg();
	    Util.mix(this, defaultCfg, cfg);
	    this.init();
	  }

	  Coord.prototype.init = function init() {
	    var start = this.start;
	    var end = this.end;
	    var center = {
	      x: (start.x + end.x) / 2,
	      y: (start.y + end.y) / 2
	    };

	    this.center = center;
	    this.width = Math.abs(end.x - start.x);
	    this.height = Math.abs(end.y - start.y);
	  };

	  Coord.prototype._swapDim = function _swapDim(dim) {
	    var dimRange = this[dim];
	    if (dimRange) {
	      var tmp = dimRange.start;
	      dimRange.start = dimRange.end;
	      dimRange.end = tmp;
	    }
	  };

	  Coord.prototype.getCenter = function getCenter() {
	    return this.center;
	  };

	  Coord.prototype.getWidth = function getWidth() {
	    return this.width;
	  };

	  Coord.prototype.getHeight = function getHeight() {
	    return this.height;
	  };

	  Coord.prototype.convertDim = function convertDim(percent, dim) {
	    var _dim = this[dim],
	        start = _dim.start,
	        end = _dim.end;

	    return start + percent * (end - start);
	  };

	  Coord.prototype.invertDim = function invertDim(value, dim) {
	    var _dim2 = this[dim],
	        start = _dim2.start,
	        end = _dim2.end;

	    return (value - start) / (end - start);
	  };

	  /**
	   * 将归一化的坐标点数据转换为画布坐标
	   * @override
	   * @param  {Object} point 归一化的坐标点
	   * @return {Object}       返回画布坐标
	   */


	  Coord.prototype.convertPoint = function convertPoint(point) {
	    return point;
	  };

	  /**
	   * 将画布坐标转换为归一化的坐标点数据
	   * @override
	   * @param  {Object} point 画布坐标点数据
	   * @return {Object}       归一化后的数据点
	   */


	  Coord.prototype.invertPoint = function invertPoint(point) {
	    return point;
	  };

	  /**
	   * 将坐标点进行矩阵变换
	   * @param  {Number} x   对应 x 轴画布坐标
	   * @param  {Number} y   对应 y 轴画布坐标
	   * @param  {Number} tag 默认为 0，可取值 0, 1
	   * @return {Array}     返回变换后的三阶向量 [x, y, z]
	   */


	  Coord.prototype.applyMatrix = function applyMatrix(x, y) {
	    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var matrix = this.matrix;
	    var vector = [x, y, tag];
	    vec3.transformMat3(vector, vector, matrix);
	    return vector;
	  };

	  /**
	   * 将坐标点进行矩阵逆变换
	   * @param  {Number} x   对应 x 轴画布坐标
	   * @param  {Number} y   对应 y 轴画布坐标
	   * @param  {Number} tag 默认为 0，可取值 0, 1
	   * @return {Array}     返回矩阵逆变换后的三阶向量 [x, y, z]
	   */


	  Coord.prototype.invertMatrix = function invertMatrix(x, y) {
	    var tag = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var matrix = this.matrix;
	    var inversedMatrix = mat3.invert([], matrix);
	    var vector = [x, y, tag];
	    vec3.transformMat3(vector, vector, inversedMatrix);
	    return vector;
	  };

	  /**
	   * 将归一化的坐标点数据转换为画布坐标，并根据坐标系当前矩阵进行变换
	   * @param  {Object} point 归一化的坐标点
	   * @return {Object}       返回进行矩阵变换后的画布坐标
	   */


	  Coord.prototype.convert = function convert(point) {
	    var _convertPoint = this.convertPoint(point),
	        x = _convertPoint.x,
	        y = _convertPoint.y;

	    var vector = this.applyMatrix(x, y, 1);
	    return {
	      x: vector[0],
	      y: vector[1]
	    };
	  };

	  /**
	   * 将进行过矩阵变换画布坐标转换为归一化坐标
	   * @param  {Object} point 画布坐标
	   * @return {Object}       返回归一化的坐标点
	   */


	  Coord.prototype.invert = function invert(point) {
	    var vector = this.invertMatrix(point.x, point.y, 1);
	    return this.invertPoint({
	      x: vector[0],
	      y: vector[1]
	    });
	  };

	  /**
	   * 坐标系旋转变换
	   * @param  {Number} radian 旋转弧度
	   * @return {Object}        返回坐标系对象
	   */


	  Coord.prototype.rotate = function rotate(radian) {
	    var matrix = this.matrix;
	    var center = this.center;
	    mat3.translate(matrix, matrix, [-center.x, -center.y]);
	    mat3.rotate(matrix, matrix, radian);
	    mat3.translate(matrix, matrix, [center.x, center.y]);
	    return this;
	  };

	  /**
	   * 坐标系反射变换
	   * @param  {String} dim 反射维度
	   * @return {Object}     返回坐标系对象
	   */


	  Coord.prototype.reflect = function reflect(dim) {
	    switch (dim) {
	      case 'x':
	        this._swapDim('x');
	        break;
	      case 'y':
	        this._swapDim('y');
	        break;
	      default:
	        this._swapDim('y');
	    }
	    return this;
	  };

	  /**
	   * 坐标系比例变换
	   * @param  {Number} s1 x 方向缩放比例
	   * @param  {Number} s2 y 方向缩放比例
	   * @return {Object}    返回坐标系对象
	   */


	  Coord.prototype.scale = function scale(s1, s2) {
	    var matrix = this.matrix;
	    var center = this.center;
	    mat3.translate(matrix, matrix, [-center.x, -center.y]);
	    mat3.scale(matrix, matrix, [s1, s2]);
	    mat3.translate(matrix, matrix, [center.x, center.y]);
	    return this;
	  };

	  /**
	   * 坐标系平移变换
	   * @param  {Number} x x 方向平移像素
	   * @param  {Number} y y 方向平移像素
	   * @return {Object}   返回坐标系对象
	   */


	  Coord.prototype.translate = function translate(x, y) {
	    var matrix = this.matrix;
	    mat3.translate(matrix, matrix, [x, y]);
	    return this;
	  };

	  /**
	   * 将坐标系 x y 两个轴进行转置
	   * @return {Object} 返回坐标系对象
	   */


	  Coord.prototype.transpose = function transpose() {
	    this.isTransposed = !this.isTransposed;
	    return this;
	  };

	  return Coord;
	}();

	module.exports = Coord;

	/***/ }),
	/* 39 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the base class of Axis
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(100),
	    LabelsRenderer = _require.LabelsRenderer;

	var _require2 = __webpack_require__(1),
	    Group = _require2.Group;

	var Grid = __webpack_require__(307);
	var Global = __webpack_require__(2);

	var Base = function (_Group) {
	  _inherits(Base, _Group);

	  function Base() {
	    _classCallCheck(this, Base);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 用于动画，唯一标识的 id
	       * @type {[type]}
	       */
	      _id: null,
	      zIndex: 4,
	      /**
	       * 坐标轴上的坐标点
	       * @type {Array}
	       */
	      ticks: null,
	      /**
	       * 坐标轴线的配置信息，如果设置成null，则不显示轴线
	       * @type {Object}
	       */
	      line: null,
	      /**
	       * 坐标轴刻度线的配置,如果设置成null，则不显示刻度线
	       * @type {Object}
	       */
	      tickLine: null,
	      /**
	       * 次刻度线个数配置
	       * @type {Number}
	       */
	      subTickCount: 0,
	      /**
	       * 次刻度线样式配置
	       * @type {Object}
	       */
	      subTickLine: null,
	      /**
	       * 网格线配置，如果值为 null，则不显示
	       * @type {Object}
	       */
	      grid: null,
	      /**
	       * 坐标轴文本配置
	       * @type {Object}
	       */
	      label: {
	        textStyle: {}, // 坐标轴文本样式
	        autoRotate: true,
	        formatter: null // 坐标轴文本格式化回调函数
	      },
	      /**
	       * 坐标轴标题配置
	       * @type {Object}
	       */
	      title: {
	        autoRotate: true, // 文本是否自动旋转
	        textStyle: {} // 坐标轴标题样式
	      },
	      autoPaint: true,
	      alignWithLabel: false
	    };
	  };

	  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var title = this.get('title');
	    var label = this.get('label');
	    var grid = this.get('grid');
	    if (title) {
	      this.setSilent('title', Util.deepMix({
	        autoRotate: true,
	        textStyle: {
	          fontSize: 12,
	          fill: '#ccc',
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily,
	          textAlign: 'center'
	        },
	        offset: 48
	      }, title));
	    }
	    if (label) {
	      this.setSilent('label', Util.deepMix({
	        autoRotate: true,
	        textStyle: {
	          fontSize: 12,
	          fill: '#ccc',
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily
	        },
	        offset: 10
	      }, label));
	    }
	    if (grid) {
	      this.setSilent('grid', Util.deepMix({
	        lineStyle: {
	          lineWidth: 1,
	          stroke: '#C0D0E0'
	        }
	      }, grid));
	    }
	  };

	  Base.prototype._renderUI = function _renderUI() {
	    var labelCfg = this.get('label');
	    if (labelCfg) {
	      this.renderLabels();
	    }
	    if (this.get('autoPaint')) {
	      this.paint();
	    }
	    if (!Util.isNil(this.get('title'))) {
	      this.renderTitle();
	    }
	    this.sort();
	  };

	  Base.prototype._parseTicks = function _parseTicks(ticks) {
	    ticks = ticks || [];
	    var ticksLength = ticks.length;
	    for (var i = 0; i < ticksLength; i++) {
	      var item = ticks[i];
	      if (!Util.isObject(item)) {
	        ticks[i] = this.parseTick(item, i, ticksLength);
	      }
	    }
	    this.set('ticks', ticks);
	    return ticks;
	  };

	  Base.prototype._addTickItem = function _addTickItem(index, point, length) {
	    var type = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';

	    var tickItems = this.get('tickItems');
	    var subTickItems = this.get('subTickItems');
	    var end = this.getTickEnd(point, length, index);

	    var cfg = {
	      x1: point.x,
	      y1: point.y,
	      x2: end.x,
	      y2: end.y
	    };

	    if (!tickItems) {
	      tickItems = [];
	    }

	    if (!subTickItems) {
	      subTickItems = [];
	    }

	    if (type === 'sub') {
	      subTickItems.push(cfg);
	    } else {
	      tickItems.push(cfg);
	    }

	    this.set('tickItems', tickItems);
	    this.set('subTickItems', subTickItems);
	  };

	  Base.prototype._renderLine = function _renderLine() {
	    var lineCfg = this.get('line');
	    var path = void 0;
	    if (lineCfg) {
	      path = this.getLinePath();
	      lineCfg = Util.mix({
	        path: path
	      }, lineCfg);
	      var lineShape = this.addShape('path', {
	        attrs: lineCfg
	      });
	      lineShape.name = 'axis-line';
	      this.get('appendInfo') && lineShape.setSilent('appendInfo', this.get('appendInfo'));
	      this.set('lineShape', lineShape);
	    }
	  };

	  Base.prototype._processCatTicks = function _processCatTicks() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var tickLineCfg = self.get('tickLine');
	    var ticks = self.get('ticks');
	    ticks = self._parseTicks(ticks);
	    var tickSeg = 0;
	    if (ticks.length > 1) {
	      tickSeg = (ticks[1].value - ticks[0].value) / 2;
	    }

	    Util.each(ticks, function (tick, index) {
	      var tickPoint = self.getTickPoint(tick.value, index);
	      var tickPoint0 = self.getTickPoint(tick.value - tickSeg, index);
	      var tickPoint1 = self.getTickPoint(tick.value + tickSeg, index);
	      if (tickLineCfg) {
	        self._addTickItem(index, tickPoint0, tickLineCfg.length);
	        self._addTickItem(index, tickPoint1, tickLineCfg.length);
	      }
	      if (labelCfg) {
	        self.addLabel(tick, tickPoint, index);
	      }
	    });
	  };

	  Base.prototype._processTicks = function _processTicks() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var subTickCount = self.get('subTickCount');
	    var tickLineCfg = self.get('tickLine');
	    var ticks = self.get('ticks');
	    ticks = self._parseTicks(ticks);

	    Util.each(ticks, function (tick, index) {
	      var tickPoint = self.getTickPoint(tick.value, index);
	      if (tickLineCfg) {
	        self._addTickItem(index, tickPoint, tickLineCfg.length);
	      }
	      if (labelCfg) {
	        self.addLabel(tick, tickPoint, index);
	      }
	    });

	    if (subTickCount) {
	      // 如果有设置次级分点，添加次级tick
	      var subTickLineCfg = self.get('subTickLine');
	      Util.each(ticks, function (tick, index) {
	        if (index > 0) {
	          var diff = tick.value - ticks[index - 1].value;
	          diff = diff / (self.get('subTickCount') + 1);

	          for (var i = 1; i <= subTickCount; i++) {
	            var subTick = {
	              text: '',
	              value: index ? ticks[index - 1].value + i * diff : i * diff
	            };

	            var tickPoint = self.getTickPoint(subTick.value);
	            var subTickLength = void 0;
	            if (subTickLineCfg && subTickLineCfg.length) {
	              subTickLength = subTickLineCfg.length;
	            } else {
	              subTickLength = parseInt(tickLineCfg.length * (3 / 5), 10);
	            }
	            self._addTickItem(i - 1, tickPoint, subTickLength, 'sub');
	          }
	        }
	      });
	    }
	  };

	  Base.prototype._addTickLine = function _addTickLine(ticks, lineCfg) {
	    var self = this;
	    var cfg = Util.mix({}, lineCfg);
	    var path = [];
	    Util.each(ticks, function (item) {
	      path.push(['M', item.x1, item.y1]);
	      path.push(['L', item.x2, item.y2]);
	    });
	    delete cfg.length;
	    cfg.path = path;
	    var tickShape = self.addShape('path', {
	      attrs: cfg
	    });
	    tickShape.name = 'axis-ticks';
	    tickShape._id = self.get('_id') + '-ticks';
	    tickShape.set('coord', self.get('coord'));
	    self.get('appendInfo') && tickShape.setSilent('appendInfo', self.get('appendInfo'));
	  };

	  Base.prototype._renderTicks = function _renderTicks() {
	    var self = this;
	    var tickItems = self.get('tickItems');
	    var subTickItems = self.get('subTickItems');

	    if (!Util.isEmpty(tickItems)) {
	      var tickLineCfg = self.get('tickLine');
	      self._addTickLine(tickItems, tickLineCfg);
	    }

	    if (!Util.isEmpty(subTickItems)) {
	      var subTickLineCfg = self.get('subTickLine') || self.get('tickLine');
	      self._addTickLine(subTickItems, subTickLineCfg);
	    }
	  };

	  Base.prototype._renderGrid = function _renderGrid() {
	    var grid = this.get('grid');
	    if (!grid) {
	      return;
	    }
	    grid.coord = this.get('coord');
	    grid.appendInfo = this.get('appendInfo');
	    this.set('gridGroup', this.addGroup(Grid, grid));
	  };

	  Base.prototype.paint = function paint() {
	    this._renderLine();
	    var type = this.get('type');
	    if (type === 'cat' || type === 'timecat') {
	      this._processCatTicks();
	    } else {
	      this._processTicks();
	    }
	    this._renderTicks();
	    this._renderGrid();
	    var labelCfg = this.get('label');
	    if (labelCfg && labelCfg.autoRotate) {
	      this.autoRotateLabels();
	    }
	  };

	  Base.prototype.parseTick = function parseTick(tick, index, length) {
	    return {
	      text: tick,
	      value: index / (length - 1)
	    };
	  };

	  Base.prototype.getTextAnchor = function getTextAnchor(vector) {
	    var ratio = Math.abs(vector[1] / vector[0]);
	    var align = void 0;
	    if (ratio >= 1) {
	      // 上面或者下面
	      align = 'center';
	    } else {
	      if (vector[0] > 0) {
	        // 右侧
	        align = 'start';
	      } else {
	        // 左侧
	        align = 'end';
	      }
	    }
	    return align;
	  };

	  Base.prototype.getMaxLabelWidth = function getMaxLabelWidth(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    var max = 0;
	    Util.each(labels, function (label) {
	      var bbox = label.getBBox();
	      var width = bbox.width;
	      if (max < width) {
	        max = width;
	      }
	    });
	    return max;
	  };

	  Base.prototype.remove = function remove() {
	    _Group.prototype.remove.call(this);
	    var gridGroup = this.get('gridGroup');
	    gridGroup && gridGroup.remove();
	    this.removeLabels();
	  };

	  /**
	   * 旋转文本
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.autoRotateLabels = function autoRotateLabels() {};

	  /**
	   * 渲染标题
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.renderTitle = function renderTitle() {};

	  /**
	   * 获取坐标轴线的 path
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getLinePath = function getLinePath() {};

	  /**
	   * 获取 tick 在画布上的位置
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getTickPoint = function getTickPoint() {};

	  /**
	   * 获取标示坐标点的线的终点
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getTickEnd = function getTickEnd() {};

	  /**
	   * 获取距离坐标轴的向量
	   * @abstract
	   * @return {[type]} [description]
	   */


	  Base.prototype.getSideVector = function getSideVector() {};

	  return Base;
	}(Group);

	Util.assign(Base.prototype, LabelsRenderer, {
	  addLabel: function addLabel(tick, point, index) {
	    var labelsGroup = this.get('labelsGroup');
	    var label = {};
	    var rst = void 0;

	    if (labelsGroup) {
	      var offset = this.get('_labelOffset');
	      if (!Util.isNil(this.get('label').offset)) {
	        offset = this.get('label').offset;
	      }
	      var vector = this.getSideVector(offset, point, index);
	      point = {
	        x: point.x + vector[0],
	        y: point.y + vector[1]
	      };
	      label.text = tick.text;
	      label.x = point.x;
	      label.y = point.y;
	      label.textAlign = this.getTextAnchor(vector);
	      rst = labelsGroup.addLabel(label);
	      if (rst) {
	        rst.name = 'axis-label';
	        rst._id = this.get('_id') + '-' + tick.tickValue;
	        rst.set('coord', this.get('coord'));
	        this.get('appendInfo') && rst.setSilent('appendInfo', this.get('appendInfo'));
	      }
	    }
	    return rst;
	  }
	});

	module.exports = Base;

	/***/ }),
	/* 40 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24),
	    stackClear = __webpack_require__(126),
	    stackDelete = __webpack_require__(127),
	    stackGet = __webpack_require__(128),
	    stackHas = __webpack_require__(129),
	    stackSet = __webpack_require__(130);

	/**
	 * Creates a stack cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Stack(entries) {
	  var data = this.__data__ = new ListCache(entries);
	  this.size = data.size;
	}

	// Add methods to `Stack`.
	Stack.prototype.clear = stackClear;
	Stack.prototype['delete'] = stackDelete;
	Stack.prototype.get = stackGet;
	Stack.prototype.has = stackHas;
	Stack.prototype.set = stackSet;

	module.exports = Stack;

	/***/ }),
	/* 41 */
	/***/ (function(module, exports) {

	/**
	 * Performs a
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * comparison between two values to determine if they are equivalent.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 * var other = { 'a': 1 };
	 *
	 * _.eq(object, object);
	 * // => true
	 *
	 * _.eq(object, other);
	 * // => false
	 *
	 * _.eq('a', 'a');
	 * // => true
	 *
	 * _.eq('a', Object('a'));
	 * // => false
	 *
	 * _.eq(NaN, NaN);
	 * // => true
	 */
	function eq(value, other) {
	  return value === other || value !== value && other !== other;
	}

	module.exports = eq;

	/***/ }),
	/* 42 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Map = getNative(root, 'Map');

	module.exports = Map;

	/***/ }),
	/* 43 */
	/***/ (function(module, exports, __webpack_require__) {

	var mapCacheClear = __webpack_require__(138),
	    mapCacheDelete = __webpack_require__(145),
	    mapCacheGet = __webpack_require__(147),
	    mapCacheHas = __webpack_require__(148),
	    mapCacheSet = __webpack_require__(149);

	/**
	 * Creates a map cache object to store key-value pairs.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function MapCache(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `MapCache`.
	MapCache.prototype.clear = mapCacheClear;
	MapCache.prototype['delete'] = mapCacheDelete;
	MapCache.prototype.get = mapCacheGet;
	MapCache.prototype.has = mapCacheHas;
	MapCache.prototype.set = mapCacheSet;

	module.exports = MapCache;

	/***/ }),
	/* 44 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(45),
	    eq = __webpack_require__(41);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Assigns `value` to `key` of `object` if the existing value is not equivalent
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function assignValue(object, key, value) {
	  var objValue = object[key];
	  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) || value === undefined && !(key in object)) {
	    baseAssignValue(object, key, value);
	  }
	}

	module.exports = assignValue;

	/***/ }),
	/* 45 */
	/***/ (function(module, exports, __webpack_require__) {

	var defineProperty = __webpack_require__(68);

	/**
	 * The base implementation of `assignValue` and `assignMergeValue` without
	 * value checks.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {string} key The key of the property to assign.
	 * @param {*} value The value to assign.
	 */
	function baseAssignValue(object, key, value) {
	  if (key == '__proto__' && defineProperty) {
	    defineProperty(object, key, {
	      'configurable': true,
	      'enumerable': true,
	      'value': value,
	      'writable': true
	    });
	  } else {
	    object[key] = value;
	  }
	}

	module.exports = baseAssignValue;

	/***/ }),
	/* 46 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/** Used to detect unsigned integer values. */
	var reIsUint = /^(?:0|[1-9]\d*)$/;

	/**
	 * Checks if `value` is a valid array-like index.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
	 * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
	 */
	function isIndex(value, length) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  length = length == null ? MAX_SAFE_INTEGER : length;

	  return !!length && (type == 'number' || type != 'symbol' && reIsUint.test(value)) && value > -1 && value % 1 == 0 && value < length;
	}

	module.exports = isIndex;

	/***/ }),
	/* 47 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsTypedArray = __webpack_require__(155),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

	/**
	 * Checks if `value` is classified as a typed array.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 * @example
	 *
	 * _.isTypedArray(new Uint8Array);
	 * // => true
	 *
	 * _.isTypedArray([]);
	 * // => false
	 */
	var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

	module.exports = isTypedArray;

	/***/ }),
	/* 48 */
	/***/ (function(module, exports) {

	/** Used as references for various `Number` constants. */
	var MAX_SAFE_INTEGER = 9007199254740991;

	/**
	 * Checks if `value` is a valid array-like length.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
	 * @example
	 *
	 * _.isLength(3);
	 * // => true
	 *
	 * _.isLength(Number.MIN_VALUE);
	 * // => false
	 *
	 * _.isLength(Infinity);
	 * // => false
	 *
	 * _.isLength('3');
	 * // => false
	 */
	function isLength(value) {
	  return typeof value == 'number' && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
	}

	module.exports = isLength;

	/***/ }),
	/* 49 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(73),
	    stubArray = __webpack_require__(74);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Built-in value references. */
	var propertyIsEnumerable = objectProto.propertyIsEnumerable;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbols = !nativeGetSymbols ? stubArray : function (object) {
	  if (object == null) {
	    return [];
	  }
	  object = Object(object);
	  return arrayFilter(nativeGetSymbols(object), function (symbol) {
	    return propertyIsEnumerable.call(object, symbol);
	  });
	};

	module.exports = getSymbols;

	/***/ }),
	/* 50 */
	/***/ (function(module, exports) {

	/**
	 * Appends the elements of `values` to `array`.
	 *
	 * @private
	 * @param {Array} array The array to modify.
	 * @param {Array} values The values to append.
	 * @returns {Array} Returns `array`.
	 */
	function arrayPush(array, values) {
	  var index = -1,
	      length = values.length,
	      offset = array.length;

	  while (++index < length) {
	    array[offset + index] = values[index];
	  }
	  return array;
	}

	module.exports = arrayPush;

	/***/ }),
	/* 51 */
	/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(71);

	/** Built-in value references. */
	var getPrototype = overArg(Object.getPrototypeOf, Object);

	module.exports = getPrototype;

	/***/ }),
	/* 52 */
	/***/ (function(module, exports, __webpack_require__) {

	var Uint8Array = __webpack_require__(79);

	/**
	 * Creates a clone of `arrayBuffer`.
	 *
	 * @private
	 * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
	 * @returns {ArrayBuffer} Returns the cloned array buffer.
	 */
	function cloneArrayBuffer(arrayBuffer) {
	  var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
	  new Uint8Array(result).set(new Uint8Array(arrayBuffer));
	  return result;
	}

	module.exports = cloneArrayBuffer;

	/***/ }),
	/* 53 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqualDeep = __webpack_require__(188),
	    isObjectLike = __webpack_require__(5);

	/**
	 * The base implementation of `_.isEqual` which supports partial comparisons
	 * and tracks traversed objects.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Unordered comparison
	 *  2 - Partial comparison
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @param {Object} [stack] Tracks traversed `value` and `other` objects.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 */
	function baseIsEqual(value, other, bitmask, customizer, stack) {
	  if (value === other) {
	    return true;
	  }
	  if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
	    return value !== value && other !== other;
	  }
	  return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
	}

	module.exports = baseIsEqual;

	/***/ }),
	/* 54 */
	/***/ (function(module, exports) {

	/**
	 * Converts `set` to an array of its values.
	 *
	 * @private
	 * @param {Object} set The set to convert.
	 * @returns {Array} Returns the values.
	 */
	function setToArray(set) {
	  var index = -1,
	      result = Array(set.size);

	  set.forEach(function (value) {
	    result[++index] = value;
	  });
	  return result;
	}

	module.exports = setToArray;

	/***/ }),
	/* 55 */
	/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(35),
	    toKey = __webpack_require__(20);

	/**
	 * The base implementation of `_.get` without support for default values.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @returns {*} Returns the resolved value.
	 */
	function baseGet(object, path) {
	  path = castPath(path, object);

	  var index = 0,
	      length = path.length;

	  while (object != null && index < length) {
	    object = object[toKey(path[index++])];
	  }
	  return index && index == length ? object : undefined;
	}

	module.exports = baseGet;

	/***/ }),
	/* 56 */
	/***/ (function(module, exports, __webpack_require__) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var isArray = __webpack_require__(3),
	    isSymbol = __webpack_require__(19);

	/** Used to match property names within property paths. */
	var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
	    reIsPlainProp = /^\w*$/;

	/**
	 * Checks if `value` is a property name and not a property path.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @param {Object} [object] The object to query keys on.
	 * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
	 */
	function isKey(value, object) {
	  if (isArray(value)) {
	    return false;
	  }
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  if (type == 'number' || type == 'symbol' || type == 'boolean' || value == null || isSymbol(value)) {
	    return true;
	  }
	  return reIsPlainProp.test(value) || !reIsDeepProp.test(value) || object != null && value in Object(object);
	}

	module.exports = isKey;

	/***/ }),
	/* 57 */
	/***/ (function(module, exports) {

	/**
	 * This method returns the first argument it receives.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Util
	 * @param {*} value Any value.
	 * @returns {*} Returns `value`.
	 * @example
	 *
	 * var object = { 'a': 1 };
	 *
	 * console.log(_.identity(object) === object);
	 * // => true
	 */
	function identity(value) {
	  return value;
	}

	module.exports = identity;

	/***/ }),
	/* 58 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Chart、View、Geometry 的基类
	 * @author dxq613@gmail.com
	 */

	var EventEmitter = __webpack_require__(271);
	var Util = __webpack_require__(0);

	var Base = function (_EventEmitter) {
	  _inherits(Base, _EventEmitter);

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {};
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var _this = _possibleConstructorReturn(this, _EventEmitter.call(this));

	    var attrs = {
	      visible: true
	    };
	    var defaultCfg = _this.getDefaultCfg();
	    _this._attrs = attrs;
	    Util.assign(attrs, defaultCfg, cfg);
	    return _this;
	  }

	  Base.prototype.get = function get(name) {
	    return this._attrs[name];
	  };

	  Base.prototype.set = function set(name, value) {
	    this._attrs[name] = value;
	  };

	  Base.prototype.show = function show() {
	    var visible = this.get('visible');
	    if (!visible) {
	      this.set('visible', true);
	      this.changeVisible(true);
	    }
	  };

	  Base.prototype.hide = function hide() {
	    var visible = this.get('visible');
	    if (visible) {
	      this.set('visible', false);
	      this.changeVisible(false);
	    }
	  };

	  /**
	   * @protected
	   * @param {Boolean} visible 是否可见
	   * 显示、隐藏
	   */


	  Base.prototype.changeVisible = function changeVisible() /* visible */{};

	  Base.prototype.destroy = function destroy() {
	    this._attrs = {};
	    this.removeAllListeners();
	    this.destroyed = true;
	  };

	  return Base;
	}(EventEmitter);

	module.exports = Base;

	/***/ }),
	/* 59 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_create__ = __webpack_require__(392);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "create", function() { return __WEBPACK_IMPORTED_MODULE_0__src_create__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_creator__ = __webpack_require__(336);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "creator", function() { return __WEBPACK_IMPORTED_MODULE_1__src_creator__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_local__ = __webpack_require__(421);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "local", function() { return __WEBPACK_IMPORTED_MODULE_2__src_local__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_matcher__ = __webpack_require__(362);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "matcher", function() { return __WEBPACK_IMPORTED_MODULE_3__src_matcher__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_mouse__ = __webpack_require__(422);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "mouse", function() { return __WEBPACK_IMPORTED_MODULE_4__src_mouse__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_namespace__ = __webpack_require__(348);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "namespace", function() { return __WEBPACK_IMPORTED_MODULE_5__src_namespace__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_namespaces__ = __webpack_require__(349);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "namespaces", function() { return __WEBPACK_IMPORTED_MODULE_6__src_namespaces__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_point__ = __webpack_require__(337);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "clientPoint", function() { return __WEBPACK_IMPORTED_MODULE_7__src_point__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_select__ = __webpack_require__(360);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "select", function() { return __WEBPACK_IMPORTED_MODULE_8__src_select__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_selectAll__ = __webpack_require__(423);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selectAll", function() { return __WEBPACK_IMPORTED_MODULE_9__src_selectAll__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_selection_index__ = __webpack_require__(60);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selection", function() { return __WEBPACK_IMPORTED_MODULE_10__src_selection_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_selector__ = __webpack_require__(350);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selector", function() { return __WEBPACK_IMPORTED_MODULE_11__src_selector__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_selectorAll__ = __webpack_require__(361);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "selectorAll", function() { return __WEBPACK_IMPORTED_MODULE_12__src_selectorAll__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_selection_style__ = __webpack_require__(365);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return __WEBPACK_IMPORTED_MODULE_13__src_selection_style__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_touch__ = __webpack_require__(424);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "touch", function() { return __WEBPACK_IMPORTED_MODULE_14__src_touch__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_touches__ = __webpack_require__(425);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "touches", function() { return __WEBPACK_IMPORTED_MODULE_15__src_touches__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_window__ = __webpack_require__(351);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "window", function() { return __WEBPACK_IMPORTED_MODULE_16__src_window__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__src_selection_on__ = __webpack_require__(352);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "event", function() { return __WEBPACK_IMPORTED_MODULE_17__src_selection_on__["c"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "customEvent", function() { return __WEBPACK_IMPORTED_MODULE_17__src_selection_on__["a"]; });



















	/***/ }),
	/* 60 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return root; });
	/* harmony export (immutable) */ __webpack_exports__["a"] = Selection;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__select__ = __webpack_require__(393);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectAll__ = __webpack_require__(394);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__filter__ = __webpack_require__(395);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__data__ = __webpack_require__(396);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__enter__ = __webpack_require__(363);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__exit__ = __webpack_require__(398);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__merge__ = __webpack_require__(399);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__order__ = __webpack_require__(400);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__sort__ = __webpack_require__(401);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__call__ = __webpack_require__(402);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__nodes__ = __webpack_require__(403);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__node__ = __webpack_require__(404);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__size__ = __webpack_require__(405);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__empty__ = __webpack_require__(406);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__each__ = __webpack_require__(407);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__attr__ = __webpack_require__(408);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__style__ = __webpack_require__(365);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__property__ = __webpack_require__(409);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_18__classed__ = __webpack_require__(410);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_19__text__ = __webpack_require__(411);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_20__html__ = __webpack_require__(412);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_21__raise__ = __webpack_require__(413);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_22__lower__ = __webpack_require__(414);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_23__append__ = __webpack_require__(415);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_24__insert__ = __webpack_require__(416);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_25__remove__ = __webpack_require__(417);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_26__clone__ = __webpack_require__(418);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_27__datum__ = __webpack_require__(419);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_28__on__ = __webpack_require__(352);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_29__dispatch__ = __webpack_require__(420);































	var root = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: __WEBPACK_IMPORTED_MODULE_0__select__["a" /* default */],
	  selectAll: __WEBPACK_IMPORTED_MODULE_1__selectAll__["a" /* default */],
	  filter: __WEBPACK_IMPORTED_MODULE_2__filter__["a" /* default */],
	  data: __WEBPACK_IMPORTED_MODULE_3__data__["a" /* default */],
	  enter: __WEBPACK_IMPORTED_MODULE_4__enter__["b" /* default */],
	  exit: __WEBPACK_IMPORTED_MODULE_5__exit__["a" /* default */],
	  merge: __WEBPACK_IMPORTED_MODULE_6__merge__["a" /* default */],
	  order: __WEBPACK_IMPORTED_MODULE_7__order__["a" /* default */],
	  sort: __WEBPACK_IMPORTED_MODULE_8__sort__["a" /* default */],
	  call: __WEBPACK_IMPORTED_MODULE_9__call__["a" /* default */],
	  nodes: __WEBPACK_IMPORTED_MODULE_10__nodes__["a" /* default */],
	  node: __WEBPACK_IMPORTED_MODULE_11__node__["a" /* default */],
	  size: __WEBPACK_IMPORTED_MODULE_12__size__["a" /* default */],
	  empty: __WEBPACK_IMPORTED_MODULE_13__empty__["a" /* default */],
	  each: __WEBPACK_IMPORTED_MODULE_14__each__["a" /* default */],
	  attr: __WEBPACK_IMPORTED_MODULE_15__attr__["a" /* default */],
	  style: __WEBPACK_IMPORTED_MODULE_16__style__["a" /* default */],
	  property: __WEBPACK_IMPORTED_MODULE_17__property__["a" /* default */],
	  classed: __WEBPACK_IMPORTED_MODULE_18__classed__["a" /* default */],
	  text: __WEBPACK_IMPORTED_MODULE_19__text__["a" /* default */],
	  html: __WEBPACK_IMPORTED_MODULE_20__html__["a" /* default */],
	  raise: __WEBPACK_IMPORTED_MODULE_21__raise__["a" /* default */],
	  lower: __WEBPACK_IMPORTED_MODULE_22__lower__["a" /* default */],
	  append: __WEBPACK_IMPORTED_MODULE_23__append__["a" /* default */],
	  insert: __WEBPACK_IMPORTED_MODULE_24__insert__["a" /* default */],
	  remove: __WEBPACK_IMPORTED_MODULE_25__remove__["a" /* default */],
	  clone: __WEBPACK_IMPORTED_MODULE_26__clone__["a" /* default */],
	  datum: __WEBPACK_IMPORTED_MODULE_27__datum__["a" /* default */],
	  on: __WEBPACK_IMPORTED_MODULE_28__on__["b" /* default */],
	  dispatch: __WEBPACK_IMPORTED_MODULE_29__dispatch__["a" /* default */]
	};

	/* harmony default export */ __webpack_exports__["b"] = (selection);

	/***/ }),
	/* 61 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export CREATED */
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return SCHEDULED; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return STARTING; });
	/* unused harmony export STARTED */
	/* unused harmony export RUNNING */
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return ENDING; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ENDED; });
	/* harmony export (immutable) */ __webpack_exports__["g"] = init;
	/* harmony export (immutable) */ __webpack_exports__["h"] = set;
	/* harmony export (immutable) */ __webpack_exports__["f"] = get;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_dispatch__ = __webpack_require__(428);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_timer__ = __webpack_require__(368);



	var emptyOn = Object(__WEBPACK_IMPORTED_MODULE_0_d3_dispatch__["a" /* dispatch */])("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	/* harmony default export */ __webpack_exports__["e"] = (function (node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	});

	function init(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}

	function set(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > STARTING) throw new Error("too late; already started");
	  return schedule;
	}

	function get(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["c" /* timer */])(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	          o.state = ENDED;
	          o.timer.stop();
	          delete schedules[i];
	        }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    Object(__WEBPACK_IMPORTED_MODULE_1_d3_timer__["b" /* timeout */])(function () {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) {
	      return;
	    } // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	/***/ }),
	/* 62 */
	/***/ (function(module, exports, __webpack_require__) {

	var G = __webpack_require__(1);
	var Animate = __webpack_require__(64);
	var Chart = __webpack_require__(115);
	var Global = __webpack_require__(2);
	var Scale = __webpack_require__(104);
	var Shape = __webpack_require__(10);
	var Util = __webpack_require__(0);

	var G2 = {
	  // version
	  version: Global.version,
	  // visual encoding
	  Animate: Animate,
	  Chart: Chart,
	  Global: Global,
	  Scale: Scale,
	  Shape: Shape,
	  Util: Util,
	  // render engine
	  G: G,
	  DomUtil: G.DomUtil,
	  MatrixUtil: G.MatrixUtil,
	  PathUtil: G.PathUtil
	};

	G2.track = function (enable) {
	  Global.trackable = enable;
	};
	__webpack_require__(331);

	// 保证两个版本共存
	if (typeof window !== 'undefined') {
	  if (window.G2) {
	    console.warn('There are multiple versions of G2. Version ' + G2.version + '\'s reference is \'window.G2_3\'');
	  } else {
	    window.G2 = G2;
	  }
	}

	module.exports = G2;

	/***/ }),
	/* 63 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 颜色计算的辅助方法
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var RGB_REG = /rgb\((\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)/;

	// 创建辅助 tag 取颜色
	function createTmp() {
	  var i = document.createElement('i');
	  i.title = 'Web Colour Picker';
	  i.style.display = 'none';
	  document.body.appendChild(i);
	  return i;
	}

	// 获取颜色之间的插值
	function getValue(start, end, percent, index) {
	  var value = start[index] + (end[index] - start[index]) * percent;
	  return value;
	}

	// 数组转换成颜色
	function arr2rgb(arr) {
	  return '#' + toHex(arr[0]) + toHex(arr[1]) + toHex(arr[2]);
	}

	// 将数值从 0-255 转换成16进制字符串
	function toHex(value) {
	  value = Math.round(value);
	  value = value.toString(16);
	  if (value.length === 1) {
	    value = '0' + value;
	  }
	  return value;
	}

	function calColor(colors, percent) {
	  if (Util.isNaN(percent) || !Util.isNumber(percent)) {
	    percent = 0;
	  }
	  var steps = colors.length - 1;
	  var step = Math.floor(steps * percent);
	  var left = steps * percent - step;
	  var start = colors[step];
	  var end = step === steps ? start : colors[step + 1];
	  var rgb = arr2rgb([getValue(start, end, left, 0), getValue(start, end, left, 1), getValue(start, end, left, 2)]);
	  return rgb;
	}

	// rgb 颜色转换成数组
	function rgb2arr(str) {
	  var arr = [];
	  arr.push(parseInt(str.substr(1, 2), 16));
	  arr.push(parseInt(str.substr(3, 2), 16));
	  arr.push(parseInt(str.substr(5, 2), 16));
	  return arr;
	}

	var colorCache = {};
	var iEl = null;
	var ColorUtil = {
	  /**
	   * 将颜色转换到 rgb 的格式
	   * @param  {String} color 颜色
	   * @return {String} 将颜色转换到 '#ffffff' 的格式
	   */
	  toRGB: function toRGB(color) {
	    // 如果已经是 rgb的格式
	    if (color[0] === '#' && color.length === 7) {
	      return color;
	    }
	    if (!iEl) {
	      // 防止防止在页头报错
	      iEl = createTmp();
	    }
	    var rst = void 0;
	    if (colorCache[color]) {
	      rst = colorCache[color];
	    } else {
	      iEl.style.color = color;
	      rst = document.defaultView.getComputedStyle(iEl, '').getPropertyValue('color');
	      var cArray = RGB_REG.exec(rst);
	      cArray.shift();
	      rst = arr2rgb(cArray);
	      colorCache[color] = rst;
	    }
	    return rst;
	  },


	  rgb2arr: rgb2arr,

	  /**
	   * 获取渐变函数
	   * @param  {Array} colors 多个颜色
	   * @return {String} 颜色值
	   */
	  gradient: function gradient(colors) {
	    var points = [];
	    if (Util.isString(colors)) {
	      colors = colors.split('-');
	    }
	    Util.each(colors, function (color) {
	      if (color.indexOf('#') === -1) {
	        color = ColorUtil.toRGB(color);
	      }
	      points.push(rgb2arr(color));
	    });
	    return function (percent) {
	      return calColor(points, percent);
	    };
	  }
	};

	module.exports = ColorUtil;

	/***/ }),
	/* 64 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Default animation configuration for geoms
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Action = __webpack_require__(270);

	var defaultAnimationCfg = {
	  appear: {
	    duration: 450,
	    easing: 'easeQuadOut'
	  }, // 初始入场动画配置
	  update: {
	    duration: 450,
	    easing: 'easeQuadInOut'
	  }, // 更新时发生变更的动画配置
	  enter: {
	    duration: 400,
	    easing: 'easeQuadInOut',
	    delay: 100
	  }, // 更新时新增元素的入场动画配置
	  leave: {
	    duration: 350,
	    easing: 'easeQuadIn' // 更新时销毁动画配置
	  } };

	var Animate = {
	  line: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  path: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  area: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },

	    cfg: {
	      appear: {
	        duration: 500,
	        easing: 'easeQuadOut'
	      },
	      update: {
	        duration: 450,
	        easing: 'easeQuadInOut'
	      },
	      enter: {
	        duration: 600,
	        delay: 150,
	        easing: 'easeQuadInOut'
	      },
	      leave: {
	        easing: 'easeQuadOut',
	        duration: 350
	      }
	    }
	  },
	  polygon: {
	    appear: function appear() {
	      return Action.appear.zoomIn;
	    },
	    enter: function enter() {
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.zoomOut;
	    }
	  },
	  edge: {
	    appear: function appear() {
	      return Action.appear.pathIn;
	    },
	    enter: function enter() {
	      return Action.enter.pathIn;
	    },
	    leave: function leave() {
	      return Action.leave.pathOut;
	    }
	  },
	  interval: {
	    appear: function appear(coord) {
	      var result = void 0;
	      if (coord.isPolar) {
	        result = Action.appear.zoomIn;
	        if (coord.isTransposed || coord.type === 'theta') {
	          result = Action.appear.fanIn;
	        }
	      } else if (coord.isRect) {
	        result = coord.isTransposed ? Action.appear.scaleInX : Action.appear.scaleInY;
	      } else {
	        result = Action.appear.zoomIn;
	      }
	      return result;
	    },
	    enter: function enter(coord) {
	      if (coord.isRect || coord.isTransposed || coord.type === 'theta') {
	        return Action.enter.fadeIn;
	      }
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.type === 'theta') {
	        return Action.update.fanIn;
	      }
	    }
	  },
	  point: {
	    appear: function appear() {
	      return Action.appear.zoomIn;
	    },
	    enter: function enter() {
	      return Action.enter.zoomIn;
	    },
	    leave: function leave() {
	      return Action.leave.zoomOut;
	    }
	  },
	  schema: {
	    appear: function appear() {
	      return Action.appear.clipIn;
	    },
	    enter: function enter() {
	      return Action.enter.clipIn;
	    },
	    leave: function leave() {
	      return Action.leave.lineWidthOut;
	    }
	  },
	  contour: null,
	  heatmap: null,
	  label: {
	    appear: function appear() {
	      return Action.appear.fadeIn;
	    },
	    enter: function enter() {
	      return Action.enter.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },

	    cfg: {
	      appear: {
	        duration: 900
	      }
	    }
	  },
	  'axis-label': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-ticks': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-grid': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update(coord) {
	      if (coord.isPolar) {
	        return Action.appear.fadeIn;
	      }
	    }
	  },
	  'axis-grid-rect': {
	    enter: function enter() {
	      return Action.appear.fadeIn;
	    },
	    leave: function leave() {
	      return Action.leave.fadeOut;
	    },
	    update: function update() {
	      return Action.leave.fadeIn;
	    }
	  },
	  labelLine: {
	    appear: function appear() {
	      return Action.appear.pathIn;
	    },
	    enter: function enter() {
	      return Action.enter.pathIn;
	    },
	    leave: function leave() {
	      return Action.leave.pathOut;
	    }
	  }
	};

	Animate.Action = Action;
	Animate.defaultCfg = defaultAnimationCfg;

	// 获取动画
	Animate.getAnimation = function (geomType, coord, animationType) {
	  var geomAnimateCfg = this[geomType];
	  if (geomAnimateCfg) {
	    var animation = geomAnimateCfg[animationType];
	    if (Util.isFunction(animation)) {
	      return animation(coord);
	    }
	  }
	  return false;
	};

	// 获取动画配置
	Animate.getAnimateCfg = function (geomType, animationType) {
	  var defaultCfg = defaultAnimationCfg[animationType];
	  if (this[geomType] && this[geomType].cfg && this[geomType].cfg[animationType]) {
	    return Util.deepMix({}, defaultCfg, this[geomType].cfg[animationType]);
	  }
	  return defaultCfg;
	};

	// 注册动画
	Animate.registerAnimation = function (animationType, animationName, animationFun) {
	  if (!this.Action[animationType]) {
	    this.Action[animationType] = {};
	  }
	  this.Action[animationType][animationName] = animationFun;
	};

	module.exports = Animate;

	/***/ }),
	/* 65 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObject = __webpack_require__(7);

	/** `Object#toString` result references. */
	var asyncTag = '[object AsyncFunction]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    proxyTag = '[object Proxy]';

	/**
	 * Checks if `value` is classified as a `Function` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a function, else `false`.
	 * @example
	 *
	 * _.isFunction(_);
	 * // => true
	 *
	 * _.isFunction(/abc/);
	 * // => false
	 */
	function isFunction(value) {
	    if (!isObject(value)) {
	        return false;
	    }
	    // The use of `Object#toString` avoids issues with the `typeof` operator
	    // in Safari 9 which returns 'object' for typed arrays and other constructors.
	    var tag = baseGetTag(value);
	    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
	}

	module.exports = isFunction;

	/***/ }),
	/* 66 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/** Detect free variable `global` from Node.js. */
	var freeGlobal = (typeof global === 'undefined' ? 'undefined' : _typeof(global)) == 'object' && global && global.Object === Object && global;

	module.exports = freeGlobal;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(132)))

	/***/ }),
	/* 67 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var funcProto = Function.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/**
	 * Converts `func` to its source code.
	 *
	 * @private
	 * @param {Function} func The function to convert.
	 * @returns {string} Returns the source code.
	 */
	function toSource(func) {
	  if (func != null) {
	    try {
	      return funcToString.call(func);
	    } catch (e) {}
	    try {
	      return func + '';
	    } catch (e) {}
	  }
	  return '';
	}

	module.exports = toSource;

	/***/ }),
	/* 68 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8);

	var defineProperty = function () {
	  try {
	    var func = getNative(Object, 'defineProperty');
	    func({}, '', {});
	    return func;
	  } catch (e) {}
	}();

	module.exports = defineProperty;

	/***/ }),
	/* 69 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseTimes = __webpack_require__(152),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isIndex = __webpack_require__(46),
	    isTypedArray = __webpack_require__(47);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an array of the enumerable property names of the array-like `value`.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @param {boolean} inherited Specify returning inherited property names.
	 * @returns {Array} Returns the array of property names.
	 */
	function arrayLikeKeys(value, inherited) {
	  var isArr = isArray(value),
	      isArg = !isArr && isArguments(value),
	      isBuff = !isArr && !isArg && isBuffer(value),
	      isType = !isArr && !isArg && !isBuff && isTypedArray(value),
	      skipIndexes = isArr || isArg || isBuff || isType,
	      result = skipIndexes ? baseTimes(value.length, String) : [],
	      length = result.length;

	  for (var key in value) {
	    if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && (
	    // Safari 9 has enumerable `arguments.length` in strict mode.
	    key == 'length' ||
	    // Node.js 0.10 has enumerable non-index properties on buffers.
	    isBuff && (key == 'offset' || key == 'parent') ||
	    // PhantomJS 2 has enumerable non-index properties on typed arrays.
	    isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset') ||
	    // Skip index properties.
	    isIndex(key, length)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = arrayLikeKeys;

	/***/ }),
	/* 70 */
	/***/ (function(module, exports, __webpack_require__) {

	var isPrototype = __webpack_require__(33),
	    nativeKeys = __webpack_require__(156);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeys(object) {
	  if (!isPrototype(object)) {
	    return nativeKeys(object);
	  }
	  var result = [];
	  for (var key in Object(object)) {
	    if (hasOwnProperty.call(object, key) && key != 'constructor') {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeys;

	/***/ }),
	/* 71 */
	/***/ (function(module, exports) {

	/**
	 * Creates a unary function that invokes `func` with its argument transformed.
	 *
	 * @private
	 * @param {Function} func The function to wrap.
	 * @param {Function} transform The argument transform.
	 * @returns {Function} Returns the new function.
	 */
	function overArg(func, transform) {
	  return function (arg) {
	    return func(transform(arg));
	  };
	}

	module.exports = overArg;

	/***/ }),
	/* 72 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayLikeKeys = __webpack_require__(69),
	    baseKeysIn = __webpack_require__(158),
	    isArrayLike = __webpack_require__(12);

	/**
	 * Creates an array of the own and inherited enumerable property names of `object`.
	 *
	 * **Note:** Non-object values are coerced to objects.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 *   this.b = 2;
	 * }
	 *
	 * Foo.prototype.c = 3;
	 *
	 * _.keysIn(new Foo);
	 * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
	 */
	function keysIn(object) {
	  return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
	}

	module.exports = keysIn;

	/***/ }),
	/* 73 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.filter` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function arrayFilter(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      resIndex = 0,
	      result = [];

	  while (++index < length) {
	    var value = array[index];
	    if (predicate(value, index, array)) {
	      result[resIndex++] = value;
	    }
	  }
	  return result;
	}

	module.exports = arrayFilter;

	/***/ }),
	/* 74 */
	/***/ (function(module, exports) {

	/**
	 * This method returns a new empty array.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {Array} Returns the new empty array.
	 * @example
	 *
	 * var arrays = _.times(2, _.stubArray);
	 *
	 * console.log(arrays);
	 * // => [[], []]
	 *
	 * console.log(arrays[0] === arrays[1]);
	 * // => false
	 */
	function stubArray() {
	  return [];
	}

	module.exports = stubArray;

	/***/ }),
	/* 75 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    getPrototype = __webpack_require__(51),
	    getSymbols = __webpack_require__(49),
	    stubArray = __webpack_require__(74);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeGetSymbols = Object.getOwnPropertySymbols;

	/**
	 * Creates an array of the own and inherited enumerable symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of symbols.
	 */
	var getSymbolsIn = !nativeGetSymbols ? stubArray : function (object) {
	  var result = [];
	  while (object) {
	    arrayPush(result, getSymbols(object));
	    object = getPrototype(object);
	  }
	  return result;
	};

	module.exports = getSymbolsIn;

	/***/ }),
	/* 76 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(77),
	    getSymbols = __webpack_require__(49),
	    keys = __webpack_require__(17);

	/**
	 * Creates an array of own enumerable property names and symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeys(object) {
	  return baseGetAllKeys(object, keys, getSymbols);
	}

	module.exports = getAllKeys;

	/***/ }),
	/* 77 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    isArray = __webpack_require__(3);

	/**
	 * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
	 * `keysFunc` and `symbolsFunc` to get the enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @param {Function} symbolsFunc The function to get the symbols of `object`.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function baseGetAllKeys(object, keysFunc, symbolsFunc) {
	  var result = keysFunc(object);
	  return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
	}

	module.exports = baseGetAllKeys;

	/***/ }),
	/* 78 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Set = getNative(root, 'Set');

	module.exports = Set;

	/***/ }),
	/* 79 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Built-in value references. */
	var Uint8Array = root.Uint8Array;

	module.exports = Uint8Array;

	/***/ }),
	/* 80 */
	/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(81),
	    arraySome = __webpack_require__(191),
	    cacheHas = __webpack_require__(82);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * A specialized version of `baseIsEqualDeep` for arrays with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Array} array The array to compare.
	 * @param {Array} other The other array to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `array` and `other` objects.
	 * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
	 */
	function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      arrLength = array.length,
	      othLength = other.length;

	  if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
	    return false;
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(array);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var index = -1,
	      result = true,
	      seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : undefined;

	  stack.set(array, other);
	  stack.set(other, array);

	  // Ignore non-index properties.
	  while (++index < arrLength) {
	    var arrValue = array[index],
	        othValue = other[index];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, arrValue, index, other, array, stack) : customizer(arrValue, othValue, index, array, other, stack);
	    }
	    if (compared !== undefined) {
	      if (compared) {
	        continue;
	      }
	      result = false;
	      break;
	    }
	    // Recursively compare arrays (susceptible to call stack limits).
	    if (seen) {
	      if (!arraySome(other, function (othValue, othIndex) {
	        if (!cacheHas(seen, othIndex) && (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	          return seen.push(othIndex);
	        }
	      })) {
	        result = false;
	        break;
	      }
	    } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
	      result = false;
	      break;
	    }
	  }
	  stack['delete'](array);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalArrays;

	/***/ }),
	/* 81 */
	/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(43),
	    setCacheAdd = __webpack_require__(189),
	    setCacheHas = __webpack_require__(190);

	/**
	 *
	 * Creates an array cache object to store unique values.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [values] The values to cache.
	 */
	function SetCache(values) {
	    var index = -1,
	        length = values == null ? 0 : values.length;

	    this.__data__ = new MapCache();
	    while (++index < length) {
	        this.add(values[index]);
	    }
	}

	// Add methods to `SetCache`.
	SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
	SetCache.prototype.has = setCacheHas;

	module.exports = SetCache;

	/***/ }),
	/* 82 */
	/***/ (function(module, exports) {

	/**
	 * Checks if a `cache` value for `key` exists.
	 *
	 * @private
	 * @param {Object} cache The cache to query.
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function cacheHas(cache, key) {
	  return cache.has(key);
	}

	module.exports = cacheHas;

	/***/ }),
	/* 83 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7);

	/**
	 * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` if suitable for strict
	 *  equality comparisons, else `false`.
	 */
	function isStrictComparable(value) {
	  return value === value && !isObject(value);
	}

	module.exports = isStrictComparable;

	/***/ }),
	/* 84 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `matchesProperty` for source values suitable
	 * for strict equality comparisons, i.e. `===`.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function matchesStrictComparable(key, srcValue) {
	  return function (object) {
	    if (object == null) {
	      return false;
	    }
	    return object[key] === srcValue && (srcValue !== undefined || key in Object(object));
	  };
	}

	module.exports = matchesStrictComparable;

	/***/ }),
	/* 85 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.map` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function arrayMap(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length,
	      result = Array(length);

	  while (++index < length) {
	    result[index] = iteratee(array[index], index, array);
	  }
	  return result;
	}

	module.exports = arrayMap;

	/***/ }),
	/* 86 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseHasIn = __webpack_require__(202),
	    hasPath = __webpack_require__(203);

	/**
	 * Checks if `path` is a direct or inherited property of `object`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 * @example
	 *
	 * var object = _.create({ 'a': _.create({ 'b': 2 }) });
	 *
	 * _.hasIn(object, 'a');
	 * // => true
	 *
	 * _.hasIn(object, 'a.b');
	 * // => true
	 *
	 * _.hasIn(object, ['a', 'b']);
	 * // => true
	 *
	 * _.hasIn(object, 'b');
	 * // => false
	 */
	function hasIn(object, path) {
	  return object != null && hasPath(object, path, baseHasIn);
	}

	module.exports = hasIn;

	/***/ }),
	/* 87 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(88);

	/**
	 * Flattens `array` a single level deep.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to flatten.
	 * @returns {Array} Returns the new flattened array.
	 * @example
	 *
	 * _.flatten([1, [2, [3, [4]], 5]]);
	 * // => [1, 2, [3, [4]], 5]
	 */
	function flatten(array) {
	  var length = array == null ? 0 : array.length;
	  return length ? baseFlatten(array, 1) : [];
	}

	module.exports = flatten;

	/***/ }),
	/* 88 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayPush = __webpack_require__(50),
	    isFlattenable = __webpack_require__(207);

	/**
	 * The base implementation of `_.flatten` with support for restricting flattening.
	 *
	 * @private
	 * @param {Array} array The array to flatten.
	 * @param {number} depth The maximum recursion depth.
	 * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
	 * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
	 * @param {Array} [result=[]] The initial result value.
	 * @returns {Array} Returns the new flattened array.
	 */
	function baseFlatten(array, depth, predicate, isStrict, result) {
	  var index = -1,
	      length = array.length;

	  predicate || (predicate = isFlattenable);
	  result || (result = []);

	  while (++index < length) {
	    var value = array[index];
	    if (depth > 0 && predicate(value)) {
	      if (depth > 1) {
	        // Recursively flatten arrays (susceptible to call stack limits).
	        baseFlatten(value, depth - 1, predicate, isStrict, result);
	      } else {
	        arrayPush(result, value);
	      }
	    } else if (!isStrict) {
	      result[result.length] = value;
	    }
	  }
	  return result;
	}

	module.exports = baseFlatten;

	/***/ }),
	/* 89 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFindIndex = __webpack_require__(213),
	    baseIsNaN = __webpack_require__(214),
	    strictIndexOf = __webpack_require__(215);

	/**
	 * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseIndexOf(array, value, fromIndex) {
	    return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);
	}

	module.exports = baseIndexOf;

	/***/ }),
	/* 90 */
	/***/ (function(module, exports, __webpack_require__) {

	var toFinite = __webpack_require__(216);

	/**
	 * Converts `value` to an integer.
	 *
	 * **Note:** This method is loosely based on
	 * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted integer.
	 * @example
	 *
	 * _.toInteger(3.2);
	 * // => 3
	 *
	 * _.toInteger(Number.MIN_VALUE);
	 * // => 0
	 *
	 * _.toInteger(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toInteger('3.2');
	 * // => 3
	 */
	function toInteger(value) {
	  var result = toFinite(value),
	      remainder = result % 1;

	  return result === result ? remainder ? result - remainder : result : 0;
	}

	module.exports = toInteger;

	/***/ }),
	/* 91 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7),
	    isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var NAN = 0 / 0;

	/** Used to match leading and trailing whitespace. */
	var reTrim = /^\s+|\s+$/g;

	/** Used to detect bad signed hexadecimal string values. */
	var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

	/** Used to detect binary string values. */
	var reIsBinary = /^0b[01]+$/i;

	/** Used to detect octal string values. */
	var reIsOctal = /^0o[0-7]+$/i;

	/** Built-in method references without a dependency on `root`. */
	var freeParseInt = parseInt;

	/**
	 * Converts `value` to a number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to process.
	 * @returns {number} Returns the number.
	 * @example
	 *
	 * _.toNumber(3.2);
	 * // => 3.2
	 *
	 * _.toNumber(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toNumber(Infinity);
	 * // => Infinity
	 *
	 * _.toNumber('3.2');
	 * // => 3.2
	 */
	function toNumber(value) {
	  if (typeof value == 'number') {
	    return value;
	  }
	  if (isSymbol(value)) {
	    return NAN;
	  }
	  if (isObject(value)) {
	    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
	    value = isObject(other) ? other + '' : other;
	  }
	  if (typeof value != 'string') {
	    return value === 0 ? value : +value;
	  }
	  value = value.replace(reTrim, '');
	  var isBinary = reIsBinary.test(value);
	  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;
	}

	module.exports = toNumber;

	/***/ }),
	/* 92 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsZWJ = '\\u200d';

	/** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
	var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange + rsComboRange + rsVarRange + ']');

	/**
	 * Checks if `string` contains Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a symbol is found, else `false`.
	 */
	function hasUnicode(string) {
	  return reHasUnicode.test(string);
	}

	module.exports = hasUnicode;

	/***/ }),
	/* 93 */
	/***/ (function(module, exports, __webpack_require__) {

	var isSymbol = __webpack_require__(19);

	/**
	 * The base implementation of methods like `_.max` and `_.min` which accepts a
	 * `comparator` to determine the extremum value.
	 *
	 * @private
	 * @param {Array} array The array to iterate over.
	 * @param {Function} iteratee The iteratee invoked per iteration.
	 * @param {Function} comparator The comparator used to compare values.
	 * @returns {*} Returns the extremum value.
	 */
	function baseExtremum(array, iteratee, comparator) {
	  var index = -1,
	      length = array.length;

	  while (++index < length) {
	    var value = array[index],
	        current = iteratee(value);

	    if (current != null && (computed === undefined ? current === current && !isSymbol(current) : comparator(current, computed))) {
	      var computed = current,
	          result = value;
	    }
	  }
	  return result;
	}

	module.exports = baseExtremum;

	/***/ }),
	/* 94 */
	/***/ (function(module, exports, __webpack_require__) {

	var apply = __webpack_require__(244);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * A specialized version of `baseRest` which transforms the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @param {Function} transform The rest array transform.
	 * @returns {Function} Returns the new function.
	 */
	function overRest(func, start, transform) {
	  start = nativeMax(start === undefined ? func.length - 1 : start, 0);
	  return function () {
	    var args = arguments,
	        index = -1,
	        length = nativeMax(args.length - start, 0),
	        array = Array(length);

	    while (++index < length) {
	      array[index] = args[start + index];
	    }
	    index = -1;
	    var otherArgs = Array(start + 1);
	    while (++index < start) {
	      otherArgs[index] = args[index];
	    }
	    otherArgs[start] = transform(array);
	    return apply(func, this, otherArgs);
	  };
	}

	module.exports = overRest;

	/***/ }),
	/* 95 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseSetToString = __webpack_require__(245),
	    shortOut = __webpack_require__(247);

	/**
	 * Sets the `toString` method of `func` to return `string`.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var setToString = shortOut(baseSetToString);

	module.exports = setToString;

	/***/ }),
	/* 96 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.reduce` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @param {boolean} [initAccum] Specify using the first element of `array` as
	 *  the initial value.
	 * @returns {*} Returns the accumulated value.
	 */
	function arrayReduce(array, iteratee, accumulator, initAccum) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  if (initAccum && length) {
	    accumulator = array[++index];
	  }
	  while (++index < length) {
	    accumulator = iteratee(accumulator, array[index], index, array);
	  }
	  return accumulator;
	}

	module.exports = arrayReduce;

	/***/ }),
	/* 97 */
	/***/ (function(module, exports, __webpack_require__) {

	var SetCache = __webpack_require__(81),
	    arrayIncludes = __webpack_require__(255),
	    arrayIncludesWith = __webpack_require__(256),
	    cacheHas = __webpack_require__(82),
	    createSet = __webpack_require__(257),
	    setToArray = __webpack_require__(54);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * The base implementation of `_.uniqBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} [iteratee] The iteratee invoked per element.
	 * @param {Function} [comparator] The comparator invoked per element.
	 * @returns {Array} Returns the new duplicate free array.
	 */
	function baseUniq(array, iteratee, comparator) {
	  var index = -1,
	      includes = arrayIncludes,
	      length = array.length,
	      isCommon = true,
	      result = [],
	      seen = result;

	  if (comparator) {
	    isCommon = false;
	    includes = arrayIncludesWith;
	  } else if (length >= LARGE_ARRAY_SIZE) {
	    var set = iteratee ? null : createSet(array);
	    if (set) {
	      return setToArray(set);
	    }
	    isCommon = false;
	    includes = cacheHas;
	    seen = new SetCache();
	  } else {
	    seen = iteratee ? [] : result;
	  }
	  outer: while (++index < length) {
	    var value = array[index],
	        computed = iteratee ? iteratee(value) : value;

	    value = comparator || value !== 0 ? value : 0;
	    if (isCommon && computed === computed) {
	      var seenIndex = seen.length;
	      while (seenIndex--) {
	        if (seen[seenIndex] === computed) {
	          continue outer;
	        }
	      }
	      if (iteratee) {
	        seen.push(computed);
	      }
	      result.push(value);
	    } else if (!includes(seen, computed, comparator)) {
	      if (seen !== result) {
	        seen.push(computed);
	      }
	      result.push(value);
	    }
	  }
	  return result;
	}

	module.exports = baseUniq;

	/***/ }),
	/* 98 */
	/***/ (function(module, exports) {

	var _html, _tooltip;

	/**
	 * @fileOverview G2 3.0 default theme
	 * @author sima.zhang
	 */
	var DEFAULT_COLOR = '#1890FF';
	var COLOR_PLATE_8 = ['#1890FF', '#2FC25B', '#FACC14', '#223273', '#8543E0', '#13C2C2', '#3436C7', '#F04864'];
	var COLOR_PLATE_16 = ['#1890FF', '#41D9C7', '#2FC25B', '#FACC14', '#E6965C', '#223273', '#7564CC', '#8543E0', '#5C8EE6', '#13C2C2', '#5CA3E6', '#3436C7', '#B381E6', '#F04864', '#D598D9'];
	var COLOR_PLATE_24 = ['#1890FF', '#66B5FF', '#41D9C7', '#2FC25B', '#6EDB8F', '#9AE65C', '#FACC14', '#E6965C', '#57AD71', '#223273', '#738AE6', '#7564CC', '#8543E0', '#A877ED', '#5C8EE6', '#13C2C2', '#70E0E0', '#5CA3E6', '#3436C7', '#8082FF', '#DD81E6', '#F04864', '#FA7D92', '#D598D9'];
	var COLOR_PIE = ['#1890FF', '#13C2C2', '#2FC25B', '#FACC14', '#F04864', '#8543E0', '#3436C7', '#223273'];
	var COLOR_PIE_16 = ['#1890FF', '#73C9E6', '#13C2C2', '#6CD9B3', '#2FC25B', '#9DD96C', '#FACC14', '#E6965C', '#F04864', '#D66BCA', '#8543E0', '#8E77ED', '#3436C7', '#737EE6', '#223273', '#7EA2E6'];

	var FONT_FAMILY = '"-apple-system", BlinkMacSystemFont, "Segoe UI", Roboto,"Helvetica Neue", Helvetica, "PingFang SC", "Hiragino Sans GB", "Microsoft YaHei",SimSun, "sans-serif"';
	// tooltip 相关 dom 的 css 类名
	var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
	var TOOLTIP_TITLE_CLASS = 'g2-tooltip-title';
	var TOOLTIP_LIST_CLASS = 'g2-tooltip-list';
	var TOOLTIP_LIST_ITEM_CLASS = 'g2-tooltip-list-item';
	var TOOLTIP_MARKER_CLASS = 'g2-tooltip-marker';

	// html 渲染的 legend 相关 dom 的 css 类型
	var LEGEND_CONTAINER_CLASS = 'g2-legend';
	var LEGEND_TITLE_CLASS = 'g2-legend-title';
	var LEGEND_LIST_CLASS = 'g2-legend-list';
	var LEGEND_LIST_ITEM_CLASS = 'g2-legend-list-item';
	var LEGEND_MARKER_CLASS = 'g2-legend-marker';

	var Theme = {
	  defaultColor: DEFAULT_COLOR, // 默认主题色
	  plotCfg: {
	    padding: [20, 20, 95, 80]
	  },
	  fontFamily: FONT_FAMILY,
	  defaultLegendPosition: 'bottom', // 默认图例的展示位置
	  colors: COLOR_PLATE_8,
	  colors_16: COLOR_PLATE_16,
	  colors_24: COLOR_PLATE_24,
	  colors_pie: COLOR_PIE,
	  colors_pie_16: COLOR_PIE_16,
	  shapes: {
	    point: ['hollowCircle', 'hollowSquare', 'hollowDiamond', 'hollowBowtie', 'hollowTriangle', 'hollowHexagon', 'cross', 'tick', 'plus', 'hyphen', 'line'],
	    line: ['line', 'dash', 'dot'],
	    area: ['area']
	  },
	  sizes: [1, 10],
	  opacities: [0.1, 0.9],
	  axis: {
	    top: {
	      // zIndex: 1, // 默认上下方向的坐标轴位于左右坐标轴的上方
	      position: 'top',
	      title: null,
	      label: {
	        offset: 14,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        },
	        autoRotate: true
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      }
	    },
	    bottom: {
	      position: 'bottom',
	      title: null,
	      label: {
	        offset: 22,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      }
	    },
	    left: {
	      position: 'left',
	      title: null,
	      label: {
	        offset: 12,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        zIndex: -1,
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    right: {
	      position: 'right',
	      title: null,
	      label: {
	        offset: 12,
	        autoRotate: true,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          textBaseline: 'middle',
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: null,
	      tickLine: null,
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    circle: {
	      zIndex: 1,
	      title: null,
	      label: {
	        offset: 12,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          lineHeight: 20,
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        hideFirstLine: true
	      }
	    },
	    radius: {
	      zIndex: 0,
	      label: {
	        offset: 12,
	        textStyle: {
	          fill: '#545454',
	          fontSize: 12,
	          textBaseline: 'middle',
	          lineHeight: 20,
	          fontFamily: FONT_FAMILY
	        }
	      },
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        stroke: '#BFBFBF',
	        length: 4
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#E9E9E9',
	          lineWidth: 1,
	          lineDash: [3, 3]
	        },
	        type: 'circle'
	      }
	    },
	    helix: {
	      grid: null,
	      label: null,
	      title: null,
	      line: {
	        lineWidth: 1,
	        stroke: '#BFBFBF'
	      },
	      tickLine: {
	        lineWidth: 1,
	        length: 4,
	        stroke: '#BFBFBF'
	      }
	    }
	  },
	  label: {
	    offset: 20,
	    textStyle: {
	      fill: '#545454',
	      fontSize: 12,
	      textBaseline: 'middle',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  treemapLabels: {
	    offset: 10,
	    textStyle: {
	      fill: '#fff',
	      fontSize: 12,
	      textBaseline: 'top',
	      fontStyle: 'bold',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  innerLabels: {
	    textStyle: {
	      fill: '#fff',
	      fontSize: 12,
	      textBaseline: 'middle',
	      fontFamily: FONT_FAMILY
	    }
	  },
	  // 在theta坐标系下的饼图文本内部的样式
	  thetaLabels: {
	    labelLine: {
	      lineWidth: 1
	    },
	    labelHeight: 14,
	    offset: 30
	    // 在theta坐标系下的饼图文本的样式
	  },
	  legend: {
	    right: {
	      position: 'right',
	      layout: 'vertical',
	      itemMarginBottom: 8, // layout 为 vertical 时各个图例项的间距
	      width: 16,
	      height: 156,
	      title: null,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    left: {
	      position: 'left',
	      layout: 'vertical',
	      itemMarginBottom: 8,
	      width: 16,
	      height: 156,
	      title: null,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    top: {
	      position: 'top',
	      offset: 6,
	      layout: 'horizontal',
	      title: null,
	      itemGap: 10,
	      width: 156,
	      height: 16,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    bottom: {
	      position: 'bottom',
	      offset: 6,
	      layout: 'horizontal',
	      title: null,
	      itemGap: 10,
	      width: 156,
	      height: 16,
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    // 定义 html 渲染图例的样式
	    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
	      height: 'auto',
	      width: 'auto',
	      position: 'absolute',
	      overflow: 'auto',
	      fontSize: '12px',
	      fontFamily: FONT_FAMILY,
	      lineHeight: '20px',
	      color: '#8C8C8C'
	    }, _html['' + LEGEND_TITLE_CLASS] = {
	      marginBottom: '4px'
	    }, _html['' + LEGEND_LIST_CLASS] = {
	      listStyleType: 'none',
	      margin: 0,
	      padding: 0
	    }, _html['' + LEGEND_LIST_ITEM_CLASS] = {
	      cursor: 'pointer',
	      marginBottom: '5px',
	      marginRight: '24px'
	    }, _html['' + LEGEND_MARKER_CLASS] = {
	      width: '9px',
	      height: '9px',
	      borderRadius: '50%',
	      display: 'inline-block',
	      marginRight: '8px',
	      verticalAlign: 'middle'
	    }, _html),
	    // 不能滑动的连续图例样式
	    gradient: {
	      textStyle: {
	        fill: '#8C8C8C',
	        fontSize: 12,
	        textAlign: 'center',
	        textBaseline: 'middle',
	        lineHeight: 20,
	        fontFamily: FONT_FAMILY
	      }, // 图例项文本的样式
	      lineStyle: {
	        lineWidth: 1,
	        stroke: '#fff'
	      },
	      unCheckColor: '#bfbfbf'
	    },
	    margin: [0, 20, 24, 5], // 图例跟四个边的坐标轴、绘图区域的间距
	    legendMargin: 24 // 图例之间的间距
	  },
	  tooltip: (_tooltip = {
	    crosshairs: false,
	    offset: 15
	  }, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
	    position: 'absolute',
	    visibility: 'hidden',
	    whiteSpace: 'nowrap',
	    zIndex: 8,
	    transition: 'visibility 0.2s cubic-bezier(0.23, 1, 0.32, 1), left 0.4s cubic-bezier(0.23, 1, 0.32, 1), top 0.4s cubic-bezier(0.23, 1, 0.32, 1)',
	    backgroundColor: 'rgba(0, 0, 0, 0.65)',
	    borderRadius: '4px',
	    color: 'rgb(255, 255, 255)',
	    fontSize: '12px',
	    fontFamily: FONT_FAMILY,
	    lineHeight: '20px',
	    padding: '10px 10px 6px 10px'
	  }, _tooltip['' + TOOLTIP_TITLE_CLASS] = {
	    marginBottom: '4px'
	  }, _tooltip['' + TOOLTIP_LIST_CLASS] = {
	    margin: 0,
	    listStyleType: 'none',
	    padding: 0
	  }, _tooltip['' + TOOLTIP_LIST_ITEM_CLASS] = {
	    marginBottom: '4px'
	  }, _tooltip['' + TOOLTIP_MARKER_CLASS] = {
	    width: '7px',
	    height: '7px',
	    borderRadius: '50%',
	    border: '1px solid #fff',
	    display: 'inline-block',
	    marginRight: '8px'
	  }, _tooltip),
	  tooltipMarker: {
	    symbol: function symbol(x, y, r, ctx, marker) {
	      var color = marker.get('color');
	      ctx.fillStyle = color;
	      ctx.lineWidth = 1;
	      ctx.strokeStyle = '#fff';
	      ctx.beginPath();
	      ctx.arc(x, y, r, 0, Math.PI * 2, false);
	      ctx.fill();
	      ctx.stroke();

	      ctx.save();
	      ctx.beginPath();
	      ctx.fillStyle = '#fff';
	      ctx.strokeStyle = color;
	      ctx.globalAlpha = 0.2;
	      ctx.lineWidth = 3;
	      ctx.arc(x, y, 6, 0, Math.PI * 2, false);
	      ctx.stroke();
	      ctx.restore();
	    },
	    radius: 4
	  }, // 提示信息在折线图、区域图上形成点的样式
	  tooltipCrosshairsRect: {
	    type: 'rect',
	    style: {
	      fill: '#CCD6EC',
	      opacity: 0.3
	    }
	  }, // tooltip 辅助背景框样式
	  tooltipCrosshairsLine: {
	    style: {
	      stroke: 'rgba(0, 0, 0, 0.25)',
	      lineWidth: 1
	    }
	  },
	  shape: {
	    point: {
	      lineWidth: 1,
	      fill: DEFAULT_COLOR,
	      radius: 4
	    },
	    hollowPoint: {
	      fill: '#fff',
	      lineWidth: 1,
	      stroke: DEFAULT_COLOR,
	      radius: 3
	    },
	    interval: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.85
	    },
	    hollowInterval: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    area: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 0.3
	    },
	    polygon: {
	      lineWidth: 0,
	      fill: DEFAULT_COLOR,
	      fillOpacity: 1
	    },
	    hollowPolygon: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    hollowArea: {
	      fill: '#fff',
	      stroke: DEFAULT_COLOR,
	      fillOpacity: 0,
	      lineWidth: 2
	    },
	    line: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 2,
	      fill: null
	    },
	    edge: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 1,
	      fill: null
	    },
	    schema: {
	      stroke: DEFAULT_COLOR,
	      lineWidth: 1,
	      fill: null
	    }
	  },
	  guide: {
	    line: {
	      lineStyle: {
	        stroke: DEFAULT_COLOR,
	        lineDash: [0, 2, 2],
	        lineWidth: 1
	      },
	      text: {
	        position: 'end',
	        autoRotate: true,
	        style: {
	          fill: '#545454',
	          fontSize: 12,
	          textAlign: 'center',
	          fontFamily: FONT_FAMILY
	        }
	      }
	    },
	    text: {
	      style: {
	        fill: '#545454',
	        fontSize: 12,
	        textBaseline: 'middle',
	        textAlign: 'start',
	        fontFamily: FONT_FAMILY

	      }
	    },
	    region: {
	      style: {
	        lineWidth: 0, // 辅助框的边框宽度
	        fill: '#000', // 辅助框填充的颜色
	        fillOpacity: 0.04 // 辅助框的背景透明度
	        // 辅助框的图形样式属性
	      } },
	    html: {
	      alignX: 'middle',
	      alignY: 'middle'
	    }
	  },
	  pixelRatio: null
	};

	module.exports = Theme;

	/***/ }),
	/* 99 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Labels = __webpack_require__(100);
	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);
	var IGNORE_ARR = ['line', 'point', 'path'];
	var ORIGIN = '_origin';

	function avg(arr) {
	  var sum = 0;
	  Util.each(arr, function (value) {
	    sum += value;
	  });
	  return sum / arr.length;
	}

	var GeomLabels = function (_Group) {
	  _inherits(GeomLabels, _Group);

	  function GeomLabels() {
	    _classCallCheck(this, GeomLabels);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  GeomLabels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      label: Global.label,
	      /**
	       * 用户传入的文本配置信息
	       * @type {Object}
	       */
	      labelCfg: null,
	      /**
	       * 所在的坐标系
	       * @type {Object}
	       */
	      coord: null,
	      /**
	       * 图表的类型
	       * @type {String}
	       */
	      geomType: null,
	      zIndex: 6
	    };
	  };

	  GeomLabels.prototype._renderUI = function _renderUI() {
	    _Group.prototype._renderUI.call(this);
	    this.initLabelsCfg();
	    this.renderLabels(); // 调用入口文件
	  };

	  // 获取显示的 label 文本值


	  GeomLabels.prototype._getLabelValue = function _getLabelValue(record) {
	    var self = this;
	    var originRecord = record[ORIGIN];
	    var labelCfg = self.get('labelCfg');
	    var scales = labelCfg.scales;
	    var callback = labelCfg.cfg && labelCfg.cfg.content;
	    var value = void 0;
	    if (callback) {
	      var params = [];
	      Util.each(scales, function (scale) {
	        params.push(originRecord[scale.field]);
	      });
	      value = callback.apply(null, params);
	    } else {
	      var scale = scales[0];
	      value = originRecord[scale.field];
	      if (Util.isArray(value)) {
	        var tmp = [];
	        Util.each(value, function (subVal) {
	          tmp.push(scale.getText(subVal));
	        });
	        value = tmp;
	      } else {
	        value = scale.getText(value);
	      }
	    }
	    return value;
	  };

	  // 初始化labels的配置项


	  GeomLabels.prototype.initLabelsCfg = function initLabelsCfg() {
	    var self = this;
	    var labels = self.getDefaultLabelCfg();
	    var labelCfg = self.get('labelCfg');
	    // Util.merge(labels, labelCfg.cfg);
	    Util.deepMix(labels, labelCfg.cfg);
	    self.set('label', labels);
	  };

	  /**
	   * @protected
	   * 默认的文本样式
	   * @return {Object} default label config
	   */


	  GeomLabels.prototype.getDefaultLabelCfg = function getDefaultLabelCfg() {
	    var self = this;
	    var labelCfg = self.get('labelCfg').cfg;
	    var geomType = self.get('geomType');
	    if (geomType === 'polygon' || labelCfg && labelCfg.offset < 0 && Util.indexOf(IGNORE_ARR, geomType) === -1) {
	      // return Util.merge({}, self.get('label'), Global.innerLabels);
	      return Util.deepMix({}, self.get('label'), Global.innerLabels);
	    }
	    // return Util.merge({}, Global.label, self.get('label'));
	    return Util.deepMix({}, Global.label, self.get('label'));
	  };

	  /**
	   * @protected
	   * 获取labels
	   * @param {Array} points points
	   * @return {Array} label items
	   */


	  GeomLabels.prototype.getLabelsItems = function getLabelsItems(points) {
	    var self = this;
	    var items = [];
	    var labels = self.get('label');
	    var geom = self.get('geom');
	    var origin = void 0;

	    // 获取label相关的x，y的值，获取具体的x,y,防止存在数组
	    Util.each(points, function (point) {
	      origin = point._origin;
	      var label = self._getLabelValue(point);
	      if (!Util.isArray(label)) {
	        label = [label];
	      }
	      var total = label.length;

	      Util.each(label, function (sub, subIdx) {
	        var obj = self.getLabelPoint(label, point, subIdx);
	        // 文本为 null, undefined, 空字符串时不显示
	        // 但是文本为 0 时，需要显示
	        if (obj && !Util.isNil(obj.text) && obj.text !== '') {
	          obj = Util.mix({}, origin, obj); // 为了格式化输出
	          var align = void 0;
	          if (labels && labels.label && labels.label.textAlign) {
	            align = labels.label.textAlign;
	          } else {
	            align = self.getLabelAlign(obj, subIdx, total);
	          }
	          obj.textAlign = align;
	          if (geom) {
	            obj._id = geom._getShapeId(origin) + '-glabel-' + subIdx + '-' + obj.text;
	          }
	          obj.coord = self.get('coord');
	          items.push(obj);
	        }
	      });
	    });
	    return items;
	  };

	  /**
	   * @protected
	   * 如果发生冲突则会调整文本的位置
	   * @param {Array} items 文本的集合
	   * @return {Array} adjusted items
	   */


	  GeomLabels.prototype.adjustItems = function adjustItems(items) {
	    return items;
	  };

	  /**
	   * drawing lines to labels
	   * @param  {Array} items labels
	   * @param  {Object} labelLine configuration for label lines
	   */


	  GeomLabels.prototype.drawLines = function drawLines(items, labelLine) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      Util.each(items, function (point) {
	        self.lineToLabel(point, labelLine);
	      });
	    }
	  };

	  // 连接线


	  GeomLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
	    var self = this;
	    var coord = self.get('coord');
	    var start = {
	      x: label.x - label._offset.x,
	      y: label.y - label._offset.y
	    };
	    var inner = {
	      x: (start.x + label.x) / 2,
	      y: (start.y + label.y) / 2
	    };
	    var lineGroup = self.get('lineGroup');
	    // var lineShape;
	    if (!lineGroup) {
	      lineGroup = self.addGroup({
	        elCls: 'x-line-group'
	      });
	      self.set('lineGroup', lineGroup);
	    }
	    var lineShape = lineGroup.addShape('path', {
	      attrs: Util.mix({
	        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
	        fill: null,
	        stroke: label.color
	      }, labelLine)
	    });
	    // label 对应线的动画关闭
	    lineShape.name = 'labelLine';
	    // generate labelLine id according to label id
	    lineShape._id = label._id && label._id.replace('glabel', 'glabelline');
	    lineShape.set('coord', coord);
	  };

	  /**
	   * @protected
	   * 获取文本的位置信息
	   * @param {Array} labels labels
	   * @param {Object} point point
	   * @param {Number} index index
	   * @return {Object} point
	   */


	  GeomLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
	    var self = this;
	    var coord = self.get('coord');

	    function getDimValue(value, idx) {
	      if (Util.isArray(value)) {
	        if (labels.length === 1) {
	          // 如果仅一个label,多个y,取最后一个y
	          if (value.length <= 2) {
	            value = value[value.length - 1];
	            // value = value[0];
	          } else {
	            value = avg(value);
	          }
	        } else {
	          value = value[idx];
	        }
	      }
	      return value;
	    }

	    var labelPoint = {
	      x: getDimValue(point.x, index),
	      y: getDimValue(point.y, index),
	      text: labels[index]
	    };

	    // get nearest point of the shape as the label line start point
	    if (point && point.nextPoints && (point.shape === 'funnel' || point.shape === 'pyramid')) {
	      var maxX = -Infinity;
	      point.nextPoints.forEach(function (p) {
	        p = coord.convert(p);
	        if (p.x > maxX) {
	          maxX = p.x;
	        }
	      });
	      labelPoint.x = (labelPoint.x + maxX) / 2;
	    }
	    // sharp edge of the pyramid
	    if (point.shape === 'pyramid' && !point.nextPoints && point.points) {
	      point.points.forEach(function (p) {
	        p = coord.convert(p);
	        if (Util.isArray(p.x) && point.x.indexOf(p.x) === -1 || Util.isNumber(p.x) && point.x !== p.x) {
	          labelPoint.x = (labelPoint.x + p.x) / 2;
	        }
	      });
	    }

	    var offsetPoint = self.getLabelOffset(labelPoint, index, labels.length);
	    self.transLabelPoint(labelPoint);
	    labelPoint.x += offsetPoint.x;
	    labelPoint.y += offsetPoint.y;
	    labelPoint.color = point.color;
	    labelPoint._offset = offsetPoint;
	    return labelPoint;
	  };

	  GeomLabels.prototype.transLabelPoint = function transLabelPoint(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var tmpPoint = coord.applyMatrix(point.x, point.y, 1);
	    point.x = tmpPoint[0];
	    point.y = tmpPoint[1];
	  };

	  GeomLabels.prototype.getOffsetVector = function getOffsetVector() {
	    var self = this;
	    var labelCfg = self.get('label');
	    var offset = labelCfg.offset || 0;
	    var coord = self.get('coord');
	    var vector = void 0;
	    if (coord.isTransposed) {
	      // 如果x,y翻转，则偏移x
	      vector = coord.applyMatrix(offset, 0);
	    } else {
	      // 否则，偏转y
	      vector = coord.applyMatrix(0, offset);
	    }
	    return vector;
	  };

	  // 获取默认的偏移量


	  GeomLabels.prototype.getDefaultOffset = function getDefaultOffset() {
	    var self = this;
	    var offset = 0; // Global.labels.offset;

	    var coord = self.get('coord');
	    var vector = self.getOffsetVector();
	    if (coord.isTransposed) {
	      // 如果x,y翻转，则偏移x
	      offset = vector[0];
	    } else {
	      // 否则，偏转y
	      offset = vector[1];
	    }
	    return offset;
	  };

	  // 获取文本的偏移位置，x,y


	  GeomLabels.prototype.getLabelOffset = function getLabelOffset(point, index, total) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    var coord = self.get('coord');
	    var transposed = coord.isTransposed;
	    var yField = transposed ? 'x' : 'y';
	    var factor = transposed ? 1 : -1; // y 方向上越大，像素的坐标越小，所以transposed时将系数变成
	    var offsetPoint = {
	      x: 0,
	      y: 0
	    };
	    if (index > 0 || total === 1) {
	      // 判断是否小于0
	      offsetPoint[yField] = offset * factor;
	    } else {
	      offsetPoint[yField] = offset * factor * -1;
	    }
	    return offsetPoint;
	  };

	  GeomLabels.prototype.getLabelAlign = function getLabelAlign(point, index, total) {
	    var self = this;
	    var align = 'center';
	    var coord = self.get('coord');
	    if (coord.isTransposed) {
	      var offset = self.getDefaultOffset();
	      // var vector = coord.applyMatrix(offset,0);
	      if (offset < 0) {
	        align = 'right';
	      } else if (offset === 0) {
	        align = 'center';
	      } else {
	        align = 'left';
	      }
	      if (total > 1 && index === 0) {
	        if (align === 'right') {
	          align = 'left';
	        } else if (align === 'left') {
	          align = 'right';
	        }
	      }
	    }
	    return align;
	  };

	  GeomLabels.prototype.showLabels = function showLabels(points) {
	    var self = this;
	    var items = self.getLabelsItems(points);
	    var labels = self.get('label');
	    items = self.adjustItems(items);
	    self.resetLabels(items);
	    if (labels.labelLine) {
	      self.drawLines(items, labels.labelLine);
	    }
	  };

	  GeomLabels.prototype.destroy = function destroy() {
	    this.removeLabels(); // 清理文本
	    _Group.prototype.destroy.call(this);
	  };

	  return GeomLabels;
	}(Group);

	Util.assign(GeomLabels.prototype, Labels.LabelsRenderer);

	module.exports = GeomLabels;

	/***/ }),
	/* 100 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of labels
	 * @author sima.zhang
	 */
	var Labels = __webpack_require__(101);
	Labels.LabelsRenderer = __webpack_require__(285);

	module.exports = Labels;

	/***/ }),
	/* 101 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The Label class
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil,
	    Group = _require.Group;

	var Labels = function (_Group) {
	  _inherits(Labels, _Group);

	  function Labels() {
	    _classCallCheck(this, Labels);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Labels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 6,
	      /**
	       * 显示的文本集合
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 文本样式
	       * @type {(Object|Function)}
	       */
	      textStyle: null,
	      /**
	       * 文本显示格式化回调函数
	       * @type {Function}
	       */
	      formatter: null,
	      /**
	       * 使用 html 渲染文本
	       * @type {(String|Function)}
	      */
	      htmlTemplate: null,
	      /**
	       * html 渲染时用的容器的模板，必须存在 class = "g-labels"
	       * @type {String}
	       */
	      _containerTpl: '<div class="g-labels" style="position:absolute;top:0;left:0;"></div>',
	      /**
	       * html 渲染时单个 label 的模板，必须存在 class = "g-label"，如果 htmlTemplate 为字符串，则使用 htmlTemplate
	       * @type {String}
	       */
	      _itemTpl: '<div class="g-label" style="position:absolute;">{text}</div>'
	    };
	  };

	  Labels.prototype._renderUI = function _renderUI() {
	    this._drawLabels();
	  };

	  Labels.prototype._drawLabels = function _drawLabels() {
	    var self = this;
	    var items = self.get('items');
	    Util.each(items, function (item, index) {
	      self._addLabel(item, index);
	    });
	  };

	  Labels.prototype._addLabel = function _addLabel(item, index) {
	    var cfg = this._getLabelCfg(item, index);
	    return this._createText(cfg);
	  };

	  Labels.prototype._getLabelCfg = function _getLabelCfg(item, index) {
	    var textStyle = this.get('textStyle') || {};
	    var formatter = this.get('formatter');
	    var htmlTemplate = this.get('htmlTemplate');

	    if (!Util.isObject(item)) {
	      var tmp = item;
	      item = {};
	      item.text = tmp;
	    }

	    if (Util.isFunction(textStyle)) {
	      textStyle = textStyle(item.text, item, index);
	    }

	    if (formatter) {
	      item.text = formatter(item.text, item, index);
	    }

	    if (Util.isFunction(htmlTemplate)) {
	      item.text = htmlTemplate(item.text, item, index);
	    }

	    if (Util.isNil(item.text)) {
	      item.text = '';
	    }

	    item.text = item.text + ''; // ? 为什么转换为字符串

	    var cfg = Util.mix({}, item, textStyle, {
	      x: item.x || 0,
	      y: item.y || 0
	    });

	    return cfg;
	  };

	  Labels.prototype._createText = function _createText(cfg) {
	    var htmlTemplate = this.get('htmlTemplate');
	    var customDiv = this.get('customDiv');
	    var labelShape = void 0;

	    if (htmlTemplate) {
	      if (!customDiv) {
	        var containerTpl = this.get('_containerTpl');
	        var wrapper = this.get('canvas').get('el').parentNode;
	        customDiv = DomUtil.createDom(containerTpl);
	        wrapper.style.position = 'relative';
	        wrapper.appendChild(customDiv);
	        this.set('customDiv', customDiv);
	      }

	      var node = this._createDom(cfg);
	      customDiv.appendChild(node);
	      this._setCustomPosition(cfg, node);
	    } else {
	      var origin = cfg.point;
	      delete cfg.point; // 临时解决，否则影响动画
	      labelShape = this.addShape('text', {
	        attrs: cfg
	      });
	      labelShape.setSilent('origin', origin);
	      labelShape.name = 'label'; // 用于事件标注
	      this.get('appendInfo') && labelShape.setSilent('appendInfo', this.get('appendInfo'));
	      return labelShape;
	    }
	  };

	  Labels.prototype._setCustomPosition = function _setCustomPosition(cfg, htmlDom) {
	    var textAlign = cfg.textAlign || 'left';
	    var top = cfg.y;
	    var left = cfg.x;
	    var width = DomUtil.getOuterWidth(htmlDom);
	    var height = DomUtil.getOuterHeight(htmlDom);

	    top = top - height / 2;
	    if (textAlign === 'center') {
	      left = left - width / 2;
	    } else if (textAlign === 'right') {
	      left = left - width;
	    }

	    htmlDom.style.top = parseInt(top, 10) + 'px';
	    htmlDom.style.left = parseInt(left, 10) + 'px';
	  };

	  Labels.prototype._createDom = function _createDom(cfg) {
	    var itemTpl = this.get('_itemTpl');
	    var htmlTemplate = this.get('htmlTemplate');

	    if (Util.isString(htmlTemplate)) {
	      cfg.text = Util.substitute(htmlTemplate, { text: cfg.text });
	    }

	    var str = Util.substitute(itemTpl, { text: cfg.text });

	    return DomUtil.createDom(str);
	  };

	  Labels.prototype.getLabels = function getLabels() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      return Util.toArray(customDiv.childNodes);
	    }
	    return this.get('children');
	  };

	  Labels.prototype.addLabel = function addLabel(item) {
	    var items = this.get('items');
	    var count = items.length;
	    items.push(item);
	    return this._addLabel(item, count);
	  };

	  Labels.prototype.changeLabel = function changeLabel(oldLabel, newLabel) {
	    if (!oldLabel) {
	      return;
	    }
	    var htmlTemplate = this.get('htmlTemplate');
	    var index = Util.indexOf(this.getLabels(), oldLabel);
	    var cfg = this._getLabelCfg(newLabel, index);
	    if (htmlTemplate) {
	      var node = this._createDom(cfg);
	      oldLabel.innerHTML = node.innerHTML;
	      this._setCustomPosition(cfg, oldLabel);
	    } else {
	      oldLabel._id = newLabel._id;
	      oldLabel.attr('text', cfg.text);
	      if (oldLabel.attr('x') !== cfg.x || oldLabel.attr('y') !== cfg.y) {
	        var rotate = oldLabel.get('attrs').rotate;
	        if (rotate) {
	          oldLabel.rotateAtStart(-rotate);
	          oldLabel.attr(cfg);
	          oldLabel.rotateAtStart(rotate);
	        } else {
	          oldLabel.attr(cfg);
	        }
	      }
	    }
	  };

	  Labels.prototype.clear = function clear() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      customDiv.innerHTML = '';
	    }
	    _Group.prototype.clear.call(this);
	  };

	  Labels.prototype.setItems = function setItems(items) {
	    this.clear();
	    this.set('items', items);
	    this._drawLabels();
	  };

	  Labels.prototype.remove = function remove() {
	    var customDiv = this.get('customDiv');
	    if (customDiv) {
	      customDiv.parentNode.removeChild(customDiv);
	    }
	    _Group.prototype.remove.call(this);
	  };

	  return Labels;
	}(Group);

	module.exports = Labels;

	/***/ }),
	/* 102 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Labels = __webpack_require__(99);
	var PathUtil = __webpack_require__(22);
	var Util = __webpack_require__(0);

	var PolarLabels = function (_Labels) {
	  _inherits(PolarLabels, _Labels);

	  function PolarLabels() {
	    _classCallCheck(this, PolarLabels);

	    return _possibleConstructorReturn(this, _Labels.apply(this, arguments));
	  }

	  PolarLabels.prototype.getPointRauis = function getPointRauis(coord, point) {
	    return PathUtil.getPointRadius(coord, point);
	  };

	  PolarLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset, point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var labelEmit = self._isEmitLabels();
	    var r = self.getPointRauis(coord, point);
	    if (coord.isTransposed && r > offset && !labelEmit) {
	      var appendAngle = Math.asin(offset / (2 * r));
	      angle = angle + appendAngle * 2;
	    } else {
	      r = r + offset;
	    }

	    return {
	      x: center.x + r * Math.cos(angle),
	      y: center.y + r * Math.sin(angle),
	      angle: angle,
	      r: r
	    };
	  };

	  PolarLabels.prototype.getArcPoint = function getArcPoint(point, index) {
	    var self = this;

	    var outerPoint = void 0; // 圆弧上的中点
	    // var coord = self.get('coord');
	    index = index || 0;
	    if (Util.isArray(point.x) || Util.isArray(point.y)) {
	      outerPoint = {
	        x: Util.isArray(point.x) ? point.x[index] : point.x,
	        y: Util.isArray(point.y) ? point.y[index] : point.y
	      };
	    } else {
	      outerPoint = point;
	    }
	    self.transLabelPoint(outerPoint);
	    return outerPoint;
	  };

	  // 获取点所在的角度


	  PolarLabels.prototype.getPointAngle = function getPointAngle(point) {
	    var self = this;
	    var coord = self.get('coord');
	    return PathUtil.getPointAngle(coord, point);
	  };

	  // 获取中心的位置


	  PolarLabels.prototype.getMiddlePoint = function getMiddlePoint(points) {
	    var self = this;
	    var coord = self.get('coord');
	    var count = points.length;
	    var middlePoint = {
	      x: 0,
	      y: 0
	    };
	    Util.each(points, function (point) {
	      middlePoint.x += point.x;
	      middlePoint.y += point.y;
	    });
	    middlePoint.x /= count;
	    middlePoint.y /= count;

	    middlePoint = coord.convert(middlePoint);
	    return middlePoint;
	  };

	  // 是否居中


	  PolarLabels.prototype._isToMiddle = function _isToMiddle(point) {
	    return point.x.length > 2;
	  };

	  /**
	   * @protected
	   * 获取文本的位置信息
	   * @param {Array} labels labels
	   * @param {Object} point point
	   * @param {Number} index index
	   * @return {Object} point
	   */


	  PolarLabels.prototype.getLabelPoint = function getLabelPoint(labels, point, index) {
	    var self = this;
	    var text = labels[index];
	    var factor = 1;
	    var arcPoint = void 0;
	    if (self._isToMiddle(point)) {
	      arcPoint = self.getMiddlePoint(point.points);
	    } else {
	      if (labels.length === 1 && index === 0) {
	        index = 1;
	      } else if (index === 0) {
	        factor = -1;
	      }
	      arcPoint = self.getArcPoint(point, index);
	    }

	    var offset = self.getDefaultOffset();
	    offset = offset * factor;
	    var middleAngle = self.getPointAngle(arcPoint);
	    var labelPoint = self.getCirclePoint(middleAngle, offset, arcPoint);
	    labelPoint.text = text;
	    labelPoint.angle = middleAngle;
	    labelPoint.color = point.color;

	    labelPoint.rotate = self.getLabelRotate(middleAngle, offset, point);
	    return labelPoint;
	  };

	  PolarLabels.prototype._isEmitLabels = function _isEmitLabels() {
	    var labels = this.get('label');
	    return labels.labelEmit;
	  };

	  /**
	   * @protected
	   * 获取文本旋转的方向
	   * @param {Number} angle angle
	   * @return {Number} angle
	   */


	  PolarLabels.prototype.getLabelRotate = function getLabelRotate(angle) {
	    var self = this;
	    var rotate = void 0;
	    rotate = angle * 180 / Math.PI;
	    rotate += 90;

	    if (self._isEmitLabels()) {
	      rotate -= 90;
	    }
	    if (rotate) {
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      } else if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  };

	  // override


	  PolarLabels.prototype.getLabelAlign = function getLabelAlign(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var align = void 0;
	    if (self._isEmitLabels()) {
	      if (point.angle <= Math.PI / 2 && point.angle > -Math.PI / 2) {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    } else if (!coord.isTransposed) {
	      align = 'center';
	    } else {
	      var center = coord.getCenter();
	      var offset = self.getDefaultOffset();
	      if (Math.abs(point.x - center.x) < 1) {
	        align = 'center';
	      } else if (point.angle > Math.PI || point.angle <= 0) {
	        if (offset > 0) {
	          align = 'left';
	        } else {
	          align = 'right';
	        }
	      } else {
	        if (offset > 0) {
	          align = 'right';
	        } else {
	          align = 'left';
	        }
	      }
	    }
	    return align;
	  };

	  return PolarLabels;
	}(Labels);

	module.exports = PolarLabels;

	/***/ }),
	/* 103 */
	/***/ (function(module, exports, __webpack_require__) {

	module.exports = {
	  Scale: __webpack_require__(291),
	  Coord: __webpack_require__(299),
	  Axis: __webpack_require__(304),
	  Guide: __webpack_require__(311),
	  Legend: __webpack_require__(320),
	  Tooltip: __webpack_require__(326),
	  Event: __webpack_require__(328)
	};

	/***/ }),
	/* 104 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Scale entry, used to reference all the scales
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Base = __webpack_require__(36);
	Base.Linear = __webpack_require__(37);
	Base.Identity = __webpack_require__(293);
	Base.Cat = __webpack_require__(106);
	Base.Time = __webpack_require__(294);
	Base.TimeCat = __webpack_require__(296);
	Base.Log = __webpack_require__(297);
	Base.Pow = __webpack_require__(298);

	var _loop = function _loop(k) {
	  if (Base.hasOwnProperty(k)) {
	    var methodName = Util.lowerFirst(k);
	    Base[methodName] = function (cfg) {
	      return new Base[k](cfg);
	    };
	  }
	};

	for (var k in Base) {
	  _loop(k);
	}

	var CAT_ARR = ['cat', 'timeCat'];

	Base.isCategory = function (type) {
	  return CAT_ARR.indexOf(type) >= 0;
	};

	module.exports = Base;

	/***/ }),
	/* 105 */
	/***/ (function(module, exports) {

	/**
	 * @fileOverview 计算方法
	 * @author dxq613@gmail.com
	 */

	// 如果小数点后面超过 10 位浮点数时进行一下处理
	var DECIMAL_LENGTH = 12;
	// 获取系数
	function getFactor(v) {
	  var factor = 1;
	  if (v === Infinity || v === -Infinity) {
	    throw new Error('Not support Infinity!');
	  }
	  if (v < 1) {
	    var count = 0;
	    while (v < 1) {
	      factor = factor / 10;
	      v = v * 10;
	      count++;
	    }
	    // 浮点数计算出现问题
	    if (factor.toString().length > DECIMAL_LENGTH) {
	      factor = parseFloat(factor.toFixed(count));
	    }
	  } else {
	    while (v > 10) {
	      factor = factor * 10;
	      v = v / 10;
	    }
	  }

	  return factor;
	}

	// 取小于当前值的
	function arrayFloor(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }

	  var pre = values[0];

	  if (value < values[0]) {
	    return NaN;
	  }

	  if (value >= values[length - 1]) {
	    return values[length - 1];
	  }
	  for (var i = 1; i < values.length; i++) {
	    if (value < values[i]) {
	      break;
	    }
	    pre = values[i];
	  }

	  return pre;
	}

	// 大于当前值的第一个
	function arrayCeiling(values, value) {
	  var length = values.length;
	  if (length === 0) {
	    return NaN;
	  }
	  // var pre = values[0];
	  var rst = void 0;
	  if (value > values[length - 1]) {
	    return NaN;
	  }
	  if (value < values[0]) {
	    return values[0];
	  }

	  for (var i = 1; i < values.length; i++) {
	    if (value <= values[i]) {
	      rst = values[i];
	      break;
	    }
	  }

	  return rst;
	}

	var Util = {
	  // 获取逼近的数值
	  snapFactorTo: function snapFactorTo(v, arr, snapType) {
	    // 假设 v = -512,isFloor = true
	    if (isNaN(v)) {
	      return NaN;
	    }
	    var factor = 1; // 计算系数
	    if (v !== 0) {
	      if (v < 0) {
	        factor = -1;
	      }
	      v = v * factor; // v = 512
	      var tmpFactor = getFactor(v);
	      factor = factor * tmpFactor; // factor = -100

	      v = v / tmpFactor; // v = 5.12
	    }
	    if (snapType === 'floor') {
	      v = Util.snapFloor(arr, v); // v = 5
	    } else if (snapType === 'ceil') {
	      v = Util.snapCeiling(arr, v); // v = 6
	    } else {
	      v = Util.snapTo(arr, v); // 四舍五入 5
	    }
	    var rst = v * factor;
	    // 如果出现浮点数计算问题，需要处理一下
	    if (Math.abs(factor) < 1 && rst.toString().length > DECIMAL_LENGTH) {
	      var decimalVal = parseInt(1 / factor);
	      var symbol = factor > 0 ? 1 : -1;
	      rst = v / decimalVal * symbol;
	    }
	    return rst;
	  },

	  // 获取逼近的倍数
	  snapMultiple: function snapMultiple(v, base, snapType) {
	    var div = void 0;
	    if (snapType === 'ceil') {
	      div = Math.ceil(v / base);
	    } else if (snapType === 'floor') {
	      div = Math.floor(v / base);
	    } else {
	      div = Math.round(v / base);
	    }
	    return div * base;
	  },

	  /**
	   * 获取逼近的值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的值
	   */
	  snapTo: function snapTo(values, value) {
	    // 这里假定values是升序排列
	    var floorVal = arrayFloor(values, value);
	    var ceilingVal = arrayCeiling(values, value);
	    if (isNaN(floorVal) || isNaN(ceilingVal)) {
	      if (values[0] >= value) {
	        return values[0];
	      }
	      var last = values[values.length - 1];
	      if (last <= value) {
	        return last;
	      }
	    }
	    if (Math.abs(value - floorVal) < Math.abs(ceilingVal - value)) {
	      return floorVal;
	    }
	    return ceilingVal;
	  },

	  /**
	   * 获取逼近的最小值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最小值
	   */
	  snapFloor: function snapFloor(values, value) {
	    // 这里假定values是升序排列
	    return arrayFloor(values, value);
	  },

	  /**
	   * 获取逼近的最大值，用于对齐数据
	   * @param  {Array} values   数据集合
	   * @param  {Number} value   数值
	   * @return {Number} 逼近的最大值
	   */
	  snapCeiling: function snapCeiling(values, value) {
	    // 这里假定values是升序排列
	    return arrayCeiling(values, value);
	  }
	};

	module.exports = Util;

	/***/ }),
	/* 106 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the scale function to process the categories
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);
	var catAuto = __webpack_require__(107);

	/**
	 * 度量的构造函数
	 * @class Scale.Category
	 */

	var Category = function (_Base) {
	  _inherits(Category, _Base);

	  function Category() {
	    _classCallCheck(this, Category);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Category.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type of the scale
	       * @type {String}
	       */
	      type: 'cat',

	      /**
	       * 自动生成标记时的个数
	       * @type {Number}
	       * @default null
	       */
	      tickCount: null,

	      /**
	       * 是否分类度量
	       * @type {Boolean}
	       */
	      isCategory: true
	    });
	  };

	  /**
	   * @override
	   */


	  Category.prototype.init = function init() {
	    var self = this;
	    var values = self.values;
	    var tickCount = self.tickCount;

	    Util.each(values, function (v, i) {
	      values[i] = v.toString();
	    });
	    if (!self.ticks) {
	      var ticks = values;
	      if (tickCount) {
	        var temp = catAuto({
	          maxCount: tickCount,
	          data: values
	        });
	        ticks = temp.ticks;
	      }
	      this.ticks = ticks;
	    }
	  };

	  /**
	   * @override
	   */


	  Category.prototype.getText = function getText(value) {

	    if (this.values.indexOf(value) === -1 && Util.isNumber(value)) {
	      value = this.values[Math.round(value)];
	    }

	    return _Base.prototype.getText.call(this, value);
	  };

	  /**
	   * @override
	   */


	  Category.prototype.translate = function translate(value) {
	    var index = this.values.indexOf(value);
	    if (index === -1 && Util.isNumber(value)) {
	      index = value;
	    } else if (index === -1) {
	      index = NaN;
	    }
	    return index;
	  };
	  /**
	   * @override
	   */


	  Category.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var percent = void 0;

	    if (Util.isString(value) || this.values.indexOf(value) !== -1) {
	      value = this.translate(value);
	    }
	    if (this.values.length > 1) {
	      percent = value / (this.values.length - 1);
	    } else {
	      percent = value;
	    }
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Category.prototype.invert = function invert(value) {
	    if (Util.isString(value)) {
	      // 如果已经是字符串
	      return value;
	    }
	    var min = this.rangeMin();
	    var max = this.rangeMax();

	    // 归一到 范围内
	    if (value < min) {
	      value = min;
	    }
	    if (value > max) {
	      value = max;
	    }
	    var percent = (value - min) / (max - min);
	    var index = Math.round(percent * (this.values.length - 1)) % this.values.length;
	    index = index || 0;
	    return this.values[index];
	  };

	  return Category;
	}(Base);

	module.exports = Category;

	/***/ }),
	/* 107 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算分类的的坐标点
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var MAX_COUNT = 8;
	var SUB_COUNT = 4; // 控制个数不能过小

	function getSimpleArray(data) {
	  var arr = [];
	  Util.each(data, function (sub) {
	    if (Util.isArray(sub)) {
	      arr = arr.concat(sub);
	    } else {
	      arr.push(sub);
	    }
	  });
	  return arr;
	}
	function getGreatestFactor(count, number) {
	  var i = void 0;
	  for (i = number; i > 0; i--) {
	    if (count % i === 0) {
	      break;
	    }
	  }
	  // 如果是素数，没有可以整除的数字
	  if (i === 1) {
	    for (i = number; i > 0; i--) {
	      if ((count - 1) % i === 0) {
	        break;
	      }
	    }
	  }
	  return i;
	}

	module.exports = function (info) {
	  var rst = {};
	  var ticks = [];
	  var maxCount = info.maxCount || MAX_COUNT;
	  var categories = getSimpleArray(info.data);
	  var length = categories.length;
	  var tickCount = getGreatestFactor(length - 1, maxCount - 1) + 1;

	  // 如果计算出来只有两个坐标点，则直接使用传入的 maxCount
	  if (tickCount === 2) {
	    tickCount = maxCount;
	  } else if (tickCount < maxCount - SUB_COUNT) {
	    tickCount = maxCount - SUB_COUNT;
	  }
	  var step = parseInt(length / (tickCount - 1), 10);

	  var groups = categories.map(function (e, i) {
	    return i % step === 0 ? categories.slice(i, i + step) : null;
	  }).filter(function (e) {
	    return e;
	  });

	  if (categories.length) {
	    ticks.push(categories[0]);
	  }
	  for (var i = 1; i < groups.length && i * step < length - step; i++) {
	    ticks.push(groups[i][0]);
	  }
	  if (categories.length) {
	    var last = categories[length - 1];
	    if (ticks.indexOf(last) === -1) {
	      ticks.push(last);
	    }
	  }

	  rst.categories = categories;
	  rst.ticks = ticks;
	  return rst;
	};

	/***/ }),
	/* 108 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;(function (main) {
	  'use strict';

	  /**
	   * Parse or format dates
	   * @class fecha
	   */

	  var fecha = {};
	  var token = /d{1,4}|M{1,4}|YY(?:YY)?|S{1,3}|Do|ZZ|([HhMsDm])\1?|[aA]|"[^"]*"|'[^']*'/g;
	  var twoDigits = /\d\d?/;
	  var threeDigits = /\d{3}/;
	  var fourDigits = /\d{4}/;
	  var word = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
	  var literal = /\[([^]*?)\]/gm;
	  var noop = function noop() {};

	  function shorten(arr, sLen) {
	    var newArr = [];
	    for (var i = 0, len = arr.length; i < len; i++) {
	      newArr.push(arr[i].substr(0, sLen));
	    }
	    return newArr;
	  }

	  function monthUpdate(arrName) {
	    return function (d, v, i18n) {
	      var index = i18n[arrName].indexOf(v.charAt(0).toUpperCase() + v.substr(1).toLowerCase());
	      if (~index) {
	        d.month = index;
	      }
	    };
	  }

	  function pad(val, len) {
	    val = String(val);
	    len = len || 2;
	    while (val.length < len) {
	      val = '0' + val;
	    }
	    return val;
	  }

	  var dayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
	  var monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
	  var monthNamesShort = shorten(monthNames, 3);
	  var dayNamesShort = shorten(dayNames, 3);
	  fecha.i18n = {
	    dayNamesShort: dayNamesShort,
	    dayNames: dayNames,
	    monthNamesShort: monthNamesShort,
	    monthNames: monthNames,
	    amPm: ['am', 'pm'],
	    DoFn: function DoFn(D) {
	      return D + ['th', 'st', 'nd', 'rd'][D % 10 > 3 ? 0 : (D - D % 10 !== 10) * D % 10];
	    }
	  };

	  var formatFlags = {
	    D: function D(dateObj) {
	      return dateObj.getDate();
	    },
	    DD: function DD(dateObj) {
	      return pad(dateObj.getDate());
	    },
	    Do: function Do(dateObj, i18n) {
	      return i18n.DoFn(dateObj.getDate());
	    },
	    d: function d(dateObj) {
	      return dateObj.getDay();
	    },
	    dd: function dd(dateObj) {
	      return pad(dateObj.getDay());
	    },
	    ddd: function ddd(dateObj, i18n) {
	      return i18n.dayNamesShort[dateObj.getDay()];
	    },
	    dddd: function dddd(dateObj, i18n) {
	      return i18n.dayNames[dateObj.getDay()];
	    },
	    M: function M(dateObj) {
	      return dateObj.getMonth() + 1;
	    },
	    MM: function MM(dateObj) {
	      return pad(dateObj.getMonth() + 1);
	    },
	    MMM: function MMM(dateObj, i18n) {
	      return i18n.monthNamesShort[dateObj.getMonth()];
	    },
	    MMMM: function MMMM(dateObj, i18n) {
	      return i18n.monthNames[dateObj.getMonth()];
	    },
	    YY: function YY(dateObj) {
	      return String(dateObj.getFullYear()).substr(2);
	    },
	    YYYY: function YYYY(dateObj) {
	      return pad(dateObj.getFullYear(), 4);
	    },
	    h: function h(dateObj) {
	      return dateObj.getHours() % 12 || 12;
	    },
	    hh: function hh(dateObj) {
	      return pad(dateObj.getHours() % 12 || 12);
	    },
	    H: function H(dateObj) {
	      return dateObj.getHours();
	    },
	    HH: function HH(dateObj) {
	      return pad(dateObj.getHours());
	    },
	    m: function m(dateObj) {
	      return dateObj.getMinutes();
	    },
	    mm: function mm(dateObj) {
	      return pad(dateObj.getMinutes());
	    },
	    s: function s(dateObj) {
	      return dateObj.getSeconds();
	    },
	    ss: function ss(dateObj) {
	      return pad(dateObj.getSeconds());
	    },
	    S: function S(dateObj) {
	      return Math.round(dateObj.getMilliseconds() / 100);
	    },
	    SS: function SS(dateObj) {
	      return pad(Math.round(dateObj.getMilliseconds() / 10), 2);
	    },
	    SSS: function SSS(dateObj) {
	      return pad(dateObj.getMilliseconds(), 3);
	    },
	    a: function a(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0] : i18n.amPm[1];
	    },
	    A: function A(dateObj, i18n) {
	      return dateObj.getHours() < 12 ? i18n.amPm[0].toUpperCase() : i18n.amPm[1].toUpperCase();
	    },
	    ZZ: function ZZ(dateObj) {
	      var o = dateObj.getTimezoneOffset();
	      return (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4);
	    }
	  };

	  var parseFlags = {
	    D: [twoDigits, function (d, v) {
	      d.day = v;
	    }],
	    Do: [new RegExp(twoDigits.source + word.source), function (d, v) {
	      d.day = parseInt(v, 10);
	    }],
	    M: [twoDigits, function (d, v) {
	      d.month = v - 1;
	    }],
	    YY: [twoDigits, function (d, v) {
	      var da = new Date(),
	          cent = +('' + da.getFullYear()).substr(0, 2);
	      d.year = '' + (v > 68 ? cent - 1 : cent) + v;
	    }],
	    h: [twoDigits, function (d, v) {
	      d.hour = v;
	    }],
	    m: [twoDigits, function (d, v) {
	      d.minute = v;
	    }],
	    s: [twoDigits, function (d, v) {
	      d.second = v;
	    }],
	    YYYY: [fourDigits, function (d, v) {
	      d.year = v;
	    }],
	    S: [/\d/, function (d, v) {
	      d.millisecond = v * 100;
	    }],
	    SS: [/\d{2}/, function (d, v) {
	      d.millisecond = v * 10;
	    }],
	    SSS: [threeDigits, function (d, v) {
	      d.millisecond = v;
	    }],
	    d: [twoDigits, noop],
	    ddd: [word, noop],
	    MMM: [word, monthUpdate('monthNamesShort')],
	    MMMM: [word, monthUpdate('monthNames')],
	    a: [word, function (d, v, i18n) {
	      var val = v.toLowerCase();
	      if (val === i18n.amPm[0]) {
	        d.isPm = false;
	      } else if (val === i18n.amPm[1]) {
	        d.isPm = true;
	      }
	    }],
	    ZZ: [/([\+\-]\d\d:?\d\d|Z)/, function (d, v) {
	      if (v === 'Z') v = '+00:00';
	      var parts = (v + '').match(/([\+\-]|\d\d)/gi),
	          minutes;

	      if (parts) {
	        minutes = +(parts[1] * 60) + parseInt(parts[2], 10);
	        d.timezoneOffset = parts[0] === '+' ? minutes : -minutes;
	      }
	    }]
	  };
	  parseFlags.dd = parseFlags.d;
	  parseFlags.dddd = parseFlags.ddd;
	  parseFlags.DD = parseFlags.D;
	  parseFlags.mm = parseFlags.m;
	  parseFlags.hh = parseFlags.H = parseFlags.HH = parseFlags.h;
	  parseFlags.MM = parseFlags.M;
	  parseFlags.ss = parseFlags.s;
	  parseFlags.A = parseFlags.a;

	  // Some common format strings
	  fecha.masks = {
	    default: 'ddd MMM DD YYYY HH:mm:ss',
	    shortDate: 'M/D/YY',
	    mediumDate: 'MMM D, YYYY',
	    longDate: 'MMMM D, YYYY',
	    fullDate: 'dddd, MMMM D, YYYY',
	    shortTime: 'HH:mm',
	    mediumTime: 'HH:mm:ss',
	    longTime: 'HH:mm:ss.SSS'
	  };

	  /***
	   * Format a date
	   * @method format
	   * @param {Date|number} dateObj
	   * @param {string} mask Format of the date, i.e. 'mm-dd-yy' or 'shortDate'
	   */
	  fecha.format = function (dateObj, mask, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof dateObj === 'number') {
	      dateObj = new Date(dateObj);
	    }

	    if (Object.prototype.toString.call(dateObj) !== '[object Date]' || isNaN(dateObj.getTime())) {
	      throw new Error('Invalid Date in fecha.format');
	    }

	    mask = fecha.masks[mask] || mask || fecha.masks['default'];

	    var literals = [];

	    // Make literals inactive by replacing them with ??
	    mask = mask.replace(literal, function ($0, $1) {
	      literals.push($1);
	      return '??';
	    });
	    // Apply formatting rules
	    mask = mask.replace(token, function ($0) {
	      return $0 in formatFlags ? formatFlags[$0](dateObj, i18n) : $0.slice(1, $0.length - 1);
	    });
	    // Inline literal values back into the formatted value
	    return mask.replace(/\?\?/g, function () {
	      return literals.shift();
	    });
	  };

	  /**
	   * Parse a date string into an object, changes - into /
	   * @method parse
	   * @param {string} dateStr Date string
	   * @param {string} format Date parse format
	   * @returns {Date|boolean}
	   */
	  fecha.parse = function (dateStr, format, i18nSettings) {
	    var i18n = i18nSettings || fecha.i18n;

	    if (typeof format !== 'string') {
	      throw new Error('Invalid format in fecha.parse');
	    }

	    format = fecha.masks[format] || format;

	    // Avoid regular expression denial of service, fail early for really long strings
	    // https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS
	    if (dateStr.length > 1000) {
	      return false;
	    }

	    var isValid = true;
	    var dateInfo = {};
	    format.replace(token, function ($0) {
	      if (parseFlags[$0]) {
	        var info = parseFlags[$0];
	        var index = dateStr.search(info[0]);
	        if (!~index) {
	          isValid = false;
	        } else {
	          dateStr.replace(info[0], function (result) {
	            info[1](dateInfo, result, i18n);
	            dateStr = dateStr.substr(index + result.length);
	            return result;
	          });
	        }
	      }

	      return parseFlags[$0] ? '' : $0.slice(1, $0.length - 1);
	    });

	    if (!isValid) {
	      return false;
	    }

	    var today = new Date();
	    if (dateInfo.isPm === true && dateInfo.hour != null && +dateInfo.hour !== 12) {
	      dateInfo.hour = +dateInfo.hour + 12;
	    } else if (dateInfo.isPm === false && +dateInfo.hour === 12) {
	      dateInfo.hour = 0;
	    }

	    var date;
	    if (dateInfo.timezoneOffset != null) {
	      dateInfo.minute = +(dateInfo.minute || 0) - +dateInfo.timezoneOffset;
	      date = new Date(Date.UTC(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0));
	    } else {
	      date = new Date(dateInfo.year || today.getFullYear(), dateInfo.month || 0, dateInfo.day || 1, dateInfo.hour || 0, dateInfo.minute || 0, dateInfo.second || 0, dateInfo.millisecond || 0);
	    }
	    return date;
	  };

	  /* istanbul ignore next */
	  if (typeof module !== 'undefined' && module.exports) {
	    module.exports = fecha;
	  } else if (true) {
	    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	      return fecha;
	    }).call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else {
	    main.fecha = fecha;
	  }
	})(this);

	/***/ }),
	/* 109 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 提取公共代码到util方法
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);

	module.exports = {
	  toTimeStamp: function toTimeStamp(value) {
	    if (Util.isString(value)) {
	      if (value.indexOf('T') > 0) {
	        value = new Date(value).getTime();
	      } else {
	        value = new Date(value.replace(/-/ig, '/')).getTime();
	      }
	    }
	    if (Util.isDate(value)) {
	      value = value.getTime();
	    }
	    return value;
	  }
	};

	/***/ }),
	/* 110 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of category legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(111);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil,
	    Event = _require.Event,
	    Group = _require.Group;

	var Global = __webpack_require__(2);

	var CONTAINER_CLASS = 'g2-legend';
	var TITLE_CLASS = 'g2-legend-title';
	var LIST_CLASS = 'g2-legend-list';
	var ITEM_CLASS = 'g2-legend-list-item';
	var TEXT_CLASS = 'g2-legend-text';
	var MARKER_CLASS = 'g2-legend-marker';

	function findNodeByClass(node, className) {
	  return node.getElementsByClassName(className)[0];
	}

	function getParentNode(node, className) {
	  var nodeClass = node.className;
	  nodeClass = nodeClass.split(' ');
	  if (nodeClass.indexOf(className) > -1) {
	    return node;
	  }

	  if (node.parentNode) {
	    if (node.parentNode.className === CONTAINER_CLASS) {
	      return node.parentNode;
	    }
	    return getParentNode(node.parentNode, className);
	  }

	  return null;
	}

	function findItem(items, refer) {
	  var rst = null;
	  var value = refer instanceof Group ? refer.get('value') : refer;
	  Util.each(items, function (item) {
	    if (item.value === value) {
	      rst = item;
	      return false;
	    }
	  });

	  return rst;
	}

	function findShapeByName(group, name) {
	  return group.findBy(function (node) {
	    return node.name === name;
	  });
	}

	var Category = function (_Base) {
	  _inherits(Category, _Base);

	  function Category() {
	    _classCallCheck(this, Category);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Category.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type标识
	       * @type {String}
	       */
	      type: 'category-legend',
	      /**
	       * 子项集合
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * TODO：rename
	       * 图例项水平方向的间距
	       * @type {Number}
	       */
	      itemGap: 5,
	      /**
	       * TODO：rename
	       * 图例标题距离图例项的距离
	       * @type {Number}
	       */
	      titleGap: 15,
	      /**
	       * TODO：rename
	       * 图例项垂直方向的间距
	       * @type {Number}
	       */
	      itemMarginBottom: 8,
	      /**
	       * 图例项图组
	       * @type {Group}
	       */
	      itemsGroup: null,
	      /**
	       * 布局方式： horizontal，vertical
	       * @type {String}
	       */
	      layout: 'horizontal',
	      /**
	       * 是否允许全部取消，默认 false，即必须保留一个被选中
	       * @type {Boolean}
	       */
	      allowAllCanceled: false,
	      /**
	       * 边框内边距
	       * @type {Array}
	       */
	      backPadding: [0, 0, 0, 0],
	      /**
	       * 是否能被点击
	       * @type {Boolean}
	       */
	      checkable: true,
	      /**
	       * 图例项取消选中的颜色
	       * @type {String}
	       */
	      unCheckColor: '#ccc',
	      /**
	       * 图例背景层属性设置
	       * @type {Obejct}
	       */
	      background: {
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      /**
	       * 图例项的宽度，当图例有很多图例项，并且用户想要这些图例项在同一平面内垂直对齐，此时这个属性可帮用户实现此效果
	       * @type {Number}
	       */
	      itemWidth: null,
	      textStyle: {
	        fill: '#333',
	        fontSize: 12,
	        textAlign: 'start',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      },
	      /**
	       * marker 和文字的距离
	       * @type {Number}
	       */
	      _wordSpaceing: 8,
	      /**
	       * 是否使用 html 进行渲染，默认为 false
	       * @type {Boolean}
	       */
	      useHtml: false,
	      /**
	       * useHtml 为 true 时生效，用于自动定位
	       * @type {[type]}
	       */
	      autoPosition: true,
	      container: null,
	      /**
	       * 使用html时的外层模板
	       * @type {String}
	       */
	      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<h4 class="' + TITLE_CLASS + '"></h4>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
	      /**
	       * 默认的图例项 html 模板
	       * @type {String}
	       */
	      _defaultItemTpl: '<li class="' + ITEM_CLASS + ' item-{index} {checked}" data-color="{originColor}" data-value="{originValue}">' + '<i class="' + MARKER_CLASS + '" style="background-color:{color};"></i>' + '<span class="' + TEXT_CLASS + '">{value}</span></li>',
	      /**
	       * 用户设置的图例项 html 模板
	       * @type {String|Function}
	       */
	      itemTpl: null,
	      /**
	       * 图例项是否可点击，默认为 true
	       * @type {Boolean}
	       */
	      clickable: true,
	      /**
	       * TODO: rename
	       * 图例项的选择模式，多选和单选 multiple、single
	       * @type {String}
	       */
	      selectedMode: 'multiple',
	      /**
	       * 图例项的顺序是否要逆序，默认为 false
	       * @type {Boolean}
	       */
	      reversed: false,
	      /**
	       * 是否自动换行
	       * @type {Boolean}
	       */
	      autoWrap: true
	    });
	  };

	  Category.prototype._beforeRenderUI = function _beforeRenderUI() {
	    _Base.prototype._beforeRenderUI.call(this);
	  };

	  Category.prototype._renderUI = function _renderUI() {
	    if (!this.get('useHtml')) {
	      _Base.prototype._renderUI.call(this);
	      this._renderItems();
	      this.get('autoWrap') && this._adjustItems(); // 默认自动换行
	      this._renderBack();
	    } else {
	      // 使用 html 渲染图例
	      this._renderHTML();
	    }
	  };

	  Category.prototype._bindUI = function _bindUI() {
	    if (this.get('hoverable')) {
	      this.on('mousemove', Util.wrapBehavior(this, '_onMousemove'));
	      this.on('mouseleave', Util.wrapBehavior(this, '_onMouseleave'));
	    }

	    if (this.get('clickable')) {
	      this.on('click', Util.wrapBehavior(this, '_onClick'));
	    }
	  };

	  Category.prototype._getLegendItem = function _getLegendItem(target) {
	    var item = target.get('parent');
	    if (item && item.name === 'legendGroup') {
	      return item;
	    }
	    return null;
	  };

	  Category.prototype._onMousemove = function _onMousemove(ev) {
	    var item = this._getLegendItem(ev.currentTarget);
	    if (item && item.get('checked')) {
	      var items = this.get('items');
	      var itemhover = new Event('itemhover', ev, true, true);
	      itemhover.item = findItem(items, item);
	      itemhover.checked = item.get('checked');
	      this.emit('itemhover', itemhover);
	    } else if (!item) {
	      this.emit('itemunhover', ev);
	    }

	    return;
	  };

	  Category.prototype._onMouseleave = function _onMouseleave(ev) {
	    this.emit('itemunhover', ev);
	    return;
	  };

	  Category.prototype._onClick = function _onClick(ev) {
	    var clickedItem = this._getLegendItem(ev.currentTarget);
	    var items = this.get('items');
	    if (clickedItem && !clickedItem.get('destroyed')) {
	      var checked = clickedItem.get('checked');
	      if (!this.get('allowAllCanceled') && checked && this.getCheckedCount() === 1) {
	        return;
	      }
	      var mode = this.get('selectedMode');
	      var item = findItem(items, clickedItem);
	      var itemclick = new Event('itemclick', ev, true, true);
	      itemclick.item = item;
	      itemclick.currentTarget = clickedItem;
	      itemclick.checked = mode === 'single' ? true : !checked;

	      var unCheckColor = this.get('unCheckColor');
	      var checkColor = this.get('textStyle').fill;
	      var markerItem = void 0;
	      var textItem = void 0;
	      var legendItem = void 0;
	      if (mode === 'single') {
	        var itemsGroup = this.get('itemsGroup');
	        var children = itemsGroup.get('children');
	        Util.each(children, function (child) {
	          markerItem = findShapeByName(child, 'legend-marker');
	          textItem = findShapeByName(child, 'legend-text');
	          legendItem = findShapeByName(child, 'legend-item');
	          if (child !== clickedItem) {
	            if (markerItem.attr('fill')) {
	              markerItem.attr('fill', unCheckColor);
	            }
	            if (markerItem.attr('stroke')) {
	              markerItem.attr('stroke', unCheckColor);
	            }
	            textItem.attr('fill', unCheckColor);
	            markerItem.setSilent('checked', false);
	            textItem.setSilent('checked', false);
	            legendItem.setSilent('checked', false);
	            child.setSilent('checked', false);
	          } else {
	            if (markerItem.attr('fill')) {
	              markerItem.attr('fill', item.marker.fill);
	            }
	            if (markerItem.attr('stroke')) {
	              markerItem.attr('stroke', item.marker.stroke);
	            }
	            textItem.attr('fill', checkColor);
	            markerItem.setSilent('checked', true);
	            textItem.setSilent('checked', true);
	            legendItem.setSilent('checked', true);
	            child.setSilent('checked', true);
	          }
	        });
	      } else {
	        markerItem = findShapeByName(clickedItem, 'legend-marker');
	        textItem = findShapeByName(clickedItem, 'legend-text');
	        legendItem = findShapeByName(clickedItem, 'legend-item');

	        if (markerItem.attr('fill')) {
	          markerItem.attr('fill', checked ? unCheckColor : item.marker.fill);
	        }
	        if (markerItem.attr('stroke')) {
	          markerItem.attr('stroke', checked ? unCheckColor : item.marker.stroke);
	        }
	        textItem.attr('fill', checked ? unCheckColor : checkColor);
	        clickedItem.setSilent('checked', !checked);
	        markerItem.setSilent('checked', !checked);
	        textItem.setSilent('checked', !checked);
	        legendItem.setSilent('checked', !checked);
	      }
	      this.emit('itemclick', itemclick);
	    }
	    return;
	  };

	  Category.prototype._renderHTML = function _renderHTML() {
	    var _this2 = this;

	    var self = this;
	    var canvas = self.get('canvas');
	    var outterNode = canvas.get('el').parentNode;
	    var title = this.get('title');
	    var containerTpl = self.get('containerTpl');
	    var legendWrapper = DomUtil.createDom(containerTpl);
	    var titleDom = findNodeByClass(legendWrapper, TITLE_CLASS);
	    var itemListDom = findNodeByClass(legendWrapper, LIST_CLASS);
	    var unCheckedColor = self.get('unCheckColor');
	    var mode = self.get('selectedMode');
	    var LEGEND_STYLE = Global.legend.html;

	    // fix：IE 9 兼容问题，先加入 legendWrapper
	    var container = self.get('container');
	    if (/^\#/.test(container)) {
	      // 如果传入 dom 节点的 id
	      var id = container.replace('#', '');
	      container = document.getElementById(id);
	      // container.style.position = 'relative';
	      container.appendChild(legendWrapper);
	    } else {
	      var _position = self.get('position');
	      var _canvas = self.get('canvas');
	      var rangeStyle = {};
	      if (_position === 'left' || _position === 'right') {
	        rangeStyle = {
	          maxHeight: (self.get('maxLength') || _canvas.get('height')) + 'px'
	        };
	      } else {
	        rangeStyle = {
	          maxWidth: (self.get('maxLength') || _canvas.get('width')) + 'px'
	        };
	      }

	      DomUtil.modifyCSS(legendWrapper, Util.mix({}, LEGEND_STYLE[CONTAINER_CLASS], rangeStyle, self.get(CONTAINER_CLASS)));
	      outterNode.appendChild(legendWrapper);
	    }

	    DomUtil.modifyCSS(itemListDom, Util.mix({}, LEGEND_STYLE[LIST_CLASS], self.get(LIST_CLASS)));

	    if (titleDom) {
	      if (title && title.text) {
	        titleDom.innerHTML = title.text;
	        DomUtil.modifyCSS(titleDom, Util.mix({}, LEGEND_STYLE[TITLE_CLASS], self.get(TITLE_CLASS)));
	      } else {
	        legendWrapper.removeChild(titleDom);
	      }
	    }

	    // 开始渲染图例项
	    var items = self.get('items');
	    var itemTpl = self.get('_defaultItemTpl');
	    var userItemTpl = self.get('itemTpl');
	    if (userItemTpl && userItemTpl !== itemTpl) {
	      itemTpl = userItemTpl;
	    }

	    if (self.get('reversed')) {
	      items.reverse();
	    }

	    var position = self.get('position');
	    var itemStyle = Util.mix({}, LEGEND_STYLE[ITEM_CLASS], {
	      display: position === 'right' || position === 'left' ? 'block' : 'inline-block'
	    }, self.get(ITEM_CLASS));
	    var markerStyle = Util.mix({}, LEGEND_STYLE[MARKER_CLASS], self.get(MARKER_CLASS));
	    Util.each(items, function (item, index) {
	      var checked = item.checked;
	      var value = self._formatItemValue(item.value);
	      var markerColor = item.marker.fill || item.marker.stroke;
	      var color = checked ? markerColor : unCheckedColor;
	      var domStr = void 0;
	      if (Util.isFunction(itemTpl)) {
	        domStr = itemTpl(value, color, checked, index);
	      } else {
	        domStr = itemTpl;
	      }
	      var itemDiv = Util.substitute(domStr, {
	        index: index,
	        checked: checked ? 'checked' : 'unChecked',
	        value: value,
	        color: color,
	        originColor: markerColor,
	        originValue: item.value
	      });
	      var itemDom = DomUtil.createDom(itemDiv);
	      var markerDom = findNodeByClass(itemDom, MARKER_CLASS);
	      DomUtil.modifyCSS(itemDom, itemStyle);
	      markerDom && DomUtil.modifyCSS(markerDom, markerStyle);

	      if (!checked) {
	        itemDom.style.color = unCheckedColor;
	        if (markerDom) {
	          markerDom.style.backgroundColor = unCheckedColor;
	        }
	      }
	      itemListDom.appendChild(itemDom);
	    });

	    if (self.get('clickable')) {
	      var childNodes = itemListDom.childNodes;
	      // 注册事件
	      legendWrapper.onclick = function (ev) {
	        var target = ev.target;
	        var targetClass = target.className;
	        targetClass = targetClass.split(' ');
	        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
	          return;
	        }
	        var parentDom = getParentNode(target, ITEM_CLASS);
	        var textDom = findNodeByClass(parentDom, TEXT_CLASS);
	        var markerDom = findNodeByClass(parentDom, MARKER_CLASS);
	        var clickedItem = findItem(items, parentDom.getAttribute('data-value'));

	        if (!clickedItem) {
	          return;
	        }
	        var domClass = parentDom.className;
	        var originColor = parentDom.getAttribute('data-color');
	        if (mode === 'single') {
	          // 单选模式
	          // update checked status
	          clickedItem.checked = true;
	          // 其他图例项全部置灰
	          Util.each(childNodes, function (child) {
	            if (child !== parentDom) {
	              var childMarkerDom = findNodeByClass(child, MARKER_CLASS);
	              childMarkerDom.style.backgroundColor = unCheckedColor;
	              child.className = Util.replace(child.className, 'checked', 'unChecked');
	              child.style.color = unCheckedColor;

	              var childItem = findItem(items, child.getAttribute('data-value'));
	              childItem.checked = false;
	            } else {
	              if (textDom) {
	                textDom.style.color = self.get('textStyle').fill;
	              }
	              if (markerDom) {
	                markerDom.style.backgroundColor = originColor;
	              }
	              parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
	            }
	          });
	        } else {
	          // 混合模式
	          var clickedItemChecked = domClass.includes('checked');
	          var count = 0;
	          Util.each(childNodes, function (child) {
	            if (child.className.includes('checked')) {
	              count++;
	            }
	          });
	          if (!_this2.get('allowAllCanceled') && clickedItemChecked && count === 1) {
	            return;
	          }
	          // 在判断最后一个图例后再更新checked状态，防止点击最后一个图例item时图例样式没有变化但是checked状态改变了 fix #422
	          clickedItem.checked = !clickedItem.checked;
	          if (clickedItemChecked) {
	            if (markerDom) {
	              markerDom.style.backgroundColor = unCheckedColor;
	            }
	            parentDom.className = Util.replace(domClass, 'checked', 'unChecked');
	            parentDom.style.color = unCheckedColor;
	          } else {
	            if (markerDom) {
	              markerDom.style.backgroundColor = originColor;
	            }
	            parentDom.className = Util.replace(domClass, 'unChecked', 'checked');
	            parentDom.style.color = self.get('textStyle').fill;
	          }
	        }

	        self.emit('itemclick', {
	          item: clickedItem,
	          currentTarget: parentDom,
	          checked: mode === 'single' ? true : clickedItem.checked
	        });
	      };
	    }
	    if (self.get('hoverable')) {
	      legendWrapper.onmousemove = function (ev) {
	        var target = ev.target;
	        var targetClass = target.className;
	        targetClass = targetClass.split(' ');
	        if (targetClass.indexOf(CONTAINER_CLASS) > -1 || targetClass.indexOf(LIST_CLASS) > -1) {
	          return;
	        }
	        var parentDom = getParentNode(target, ITEM_CLASS);
	        var domClass = parentDom.className;
	        var hoveredItem = findItem(items, parentDom.getAttribute('data-value'));
	        if (hoveredItem && domClass.includes('checked')) {
	          self.emit('itemhover', {
	            item: hoveredItem,
	            currentTarget: parentDom,
	            checked: hoveredItem.checked
	          });
	        } else if (!hoveredItem) {
	          self.emit('itemunhover', ev);
	        }
	      };

	      legendWrapper.onmouseout = function (ev) {
	        self.emit('itemunhover', ev);
	      };
	    }

	    self.set('legendWrapper', legendWrapper);
	  };

	  Category.prototype._renderItems = function _renderItems() {
	    var self = this;
	    var items = self.get('items');
	    if (self.get('reversed')) {
	      items.reverse();
	    }
	    Util.each(items, function (item, index) {
	      self._addItem(item, index);
	    });
	  };

	  Category.prototype._renderBack = function _renderBack() {
	    var padding = this.get('backPadding');
	    var backAttrs = this.get('background');
	    this.renderBack(padding, backAttrs);
	  };

	  Category.prototype._formatItemValue = function _formatItemValue(value) {
	    var formatter = this.get('itemFormatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  };

	  Category.prototype._getNextX = function _getNextX() {
	    var layout = this.get('layout');
	    var itemGap = this.get('itemGap');
	    var itemsGroup = this.get('itemsGroup');
	    var itemWidth = this.get('itemWidth');
	    var children = itemsGroup.get('children');
	    var nextX = 0;

	    if (layout === 'horizontal') {
	      // 水平布局
	      Util.each(children, function (v) {
	        nextX += (itemWidth ? itemWidth : v.getBBox().width) + itemGap;
	      });
	    }
	    return nextX;
	  };

	  Category.prototype._getNextY = function _getNextY() {
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
	    var layout = this.get('layout');
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var nextY = titleGap;
	    if (titleShape) {
	      nextY += titleShape.getBBox().height;
	    }

	    if (layout === 'vertical') {
	      // 竖直布局
	      Util.each(children, function (v) {
	        nextY += v.getBBox().height + itemMarginBottom;
	      });
	    }
	    return nextY;
	  };

	  Category.prototype._addItem = function _addItem(item) {
	    var itemsGroup = this.get('itemsGroup');
	    var x = this._getNextX();
	    var y = this._getNextY();
	    var unCheckColor = this.get('unCheckColor');
	    var itemGroup = itemsGroup.addGroup({
	      x: x,
	      y: y,
	      value: item.value,
	      checked: item.checked
	    });
	    itemGroup.set('viewId', itemsGroup.get('viewId'));

	    var textStyle = this.get('textStyle');
	    var wordSpace = this.get('_wordSpaceing');
	    var startX = 0;

	    if (item.marker) {
	      // 如果有marker添加marker
	      var markerAttrs = Util.mix({}, item.marker, {
	        x: item.marker.radius + x,
	        y: y
	      });

	      if (!item.checked) {
	        if (markerAttrs.fill) {
	          markerAttrs.fill = unCheckColor;
	        }
	        if (markerAttrs.stroke) {
	          markerAttrs.stroke = unCheckColor;
	        }
	      }

	      var markerShape = itemGroup.addShape('marker', {
	        type: 'marker',
	        attrs: markerAttrs
	      });
	      markerShape.attr('cursor', 'pointer');
	      markerShape.name = 'legend-marker';
	      startX += markerShape.getBBox().width + wordSpace;
	    }

	    var textAttrs = Util.mix({}, textStyle, {
	      x: startX + x,
	      y: y,
	      text: this._formatItemValue(item.value)
	    });
	    if (!item.checked) {
	      Util.mix(textAttrs, {
	        fill: unCheckColor
	      });
	    }

	    var textShape = itemGroup.addShape('text', {
	      attrs: textAttrs
	    });
	    textShape.attr('cursor', 'pointer');
	    textShape.name = 'legend-text';
	    this.get('appendInfo') && textShape.setSilent('appendInfo', this.get('appendInfo'));

	    // 添加一个包围矩形，用于事件支持
	    var bbox = itemGroup.getBBox();
	    var itemWidth = this.get('itemWidth');
	    var wrapperShape = itemGroup.addShape('rect', {
	      attrs: {
	        x: x,
	        y: y - bbox.height / 2,
	        fill: '#fff',
	        fillOpacity: 0,
	        width: itemWidth || bbox.width,
	        height: bbox.height
	      }
	    });
	    wrapperShape.attr('cursor', 'pointer');
	    wrapperShape.setSilent('origin', item); // 保存图例项相关的数据，便于事件操作
	    wrapperShape.name = 'legend-item';
	    this.get('appendInfo') && wrapperShape.setSilent('appendInfo', this.get('appendInfo'));
	    itemGroup.name = 'legendGroup';
	    return itemGroup;
	  };

	  Category.prototype._adjustHorizontal = function _adjustHorizontal() {
	    var itemsGroup = this.get('itemsGroup');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength');
	    var itemGap = this.get('itemGap');
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleShape') ? this.get('titleGap') : 0;
	    var row = 0;
	    var rowLength = 0;
	    var width = void 0;
	    var height = void 0;
	    var box = void 0;
	    var itemWidth = this.get('itemWidth');
	    if (itemsGroup.getBBox().width > maxLength) {
	      Util.each(children, function (child) {
	        box = child.getBBox();
	        width = itemWidth || box.width;
	        height = box.height + itemMarginBottom;

	        if (maxLength - rowLength < width) {
	          row++;
	          rowLength = 0;
	        }
	        child.move(rowLength, row * height + titleGap);
	        rowLength += width + itemGap;
	      });
	    }
	    return;
	  };

	  Category.prototype._adjustVertical = function _adjustVertical() {
	    var itemsGroup = this.get('itemsGroup');
	    var titleShape = this.get('titleShape');
	    var children = itemsGroup.get('children');
	    var maxLength = this.get('maxLength'); // 垂直布局，则 maxLength 代表容器的高度
	    var itemGap = this.get('itemGap');
	    var itemMarginBottom = this.get('itemMarginBottom');
	    var titleGap = this.get('titleGap');
	    var titleHeight = titleShape ? titleShape.getBBox().height + titleGap : 0;
	    var itemWidth = this.get('itemWidth');
	    var colLength = titleHeight;
	    var width = void 0;
	    var height = void 0;
	    var box = void 0;
	    var maxItemWidth = 0;
	    var totalLength = 0;

	    if (itemsGroup.getBBox().height > maxLength) {
	      Util.each(children, function (v) {
	        box = v.getBBox();
	        width = box.width;
	        height = box.height;

	        if (itemWidth) {
	          maxItemWidth = itemWidth + itemGap;
	        } else if (width > maxItemWidth) {
	          maxItemWidth = width + itemGap;
	        }

	        if (maxLength - colLength < height) {
	          colLength = titleHeight;
	          totalLength += maxItemWidth;
	          v.move(totalLength, titleHeight);
	        } else {
	          v.move(totalLength, colLength);
	        }

	        colLength += height + itemMarginBottom;
	      });
	    }
	    return;
	  };

	  Category.prototype._adjustItems = function _adjustItems() {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._adjustHorizontal();
	    } else {
	      this._adjustVertical();
	    }
	  };

	  Category.prototype.getWidth = function getWidth() {
	    if (this.get('useHtml')) {
	      return DomUtil.getOuterWidth(this.get('legendWrapper'));
	    }
	    return _Base.prototype.getWidth.call(this);
	  };

	  Category.prototype.getHeight = function getHeight() {
	    if (this.get('useHtml')) {
	      return DomUtil.getOuterHeight(this.get('legendWrapper'));
	    }

	    return _Base.prototype.getHeight.call(this);
	  };

	  Category.prototype.move = function move(x, y) {
	    if (this.get('useHtml') && !/^\#/.test(this.get('container'))) {
	      DomUtil.modifyCSS(this.get('legendWrapper'), {
	        left: x + 'px',
	        top: y + 'px'
	      });
	    } else {
	      _Base.prototype.move.call(this, x, y);
	    }
	  };

	  Category.prototype.remove = function remove() {
	    if (this.get('useHtml')) {
	      // 移除元素
	      var legendWrapper = this.get('legendWrapper');
	      if (legendWrapper && legendWrapper.parentNode) {
	        legendWrapper.parentNode.removeChild(legendWrapper);
	      }
	    }
	    _Base.prototype.remove.call(this); // must be called
	  };

	  return Category;
	}(Base);

	module.exports = Category;

	/***/ }),
	/* 111 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The base class of legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Base = function (_Group) {
	  _inherits(Base, _Group);

	  function Base() {
	    _classCallCheck(this, Base);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 图例标题配置
	       * @type {Object}
	       */
	      title: {
	        fill: '#333',
	        textBaseline: 'middle'
	      },
	      /**
	       * 图例项文本格式化
	       * @type {Function}
	       */
	      itemFormatter: null,
	      /**
	       * 是否使用 html 进行渲染
	       * @type {Boolean}
	       */
	      useHtml: false,
	      /**
	       * 图例是否绘制在绘图区域内
	       * @type {Boolean}
	       */
	      inPlot: false,
	      /**
	       * 鼠标 hover 到图例上的默认交互是否开启
	       * @type {Boolean}
	       */
	      hoverable: true
	    };
	  };

	  Base.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var group = this.addGroup();
	    group.set('viewId', this.get('viewId'));
	    this.set('itemsGroup', group);
	  };

	  Base.prototype._renderUI = function _renderUI() {
	    this._renderTitle();
	  };

	  Base.prototype._renderTitle = function _renderTitle() {
	    var title = this.get('title');
	    if (title && title.text) {
	      var titleShape = this.addShape('text', {
	        attrs: Util.mix({
	          x: 0,
	          y: 0,
	          fill: '#333', // 默认样式
	          textBaseline: 'middle',
	          fontFamily: Global.fontFamily
	        }, title)
	      });
	      titleShape.name = 'legend-title';
	      this.get('appendInfo') && titleShape.setSilent('appendInfo', this.get('appendInfo'));
	      this.set('titleShape', titleShape);
	    }
	  };

	  Base.prototype.getCheckedCount = function getCheckedCount() {
	    var itemsGroup = this.get('itemsGroup');
	    var items = itemsGroup.get('children');
	    var checkedArr = Util.filter(items, function (item) {
	      return item.get('checked');
	    });
	    return checkedArr.length;
	  };

	  Base.prototype.setItems = function setItems(items) {
	    this.set('items', items);
	    this.clearItems();
	    this._renderUI();
	  };

	  Base.prototype.addItem = function addItem(item) {
	    var items = this.get('items');
	    items.push(item);
	    this.clearItems();
	    this._renderUI();
	  };

	  Base.prototype.clearItems = function clearItems() {
	    var itemsGroup = this.get('itemsGroup');
	    itemsGroup.clear();
	  };

	  Base.prototype.getWidth = function getWidth() {
	    var bbox = this.getBBox();
	    return bbox.width;
	  };

	  Base.prototype.getHeight = function getHeight() {
	    var bbox = this.getBBox();
	    return bbox.height;
	  };

	  return Base;
	}(Group);

	module.exports = Base;

	/***/ }),
	/* 112 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The base class of continuous legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Base = __webpack_require__(111);

	var _require = __webpack_require__(1),
	    Event = _require.Event,
	    Group = _require.Group;

	var Slider = __webpack_require__(324);
	var TRIGGER_WIDTH = 12;

	var Continuous = function (_Base) {
	  _inherits(Continuous, _Base);

	  function Continuous() {
	    _classCallCheck(this, Continuous);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Continuous.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'continuous-legend',
	      /**
	       * 子项
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical',
	      /**
	       * 宽度
	       * @type {Number}
	       */
	      width: 156,
	      /**
	       * 高度
	       * @type {Number}
	       */
	      height: 20,
	      /**
	       * 标题偏移量
	       * @type {Number}
	       */
	      titleGap: 22,
	      /**
	       * 默认文本图形属性
	       * @type {ATTRS}
	       */
	      textStyle: {
	        fill: '#333',
	        textAlign: 'center',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      },
	      /**
	       * 连续图例是否可滑动
	       * @type {Boolean}
	       */
	      slidable: true,
	      /**
	       * 范围内颜色
	       * @type {ATTRS}
	       */
	      inRange: {
	        fill: '#4E7CCC'
	      },
	      _range: [0, 100],
	      /**
	       * 中滑块属性
	       * @type {ATTRS}
	       */
	      middleAttr: {
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      outRangeStyle: {
	        fill: '#D9D9D9'
	      },
	      numberFormatter: null, // 如果数字已经有格式化函数，从外部传入
	      labelOffset: 10 // ToDO: 文本同渐变背景的距离
	    });
	  };

	  Continuous.prototype._calStartPoint = function _calStartPoint() {
	    var start = {
	      x: 0,
	      y: this.get('titleGap') - TRIGGER_WIDTH
	    };
	    var titleShape = this.get('titleShape');
	    if (titleShape) {
	      var titleBox = titleShape.getBBox();
	      start.y += titleBox.height;
	    }

	    return start;
	  };

	  Continuous.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var items = this.get('items');
	    if (!Util.isArray(items) || Util.isEmpty(items)) {
	      return;
	    }

	    _Base.prototype._beforeRenderUI.call(this);
	    this.set('firstItem', items[0]);
	    this.set('lastItem', items[items.length - 1]);
	  };

	  Continuous.prototype._formatItemValue = function _formatItemValue(value) {
	    var numberFormatter = this.get('numberFormatter');
	    if (numberFormatter) {
	      value = numberFormatter(value);
	    }
	    var formatter = this.get('itemFormatter');
	    if (formatter) {
	      value = formatter.call(this, value);
	    }
	    return value;
	  };

	  Continuous.prototype._renderUI = function _renderUI() {
	    _Base.prototype._renderUI.call(this);

	    if (this.get('slidable')) {
	      this._renderSlider();
	    } else {
	      this._renderBackground();
	    }
	  };

	  Continuous.prototype._renderSlider = function _renderSlider() {
	    var minHandleElement = new Group();
	    var maxHandleElement = new Group();
	    var backgroundElement = new Group();
	    var start = this._calStartPoint();
	    var slider = this.addGroup(Slider, {
	      minHandleElement: minHandleElement,
	      maxHandleElement: maxHandleElement,
	      backgroundElement: backgroundElement,
	      middleAttr: this.get('middleAttr'),
	      layout: this.get('layout'),
	      range: this.get('_range'),
	      width: this.get('width'),
	      height: this.get('height')
	    });
	    slider.translate(start.x, start.y);
	    this.set('slider', slider);

	    var shape = this._renderSliderShape();
	    shape.attr('clip', slider.get('middleHandleElement'));
	    this._renderTrigger();
	  };

	  Continuous.prototype._addBackground = function _addBackground(parent, name, attrs) {
	    parent.addShape(name, {
	      attrs: Util.mix({}, attrs, this.get('outRangeStyle'))
	    });
	    return parent.addShape(name, {
	      attrs: attrs
	    });
	  };

	  Continuous.prototype._renderTrigger = function _renderTrigger() {
	    var min = this.get('firstItem');
	    var max = this.get('lastItem');
	    var layout = this.get('layout');
	    var textStyle = this.get('textStyle');
	    var inRange = this.get('inRange');
	    var attrType = this.get('type');
	    var minBlockAttr = void 0;
	    var maxBlockAttr = void 0;

	    if (attrType === 'color-legend') {
	      minBlockAttr = {
	        fill: min.attrValue
	      };
	      maxBlockAttr = {
	        fill: max.attrValue
	      };
	    } else {
	      minBlockAttr = Util.mix({}, inRange);
	      maxBlockAttr = Util.mix({}, inRange);
	    }
	    var minTextAttr = Util.mix({
	      text: this._formatItemValue(min.value) + ''
	    }, textStyle);
	    var maxTextAttr = Util.mix({
	      text: this._formatItemValue(max.value) + ''
	    }, textStyle);
	    if (layout === 'vertical') {
	      this._addVerticalTrigger('min', minBlockAttr, minTextAttr);
	      this._addVerticalTrigger('max', maxBlockAttr, maxTextAttr);
	    } else {
	      this._addHorizontalTrigger('min', minBlockAttr, minTextAttr);
	      this._addHorizontalTrigger('max', maxBlockAttr, maxTextAttr);
	    }
	  };

	  Continuous.prototype._addVerticalTrigger = function _addVerticalTrigger(type, blockAttr, textAttr) {
	    var slider = this.get('slider');
	    var trigger = slider.get(type + 'HandleElement');
	    var width = this.get('width');
	    var button = trigger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [[width / 2 + TRIGGER_WIDTH, 0], [width / 2 + 1, 0], [width / 2 + TRIGGER_WIDTH, type === 'min' ? TRIGGER_WIDTH : -TRIGGER_WIDTH]]
	      }, blockAttr)
	    });
	    var text = trigger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: width + 8,
	        y: type === 'max' ? -4 : 4,
	        textAlign: 'start',
	        lineHeight: 1,
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.attr('cursor', trigerCursor);
	    text.attr('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  };

	  Continuous.prototype._addHorizontalTrigger = function _addHorizontalTrigger(type, blockAttr, textAttr) {
	    var slider = this.get('slider');
	    var trigger = slider.get(type + 'HandleElement');
	    var button = trigger.addShape('polygon', {
	      attrs: Util.mix({
	        points: [[0, 0], [0, TRIGGER_WIDTH], [type === 'min' ? -TRIGGER_WIDTH : TRIGGER_WIDTH, TRIGGER_WIDTH]]
	      }, blockAttr)
	    });
	    var text = trigger.addShape('text', {
	      attrs: Util.mix(textAttr, {
	        x: type === 'min' ? -TRIGGER_WIDTH - 4 : TRIGGER_WIDTH + 4,
	        y: TRIGGER_WIDTH / 2,
	        textAlign: type === 'min' ? 'end' : 'start',
	        textBaseline: 'middle'
	      })
	    });
	    var layout = this.get('layout');
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';
	    button.attr('cursor', trigerCursor);
	    text.attr('cursor', trigerCursor);
	    this.set(type + 'ButtonElement', button);
	    this.set(type + 'TextElement', text);
	  };

	  Continuous.prototype._bindUI = function _bindUI() {
	    var self = this;
	    if (self.get('slidable')) {
	      // const canvas = self.get('canvas');
	      var slider = self.get('slider');
	      slider.on('sliderchange', function (ev) {
	        var range = ev.range;
	        var firstItemValue = self.get('firstItem').value * 1;
	        var lastItemValue = self.get('lastItem').value * 1;
	        var minValue = firstItemValue + range[0] / 100 * (lastItemValue - firstItemValue);
	        var maxValue = firstItemValue + range[1] / 100 * (lastItemValue - firstItemValue);
	        self._updateElement(minValue, maxValue);
	        var itemFiltered = new Event('itemfilter', ev, true, true);
	        itemFiltered.range = [minValue, maxValue];
	        self.emit('itemfilter', itemFiltered);
	      });
	    }
	  };

	  Continuous.prototype._updateElement = function _updateElement(min, max) {
	    var minTextElement = this.get('minTextElement');
	    var maxTextElement = this.get('maxTextElement');
	    if (max > 1) {
	      // 对于大于 1 的值，默认显示为整数
	      min = parseInt(min, 10);
	      max = parseInt(max, 10);
	    }
	    minTextElement.attr('text', this._formatItemValue(min) + '');
	    maxTextElement.attr('text', this._formatItemValue(max) + '');
	    if (this.get('type') === 'color-legend' && this.get('attr')) {
	      var attr = this.get('attr'); // 图形属性，为了更新滑块颜色
	      var minButtonElement = this.get('minButtonElement');
	      var maxButtonElement = this.get('maxButtonElement');
	      minButtonElement.attr('fill', attr.mapping(min).join(''));
	      maxButtonElement.attr('fill', attr.mapping(max).join(''));
	    }
	  };

	  return Continuous;
	}(Base);

	module.exports = Continuous;

	/***/ }),
	/* 113 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = Transition;
	/* harmony export (immutable) */ __webpack_exports__["b"] = transition;
	/* harmony export (immutable) */ __webpack_exports__["c"] = newId;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__attr__ = __webpack_require__(433);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__attrTween__ = __webpack_require__(446);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__delay__ = __webpack_require__(447);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__duration__ = __webpack_require__(448);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__ease__ = __webpack_require__(449);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__filter__ = __webpack_require__(450);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__merge__ = __webpack_require__(451);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__on__ = __webpack_require__(452);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__remove__ = __webpack_require__(453);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__select__ = __webpack_require__(454);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__selectAll__ = __webpack_require__(455);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__selection__ = __webpack_require__(456);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__style__ = __webpack_require__(457);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__styleTween__ = __webpack_require__(458);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__text__ = __webpack_require__(459);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__transition__ = __webpack_require__(460);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_17__tween__ = __webpack_require__(339);



















	var id = 0;

	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"])().transition(name);
	}

	function newId() {
	  return ++id;
	}

	var selection_prototype = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype;

	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: __WEBPACK_IMPORTED_MODULE_10__select__["a" /* default */],
	  selectAll: __WEBPACK_IMPORTED_MODULE_11__selectAll__["a" /* default */],
	  filter: __WEBPACK_IMPORTED_MODULE_6__filter__["a" /* default */],
	  merge: __WEBPACK_IMPORTED_MODULE_7__merge__["a" /* default */],
	  selection: __WEBPACK_IMPORTED_MODULE_12__selection__["a" /* default */],
	  transition: __WEBPACK_IMPORTED_MODULE_16__transition__["a" /* default */],
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: __WEBPACK_IMPORTED_MODULE_8__on__["a" /* default */],
	  attr: __WEBPACK_IMPORTED_MODULE_1__attr__["a" /* default */],
	  attrTween: __WEBPACK_IMPORTED_MODULE_2__attrTween__["a" /* default */],
	  style: __WEBPACK_IMPORTED_MODULE_13__style__["a" /* default */],
	  styleTween: __WEBPACK_IMPORTED_MODULE_14__styleTween__["a" /* default */],
	  text: __WEBPACK_IMPORTED_MODULE_15__text__["a" /* default */],
	  remove: __WEBPACK_IMPORTED_MODULE_9__remove__["a" /* default */],
	  tween: __WEBPACK_IMPORTED_MODULE_17__tween__["a" /* default */],
	  delay: __WEBPACK_IMPORTED_MODULE_3__delay__["a" /* default */],
	  duration: __WEBPACK_IMPORTED_MODULE_4__duration__["a" /* default */],
	  ease: __WEBPACK_IMPORTED_MODULE_5__ease__["a" /* default */]
	};

	/***/ }),
	/* 114 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_color__ = __webpack_require__(357);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["e"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["g"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_0__src_color__["f"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_lab__ = __webpack_require__(434);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_1__src_lab__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__ = __webpack_require__(435);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubehelix__["a"]; });




	/***/ }),
	/* 115 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview G2 图表的入口文件
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var View = __webpack_require__(116);
	var G = __webpack_require__(1);
	var Canvas = G.Canvas;
	var DomUtil = G.DomUtil;
	var Plot = __webpack_require__(330);
	var Controller = __webpack_require__(103);
	var Global = __webpack_require__(2);
	var AUTO_STR = 'auto';

	function _isScaleExist(scales, compareScale) {
	  var flag = false;
	  Util.each(scales, function (scale) {
	    var scaleValues = [].concat(scale.values);
	    var compareScaleValues = [].concat(compareScale.values);
	    if (scale.type === compareScale.type && scale.field === compareScale.field && scaleValues.sort().toString() === compareScaleValues.sort().toString()) {
	      flag = true;
	      return;
	    }
	  });

	  return flag;
	}

	function mergeBBox(box1, box2) {
	  return {
	    minX: Math.min(box1.minX, box2.minX),
	    minY: Math.min(box1.minY, box2.minY),
	    maxX: Math.max(box1.maxX, box2.maxX),
	    maxY: Math.max(box1.maxY, box2.maxY)
	  };
	}

	function isEqualArray(arr1, arr2) {
	  return Util.isEqualWith(arr1, arr2, function (v1, v2) {
	    return v1 === v2;
	  });
	}

	/**
	 * 图表的入口
	 * @class Chart
	 */

	var Chart = function (_View) {
	  _inherits(Chart, _View);

	  function Chart() {
	    _classCallCheck(this, Chart);

	    return _possibleConstructorReturn(this, _View.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Chart.prototype.getDefaultCfg = function getDefaultCfg() {
	    var viewCfg = _View.prototype.getDefaultCfg.call(this);
	    return Util.mix(viewCfg, {
	      id: null,
	      forceFit: false,
	      container: null,
	      wrapperEl: null,
	      canvas: null,
	      width: 500,
	      height: 500,
	      pixelRatio: null,
	      padding: Global.plotCfg.padding,
	      backPlot: null,
	      frontPlot: null,
	      plotBackground: null,
	      background: null,
	      autoPaddingAppend: 5,
	      views: []
	    });
	  };

	  Chart.prototype.init = function init() {
	    this._initCanvas();
	    this._initPlot();
	    this._initEvents();
	    _View.prototype.init.call(this);

	    var tooltipController = new Controller.Tooltip({
	      chart: this,
	      options: {}
	    });
	    this.set('tooltipController', tooltipController);

	    var legendController = new Controller.Legend({
	      chart: this
	    });
	    this.set('legendController', legendController);
	    this.set('_id', 'chart'); // 防止同用户设定的 id 同名
	    this.emit('afterinit'); // 初始化完毕
	  };

	  Chart.prototype._isAutoPadding = function _isAutoPadding() {
	    var padding = this.get('padding');
	    if (Util.isArray(padding)) {
	      return padding.indexOf(AUTO_STR) !== -1;
	    }
	    return padding === AUTO_STR;
	  };

	  Chart.prototype._getAutoPadding = function _getAutoPadding() {
	    var padding = this.get('padding');
	    // 图例在最前面的一层
	    var frontPlot = this.get('frontPlot');
	    var frontBBox = frontPlot.getBBox();
	    // 坐标轴在最后面的一层
	    var backPlot = this.get('backPlot');
	    var backBBox = backPlot.getBBox();

	    var box = mergeBBox(frontBBox, backBBox);
	    var outter = [0 - box.minY, // 上面超出的部分
	    box.maxX - this.get('width'), // 右边超出的部分
	    box.maxY - this.get('height'), // 下边超出的部分
	    0 - box.minX];
	    // 如果原始的 padding 内部存在 'auto' 则替换对应的边
	    var autoPadding = Util.toAllPadding(padding);
	    for (var i = 0; i < autoPadding.length; i++) {
	      if (autoPadding[i] === AUTO_STR) {
	        var tmp = Math.max(0, outter[i]);
	        autoPadding[i] = tmp + this.get('autoPaddingAppend');
	      }
	    }
	    return autoPadding;
	  };

	  // 初始化画布


	  Chart.prototype._initCanvas = function _initCanvas() {
	    var container = this.get('container');
	    var id = this.get('id');
	    // 如果未设置 container 使用 ID, 兼容 2.x 版本
	    if (!container && id) {
	      container = id;
	      this.set('container', id);
	    }
	    var width = this.get('width');
	    var height = this.get('height');
	    if (Util.isString(container)) {
	      container = document.getElementById(container);
	      if (!container) {
	        throw new Error('Please specify the container for the chart!');
	      }
	      this.set('container', container);
	    }
	    var wrapperEl = DomUtil.createDom('<div style="position:relative;"></div>');
	    container.appendChild(wrapperEl);
	    this.set('wrapperEl', wrapperEl);
	    if (this.get('forceFit')) {
	      width = DomUtil.getWidth(container, width);
	      this.set('width', width);
	    }
	    var canvas = new Canvas({
	      containerDOM: wrapperEl,
	      width: width,
	      height: height,
	      pixelRatio: this.get('pixelRatio')
	    });
	    this.set('canvas', canvas);
	  };

	  // 初始化绘图区间


	  Chart.prototype._initPlot = function _initPlot() {
	    this._initPlotBack(); // 最底层的是背景相关的 group
	    var canvas = this.get('canvas');
	    var backPlot = canvas.addGroup({
	      zIndex: 1
	    }); // 图表最后面的容器
	    var plotContainer = canvas.addGroup({
	      zIndex: 2
	    }); // 图表所在的容器
	    var frontPlot = canvas.addGroup({
	      zIndex: 3
	    }); // 图表前面的容器

	    this.set('backPlot', backPlot);
	    this.set('middlePlot', plotContainer);
	    this.set('frontPlot', frontPlot);
	  };

	  // 初始化背景


	  Chart.prototype._initPlotBack = function _initPlotBack() {
	    var canvas = this.get('canvas');
	    var plot = canvas.addGroup(Plot, {
	      padding: this.get('padding'),
	      plotBackground: Util.mix({}, Global.plotBackground, this.get('plotBackground')),
	      background: Util.mix({}, Global.background, this.get('background'))
	    });
	    this.set('plot', plot);
	    this.set('plotRange', plot.get('plotRange'));
	  };

	  Chart.prototype._initEvents = function _initEvents() {
	    if (this.get('forceFit')) {
	      window.addEventListener('resize', Util.wrapBehavior(this, '_initForceFitEvent'));
	    }
	  };

	  Chart.prototype._initForceFitEvent = function _initForceFitEvent() {
	    var timer = setTimeout(Util.wrapBehavior(this, 'forceFit'), 200);
	    clearTimeout(this.get('resizeTimer'));
	    this.set('resizeTimer', timer);
	  };

	  // 绘制图例


	  Chart.prototype._renderLegends = function _renderLegends() {
	    var options = this.get('options');
	    var legendOptions = options.legends;
	    if (Util.isNil(legendOptions) || legendOptions !== false) {
	      // 没有关闭图例
	      var legendController = this.get('legendController');
	      legendController.options = legendOptions || {};
	      legendController.plotRange = this.get('plotRange');

	      if (legendOptions && legendOptions.custom) {
	        // 用户自定义图例
	        legendController.addCustomLegend();
	      } else {
	        var geoms = this.getAllGeoms();
	        var scales = [];
	        Util.each(geoms, function (geom) {
	          var view = geom.get('view');
	          var attrs = geom.getAttrsForLegend();
	          Util.each(attrs, function (attr) {
	            var type = attr.type;
	            var scale = attr.getScale(type);
	            if (scale.field && scale.type !== 'identity' && !_isScaleExist(scales, scale)) {
	              scales.push(scale);
	              var filteredValues = view.getFilteredValues(scale.field);
	              legendController.addLegend(scale, attr, geom, filteredValues);
	            }
	          });
	        });
	      }

	      legendController.alignLegends();
	    }
	  };

	  // 绘制 tooltip


	  Chart.prototype._renderTooltips = function _renderTooltips() {
	    var options = this.get('options');
	    if (Util.isNil(options.tooltip) || options.tooltip !== false) {
	      // 用户没有关闭 tooltip
	      var tooltipController = this.get('tooltipController');
	      tooltipController.options = options.tooltip || {};
	      tooltipController.renderTooltip();
	    }
	  };

	  /**
	   * 获取所有的几何标记
	   * @return {Array} 所有的几何标记
	   */


	  Chart.prototype.getAllGeoms = function getAllGeoms() {
	    var geoms = [];
	    geoms = geoms.concat(this.get('geoms'));

	    var views = this.get('views');
	    Util.each(views, function (view) {
	      geoms = geoms.concat(view.get('geoms'));
	    });

	    return geoms;
	  };

	  /**
	   * 自适应宽度
	   * @chainable
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.forceFit = function forceFit() {
	    var self = this;
	    if (!self || self.destroyed) {
	      return;
	    }
	    var container = self.get('container');
	    var oldWidth = self.get('width');
	    var width = DomUtil.getWidth(container, oldWidth);
	    if (width !== 0 && width !== oldWidth) {
	      var height = self.get('height');
	      self.changeSize(width, height);
	    }
	    return self;
	  };

	  Chart.prototype.resetPlot = function resetPlot() {
	    var plot = this.get('plot');
	    var padding = this.get('padding');
	    if (!isEqualArray(padding, plot.get('padding'))) {
	      // 重置 padding，仅当padding 发生更改
	      plot.set('padding', padding);
	      plot.repaint();
	    }
	  };

	  /**
	   * 改变大小
	   * @param  {Number} width  图表宽度
	   * @param  {Number} height 图表高度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeSize = function changeSize(width, height) {
	    var self = this;
	    var canvas = self.get('canvas');
	    canvas.changeSize(width, height);
	    var plot = this.get('plot');
	    self.set('width', width);
	    self.set('height', height);
	    // change size 时重新计算边框
	    plot.repaint();
	    // 保持边框不变，防止自动 padding 时绘制多遍
	    this.set('keepPadding', true);
	    self.repaint();
	    this.set('keepPadding', false);
	    this.emit('afterchangesize');
	    return self;
	  };
	  /**
	   * 改变宽度
	   * @param  {Number} width  图表宽度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeWidth = function changeWidth(width) {
	    return this.changeSize(width, this.get('height'));
	  };
	  /**
	   * 改变宽度
	   * @param  {Number} height  图表高度
	   * @return {Chart} 图表对象
	   */


	  Chart.prototype.changeHeight = function changeHeight(height) {
	    return this.changeSize(this.get('width'), height);
	  };

	  /**
	   * 创建一个视图
	   * @param  {Object} cfg 视图的配置项
	   * @return {View} 视图对象
	   */


	  Chart.prototype.view = function view(cfg) {
	    cfg = cfg || {};
	    cfg.parent = this;
	    cfg.backPlot = this.get('backPlot');
	    cfg.middlePlot = this.get('middlePlot');
	    cfg.frontPlot = this.get('frontPlot');
	    cfg.canvas = this.get('canvas');
	    if (Util.isNil(cfg.animate)) {
	      cfg.animate = this.get('animate');
	    }
	    cfg.options = Util.mix({}, this._getSharedOptions(), cfg.options);
	    var view = new View(cfg);
	    view.set('_id', 'view' + this.get('views').length); // 标识 ID，防止同用户设定的 id 重名
	    this.get('views').push(view);
	    this.emit('addview', { view: view });
	    return view;
	  };

	  // isShapeInView() {
	  //   return true;
	  // }

	  Chart.prototype.removeView = function removeView(view) {
	    var views = this.get('views');
	    Util.Array.remove(views, view);
	    view.destroy();
	  };

	  Chart.prototype._getSharedOptions = function _getSharedOptions() {
	    var options = this.get('options');
	    var sharedOptions = {};
	    Util.each(['scales', 'coord', 'axes'], function (name) {
	      sharedOptions[name] = Util.cloneDeep(options[name]);
	    });
	    return sharedOptions;
	  };

	  /**
	   * @override
	   * 当前chart 的范围
	   */


	  Chart.prototype.getViewRegion = function getViewRegion() {
	    var plotRange = this.get('plotRange');
	    return {
	      start: plotRange.bl,
	      end: plotRange.tr
	    };
	  };

	  /**
	   * 设置图例配置信息
	   * @param  {String|Object} field 字段名
	   * @param  {Object} [cfg] 图例的配置项
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.legend = function legend(field, cfg) {
	    var options = this.get('options');
	    if (!options.legends) {
	      options.legends = {};
	    }

	    var legends = {};
	    if (field === false) {
	      options.legends = false;
	    } else if (Util.isObject(field)) {
	      legends = field;
	    } else if (Util.isString(field)) {
	      legends[field] = cfg;
	    } else {
	      legends = cfg;
	    }
	    Util.mix(options.legends, legends);

	    return this;
	  };

	  /**
	   * 设置提示信息
	   * @param  {String|Object} visible 是否可见
	   * @param  {Object} [cfg] 提示信息的配置项
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.tooltip = function tooltip(visible, cfg) {
	    var options = this.get('options');
	    if (!options.tooltip) {
	      options.tooltip = {};
	    }

	    if (visible === false) {
	      options.tooltip = false;
	    } else if (Util.isObject(visible)) {
	      Util.mix(options.tooltip, visible);
	    } else {
	      Util.mix(options.tooltip, cfg);
	    }

	    return this;
	  };

	  /**
	   * 清空图表
	   * @return {Chart} 当前的图表对象
	   */


	  Chart.prototype.clear = function clear() {
	    this.emit('beforeclear');
	    var views = this.get('views');
	    while (views.length > 0) {
	      var view = views.shift();
	      view.destroy();
	    }
	    _View.prototype.clear.call(this);
	    var canvas = this.get('canvas');
	    this.resetPlot();
	    canvas.draw();
	    this.emit('afterclear');
	    return this;
	  };

	  Chart.prototype.clearInner = function clearInner() {
	    var views = this.get('views');
	    Util.each(views, function (view) {
	      view.clearInner();
	    });

	    var tooltipController = this.get('tooltipController');
	    tooltipController && tooltipController.clear();

	    if (!this.get('keepLegend')) {
	      var legendController = this.get('legendController');
	      legendController && legendController.clear();
	    }

	    _View.prototype.clearInner.call(this);
	  };

	  // chart 除了view 上绘制的组件外，还会绘制图例和 tooltip


	  Chart.prototype.drawComponents = function drawComponents() {
	    _View.prototype.drawComponents.call(this);
	    // 一般是点击图例时，仅仅隐藏某些选项，而不销毁图例
	    if (!this.get('keepLegend')) {
	      this._renderLegends(); // 渲染图例
	    }
	  };

	  /**
	   * 绘制图表
	   * @override
	   */


	  Chart.prototype.render = function render() {
	    // 需要自动计算边框，则重新设置
	    if (!this.get('keepPadding') && this._isAutoPadding()) {
	      this.beforeRender(); // 初始化各个 view 和 绘制
	      this.drawComponents();
	      var autoPadding = this._getAutoPadding();
	      var plot = this.get('plot');
	      // 在计算出来的边框不一致的情况，重新改变边框
	      if (!isEqualArray(plot.get('padding'), autoPadding)) {
	        plot.set('padding', autoPadding);
	        plot.repaint();
	      }
	    }
	    _View.prototype.render.call(this);
	    this._renderTooltips(); // 渲染 tooltip
	  };

	  Chart.prototype.repaint = function repaint() {
	    // 重绘时需要判定当前的 padding 是否发生过改变，如果发生过改变进行调整
	    // 需要判定是否使用了自动 padding
	    if (!this.get('keepPadding')) {
	      this.resetPlot();
	    }
	    _View.prototype.repaint.call(this);
	  };

	  /**
	   * @override
	   * 显示或者隐藏
	   */


	  Chart.prototype.changeVisible = function changeVisible(visible) {
	    var wrapperEl = this.get('wrapperEl');
	    var visibleStr = visible ? '' : 'none';
	    wrapperEl.style.display = visibleStr;
	  };

	  /**
	   * 返回图表的 dataUrl 用于生成图片
	   * @return {String} dataUrl 路径
	   */


	  Chart.prototype.toDataURL = function toDataURL() {
	    var canvas = this.get('canvas');
	    var canvasDom = canvas.get('el');
	    var dataURL = canvasDom.toDataURL('image/png');
	    return dataURL;
	  };

	  /**
	   * 图表导出功能
	   * @param  {String} [name] 图片的名称，默认为 chart.png
	   * @return {String} 返回生成图片的 dataUrl 路径
	   */


	  Chart.prototype.downloadImage = function downloadImage(name) {
	    var dataURL = this.toDataURL();
	    var link = document.createElement('a');

	    if (window.Blob && window.URL) {
	      var arr = dataURL.split(',');
	      var mime = arr[0].match(/:(.*?);/)[1];
	      var bstr = atob(arr[1]);
	      var n = bstr.length;
	      var u8arr = new Uint8Array(n);
	      while (n--) {
	        u8arr[n] = bstr.charCodeAt(n);
	      }
	      var blobObj = new Blob([u8arr], { type: mime });
	      if (window.navigator.msSaveBlob) {
	        window.navigator.msSaveBlob(blobObj, (name || 'chart') + '.png');
	      } else {
	        link.addEventListener('click', function () {
	          link.download = (name || 'chart') + '.png';
	          link.href = window.URL.createObjectURL(blobObj);
	        });
	      }
	    } else {
	      link.addEventListener('click', function () {
	        link.download = (name || 'chart') + '.png';
	        link.href = dataURL.replace('image/png', 'image/octet-stream');
	      });
	    }
	    var e = document.createEvent('MouseEvents');
	    e.initEvent('click', false, false);
	    link.dispatchEvent(e);
	    return dataURL;
	  };

	  /**
	   * 根据坐标点显示对应的 tooltip
	   * @param  {Object} point 画布上的点
	   * @return {Chart}       返回 chart 实例
	   */


	  Chart.prototype.showTooltip = function showTooltip(point) {
	    var views = this.getViewsByPoint(point);
	    if (views.length) {
	      var tooltipController = this.get('tooltipController');
	      tooltipController.showTooltip(point, views);
	    }
	    return this;
	  };

	  /**
	   * 隐藏 tooltip
	  * @return {Chart}       返回 chart 实例
	   */


	  Chart.prototype.hideTooltip = function hideTooltip() {
	    var tooltipController = this.get('tooltipController');
	    tooltipController.hideTooltip();
	    return this;
	  };

	  /**
	   * 根据传入的画布坐标，获取该处的 tooltip 上的记录信息
	   * @param  {Object} point 画布坐标点
	   * @return {Array}       返回结果
	   */


	  Chart.prototype.getTooltipItems = function getTooltipItems(point) {
	    var self = this;
	    var views = self.getViewsByPoint(point);
	    var rst = [];
	    Util.each(views, function (view) {
	      var geoms = view.get('geoms');
	      Util.each(geoms, function (geom) {
	        var dataArray = geom.get('dataArray');
	        var items = [];
	        Util.each(dataArray, function (data) {
	          var tmpPoint = geom.findPoint(point, data);
	          if (tmpPoint) {
	            var subItems = geom.getTipItems(tmpPoint);
	            items = items.concat(subItems);
	          }
	        });
	        rst = rst.concat(items);
	      });
	    });
	    return rst;
	  };

	  /**
	   * @override
	   * 销毁图表
	   */


	  Chart.prototype.destroy = function destroy() {
	    this.emit('beforedestroy');
	    clearTimeout(this.get('resizeTimer'));
	    var canvas = this.get('canvas');
	    var wrapperEl = this.get('wrapperEl');
	    wrapperEl.parentNode.removeChild(wrapperEl);
	    _View.prototype.destroy.call(this);
	    canvas.destroy();
	    window.removeEventListener('resize', Util.getWrapBehavior(this, '_initForceFitEvent'));
	    this.emit('afterdestroy');
	  };

	  return Chart;
	}(View);

	module.exports = Chart;

	/***/ }),
	/* 116 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview view
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(58);
	var Geom = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var Controller = __webpack_require__(103);
	var Global = __webpack_require__(2);
	var FIELD_ORIGIN = '_origin';
	var Animate = __webpack_require__(329);

	function isFullCircle(coord) {
	  var startAngle = coord.startAngle;
	  var endAngle = coord.endAngle;
	  if (!Util.isNil(startAngle) && !Util.isNil(endAngle) && endAngle - startAngle < Math.PI * 2) {
	    return false;
	  }
	  return true;
	}

	function isBetween(value, start, end) {
	  var tmp = (value - start) / (end - start);
	  return tmp >= 0 && tmp <= 1;
	}

	function isPointInCoord(coord, point) {
	  var result = false;
	  if (coord) {
	    var type = coord.type;
	    if (type === 'theta') {
	      var start = coord.start;
	      var end = coord.end;
	      result = isBetween(point.x, start.x, end.x) && isBetween(point.y, start.y, end.y);
	    } else {
	      var invertPoint = coord.invert(point);
	      result = invertPoint.x >= 0 && invertPoint.y >= 0 && invertPoint.x <= 1 && invertPoint.y <= 1;
	    }
	  }
	  return result;
	}

	var ViewGeoms = {};
	Util.each(Geom, function (geomConstructor, className) {
	  var methodName = Util.lowerFirst(className);
	  ViewGeoms[methodName] = function (cfg) {
	    var geom = new geomConstructor(cfg);
	    this.addGeom(geom);
	    return geom;
	  };
	});

	/**
	 * 图表中的视图
	 * @class View
	 */

	var View = function (_Base) {
	  _inherits(View, _Base);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  View.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      viewContainer: null,
	      coord: null,
	      start: { x: 0, y: 0 },
	      end: { x: 1, y: 1 },
	      geoms: [],
	      scales: {},
	      options: {},
	      scaleController: null,
	      padding: 0,
	      parent: null,
	      tooltipEnable: true, // 是否展示 tooltip
	      animate: true,
	      visible: true
	    };
	  };

	  function View(cfg) {
	    _classCallCheck(this, View);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    var self = _this;
	    Util.each(Geom, function (geomConstructor, className) {
	      var methodName = Util.lowerFirst(className);
	      self[methodName] = function (cfg) {
	        var geom = new geomConstructor(cfg);
	        self.addGeom(geom);
	        return geom;
	      };
	    });
	    // Util.mix(this, ViewGeoms);
	    _this.init();
	    return _this;
	  }

	  /**
	   * @protected
	   * 初始化
	   */


	  View.prototype.init = function init() {
	    this._initViewPlot(); // 先创建容器
	    if (this.get('data')) {
	      this._initData(this.get('data'));
	    }
	    this._initOptions();
	    this._initControllers();
	    this._bindEvents();
	  };

	  // 初始化配置项


	  View.prototype._initOptions = function _initOptions() {
	    var self = this;
	    var options = Util.mix({}, self.get('options')); // 防止修改原始值
	    if (!options.scales) {
	      options.scales = {};
	    }
	    if (!options.coord) {
	      options.coord = {};
	    }

	    if (options.animate === false) {
	      this.set('animate', false);
	    }

	    if (options.tooltip === false || Util.isNull(options.tooltip)) {
	      // 配置项方式关闭 tooltip
	      this.set('tooltipEnable', false);
	    }

	    if (options.geoms && options.geoms.length) {
	      Util.each(options.geoms, function (geomOption) {
	        self._createGeom(geomOption);
	      });
	    }
	    var scaleController = self.get('scaleController');
	    if (scaleController) {
	      scaleController.defs = options.scales;
	    }
	    var coordController = self.get('coordController');
	    if (coordController) {
	      coordController.reset(options.coord);
	    }
	    this.set('options', options);
	  };

	  View.prototype._createGeom = function _createGeom(cfg) {
	    var type = cfg.type;
	    var geom = void 0;
	    if (this[type]) {
	      geom = this[type]();
	      Util.each(cfg, function (v, k) {
	        if (geom[k]) {

	          if (Util.isObject(v) && v.field) {
	            // 配置项传入
	            if (v === 'label') {
	              geom[k](v.field, v.callback, v.cfg);
	            } else {
	              var _cfg = void 0;
	              Util.each(v, function (value, key) {
	                if (key !== 'field') {
	                  _cfg = value;
	                }
	              });
	              geom[k](v.field, _cfg);
	            }
	          } else {
	            geom[k](v);
	          }
	        }
	      });
	    }
	  };

	  // 初始化所有的控制器


	  View.prototype._initControllers = function _initControllers() {
	    var options = this.get('options');

	    var scaleController = new Controller.Scale({
	      defs: options.scales
	    });
	    var coordController = new Controller.Coord(options.coord);
	    this.set('scaleController', scaleController);
	    this.set('coordController', coordController);

	    var axisController = new Controller.Axis();
	    this.set('axisController', axisController);

	    var guideController = new Controller.Guide({
	      options: options.guides || []
	    });
	    this.set('guideController', guideController);
	  };

	  View.prototype._initViewPlot = function _initViewPlot() {
	    if (!this.get('viewContainer')) {
	      // 用于 geom 的绘制
	      this.set('viewContainer', this.get('middlePlot'));
	    }
	  };

	  View.prototype._initGeoms = function _initGeoms() {
	    var geoms = this.get('geoms');
	    var filteredData = this.get('filteredData');
	    var coord = this.get('coord');
	    var viewId = this.get('_id');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.set('data', filteredData);
	      geom.set('coord', coord);
	      geom.set('_id', viewId + '-geom' + i);
	      geom.set('keyFields', this.get('keyFields'));
	      geom.init();
	    }
	  };

	  View.prototype._clearGeoms = function _clearGeoms() {
	    var self = this;
	    var geoms = self.get('geoms');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.clear();
	    }
	  };

	  View.prototype._removeGeoms = function _removeGeoms() {
	    var self = this;
	    var geoms = self.get('geoms');
	    while (geoms.length > 0) {
	      var geom = geoms.shift();
	      geom.destroy();
	    }
	  };

	  View.prototype._drawGeoms = function _drawGeoms() {
	    var geoms = this.get('geoms');
	    var coord = this.get('coord');
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      geom.setCoord(coord);
	      geom.paint();
	    }
	  };

	  View.prototype.isShapeInView = function isShapeInView(shape) {
	    var id = this.get('_id');
	    var shapeId = shape._id;
	    if (!shapeId) {
	      return shape.get('parent').get('viewId') === id;
	    }
	    return shapeId.split('-')[0] === id;
	  };

	  /**
	   * View 所在的范围
	   * @protected
	   * @return {Object} View 所在的范围
	   */


	  View.prototype.getViewRegion = function getViewRegion() {
	    var self = this;
	    var parent = self.get('parent');
	    var start = void 0;
	    var end = void 0;
	    if (parent) {
	      var region = parent.getViewRegion();
	      var viewRegion = self._getViewRegion(region.start, region.end);
	      start = viewRegion.start;
	      end = viewRegion.end;
	    } else {
	      start = self.get('start');
	      end = self.get('end');
	    }
	    return {
	      start: start,
	      end: end
	    };
	  };

	  // 获取 range 所在的范围


	  View.prototype._getViewRegion = function _getViewRegion(plotStart, plotEnd) {
	    var start = this.get('start');
	    var end = this.get('end');
	    var startX = start.x;
	    var startY = 1 - end.y;
	    var endX = end.x;
	    var endY = 1 - start.y;
	    var padding = this.get('padding');
	    // 转换成 上、右、下、左的模式
	    var allPadding = Util.toAllPadding(padding);
	    var top = allPadding[0];
	    var right = allPadding[1];
	    var bottom = allPadding[2];
	    var left = allPadding[3];

	    var startPoint = {
	      x: startX * (plotEnd.x - plotStart.x) + plotStart.x + left,
	      y: startY * (plotEnd.y - plotStart.y) + plotStart.y - bottom

	    };
	    var endPoint = {
	      x: endX * (plotEnd.x - plotStart.x) + plotStart.x - right,
	      y: endY * (plotEnd.y - plotStart.y) + plotStart.y + top
	    };

	    return {
	      start: startPoint,
	      end: endPoint
	    };
	  };

	  View.prototype._createCoord = function _createCoord() {
	    var coordController = this.get('coordController');
	    var region = this.getViewRegion();
	    var coord = coordController.createCoord(region.start, region.end);
	    this.set('coord', coord);
	  };

	  View.prototype._renderAxes = function _renderAxes() {
	    var options = this.get('options');
	    var axesOptions = options.axes;
	    if (axesOptions === false) {
	      // 不渲染坐标轴
	      return;
	    }
	    var axisController = this.get('axisController');
	    axisController.container = this.get('backPlot');
	    axisController.coord = this.get('coord');
	    axisController.options = axesOptions || {};
	    var xScale = this.getXScale();
	    var yScales = this.getYScales();
	    var viewId = this.get('_id');
	    axisController.createAxis(xScale, yScales, viewId);
	  };

	  View.prototype._renderGuides = function _renderGuides() {
	    var guideController = this.get('guideController');
	    if (!Util.isEmpty(guideController.options)) {
	      var coord = this.get('coord');
	      guideController.view = this;
	      guideController.backContainer = this.get('backPlot');
	      guideController.frontContainer = this.get('frontPlot');
	      guideController.xScales = this._getScales('x');
	      guideController.yScales = this._getScales('y');
	      guideController.render(coord);
	    }
	  };
	  // 注册事件


	  View.prototype._bindEvents = function _bindEvents() {
	    var eventController = new Controller.Event({
	      view: this,
	      canvas: this.get('canvas')
	    });
	    eventController.bindEvents();
	    this.set('eventController', eventController);
	  };
	  // 清理时间


	  View.prototype._clearEvents = function _clearEvents() {
	    var eventController = this.get('eventController');
	    eventController && eventController.clearEvents();
	  };

	  View.prototype._getScales = function _getScales(dimType) {
	    var geoms = this.get('geoms');
	    var result = {};
	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      var scale = dimType === 'x' ? geom.getXScale() : geom.getYScale();
	      if (scale && !result[scale.field]) {
	        result[scale.field] = scale;
	      }
	    }
	    return result;
	  };

	  View.prototype._adjustScale = function _adjustScale() {
	    this._setCatScalesRange();
	    var geoms = this.get('geoms');
	    var scaleController = this.get('scaleController');
	    var colDefs = scaleController.defs;

	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      if (geom.get('type') === 'interval') {
	        var yScale = geom.getYScale();
	        var field = yScale.field;
	        if (!(colDefs[field] && colDefs[field].min) && yScale.min > 0 && yScale.type !== 'time') {
	          yScale.change({
	            min: 0
	          });
	        }
	      }
	    }
	  };

	  View.prototype._setCatScalesRange = function _setCatScalesRange() {
	    var self = this;
	    var coord = self.get('coord');
	    var xScale = self.getXScale();
	    var yScales = self.getYScales();
	    var scales = [];

	    xScale && scales.push(xScale);
	    scales = scales.concat(yScales);
	    var inFullCircle = coord.isPolar && isFullCircle(coord);
	    var scaleController = self.get('scaleController');
	    var colDefs = scaleController.defs;
	    Util.each(scales, function (scale) {
	      if ((scale.isCategory || scale.isIdentity) && scale.values && !(colDefs[scale.field] && colDefs[scale.field].range)) {
	        var count = scale.values.length;
	        var range = void 0;
	        if (count === 1) {
	          range = [0.5, 1]; // 只有一个分类时,防止计算出现 [0.5,0.5]的状态
	        } else {
	          var widthRatio = 1;
	          var offset = 0;
	          if (inFullCircle) {
	            if (!coord.isTransposed) {
	              range = [0, 1 - 1 / count];
	            } else {
	              widthRatio = Global.widthRatio.multiplePie;
	              offset = 1 / count * widthRatio;
	              range = [offset / 2, 1 - offset / 2];
	            }
	          } else {
	            offset = 1 / count * 1 / 2; // 两边留下分类空间的一半
	            range = [offset, 1 - offset]; // 坐标轴最前面和最后面留下空白防止绘制柱状图时
	          }
	        }
	        scale.range = range;
	      }
	    });
	  };

	  View.prototype.getXScale = function getXScale() {
	    var geoms = this.get('geoms');
	    // 如果进行过滤，那么 geom 默认隐藏时会出现不一致
	    // 默认隐藏时坐标轴不绘制，但是调用了 geom.show() 后，则图形显示了，坐标轴依然不见
	    /* .filter(function(geom) {
	      return geom.get('visible');
	    }); */
	    var xScale = null;
	    if (!Util.isEmpty(geoms)) {
	      xScale = geoms[0].getXScale();
	    }
	    return xScale;
	  };

	  View.prototype.getYScales = function getYScales() {
	    var geoms = this.get('geoms');
	    /* .filter(function(geom) {
	      return geom.get('visible');
	    }); */
	    var rst = [];

	    for (var i = 0; i < geoms.length; i++) {
	      var geom = geoms[i];
	      var yScale = geom.getYScale();
	      if (yScale && Util.indexOf(rst, yScale) === -1) {
	        rst.push(yScale);
	      }
	    }
	    return rst;
	  };

	  /**
	   * 获取数据对应在画布空间的坐标
	   * @param  {Object} item 原始数据
	   * @return {Object}      返回对应的画布上的坐标点
	   */


	  View.prototype.getXY = function getXY(item) {
	    var self = this;
	    var coord = self.get('coord');
	    var xScales = self._getScales('x');
	    var yScales = self._getScales('y');
	    var x = void 0;
	    var y = void 0;

	    for (var field in item) {
	      if (xScales[field]) {
	        x = xScales[field].scale(item[field]);
	      }
	      if (yScales[field]) {
	        y = yScales[field].scale(item[field]);
	      }
	    }

	    if (!Util.isNil(x) && !Util.isNil(y)) {
	      return coord.convert({
	        x: x,
	        y: y
	      });
	    }

	    return null;
	  };

	  /**
	   * 获取逼近的点的数据集合
	   * @param  {Object} point 画布上的像素点
	   * @return {Array} 数据
	   */


	  View.prototype.getSnapRecords = function getSnapRecords(point) {
	    var self = this;
	    var geoms = self.get('geoms');
	    var rst = [];
	    Util.each(geoms, function (geom) {
	      var dataArray = geom.get('dataArray');
	      var record = void 0;
	      Util.each(dataArray, function (data) {
	        record = geom.findPoint(point, data);
	        record && rst.push(record);
	      });
	    });
	    return rst;
	  };

	  /**
	   * @protected
	   * 添加几何标记
	   * @param {Geom} geom 几何标记
	   */


	  View.prototype.addGeom = function addGeom(geom) {
	    var self = this;
	    var geoms = self.get('geoms');
	    geoms.push(geom);
	    geom.set('view', self);
	    var container = self.get('viewContainer');
	    geom.set('container', container);
	    geom.set('animate', self.get('animate'));
	    geom.bindEvents();
	  };

	  /**
	   * @protected
	   * 移除几何标记
	   * @param {Geom} geom 几何标记
	   */


	  View.prototype.removeGeom = function removeGeom(geom) {
	    var geoms = this.get('geoms');
	    Util.Array.remove(geoms, geom);
	    geom.destroy();
	  };

	  View.prototype.createScale = function createScale(field, data) {
	    var scales = this.get('scales');
	    var parent = this.get('parent');
	    var scale = scales[field];
	    // const filters = this._getFilters();
	    if (!data) {
	      var filteredData = this.get('filteredData');
	      var legendFields = this._getFieldsForLegend();
	      // 过滤导致数据为空时，需要使用全局数据
	      // 参与过滤的字段的度量也根据全局数据来生成
	      if (filteredData.length && legendFields.indexOf(field) === -1) {
	        data = filteredData;
	      } else {
	        data = this.get('data');
	      }
	    }
	    var scaleController = this.get('scaleController');
	    if (!scale) {
	      scale = scaleController.createScale(field, data);
	      if (scale.sync && parent) {
	        var parentScale = parent.createScale(field, data);
	        scale = this._getSyncScale(parentScale, scale);
	      }
	      scales[field] = scale;
	    } else if (scale.sync) {
	      // 防止 view 内部创建的scale，Chart 上的scale 范围更大
	      var newScale = scaleController.createScale(field, data);
	      this._syncScale(scale, newScale);
	    }
	    return scale;
	  };

	  View.prototype._getFieldsForLegend = function _getFieldsForLegend() {
	    var fields = [];
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var geomFields = geom.getFieldsForLegend();
	      fields = fields.concat(geomFields);
	    });
	    return Util.uniq(fields);
	  };

	  // 如果需要同步度量，则使得 values,min,max的范围最大


	  View.prototype._getSyncScale = function _getSyncScale(parentScale, scale) {
	    if (parentScale.type !== scale.type) {
	      return scale;
	    }
	    this._syncScale(parentScale, scale);
	    return parentScale;
	  };

	  View.prototype._syncScale = function _syncScale(distScale, sourceScale) {
	    var mergeValues = Util.union(distScale.values, sourceScale.values);
	    if (sourceScale.isLinear) {
	      var max = Math.max(distScale.max, sourceScale.max);
	      var min = Math.min(distScale.min, sourceScale.min);
	      if (distScale.max !== max || distScale.min !== min) {
	        distScale.change({
	          min: min,
	          max: max,
	          values: mergeValues
	        });
	      }
	    }

	    if (mergeValues.length !== distScale.values.length) {
	      distScale.change({
	        values: mergeValues
	      });
	    }
	  };

	  View.prototype.getFilteredValues = function getFilteredValues(field) {
	    var scale = this.get('scales')[field];
	    var values = scale.values;
	    var filters = this._getFilters();
	    var rst = void 0;
	    if (filters && filters[field]) {
	      rst = values.filter(filters[field]);
	    } else {
	      rst = values.slice(0);
	    }
	    return rst;
	  };

	  View.prototype.filter = function filter(field, condition) {
	    var options = this.get('options');
	    if (!options.filters) {
	      options.filters = {};
	    }
	    options.filters[field] = condition;
	  };

	  // 获取 filters


	  View.prototype._getFilters = function _getFilters() {
	    var options = this.get('options');
	    return options.filters;
	  };

	  // 执行 filter 数据


	  View.prototype.execFilter = function execFilter(data) {
	    var self = this;
	    var filters = self._getFilters();
	    if (filters) {
	      data = data.filter(function (obj) {
	        var rst = true;
	        Util.each(filters, function (fn, k) {
	          if (fn) {
	            rst = fn(obj[k], obj);
	            if (!rst) {
	              return false;
	            }
	          }
	        });
	        return rst;
	      });
	    }
	    return data;
	  };

	  View.prototype.axis = function axis(field, cfg) {
	    var options = this.get('options');
	    if (field === false) {
	      options.axes = false;
	    } else {
	      if (!options.axes) {
	        options.axes = {};
	      }
	      var axisOptions = options.axes;
	      axisOptions[field] = cfg;
	    }

	    return this;
	  };

	  View.prototype.guide = function guide() {
	    return this.get('guideController');
	  };

	  View.prototype._getKeyFields = function _getKeyFields(scaleDefs) {
	    var keyFields = [];
	    Util.each(scaleDefs, function (def, field) {
	      if (def.key) {
	        keyFields.push(field);
	      }
	    });
	    this.set('keyFields', keyFields);
	  };

	  View.prototype.scale = function scale(field, cfg) {
	    var options = this.get('options');
	    var scaleDefs = options.scales;
	    if (Util.isObject(field)) {
	      Util.mix(scaleDefs, field);
	    } else {
	      scaleDefs[field] = cfg;
	    }

	    this._getKeyFields(scaleDefs);
	    return this;
	  };

	  View.prototype.tooltip = function tooltip(visible) {
	    this.set('tooltipEnable', visible);
	    return this;
	  };

	  View.prototype.animate = function animate(enable) {
	    var options = this.get('options');
	    options.animate = enable;
	    this.set('animate', enable);
	    return this;
	  };

	  View.prototype.changeOptions = function changeOptions(options) {
	    this.set('options', options);
	    this._initOptions(options);
	    return this;
	  };

	  /**
	   * @internal 查找包含指定点的视图
	   * @param  {Object} point 点的位置
	   * @return {Array} 多个视图
	   */


	  View.prototype.getViewsByPoint = function getViewsByPoint(point) {
	    var rst = [];
	    var views = this.get('views');

	    if (isPointInCoord(this.get('coord'), point)) {
	      rst.push(this);
	    }

	    Util.each(views, function (view) {
	      if (view.get('visible') && isPointInCoord(view.get('coord'), point)) {
	        rst.push(view);
	      }
	    });
	    return rst;
	  };

	  /**
	   * 遍历所有的 shape ，用户更改 shape 后进行刷新
	   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
	   * @return {View} 当前视图
	   */


	  View.prototype.eachShape = function eachShape(fn) {
	    var self = this;
	    var views = self.get('views');
	    var canvas = self.get('canvas');
	    Util.each(views, function (view) {
	      view.eachShape(fn);
	    });
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      var shapes = geom.getShapes();
	      Util.each(shapes, function (shape) {
	        var origin = shape.get('origin');
	        if (Util.isArray(origin)) {
	          var arr = origin.map(function (subOrigin) {
	            return subOrigin[FIELD_ORIGIN];
	          });
	          fn(arr, shape, geom, self);
	        } else {
	          var obj = origin[FIELD_ORIGIN];
	          fn(obj, shape, geom, self);
	        }
	      });
	    });
	    canvas.draw();
	    return this;
	  };

	  /**
	   * 遍历所有的 shape ，回调函数中 true / false 控制图形是否显示
	   * @param  {Function} fn 回调函数包含参数：record,shape,geom,view
	   * @return {View} 当前视图
	   */


	  View.prototype.filterShape = function filterShape(fn) {
	    var callback = function callback(record, shape, geom, view) {
	      if (!fn(record, shape, geom, view)) {
	        shape.set('visible', false);
	      } else {
	        shape.set('visible', true);
	      }
	    };
	    this.eachShape(callback);
	    return this;
	  };

	  View.prototype.clearInner = function clearInner() {
	    this.set('scales', {});
	    var options = this.get('options');
	    options.geoms = null;
	    this._clearGeoms();
	    // reset guide
	    this.get('guideController') && this.get('guideController').reset();
	    // clear axis
	    this.get('axisController') && this.get('axisController').clear();
	  };

	  /**
	   * 清除视图内容，包括 geoms
	   * @return {View} 当前视图
	   */


	  View.prototype.clear = function clear() {
	    var options = this.get('options');
	    options.filters = null;
	    this._removeGeoms();
	    // const container = this.get('viewContainer');
	    // container.clear();
	    this.clearInner();
	    this.get('guideController') && this.get('guideController').clear();
	    this.set('isUpdate', false);
	    this.set('keyFields', []);
	    return this;
	  };

	  /**
	   * 设置坐标系信息
	   * @param  {String} type 类型
	   * @param  {Object} cfg  配置项
	   * @return {Object} coordController 坐标系的管理器
	   */


	  View.prototype.coord = function coord(type, cfg) {
	    var coordController = this.get('coordController');
	    coordController.reset({
	      type: type,
	      cfg: cfg
	    });
	    return coordController;
	  };

	  /**
	   * 当父元素边框发生改变时坐标系需要重新调整
	   * @protected
	   */


	  View.prototype.resetCoord = function resetCoord() {
	    this._createCoord();
	  };

	  View.prototype.source = function source(data, scales) {
	    this._initData(data);
	    if (scales) {
	      this.scale(scales);
	    }
	    this.emit('setdata');
	    return this;
	  };

	  View.prototype.changeData = function changeData(data) {
	    this.emit('beforechangedata');
	    this._initData(data);
	    this.emit('afterchangedata');
	    this.repaint();
	    return this;
	  };

	  View.prototype._initData = function _initData(data) {
	    var dataView = this.get('dataView');
	    if (dataView) {
	      dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
	      this.set('dataView', null);
	    }
	    if (data && data.isDataView) {
	      data.on('change', Util.wrapBehavior(this, '_onViewChange'));
	      this.set('dataView', data);
	      data = data.rows;
	    }
	    this.set('data', data);
	  };

	  View.prototype._onViewChange = function _onViewChange() {
	    this.emit('beforechangedata');
	    var dataView = this.get('dataView');
	    var rows = dataView.rows;
	    this.set('data', rows);
	    this.emit('afterchangedata');
	    this.repaint();
	  };

	  // 初始化各个 view 和绘制辅助元素


	  View.prototype.beforeRender = function beforeRender() {
	    var views = this.get('views');
	    // 如果存在 views 则初始化子 view 的方法
	    Util.each(views, function (view) {
	      view.beforeRender();
	    });
	    this.initView();
	  };

	  // 绘制坐标轴、图例、辅助元素等图表组件


	  View.prototype.drawComponents = function drawComponents() {
	    var views = this.get('views');
	    // 如果存在 views 则初始化子 view 的方法
	    Util.each(views, function (view) {
	      view.drawComponents();
	    });
	    this._renderAxes();
	    this._renderGuides();
	  };

	  // 绘制图形


	  View.prototype.drawCanvas = function drawCanvas(stopDraw) {
	    if (!stopDraw) {
	      var views = this.get('views');
	      var backPlot = this.get('backPlot');
	      backPlot.sort();
	      var canvas = this.get('canvas');
	      var animate = this.get('animate');
	      if (animate) {
	        var isUpdate = this.get('isUpdate');
	        Util.each(views, function (view) {
	          Animate.execAnimation(view, isUpdate);
	        });
	        Animate.execAnimation(this, isUpdate);
	      } else {
	        canvas.draw();
	      }
	    }
	  };

	  View.prototype.render = function render(stopDraw) {
	    this.clearInner();
	    this.emit('beforerender');
	    this.beforeRender();
	    this.emit('beforepaint');
	    this.drawComponents();
	    this.paint();
	    this.emit('afterpaint');
	    this.drawCanvas(stopDraw);
	    this.emit('afterrender');
	    this.set('rendered', true);
	    return this;
	  };

	  View.prototype.initView = function initView() {
	    var data = this.get('data') || [];
	    var filteredData = this.execFilter(data);
	    this.set('filteredData', filteredData);
	    // if (!Util.isEmpty(data)) {
	    this._createCoord(); // draw geometry 前绘制区域可能会发生改变
	    this._initGeoms();
	    this._adjustScale();
	    // }
	  };

	  View.prototype.paint = function paint() {
	    var views = this.get('views');
	    // 绘制
	    Util.each(views, function (view) {
	      view.paint();
	    });
	    var data = this.get('data');
	    if (!Util.isEmpty(data)) {
	      this._drawGeoms();
	    }
	    // 如果 view 隐藏了，隐藏所有的图形和坐标轴
	    if (!this.get('visible')) {
	      this.changeVisible(false, true); // 隐藏所有的图形，但是不绘制
	    }
	  };

	  View.prototype.changeVisible = function changeVisible(visible, stopDraw) {
	    var geoms = this.get('geoms');
	    Util.each(geoms, function (geom) {
	      // if (geom.get('visible')) { // geom 隐藏时不受
	      geom.changeVisible(visible, true);
	      // }
	    });
	    this.get('axisController') && this.get('axisController').changeVisible(visible);
	    this.get('guideController') && this.get('guideController').changeVisible(visible);
	    if (!stopDraw) {
	      var canvas = this.get('canvas');
	      canvas.draw();
	    }
	  };

	  View.prototype.repaint = function repaint() {
	    this.set('isUpdate', true);
	    this.clearInner();
	    this.render();
	  };

	  View.prototype.destroy = function destroy() {
	    this._clearEvents();
	    var dataView = this.get('dataView');
	    dataView && dataView.off('change', Util.getWrapBehavior(this, '_onViewChange'));
	    this.clear();
	    _Base.prototype.destroy.call(this);
	  };

	  return View;
	}(Base);

	module.exports = View;

	/***/ }),
	/* 117 */
	/***/ (function(module, exports, __webpack_require__) {


	var Base = __webpack_require__(15);
	Base.Color = __webpack_require__(272);
	Base.Size = __webpack_require__(273);
	Base.Opacity = __webpack_require__(274);
	Base.Shape = __webpack_require__(275);
	Base.Position = __webpack_require__(276);
	module.exports = Base;

	/***/ }),
	/* 118 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview shape 的辅助方法
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);

	var ShapeUtil = {
	  splitPoints: function splitPoints(obj) {
	    var points = [];
	    var x = obj.x;
	    var y = obj.y;
	    y = Util.isArray(y) ? y : [y];
	    Util.each(y, function (yItem, index) {
	      var point = {
	        x: Util.isArray(x) ? x[index] : x,
	        y: yItem
	      };
	      points.push(point);
	    });
	    return points;
	  }
	};

	module.exports = ShapeUtil;

	/***/ }),
	/* 119 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseClone = __webpack_require__(120);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_SYMBOLS_FLAG = 4;

	/**
	 * This method is like `_.clone` except that it recursively clones `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 1.0.0
	 * @category Lang
	 * @param {*} value The value to recursively clone.
	 * @returns {*} Returns the deep cloned value.
	 * @see _.clone
	 * @example
	 *
	 * var objects = [{ 'a': 1 }, { 'b': 2 }];
	 *
	 * var deep = _.cloneDeep(objects);
	 * console.log(deep[0] === objects[0]);
	 * // => false
	 */
	function cloneDeep(value) {
	  return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
	}

	module.exports = cloneDeep;

	/***/ }),
	/* 120 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    arrayEach = __webpack_require__(150),
	    assignValue = __webpack_require__(44),
	    baseAssign = __webpack_require__(151),
	    baseAssignIn = __webpack_require__(157),
	    cloneBuffer = __webpack_require__(160),
	    copyArray = __webpack_require__(161),
	    copySymbols = __webpack_require__(162),
	    copySymbolsIn = __webpack_require__(163),
	    getAllKeys = __webpack_require__(76),
	    getAllKeysIn = __webpack_require__(164),
	    getTag = __webpack_require__(18),
	    initCloneArray = __webpack_require__(168),
	    initCloneByTag = __webpack_require__(169),
	    initCloneObject = __webpack_require__(174),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isMap = __webpack_require__(176),
	    isObject = __webpack_require__(7),
	    isSet = __webpack_require__(178),
	    keys = __webpack_require__(17);

	/** Used to compose bitmasks for cloning. */
	var CLONE_DEEP_FLAG = 1,
	    CLONE_FLAT_FLAG = 2,
	    CLONE_SYMBOLS_FLAG = 4;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    genTag = '[object GeneratorFunction]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values supported by `_.clone`. */
	var cloneableTags = {};
	cloneableTags[argsTag] = cloneableTags[arrayTag] = cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] = cloneableTags[boolTag] = cloneableTags[dateTag] = cloneableTags[float32Tag] = cloneableTags[float64Tag] = cloneableTags[int8Tag] = cloneableTags[int16Tag] = cloneableTags[int32Tag] = cloneableTags[mapTag] = cloneableTags[numberTag] = cloneableTags[objectTag] = cloneableTags[regexpTag] = cloneableTags[setTag] = cloneableTags[stringTag] = cloneableTags[symbolTag] = cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] = cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
	cloneableTags[errorTag] = cloneableTags[funcTag] = cloneableTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.clone` and `_.cloneDeep` which tracks
	 * traversed objects.
	 *
	 * @private
	 * @param {*} value The value to clone.
	 * @param {boolean} bitmask The bitmask flags.
	 *  1 - Deep clone
	 *  2 - Flatten inherited properties
	 *  4 - Clone symbols
	 * @param {Function} [customizer] The function to customize cloning.
	 * @param {string} [key] The key of `value`.
	 * @param {Object} [object] The parent object of `value`.
	 * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
	 * @returns {*} Returns the cloned value.
	 */
	function baseClone(value, bitmask, customizer, key, object, stack) {
	  var result,
	      isDeep = bitmask & CLONE_DEEP_FLAG,
	      isFlat = bitmask & CLONE_FLAT_FLAG,
	      isFull = bitmask & CLONE_SYMBOLS_FLAG;

	  if (customizer) {
	    result = object ? customizer(value, key, object, stack) : customizer(value);
	  }
	  if (result !== undefined) {
	    return result;
	  }
	  if (!isObject(value)) {
	    return value;
	  }
	  var isArr = isArray(value);
	  if (isArr) {
	    result = initCloneArray(value);
	    if (!isDeep) {
	      return copyArray(value, result);
	    }
	  } else {
	    var tag = getTag(value),
	        isFunc = tag == funcTag || tag == genTag;

	    if (isBuffer(value)) {
	      return cloneBuffer(value, isDeep);
	    }
	    if (tag == objectTag || tag == argsTag || isFunc && !object) {
	      result = isFlat || isFunc ? {} : initCloneObject(value);
	      if (!isDeep) {
	        return isFlat ? copySymbolsIn(value, baseAssignIn(result, value)) : copySymbols(value, baseAssign(result, value));
	      }
	    } else {
	      if (!cloneableTags[tag]) {
	        return object ? value : {};
	      }
	      result = initCloneByTag(value, tag, isDeep);
	    }
	  }
	  // Check for circular references and return its corresponding clone.
	  stack || (stack = new Stack());
	  var stacked = stack.get(value);
	  if (stacked) {
	    return stacked;
	  }
	  stack.set(value, result);

	  if (isSet(value)) {
	    value.forEach(function (subValue) {
	      result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
	    });

	    return result;
	  }

	  if (isMap(value)) {
	    value.forEach(function (subValue, key) {
	      result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
	    });

	    return result;
	  }

	  var keysFunc = isFull ? isFlat ? getAllKeysIn : getAllKeys : isFlat ? keysIn : keys;

	  var props = isArr ? undefined : keysFunc(value);
	  arrayEach(props || value, function (subValue, key) {
	    if (props) {
	      key = subValue;
	      subValue = value[key];
	    }
	    // Recursively populate clone (susceptible to call stack limits).
	    assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
	  });
	  return result;
	}

	module.exports = baseClone;

	/***/ }),
	/* 121 */
	/***/ (function(module, exports) {

	/**
	 * Removes all key-value entries from the list cache.
	 *
	 * @private
	 * @name clear
	 * @memberOf ListCache
	 */
	function listCacheClear() {
	  this.__data__ = [];
	  this.size = 0;
	}

	module.exports = listCacheClear;

	/***/ }),
	/* 122 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/** Used for built-in method references. */
	var arrayProto = Array.prototype;

	/** Built-in value references. */
	var splice = arrayProto.splice;

	/**
	 * Removes `key` and its value from the list cache.
	 *
	 * @private
	 * @name delete
	 * @memberOf ListCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function listCacheDelete(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    return false;
	  }
	  var lastIndex = data.length - 1;
	  if (index == lastIndex) {
	    data.pop();
	  } else {
	    splice.call(data, index, 1);
	  }
	  --this.size;
	  return true;
	}

	module.exports = listCacheDelete;

	/***/ }),
	/* 123 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Gets the list cache value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf ListCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function listCacheGet(key) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  return index < 0 ? undefined : data[index][1];
	}

	module.exports = listCacheGet;

	/***/ }),
	/* 124 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Checks if a list cache value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf ListCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function listCacheHas(key) {
	  return assocIndexOf(this.__data__, key) > -1;
	}

	module.exports = listCacheHas;

	/***/ }),
	/* 125 */
	/***/ (function(module, exports, __webpack_require__) {

	var assocIndexOf = __webpack_require__(25);

	/**
	 * Sets the list cache `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf ListCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the list cache instance.
	 */
	function listCacheSet(key, value) {
	  var data = this.__data__,
	      index = assocIndexOf(data, key);

	  if (index < 0) {
	    ++this.size;
	    data.push([key, value]);
	  } else {
	    data[index][1] = value;
	  }
	  return this;
	}

	module.exports = listCacheSet;

	/***/ }),
	/* 126 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24);

	/**
	 * Removes all key-value entries from the stack.
	 *
	 * @private
	 * @name clear
	 * @memberOf Stack
	 */
	function stackClear() {
	  this.__data__ = new ListCache();
	  this.size = 0;
	}

	module.exports = stackClear;

	/***/ }),
	/* 127 */
	/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the stack.
	 *
	 * @private
	 * @name delete
	 * @memberOf Stack
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function stackDelete(key) {
	  var data = this.__data__,
	      result = data['delete'](key);

	  this.size = data.size;
	  return result;
	}

	module.exports = stackDelete;

	/***/ }),
	/* 128 */
	/***/ (function(module, exports) {

	/**
	 * Gets the stack value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Stack
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function stackGet(key) {
	  return this.__data__.get(key);
	}

	module.exports = stackGet;

	/***/ }),
	/* 129 */
	/***/ (function(module, exports) {

	/**
	 * Checks if a stack value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Stack
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function stackHas(key) {
	  return this.__data__.has(key);
	}

	module.exports = stackHas;

	/***/ }),
	/* 130 */
	/***/ (function(module, exports, __webpack_require__) {

	var ListCache = __webpack_require__(24),
	    Map = __webpack_require__(42),
	    MapCache = __webpack_require__(43);

	/** Used as the size to enable large array optimizations. */
	var LARGE_ARRAY_SIZE = 200;

	/**
	 * Sets the stack `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Stack
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the stack cache instance.
	 */
	function stackSet(key, value) {
	  var data = this.__data__;
	  if (data instanceof ListCache) {
	    var pairs = data.__data__;
	    if (!Map || pairs.length < LARGE_ARRAY_SIZE - 1) {
	      pairs.push([key, value]);
	      this.size = ++data.size;
	      return this;
	    }
	    data = this.__data__ = new MapCache(pairs);
	  }
	  data.set(key, value);
	  this.size = data.size;
	  return this;
	}

	module.exports = stackSet;

	/***/ }),
	/* 131 */
	/***/ (function(module, exports, __webpack_require__) {

	var isFunction = __webpack_require__(65),
	    isMasked = __webpack_require__(135),
	    isObject = __webpack_require__(7),
	    toSource = __webpack_require__(67);

	/**
	 * Used to match `RegExp`
	 * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
	 */
	var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

	/** Used to detect host constructors (Safari). */
	var reIsHostCtor = /^\[object .+?Constructor\]$/;

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to detect if a method is native. */
	var reIsNative = RegExp('^' + funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&').replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$');

	/**
	 * The base implementation of `_.isNative` without bad shim checks.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a native function,
	 *  else `false`.
	 */
	function baseIsNative(value) {
	  if (!isObject(value) || isMasked(value)) {
	    return false;
	  }
	  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
	  return pattern.test(toSource(value));
	}

	module.exports = baseIsNative;

	/***/ }),
	/* 132 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var g;

	// This works in non-strict mode
	g = function () {
		return this;
	}();

	try {
		// This works if eval is allowed (see CSP)
		g = g || Function("return this")() || (1, eval)("this");
	} catch (e) {
		// This works if the window reference is available
		if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
	}

	// g can still be undefined, but nothing to do about it...
	// We return undefined, instead of nothing here, so it's
	// easier to handle this case. if(!global) { ...}

	module.exports = g;

	/***/ }),
	/* 133 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/** Built-in value references. */
	var symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

	/**
	 * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
	 *
	 * @private
	 * @param {*} value The value to query.
	 * @returns {string} Returns the raw `toStringTag`.
	 */
	function getRawTag(value) {
	  var isOwn = hasOwnProperty.call(value, symToStringTag),
	      tag = value[symToStringTag];

	  try {
	    value[symToStringTag] = undefined;
	    var unmasked = true;
	  } catch (e) {}

	  var result = nativeObjectToString.call(value);
	  if (unmasked) {
	    if (isOwn) {
	      value[symToStringTag] = tag;
	    } else {
	      delete value[symToStringTag];
	    }
	  }
	  return result;
	}

	module.exports = getRawTag;

	/***/ }),
	/* 134 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/**
	 * Used to resolve the
	 * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
	 * of values.
	 */
	var nativeObjectToString = objectProto.toString;

	/**
	 * Converts `value` to a string using `Object.prototype.toString`.
	 *
	 * @private
	 * @param {*} value The value to convert.
	 * @returns {string} Returns the converted string.
	 */
	function objectToString(value) {
	  return nativeObjectToString.call(value);
	}

	module.exports = objectToString;

	/***/ }),
	/* 135 */
	/***/ (function(module, exports, __webpack_require__) {

	var coreJsData = __webpack_require__(136);

	/** Used to detect methods masquerading as native. */
	var maskSrcKey = function () {
	  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
	  return uid ? 'Symbol(src)_1.' + uid : '';
	}();

	/**
	 * Checks if `func` has its source masked.
	 *
	 * @private
	 * @param {Function} func The function to check.
	 * @returns {boolean} Returns `true` if `func` is masked, else `false`.
	 */
	function isMasked(func) {
	  return !!maskSrcKey && maskSrcKey in func;
	}

	module.exports = isMasked;

	/***/ }),
	/* 136 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/** Used to detect overreaching core-js shims. */
	var coreJsData = root['__core-js_shared__'];

	module.exports = coreJsData;

	/***/ }),
	/* 137 */
	/***/ (function(module, exports) {

	/**
	 * Gets the value at `key` of `object`.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {string} key The key of the property to get.
	 * @returns {*} Returns the property value.
	 */
	function getValue(object, key) {
	  return object == null ? undefined : object[key];
	}

	module.exports = getValue;

	/***/ }),
	/* 138 */
	/***/ (function(module, exports, __webpack_require__) {

	var Hash = __webpack_require__(139),
	    ListCache = __webpack_require__(24),
	    Map = __webpack_require__(42);

	/**
	 * Removes all key-value entries from the map.
	 *
	 * @private
	 * @name clear
	 * @memberOf MapCache
	 */
	function mapCacheClear() {
	  this.size = 0;
	  this.__data__ = {
	    'hash': new Hash(),
	    'map': new (Map || ListCache)(),
	    'string': new Hash()
	  };
	}

	module.exports = mapCacheClear;

	/***/ }),
	/* 139 */
	/***/ (function(module, exports, __webpack_require__) {

	var hashClear = __webpack_require__(140),
	    hashDelete = __webpack_require__(141),
	    hashGet = __webpack_require__(142),
	    hashHas = __webpack_require__(143),
	    hashSet = __webpack_require__(144);

	/**
	 * Creates a hash object.
	 *
	 * @private
	 * @constructor
	 * @param {Array} [entries] The key-value pairs to cache.
	 */
	function Hash(entries) {
	    var index = -1,
	        length = entries == null ? 0 : entries.length;

	    this.clear();
	    while (++index < length) {
	        var entry = entries[index];
	        this.set(entry[0], entry[1]);
	    }
	}

	// Add methods to `Hash`.
	Hash.prototype.clear = hashClear;
	Hash.prototype['delete'] = hashDelete;
	Hash.prototype.get = hashGet;
	Hash.prototype.has = hashHas;
	Hash.prototype.set = hashSet;

	module.exports = Hash;

	/***/ }),
	/* 140 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/**
	 * Removes all key-value entries from the hash.
	 *
	 * @private
	 * @name clear
	 * @memberOf Hash
	 */
	function hashClear() {
	  this.__data__ = nativeCreate ? nativeCreate(null) : {};
	  this.size = 0;
	}

	module.exports = hashClear;

	/***/ }),
	/* 141 */
	/***/ (function(module, exports) {

	/**
	 * Removes `key` and its value from the hash.
	 *
	 * @private
	 * @name delete
	 * @memberOf Hash
	 * @param {Object} hash The hash to modify.
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function hashDelete(key) {
	  var result = this.has(key) && delete this.__data__[key];
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = hashDelete;

	/***/ }),
	/* 142 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Gets the hash value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf Hash
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function hashGet(key) {
	  var data = this.__data__;
	  if (nativeCreate) {
	    var result = data[key];
	    return result === HASH_UNDEFINED ? undefined : result;
	  }
	  return hasOwnProperty.call(data, key) ? data[key] : undefined;
	}

	module.exports = hashGet;

	/***/ }),
	/* 143 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if a hash value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf Hash
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function hashHas(key) {
	  var data = this.__data__;
	  return nativeCreate ? data[key] !== undefined : hasOwnProperty.call(data, key);
	}

	module.exports = hashHas;

	/***/ }),
	/* 144 */
	/***/ (function(module, exports, __webpack_require__) {

	var nativeCreate = __webpack_require__(26);

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Sets the hash `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf Hash
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the hash instance.
	 */
	function hashSet(key, value) {
	  var data = this.__data__;
	  this.size += this.has(key) ? 0 : 1;
	  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED : value;
	  return this;
	}

	module.exports = hashSet;

	/***/ }),
	/* 145 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Removes `key` and its value from the map.
	 *
	 * @private
	 * @name delete
	 * @memberOf MapCache
	 * @param {string} key The key of the value to remove.
	 * @returns {boolean} Returns `true` if the entry was removed, else `false`.
	 */
	function mapCacheDelete(key) {
	  var result = getMapData(this, key)['delete'](key);
	  this.size -= result ? 1 : 0;
	  return result;
	}

	module.exports = mapCacheDelete;

	/***/ }),
	/* 146 */
	/***/ (function(module, exports) {

	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/**
	 * Checks if `value` is suitable for use as unique object key.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
	 */
	function isKeyable(value) {
	  var type = typeof value === 'undefined' ? 'undefined' : _typeof(value);
	  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;
	}

	module.exports = isKeyable;

	/***/ }),
	/* 147 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Gets the map value for `key`.
	 *
	 * @private
	 * @name get
	 * @memberOf MapCache
	 * @param {string} key The key of the value to get.
	 * @returns {*} Returns the entry value.
	 */
	function mapCacheGet(key) {
	  return getMapData(this, key).get(key);
	}

	module.exports = mapCacheGet;

	/***/ }),
	/* 148 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Checks if a map value for `key` exists.
	 *
	 * @private
	 * @name has
	 * @memberOf MapCache
	 * @param {string} key The key of the entry to check.
	 * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
	 */
	function mapCacheHas(key) {
	  return getMapData(this, key).has(key);
	}

	module.exports = mapCacheHas;

	/***/ }),
	/* 149 */
	/***/ (function(module, exports, __webpack_require__) {

	var getMapData = __webpack_require__(27);

	/**
	 * Sets the map `key` to `value`.
	 *
	 * @private
	 * @name set
	 * @memberOf MapCache
	 * @param {string} key The key of the value to set.
	 * @param {*} value The value to set.
	 * @returns {Object} Returns the map cache instance.
	 */
	function mapCacheSet(key, value) {
	  var data = getMapData(this, key),
	      size = data.size;

	  data.set(key, value);
	  this.size += data.size == size ? 0 : 1;
	  return this;
	}

	module.exports = mapCacheSet;

	/***/ }),
	/* 150 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.forEach` for arrays without support for
	 * iteratee shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns `array`.
	 */
	function arrayEach(array, iteratee) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (iteratee(array[index], index, array) === false) {
	      break;
	    }
	  }
	  return array;
	}

	module.exports = arrayEach;

	/***/ }),
	/* 151 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    keys = __webpack_require__(17);

	/**
	 * The base implementation of `_.assign` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssign(object, source) {
	  return object && copyObject(source, keys(source), object);
	}

	module.exports = baseAssign;

	/***/ }),
	/* 152 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.times` without support for iteratee shorthands
	 * or max array length checks.
	 *
	 * @private
	 * @param {number} n The number of times to invoke `iteratee`.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the array of results.
	 */
	function baseTimes(n, iteratee) {
	  var index = -1,
	      result = Array(n);

	  while (++index < n) {
	    result[index] = iteratee(index);
	  }
	  return result;
	}

	module.exports = baseTimes;

	/***/ }),
	/* 153 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]';

	/**
	 * The base implementation of `_.isArguments`.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an `arguments` object,
	 */
	function baseIsArguments(value) {
	  return isObjectLike(value) && baseGetTag(value) == argsTag;
	}

	module.exports = baseIsArguments;

	/***/ }),
	/* 154 */
	/***/ (function(module, exports) {

	/**
	 * This method returns `false`.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.13.0
	 * @category Util
	 * @returns {boolean} Returns `false`.
	 * @example
	 *
	 * _.times(2, _.stubFalse);
	 * // => [false, false]
	 */
	function stubFalse() {
	  return false;
	}

	module.exports = stubFalse;

	/***/ }),
	/* 155 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isLength = __webpack_require__(48),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    funcTag = '[object Function]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    objectTag = '[object Object]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    weakMapTag = '[object WeakMap]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/** Used to identify `toStringTag` values of typed arrays. */
	var typedArrayTags = {};
	typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
	typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;

	/**
	 * The base implementation of `_.isTypedArray` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
	 */
	function baseIsTypedArray(value) {
	    return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
	}

	module.exports = baseIsTypedArray;

	/***/ }),
	/* 156 */
	/***/ (function(module, exports, __webpack_require__) {

	var overArg = __webpack_require__(71);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeKeys = overArg(Object.keys, Object);

	module.exports = nativeKeys;

	/***/ }),
	/* 157 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    keysIn = __webpack_require__(72);

	/**
	 * The base implementation of `_.assignIn` without support for multiple sources
	 * or `customizer` functions.
	 *
	 * @private
	 * @param {Object} object The destination object.
	 * @param {Object} source The source object.
	 * @returns {Object} Returns `object`.
	 */
	function baseAssignIn(object, source) {
	  return object && copyObject(source, keysIn(source), object);
	}

	module.exports = baseAssignIn;

	/***/ }),
	/* 158 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7),
	    isPrototype = __webpack_require__(33),
	    nativeKeysIn = __webpack_require__(159);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function baseKeysIn(object) {
	  if (!isObject(object)) {
	    return nativeKeysIn(object);
	  }
	  var isProto = isPrototype(object),
	      result = [];

	  for (var key in object) {
	    if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = baseKeysIn;

	/***/ }),
	/* 159 */
	/***/ (function(module, exports) {

	/**
	 * This function is like
	 * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
	 * except that it includes inherited enumerable properties.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names.
	 */
	function nativeKeysIn(object) {
	  var result = [];
	  if (object != null) {
	    for (var key in Object(object)) {
	      result.push(key);
	    }
	  }
	  return result;
	}

	module.exports = nativeKeysIn;

	/***/ }),
	/* 160 */
	/***/ (function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(module) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var root = __webpack_require__(4);

	/** Detect free variable `exports`. */
	var freeExports = ( false ? 'undefined' : _typeof(exports)) == 'object' && exports && !exports.nodeType && exports;

	/** Detect free variable `module`. */
	var freeModule = freeExports && ( false ? 'undefined' : _typeof(module)) == 'object' && module && !module.nodeType && module;

	/** Detect the popular CommonJS extension `module.exports`. */
	var moduleExports = freeModule && freeModule.exports === freeExports;

	/** Built-in value references. */
	var Buffer = moduleExports ? root.Buffer : undefined,
	    allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined;

	/**
	 * Creates a clone of  `buffer`.
	 *
	 * @private
	 * @param {Buffer} buffer The buffer to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Buffer} Returns the cloned buffer.
	 */
	function cloneBuffer(buffer, isDeep) {
	  if (isDeep) {
	    return buffer.slice();
	  }
	  var length = buffer.length,
	      result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

	  buffer.copy(result);
	  return result;
	}

	module.exports = cloneBuffer;
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(23)(module)))

	/***/ }),
	/* 161 */
	/***/ (function(module, exports) {

	/**
	 * Copies the values of `source` to `array`.
	 *
	 * @private
	 * @param {Array} source The array to copy values from.
	 * @param {Array} [array=[]] The array to copy values to.
	 * @returns {Array} Returns `array`.
	 */
	function copyArray(source, array) {
	  var index = -1,
	      length = source.length;

	  array || (array = Array(length));
	  while (++index < length) {
	    array[index] = source[index];
	  }
	  return array;
	}

	module.exports = copyArray;

	/***/ }),
	/* 162 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    getSymbols = __webpack_require__(49);

	/**
	 * Copies own symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbols(source, object) {
	  return copyObject(source, getSymbols(source), object);
	}

	module.exports = copySymbols;

	/***/ }),
	/* 163 */
	/***/ (function(module, exports, __webpack_require__) {

	var copyObject = __webpack_require__(28),
	    getSymbolsIn = __webpack_require__(75);

	/**
	 * Copies own and inherited symbols of `source` to `object`.
	 *
	 * @private
	 * @param {Object} source The object to copy symbols from.
	 * @param {Object} [object={}] The object to copy symbols to.
	 * @returns {Object} Returns `object`.
	 */
	function copySymbolsIn(source, object) {
	  return copyObject(source, getSymbolsIn(source), object);
	}

	module.exports = copySymbolsIn;

	/***/ }),
	/* 164 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetAllKeys = __webpack_require__(77),
	    getSymbolsIn = __webpack_require__(75),
	    keysIn = __webpack_require__(72);

	/**
	 * Creates an array of own and inherited enumerable property names and
	 * symbols of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the array of property names and symbols.
	 */
	function getAllKeysIn(object) {
	  return baseGetAllKeys(object, keysIn, getSymbolsIn);
	}

	module.exports = getAllKeysIn;

	/***/ }),
	/* 165 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var DataView = getNative(root, 'DataView');

	module.exports = DataView;

	/***/ }),
	/* 166 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var Promise = getNative(root, 'Promise');

	module.exports = Promise;

	/***/ }),
	/* 167 */
	/***/ (function(module, exports, __webpack_require__) {

	var getNative = __webpack_require__(8),
	    root = __webpack_require__(4);

	/* Built-in method references that are verified to be native. */
	var WeakMap = getNative(root, 'WeakMap');

	module.exports = WeakMap;

	/***/ }),
	/* 168 */
	/***/ (function(module, exports) {

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Initializes an array clone.
	 *
	 * @private
	 * @param {Array} array The array to clone.
	 * @returns {Array} Returns the initialized clone.
	 */
	function initCloneArray(array) {
	  var length = array.length,
	      result = new array.constructor(length);

	  // Add properties assigned by `RegExp#exec`.
	  if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
	    result.index = array.index;
	    result.input = array.input;
	  }
	  return result;
	}

	module.exports = initCloneArray;

	/***/ }),
	/* 169 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52),
	    cloneDataView = __webpack_require__(170),
	    cloneRegExp = __webpack_require__(171),
	    cloneSymbol = __webpack_require__(172),
	    cloneTypedArray = __webpack_require__(173);

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]',
	    float32Tag = '[object Float32Array]',
	    float64Tag = '[object Float64Array]',
	    int8Tag = '[object Int8Array]',
	    int16Tag = '[object Int16Array]',
	    int32Tag = '[object Int32Array]',
	    uint8Tag = '[object Uint8Array]',
	    uint8ClampedTag = '[object Uint8ClampedArray]',
	    uint16Tag = '[object Uint16Array]',
	    uint32Tag = '[object Uint32Array]';

	/**
	 * Initializes an object clone based on its `toStringTag`.
	 *
	 * **Note:** This function only supports cloning values with tags of
	 * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @param {string} tag The `toStringTag` of the object to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneByTag(object, tag, isDeep) {
	  var Ctor = object.constructor;
	  switch (tag) {
	    case arrayBufferTag:
	      return cloneArrayBuffer(object);

	    case boolTag:
	    case dateTag:
	      return new Ctor(+object);

	    case dataViewTag:
	      return cloneDataView(object, isDeep);

	    case float32Tag:case float64Tag:
	    case int8Tag:case int16Tag:case int32Tag:
	    case uint8Tag:case uint8ClampedTag:case uint16Tag:case uint32Tag:
	      return cloneTypedArray(object, isDeep);

	    case mapTag:
	      return new Ctor();

	    case numberTag:
	    case stringTag:
	      return new Ctor(object);

	    case regexpTag:
	      return cloneRegExp(object);

	    case setTag:
	      return new Ctor();

	    case symbolTag:
	      return cloneSymbol(object);
	  }
	}

	module.exports = initCloneByTag;

	/***/ }),
	/* 170 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52);

	/**
	 * Creates a clone of `dataView`.
	 *
	 * @private
	 * @param {Object} dataView The data view to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned data view.
	 */
	function cloneDataView(dataView, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
	  return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
	}

	module.exports = cloneDataView;

	/***/ }),
	/* 171 */
	/***/ (function(module, exports) {

	/** Used to match `RegExp` flags from their coerced string values. */
	var reFlags = /\w*$/;

	/**
	 * Creates a clone of `regexp`.
	 *
	 * @private
	 * @param {Object} regexp The regexp to clone.
	 * @returns {Object} Returns the cloned regexp.
	 */
	function cloneRegExp(regexp) {
	  var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
	  result.lastIndex = regexp.lastIndex;
	  return result;
	}

	module.exports = cloneRegExp;

	/***/ }),
	/* 172 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11);

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * Creates a clone of the `symbol` object.
	 *
	 * @private
	 * @param {Object} symbol The symbol object to clone.
	 * @returns {Object} Returns the cloned symbol object.
	 */
	function cloneSymbol(symbol) {
	  return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
	}

	module.exports = cloneSymbol;

	/***/ }),
	/* 173 */
	/***/ (function(module, exports, __webpack_require__) {

	var cloneArrayBuffer = __webpack_require__(52);

	/**
	 * Creates a clone of `typedArray`.
	 *
	 * @private
	 * @param {Object} typedArray The typed array to clone.
	 * @param {boolean} [isDeep] Specify a deep clone.
	 * @returns {Object} Returns the cloned typed array.
	 */
	function cloneTypedArray(typedArray, isDeep) {
	  var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
	  return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
	}

	module.exports = cloneTypedArray;

	/***/ }),
	/* 174 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseCreate = __webpack_require__(175),
	    getPrototype = __webpack_require__(51),
	    isPrototype = __webpack_require__(33);

	/**
	 * Initializes an object clone.
	 *
	 * @private
	 * @param {Object} object The object to clone.
	 * @returns {Object} Returns the initialized clone.
	 */
	function initCloneObject(object) {
	    return typeof object.constructor == 'function' && !isPrototype(object) ? baseCreate(getPrototype(object)) : {};
	}

	module.exports = initCloneObject;

	/***/ }),
	/* 175 */
	/***/ (function(module, exports, __webpack_require__) {

	var isObject = __webpack_require__(7);

	/** Built-in value references. */
	var objectCreate = Object.create;

	/**
	 * The base implementation of `_.create` without support for assigning
	 * properties to the created object.
	 *
	 * @private
	 * @param {Object} proto The object to inherit from.
	 * @returns {Object} Returns the new object.
	 */
	var baseCreate = function () {
	  function object() {}
	  return function (proto) {
	    if (!isObject(proto)) {
	      return {};
	    }
	    if (objectCreate) {
	      return objectCreate(proto);
	    }
	    object.prototype = proto;
	    var result = new object();
	    object.prototype = undefined;
	    return result;
	  };
	}();

	module.exports = baseCreate;

	/***/ }),
	/* 176 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsMap = __webpack_require__(177),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsMap = nodeUtil && nodeUtil.isMap;

	/**
	 * Checks if `value` is classified as a `Map` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 * @example
	 *
	 * _.isMap(new Map);
	 * // => true
	 *
	 * _.isMap(new WeakMap);
	 * // => false
	 */
	var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

	module.exports = isMap;

	/***/ }),
	/* 177 */
	/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(18),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]';

	/**
	 * The base implementation of `_.isMap` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a map, else `false`.
	 */
	function baseIsMap(value) {
	  return isObjectLike(value) && getTag(value) == mapTag;
	}

	module.exports = baseIsMap;

	/***/ }),
	/* 178 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsSet = __webpack_require__(179),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsSet = nodeUtil && nodeUtil.isSet;

	/**
	 * Checks if `value` is classified as a `Set` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.3.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 * @example
	 *
	 * _.isSet(new Set);
	 * // => true
	 *
	 * _.isSet(new WeakSet);
	 * // => false
	 */
	var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

	module.exports = isSet;

	/***/ }),
	/* 179 */
	/***/ (function(module, exports, __webpack_require__) {

	var getTag = __webpack_require__(18),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var setTag = '[object Set]';

	/**
	 * The base implementation of `_.isSet` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a set, else `false`.
	 */
	function baseIsSet(value) {
	  return isObjectLike(value) && getTag(value) == setTag;
	}

	module.exports = baseIsSet;

	/***/ }),
	/* 180 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayFilter = __webpack_require__(73),
	    baseFilter = __webpack_require__(181),
	    baseIteratee = __webpack_require__(13),
	    isArray = __webpack_require__(3);

	/**
	 * Iterates over elements of `collection`, returning an array of all elements
	 * `predicate` returns truthy for. The predicate is invoked with three
	 * arguments: (value, index|key, collection).
	 *
	 * **Note:** Unlike `_.remove`, this method returns a new array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [predicate=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 * @see _.reject
	 * @example
	 *
	 * var users = [
	 *   { 'user': 'barney', 'age': 36, 'active': true },
	 *   { 'user': 'fred',   'age': 40, 'active': false }
	 * ];
	 *
	 * _.filter(users, function(o) { return !o.active; });
	 * // => objects for ['fred']
	 *
	 * // The `_.matches` iteratee shorthand.
	 * _.filter(users, { 'age': 36, 'active': true });
	 * // => objects for ['barney']
	 *
	 * // The `_.matchesProperty` iteratee shorthand.
	 * _.filter(users, ['active', false]);
	 * // => objects for ['fred']
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.filter(users, 'active');
	 * // => objects for ['barney']
	 */
	function filter(collection, predicate) {
	  var func = isArray(collection) ? arrayFilter : baseFilter;
	  return func(collection, baseIteratee(predicate, 3));
	}

	module.exports = filter;

	/***/ }),
	/* 181 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34);

	/**
	 * The base implementation of `_.filter` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {Array} Returns the new filtered array.
	 */
	function baseFilter(collection, predicate) {
	  var result = [];
	  baseEach(collection, function (value, index, collection) {
	    if (predicate(value, index, collection)) {
	      result.push(value);
	    }
	  });
	  return result;
	}

	module.exports = baseFilter;

	/***/ }),
	/* 182 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFor = __webpack_require__(183),
	    keys = __webpack_require__(17);

	/**
	 * The base implementation of `_.forOwn` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Object} Returns `object`.
	 */
	function baseForOwn(object, iteratee) {
	  return object && baseFor(object, iteratee, keys);
	}

	module.exports = baseForOwn;

	/***/ }),
	/* 183 */
	/***/ (function(module, exports, __webpack_require__) {

	var createBaseFor = __webpack_require__(184);

	/**
	 * The base implementation of `baseForOwn` which iterates over `object`
	 * properties returned by `keysFunc` and invokes `iteratee` for each property.
	 * Iteratee functions may exit iteration early by explicitly returning `false`.
	 *
	 * @private
	 * @param {Object} object The object to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {Function} keysFunc The function to get the keys of `object`.
	 * @returns {Object} Returns `object`.
	 */
	var baseFor = createBaseFor();

	module.exports = baseFor;

	/***/ }),
	/* 184 */
	/***/ (function(module, exports) {

	/**
	 * Creates a base function for methods like `_.forIn` and `_.forOwn`.
	 *
	 * @private
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseFor(fromRight) {
	  return function (object, iteratee, keysFunc) {
	    var index = -1,
	        iterable = Object(object),
	        props = keysFunc(object),
	        length = props.length;

	    while (length--) {
	      var key = props[fromRight ? length : ++index];
	      if (iteratee(iterable[key], key, iterable) === false) {
	        break;
	      }
	    }
	    return object;
	  };
	}

	module.exports = createBaseFor;

	/***/ }),
	/* 185 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(12);

	/**
	 * Creates a `baseEach` or `baseEachRight` function.
	 *
	 * @private
	 * @param {Function} eachFunc The function to iterate over a collection.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {Function} Returns the new base function.
	 */
	function createBaseEach(eachFunc, fromRight) {
	  return function (collection, iteratee) {
	    if (collection == null) {
	      return collection;
	    }
	    if (!isArrayLike(collection)) {
	      return eachFunc(collection, iteratee);
	    }
	    var length = collection.length,
	        index = fromRight ? length : -1,
	        iterable = Object(collection);

	    while (fromRight ? index-- : ++index < length) {
	      if (iteratee(iterable[index], index, iterable) === false) {
	        break;
	      }
	    }
	    return collection;
	  };
	}

	module.exports = createBaseEach;

	/***/ }),
	/* 186 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsMatch = __webpack_require__(187),
	    getMatchData = __webpack_require__(195),
	    matchesStrictComparable = __webpack_require__(84);

	/**
	 * The base implementation of `_.matches` which doesn't clone `source`.
	 *
	 * @private
	 * @param {Object} source The object of property values to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatches(source) {
	  var matchData = getMatchData(source);
	  if (matchData.length == 1 && matchData[0][2]) {
	    return matchesStrictComparable(matchData[0][0], matchData[0][1]);
	  }
	  return function (object) {
	    return object === source || baseIsMatch(object, source, matchData);
	  };
	}

	module.exports = baseMatches;

	/***/ }),
	/* 187 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    baseIsEqual = __webpack_require__(53);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.isMatch` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The object to inspect.
	 * @param {Object} source The object of property values to match.
	 * @param {Array} matchData The property names, values, and compare flags to match.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if `object` is a match, else `false`.
	 */
	function baseIsMatch(object, source, matchData, customizer) {
	  var index = matchData.length,
	      length = index,
	      noCustomizer = !customizer;

	  if (object == null) {
	    return !length;
	  }
	  object = Object(object);
	  while (index--) {
	    var data = matchData[index];
	    if (noCustomizer && data[2] ? data[1] !== object[data[0]] : !(data[0] in object)) {
	      return false;
	    }
	  }
	  while (++index < length) {
	    data = matchData[index];
	    var key = data[0],
	        objValue = object[key],
	        srcValue = data[1];

	    if (noCustomizer && data[2]) {
	      if (objValue === undefined && !(key in object)) {
	        return false;
	      }
	    } else {
	      var stack = new Stack();
	      if (customizer) {
	        var result = customizer(objValue, srcValue, key, object, source, stack);
	      }
	      if (!(result === undefined ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack) : result)) {
	        return false;
	      }
	    }
	  }
	  return true;
	}

	module.exports = baseIsMatch;

	/***/ }),
	/* 188 */
	/***/ (function(module, exports, __webpack_require__) {

	var Stack = __webpack_require__(40),
	    equalArrays = __webpack_require__(80),
	    equalByTag = __webpack_require__(192),
	    equalObjects = __webpack_require__(194),
	    getTag = __webpack_require__(18),
	    isArray = __webpack_require__(3),
	    isBuffer = __webpack_require__(30),
	    isTypedArray = __webpack_require__(47);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** `Object#toString` result references. */
	var argsTag = '[object Arguments]',
	    arrayTag = '[object Array]',
	    objectTag = '[object Object]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqual` for arrays and objects which performs
	 * deep comparisons and tracks traversed objects enabling objects with circular
	 * references to be compared.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} [stack] Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
	  var objIsArr = isArray(object),
	      othIsArr = isArray(other),
	      objTag = objIsArr ? arrayTag : getTag(object),
	      othTag = othIsArr ? arrayTag : getTag(other);

	  objTag = objTag == argsTag ? objectTag : objTag;
	  othTag = othTag == argsTag ? objectTag : othTag;

	  var objIsObj = objTag == objectTag,
	      othIsObj = othTag == objectTag,
	      isSameTag = objTag == othTag;

	  if (isSameTag && isBuffer(object)) {
	    if (!isBuffer(other)) {
	      return false;
	    }
	    objIsArr = true;
	    objIsObj = false;
	  }
	  if (isSameTag && !objIsObj) {
	    stack || (stack = new Stack());
	    return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
	  }
	  if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
	    var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
	        othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

	    if (objIsWrapped || othIsWrapped) {
	      var objUnwrapped = objIsWrapped ? object.value() : object,
	          othUnwrapped = othIsWrapped ? other.value() : other;

	      stack || (stack = new Stack());
	      return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
	    }
	  }
	  if (!isSameTag) {
	    return false;
	  }
	  stack || (stack = new Stack());
	  return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
	}

	module.exports = baseIsEqualDeep;

	/***/ }),
	/* 189 */
	/***/ (function(module, exports) {

	/** Used to stand-in for `undefined` hash values. */
	var HASH_UNDEFINED = '__lodash_hash_undefined__';

	/**
	 * Adds `value` to the array cache.
	 *
	 * @private
	 * @name add
	 * @memberOf SetCache
	 * @alias push
	 * @param {*} value The value to cache.
	 * @returns {Object} Returns the cache instance.
	 */
	function setCacheAdd(value) {
	  this.__data__.set(value, HASH_UNDEFINED);
	  return this;
	}

	module.exports = setCacheAdd;

	/***/ }),
	/* 190 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is in the array cache.
	 *
	 * @private
	 * @name has
	 * @memberOf SetCache
	 * @param {*} value The value to search for.
	 * @returns {number} Returns `true` if `value` is found, else `false`.
	 */
	function setCacheHas(value) {
	  return this.__data__.has(value);
	}

	module.exports = setCacheHas;

	/***/ }),
	/* 191 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.some` for arrays without support for iteratee
	 * shorthands.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} predicate The function invoked per iteration.
	 * @returns {boolean} Returns `true` if any element passes the predicate check,
	 *  else `false`.
	 */
	function arraySome(array, predicate) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (predicate(array[index], index, array)) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arraySome;

	/***/ }),
	/* 192 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    Uint8Array = __webpack_require__(79),
	    eq = __webpack_require__(41),
	    equalArrays = __webpack_require__(80),
	    mapToArray = __webpack_require__(193),
	    setToArray = __webpack_require__(54);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/** `Object#toString` result references. */
	var boolTag = '[object Boolean]',
	    dateTag = '[object Date]',
	    errorTag = '[object Error]',
	    mapTag = '[object Map]',
	    numberTag = '[object Number]',
	    regexpTag = '[object RegExp]',
	    setTag = '[object Set]',
	    stringTag = '[object String]',
	    symbolTag = '[object Symbol]';

	var arrayBufferTag = '[object ArrayBuffer]',
	    dataViewTag = '[object DataView]';

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolValueOf = symbolProto ? symbolProto.valueOf : undefined;

	/**
	 * A specialized version of `baseIsEqualDeep` for comparing objects of
	 * the same `toStringTag`.
	 *
	 * **Note:** This function only supports comparing values with tags of
	 * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {string} tag The `toStringTag` of the objects to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
	  switch (tag) {
	    case dataViewTag:
	      if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
	        return false;
	      }
	      object = object.buffer;
	      other = other.buffer;

	    case arrayBufferTag:
	      if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
	        return false;
	      }
	      return true;

	    case boolTag:
	    case dateTag:
	    case numberTag:
	      // Coerce booleans to `1` or `0` and dates to milliseconds.
	      // Invalid dates are coerced to `NaN`.
	      return eq(+object, +other);

	    case errorTag:
	      return object.name == other.name && object.message == other.message;

	    case regexpTag:
	    case stringTag:
	      // Coerce regexes to strings and treat strings, primitives and objects,
	      // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
	      // for more details.
	      return object == other + '';

	    case mapTag:
	      var convert = mapToArray;

	    case setTag:
	      var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
	      convert || (convert = setToArray);

	      if (object.size != other.size && !isPartial) {
	        return false;
	      }
	      // Assume cyclic values are equal.
	      var stacked = stack.get(object);
	      if (stacked) {
	        return stacked == other;
	      }
	      bitmask |= COMPARE_UNORDERED_FLAG;

	      // Recursively compare objects (susceptible to call stack limits).
	      stack.set(object, other);
	      var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
	      stack['delete'](object);
	      return result;

	    case symbolTag:
	      if (symbolValueOf) {
	        return symbolValueOf.call(object) == symbolValueOf.call(other);
	      }
	  }
	  return false;
	}

	module.exports = equalByTag;

	/***/ }),
	/* 193 */
	/***/ (function(module, exports) {

	/**
	 * Converts `map` to its key-value pairs.
	 *
	 * @private
	 * @param {Object} map The map to convert.
	 * @returns {Array} Returns the key-value pairs.
	 */
	function mapToArray(map) {
	  var index = -1,
	      result = Array(map.size);

	  map.forEach(function (value, key) {
	    result[++index] = [key, value];
	  });
	  return result;
	}

	module.exports = mapToArray;

	/***/ }),
	/* 194 */
	/***/ (function(module, exports, __webpack_require__) {

	var getAllKeys = __webpack_require__(76);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1;

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * A specialized version of `baseIsEqualDeep` for objects with support for
	 * partial deep comparisons.
	 *
	 * @private
	 * @param {Object} object The object to compare.
	 * @param {Object} other The other object to compare.
	 * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
	 * @param {Function} customizer The function to customize comparisons.
	 * @param {Function} equalFunc The function to determine equivalents of values.
	 * @param {Object} stack Tracks traversed `object` and `other` objects.
	 * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
	 */
	function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
	  var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
	      objProps = getAllKeys(object),
	      objLength = objProps.length,
	      othProps = getAllKeys(other),
	      othLength = othProps.length;

	  if (objLength != othLength && !isPartial) {
	    return false;
	  }
	  var index = objLength;
	  while (index--) {
	    var key = objProps[index];
	    if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
	      return false;
	    }
	  }
	  // Assume cyclic values are equal.
	  var stacked = stack.get(object);
	  if (stacked && stack.get(other)) {
	    return stacked == other;
	  }
	  var result = true;
	  stack.set(object, other);
	  stack.set(other, object);

	  var skipCtor = isPartial;
	  while (++index < objLength) {
	    key = objProps[index];
	    var objValue = object[key],
	        othValue = other[key];

	    if (customizer) {
	      var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
	    }
	    // Recursively compare objects (susceptible to call stack limits).
	    if (!(compared === undefined ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
	      result = false;
	      break;
	    }
	    skipCtor || (skipCtor = key == 'constructor');
	  }
	  if (result && !skipCtor) {
	    var objCtor = object.constructor,
	        othCtor = other.constructor;

	    // Non `Object` object instances with different constructors are not equal.
	    if (objCtor != othCtor && 'constructor' in object && 'constructor' in other && !(typeof objCtor == 'function' && objCtor instanceof objCtor && typeof othCtor == 'function' && othCtor instanceof othCtor)) {
	      result = false;
	    }
	  }
	  stack['delete'](object);
	  stack['delete'](other);
	  return result;
	}

	module.exports = equalObjects;

	/***/ }),
	/* 195 */
	/***/ (function(module, exports, __webpack_require__) {

	var isStrictComparable = __webpack_require__(83),
	    keys = __webpack_require__(17);

	/**
	 * Gets the property names, values, and compare flags of `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Array} Returns the match data of `object`.
	 */
	function getMatchData(object) {
	    var result = keys(object),
	        length = result.length;

	    while (length--) {
	        var key = result[length],
	            value = object[key];

	        result[length] = [key, value, isStrictComparable(value)];
	    }
	    return result;
	}

	module.exports = getMatchData;

	/***/ }),
	/* 196 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(53),
	    get = __webpack_require__(197),
	    hasIn = __webpack_require__(86),
	    isKey = __webpack_require__(56),
	    isStrictComparable = __webpack_require__(83),
	    matchesStrictComparable = __webpack_require__(84),
	    toKey = __webpack_require__(20);

	/** Used to compose bitmasks for value comparisons. */
	var COMPARE_PARTIAL_FLAG = 1,
	    COMPARE_UNORDERED_FLAG = 2;

	/**
	 * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
	 *
	 * @private
	 * @param {string} path The path of the property to get.
	 * @param {*} srcValue The value to match.
	 * @returns {Function} Returns the new spec function.
	 */
	function baseMatchesProperty(path, srcValue) {
	  if (isKey(path) && isStrictComparable(srcValue)) {
	    return matchesStrictComparable(toKey(path), srcValue);
	  }
	  return function (object) {
	    var objValue = get(object, path);
	    return objValue === undefined && objValue === srcValue ? hasIn(object, path) : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
	  };
	}

	module.exports = baseMatchesProperty;

	/***/ }),
	/* 197 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55);

	/**
	 * Gets the value at `path` of `object`. If the resolved value is
	 * `undefined`, the `defaultValue` is returned in its place.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.7.0
	 * @category Object
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path of the property to get.
	 * @param {*} [defaultValue] The value returned for `undefined` resolved values.
	 * @returns {*} Returns the resolved value.
	 * @example
	 *
	 * var object = { 'a': [{ 'b': { 'c': 3 } }] };
	 *
	 * _.get(object, 'a[0].b.c');
	 * // => 3
	 *
	 * _.get(object, ['a', '0', 'b', 'c']);
	 * // => 3
	 *
	 * _.get(object, 'a.b.c', 'default');
	 * // => 'default'
	 */
	function get(object, path, defaultValue) {
	  var result = object == null ? undefined : baseGet(object, path);
	  return result === undefined ? defaultValue : result;
	}

	module.exports = get;

	/***/ }),
	/* 198 */
	/***/ (function(module, exports, __webpack_require__) {

	var memoizeCapped = __webpack_require__(199);

	/** Used to match property names within property paths. */
	var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

	/** Used to match backslashes in property paths. */
	var reEscapeChar = /\\(\\)?/g;

	/**
	 * Converts `string` to a property path array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the property path array.
	 */
	var stringToPath = memoizeCapped(function (string) {
	  var result = [];
	  if (string.charCodeAt(0) === 46 /* . */) {
	      result.push('');
	    }
	  string.replace(rePropName, function (match, number, quote, subString) {
	    result.push(quote ? subString.replace(reEscapeChar, '$1') : number || match);
	  });
	  return result;
	});

	module.exports = stringToPath;

	/***/ }),
	/* 199 */
	/***/ (function(module, exports, __webpack_require__) {

	var memoize = __webpack_require__(200);

	/** Used as the maximum memoize cache size. */
	var MAX_MEMOIZE_SIZE = 500;

	/**
	 * A specialized version of `_.memoize` which clears the memoized function's
	 * cache when it exceeds `MAX_MEMOIZE_SIZE`.
	 *
	 * @private
	 * @param {Function} func The function to have its output memoized.
	 * @returns {Function} Returns the new memoized function.
	 */
	function memoizeCapped(func) {
	  var result = memoize(func, function (key) {
	    if (cache.size === MAX_MEMOIZE_SIZE) {
	      cache.clear();
	    }
	    return key;
	  });

	  var cache = result.cache;
	  return result;
	}

	module.exports = memoizeCapped;

	/***/ }),
	/* 200 */
	/***/ (function(module, exports, __webpack_require__) {

	var MapCache = __webpack_require__(43);

	/** Error message constants. */
	var FUNC_ERROR_TEXT = 'Expected a function';

	/**
	 * Creates a function that memoizes the result of `func`. If `resolver` is
	 * provided, it determines the cache key for storing the result based on the
	 * arguments provided to the memoized function. By default, the first argument
	 * provided to the memoized function is used as the map cache key. The `func`
	 * is invoked with the `this` binding of the memoized function.
	 *
	 * **Note:** The cache is exposed as the `cache` property on the memoized
	 * function. Its creation may be customized by replacing the `_.memoize.Cache`
	 * constructor with one whose instances implement the
	 * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
	 * method interface of `clear`, `delete`, `get`, `has`, and `set`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Function
	 * @param {Function} func The function to have its output memoized.
	 * @param {Function} [resolver] The function to resolve the cache key.
	 * @returns {Function} Returns the new memoized function.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': 2 };
	 * var other = { 'c': 3, 'd': 4 };
	 *
	 * var values = _.memoize(_.values);
	 * values(object);
	 * // => [1, 2]
	 *
	 * values(other);
	 * // => [3, 4]
	 *
	 * object.a = 2;
	 * values(object);
	 * // => [1, 2]
	 *
	 * // Modify the result cache.
	 * values.cache.set(object, ['a', 'b']);
	 * values(object);
	 * // => ['a', 'b']
	 *
	 * // Replace `_.memoize.Cache`.
	 * _.memoize.Cache = WeakMap;
	 */
	function memoize(func, resolver) {
	  if (typeof func != 'function' || resolver != null && typeof resolver != 'function') {
	    throw new TypeError(FUNC_ERROR_TEXT);
	  }
	  var memoized = function memoized() {
	    var args = arguments,
	        key = resolver ? resolver.apply(this, args) : args[0],
	        cache = memoized.cache;

	    if (cache.has(key)) {
	      return cache.get(key);
	    }
	    var result = func.apply(this, args);
	    memoized.cache = cache.set(key, result) || cache;
	    return result;
	  };
	  memoized.cache = new (memoize.Cache || MapCache)();
	  return memoized;
	}

	// Expose `MapCache`.
	memoize.Cache = MapCache;

	module.exports = memoize;

	/***/ }),
	/* 201 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    arrayMap = __webpack_require__(85),
	    isArray = __webpack_require__(3),
	    isSymbol = __webpack_require__(19);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/** Used to convert symbols to primitives and strings. */
	var symbolProto = _Symbol ? _Symbol.prototype : undefined,
	    symbolToString = symbolProto ? symbolProto.toString : undefined;

	/**
	 * The base implementation of `_.toString` which doesn't convert nullish
	 * values to empty strings.
	 *
	 * @private
	 * @param {*} value The value to process.
	 * @returns {string} Returns the string.
	 */
	function baseToString(value) {
	  // Exit early for strings to avoid a performance hit in some environments.
	  if (typeof value == 'string') {
	    return value;
	  }
	  if (isArray(value)) {
	    // Recursively convert values (susceptible to call stack limits).
	    return arrayMap(value, baseToString) + '';
	  }
	  if (isSymbol(value)) {
	    return symbolToString ? symbolToString.call(value) : '';
	  }
	  var result = value + '';
	  return result == '0' && 1 / value == -INFINITY ? '-0' : result;
	}

	module.exports = baseToString;

	/***/ }),
	/* 202 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.hasIn` without support for deep paths.
	 *
	 * @private
	 * @param {Object} [object] The object to query.
	 * @param {Array|string} key The key to check.
	 * @returns {boolean} Returns `true` if `key` exists, else `false`.
	 */
	function baseHasIn(object, key) {
	  return object != null && key in Object(object);
	}

	module.exports = baseHasIn;

	/***/ }),
	/* 203 */
	/***/ (function(module, exports, __webpack_require__) {

	var castPath = __webpack_require__(35),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isIndex = __webpack_require__(46),
	    isLength = __webpack_require__(48),
	    toKey = __webpack_require__(20);

	/**
	 * Checks if `path` exists on `object`.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @param {Array|string} path The path to check.
	 * @param {Function} hasFunc The function to check properties.
	 * @returns {boolean} Returns `true` if `path` exists, else `false`.
	 */
	function hasPath(object, path, hasFunc) {
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      result = false;

	  while (++index < length) {
	    var key = toKey(path[index]);
	    if (!(result = object != null && hasFunc(object, key))) {
	      break;
	    }
	    object = object[key];
	  }
	  if (result || ++index != length) {
	    return result;
	  }
	  length = object == null ? 0 : object.length;
	  return !!length && isLength(length) && isIndex(key, length) && (isArray(object) || isArguments(object));
	}

	module.exports = hasPath;

	/***/ }),
	/* 204 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseProperty = __webpack_require__(205),
	    basePropertyDeep = __webpack_require__(206),
	    isKey = __webpack_require__(56),
	    toKey = __webpack_require__(20);

	/**
	 * Creates a function that returns the value at `path` of a given object.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 * @example
	 *
	 * var objects = [
	 *   { 'a': { 'b': 2 } },
	 *   { 'a': { 'b': 1 } }
	 * ];
	 *
	 * _.map(objects, _.property('a.b'));
	 * // => [2, 1]
	 *
	 * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
	 * // => [1, 2]
	 */
	function property(path) {
	  return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
	}

	module.exports = property;

	/***/ }),
	/* 205 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.property` without support for deep paths.
	 *
	 * @private
	 * @param {string} key The key of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function baseProperty(key) {
	  return function (object) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = baseProperty;

	/***/ }),
	/* 206 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55);

	/**
	 * A specialized version of `baseProperty` which supports deep paths.
	 *
	 * @private
	 * @param {Array|string} path The path of the property to get.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyDeep(path) {
	  return function (object) {
	    return baseGet(object, path);
	  };
	}

	module.exports = basePropertyDeep;

	/***/ }),
	/* 207 */
	/***/ (function(module, exports, __webpack_require__) {

	var _Symbol = __webpack_require__(11),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3);

	/** Built-in value references. */
	var spreadableSymbol = _Symbol ? _Symbol.isConcatSpreadable : undefined;

	/**
	 * Checks if `value` is a flattenable `arguments` object or array.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
	 */
	function isFlattenable(value) {
	    return isArray(value) || isArguments(value) || !!(spreadableSymbol && value && value[spreadableSymbol]);
	}

	module.exports = isFlattenable;

	/***/ }),
	/* 208 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseAssignValue = __webpack_require__(45),
	    createAggregator = __webpack_require__(209);

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Creates an object composed of keys generated from the results of running
	 * each element of `collection` thru `iteratee`. The order of grouped values
	 * is determined by the order they occur in `collection`. The corresponding
	 * value of each key is an array of elements responsible for generating the
	 * key. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
	 * @returns {Object} Returns the composed aggregate object.
	 * @example
	 *
	 * _.groupBy([6.1, 4.2, 6.3], Math.floor);
	 * // => { '4': [4.2], '6': [6.1, 6.3] }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.groupBy(['one', 'two', 'three'], 'length');
	 * // => { '3': ['one', 'two'], '5': ['three'] }
	 */
	var groupBy = createAggregator(function (result, value, key) {
	  if (hasOwnProperty.call(result, key)) {
	    result[key].push(value);
	  } else {
	    baseAssignValue(result, key, [value]);
	  }
	});

	module.exports = groupBy;

	/***/ }),
	/* 209 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayAggregator = __webpack_require__(210),
	    baseAggregator = __webpack_require__(211),
	    baseIteratee = __webpack_require__(13),
	    isArray = __webpack_require__(3);

	/**
	 * Creates a function like `_.groupBy`.
	 *
	 * @private
	 * @param {Function} setter The function to set accumulator values.
	 * @param {Function} [initializer] The accumulator object initializer.
	 * @returns {Function} Returns the new aggregator function.
	 */
	function createAggregator(setter, initializer) {
	    return function (collection, iteratee) {
	        var func = isArray(collection) ? arrayAggregator : baseAggregator,
	            accumulator = initializer ? initializer() : {};

	        return func(collection, setter, baseIteratee(iteratee, 2), accumulator);
	    };
	}

	module.exports = createAggregator;

	/***/ }),
	/* 210 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `baseAggregator` for arrays.
	 *
	 * @private
	 * @param {Array} [array] The array to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function arrayAggregator(array, setter, iteratee, accumulator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    var value = array[index];
	    setter(accumulator, value, iteratee(value), array);
	  }
	  return accumulator;
	}

	module.exports = arrayAggregator;

	/***/ }),
	/* 211 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34);

	/**
	 * Aggregates elements of `collection` on `accumulator` with keys transformed
	 * by `iteratee` and values set by `setter`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} setter The function to set `accumulator` values.
	 * @param {Function} iteratee The iteratee to transform keys.
	 * @param {Object} accumulator The initial aggregated object.
	 * @returns {Function} Returns `accumulator`.
	 */
	function baseAggregator(collection, setter, iteratee, accumulator) {
	  baseEach(collection, function (value, key, collection) {
	    setter(accumulator, value, iteratee(value), collection);
	  });
	  return accumulator;
	}

	module.exports = baseAggregator;

	/***/ }),
	/* 212 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(89),
	    toInteger = __webpack_require__(90);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMax = Math.max;

	/**
	 * Gets the index at which the first occurrence of `value` is found in `array`
	 * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons. If `fromIndex` is negative, it's used as the
	 * offset from the end of `array`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} [fromIndex=0] The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 * @example
	 *
	 * _.indexOf([1, 2, 1, 2], 2);
	 * // => 1
	 *
	 * // Search from the `fromIndex`.
	 * _.indexOf([1, 2, 1, 2], 2, 2);
	 * // => 3
	 */
	function indexOf(array, value, fromIndex) {
	  var length = array == null ? 0 : array.length;
	  if (!length) {
	    return -1;
	  }
	  var index = fromIndex == null ? 0 : toInteger(fromIndex);
	  if (index < 0) {
	    index = nativeMax(length + index, 0);
	  }
	  return baseIndexOf(array, value, index);
	}

	module.exports = indexOf;

	/***/ }),
	/* 213 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.findIndex` and `_.findLastIndex` without
	 * support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {Function} predicate The function invoked per iteration.
	 * @param {number} fromIndex The index to search from.
	 * @param {boolean} [fromRight] Specify iterating from right to left.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function baseFindIndex(array, predicate, fromIndex, fromRight) {
	  var length = array.length,
	      index = fromIndex + (fromRight ? 1 : -1);

	  while (fromRight ? index-- : ++index < length) {
	    if (predicate(array[index], index, array)) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = baseFindIndex;

	/***/ }),
	/* 214 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.isNaN` without support for number objects.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 */
	function baseIsNaN(value) {
	  return value !== value;
	}

	module.exports = baseIsNaN;

	/***/ }),
	/* 215 */
	/***/ (function(module, exports) {

	/**
	 * A specialized version of `_.indexOf` which performs strict equality
	 * comparisons of values, i.e. `===`.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {*} value The value to search for.
	 * @param {number} fromIndex The index to search from.
	 * @returns {number} Returns the index of the matched value, else `-1`.
	 */
	function strictIndexOf(array, value, fromIndex) {
	  var index = fromIndex - 1,
	      length = array.length;

	  while (++index < length) {
	    if (array[index] === value) {
	      return index;
	    }
	  }
	  return -1;
	}

	module.exports = strictIndexOf;

	/***/ }),
	/* 216 */
	/***/ (function(module, exports, __webpack_require__) {

	var toNumber = __webpack_require__(91);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0,
	    MAX_INTEGER = 1.7976931348623157e+308;

	/**
	 * Converts `value` to a finite number.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.12.0
	 * @category Lang
	 * @param {*} value The value to convert.
	 * @returns {number} Returns the converted number.
	 * @example
	 *
	 * _.toFinite(3.2);
	 * // => 3.2
	 *
	 * _.toFinite(Number.MIN_VALUE);
	 * // => 5e-324
	 *
	 * _.toFinite(Infinity);
	 * // => 1.7976931348623157e+308
	 *
	 * _.toFinite('3.2');
	 * // => 3.2
	 */
	function toFinite(value) {
	  if (!value) {
	    return value === 0 ? value : 0;
	  }
	  value = toNumber(value);
	  if (value === INFINITY || value === -INFINITY) {
	    var sign = value < 0 ? -1 : 1;
	    return sign * MAX_INTEGER;
	  }
	  return value === value ? value : 0;
	}

	module.exports = toFinite;

	/***/ }),
	/* 217 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsDate = __webpack_require__(218),
	    baseUnary = __webpack_require__(31),
	    nodeUtil = __webpack_require__(32);

	/* Node.js helper references. */
	var nodeIsDate = nodeUtil && nodeUtil.isDate;

	/**
	 * Checks if `value` is classified as a `Date` object.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 * @example
	 *
	 * _.isDate(new Date);
	 * // => true
	 *
	 * _.isDate('Mon April 23 2012');
	 * // => false
	 */
	var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

	module.exports = isDate;

	/***/ }),
	/* 218 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var dateTag = '[object Date]';

	/**
	 * The base implementation of `_.isDate` without Node.js optimizations.
	 *
	 * @private
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
	 */
	function baseIsDate(value) {
	  return isObjectLike(value) && baseGetTag(value) == dateTag;
	}

	module.exports = baseIsDate;

	/***/ }),
	/* 219 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseKeys = __webpack_require__(70),
	    getTag = __webpack_require__(18),
	    isArguments = __webpack_require__(29),
	    isArray = __webpack_require__(3),
	    isArrayLike = __webpack_require__(12),
	    isBuffer = __webpack_require__(30),
	    isPrototype = __webpack_require__(33),
	    isTypedArray = __webpack_require__(47);

	/** `Object#toString` result references. */
	var mapTag = '[object Map]',
	    setTag = '[object Set]';

	/** Used for built-in method references. */
	var objectProto = Object.prototype;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/**
	 * Checks if `value` is an empty object, collection, map, or set.
	 *
	 * Objects are considered empty if they have no own enumerable string keyed
	 * properties.
	 *
	 * Array-like values such as `arguments` objects, arrays, buffers, strings, or
	 * jQuery-like collections are considered empty if they have a `length` of `0`.
	 * Similarly, maps and sets are considered empty if they have a `size` of `0`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is empty, else `false`.
	 * @example
	 *
	 * _.isEmpty(null);
	 * // => true
	 *
	 * _.isEmpty(true);
	 * // => true
	 *
	 * _.isEmpty(1);
	 * // => true
	 *
	 * _.isEmpty([1, 2, 3]);
	 * // => false
	 *
	 * _.isEmpty({ 'a': 1 });
	 * // => false
	 */
	function isEmpty(value) {
	  if (value == null) {
	    return true;
	  }
	  if (isArrayLike(value) && (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' || isBuffer(value) || isTypedArray(value) || isArguments(value))) {
	    return !value.length;
	  }
	  var tag = getTag(value);
	  if (tag == mapTag || tag == setTag) {
	    return !value.size;
	  }
	  if (isPrototype(value)) {
	    return !baseKeys(value).length;
	  }
	  for (var key in value) {
	    if (hasOwnProperty.call(value, key)) {
	      return false;
	    }
	  }
	  return true;
	}

	module.exports = isEmpty;

	/***/ }),
	/* 220 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIsEqual = __webpack_require__(53);

	/**
	 * This method is like `_.isEqual` except that it accepts `customizer` which
	 * is invoked to compare values. If `customizer` returns `undefined`, comparisons
	 * are handled by the method instead. The `customizer` is invoked with up to
	 * six arguments: (objValue, othValue [, index|key, object, other, stack]).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @param {Function} [customizer] The function to customize comparisons.
	 * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
	 * @example
	 *
	 * function isGreeting(value) {
	 *   return /^h(?:i|ello)$/.test(value);
	 * }
	 *
	 * function customizer(objValue, othValue) {
	 *   if (isGreeting(objValue) && isGreeting(othValue)) {
	 *     return true;
	 *   }
	 * }
	 *
	 * var array = ['hello', 'goodbye'];
	 * var other = ['hi', 'goodbye'];
	 *
	 * _.isEqualWith(array, other, customizer);
	 * // => true
	 */
	function isEqualWith(value, other, customizer) {
	  customizer = typeof customizer == 'function' ? customizer : undefined;
	  var result = customizer ? customizer(value, other) : undefined;
	  return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
	}

	module.exports = isEqualWith;

	/***/ }),
	/* 221 */
	/***/ (function(module, exports, __webpack_require__) {

	var root = __webpack_require__(4);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeIsFinite = root.isFinite;

	/**
	 * Checks if `value` is a finite primitive number.
	 *
	 * **Note:** This method is based on
	 * [`Number.isFinite`](https://mdn.io/Number/isFinite).
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
	 * @example
	 *
	 * _.isFinite(3);
	 * // => true
	 *
	 * _.isFinite(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isFinite(Infinity);
	 * // => false
	 *
	 * _.isFinite('3');
	 * // => false
	 */
	function isFinite(value) {
	  return typeof value == 'number' && nativeIsFinite(value);
	}

	module.exports = isFinite;

	/***/ }),
	/* 222 */
	/***/ (function(module, exports, __webpack_require__) {

	var isNumber = __webpack_require__(223);

	/**
	 * Checks if `value` is `NaN`.
	 *
	 * **Note:** This method is based on
	 * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
	 * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
	 * `undefined` and other non-number values.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
	 * @example
	 *
	 * _.isNaN(NaN);
	 * // => true
	 *
	 * _.isNaN(new Number(NaN));
	 * // => true
	 *
	 * isNaN(undefined);
	 * // => true
	 *
	 * _.isNaN(undefined);
	 * // => false
	 */
	function isNaN(value) {
	  // An `NaN` primitive is the only value that is not equal to itself.
	  // Perform the `toStringTag` check first to avoid errors with some
	  // ActiveX objects in IE.
	  return isNumber(value) && value != +value;
	}

	module.exports = isNaN;

	/***/ }),
	/* 223 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var numberTag = '[object Number]';

	/**
	 * Checks if `value` is classified as a `Number` primitive or object.
	 *
	 * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
	 * classified as numbers, use the `_.isFinite` method.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a number, else `false`.
	 * @example
	 *
	 * _.isNumber(3);
	 * // => true
	 *
	 * _.isNumber(Number.MIN_VALUE);
	 * // => true
	 *
	 * _.isNumber(Infinity);
	 * // => true
	 *
	 * _.isNumber('3');
	 * // => false
	 */
	function isNumber(value) {
	    return typeof value == 'number' || isObjectLike(value) && baseGetTag(value) == numberTag;
	}

	module.exports = isNumber;

	/***/ }),
	/* 224 */
	/***/ (function(module, exports) {

	/**
	 * Checks if `value` is `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
	 * @example
	 *
	 * _.isNull(null);
	 * // => true
	 *
	 * _.isNull(void 0);
	 * // => false
	 */
	function isNull(value) {
	  return value === null;
	}

	module.exports = isNull;

	/***/ }),
	/* 225 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGetTag = __webpack_require__(6),
	    getPrototype = __webpack_require__(51),
	    isObjectLike = __webpack_require__(5);

	/** `Object#toString` result references. */
	var objectTag = '[object Object]';

	/** Used for built-in method references. */
	var funcProto = Function.prototype,
	    objectProto = Object.prototype;

	/** Used to resolve the decompiled source of functions. */
	var funcToString = funcProto.toString;

	/** Used to check objects for own properties. */
	var hasOwnProperty = objectProto.hasOwnProperty;

	/** Used to infer the `Object` constructor. */
	var objectCtorString = funcToString.call(Object);

	/**
	 * Checks if `value` is a plain object, that is, an object created by the
	 * `Object` constructor or one with a `[[Prototype]]` of `null`.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.8.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
	 * @example
	 *
	 * function Foo() {
	 *   this.a = 1;
	 * }
	 *
	 * _.isPlainObject(new Foo);
	 * // => false
	 *
	 * _.isPlainObject([1, 2, 3]);
	 * // => false
	 *
	 * _.isPlainObject({ 'x': 0, 'y': 0 });
	 * // => true
	 *
	 * _.isPlainObject(Object.create(null));
	 * // => true
	 */
	function isPlainObject(value) {
	  if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
	    return false;
	  }
	  var proto = getPrototype(value);
	  if (proto === null) {
	    return true;
	  }
	  var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
	  return typeof Ctor == 'function' && Ctor instanceof Ctor && funcToString.call(Ctor) == objectCtorString;
	}

	module.exports = isPlainObject;

	/***/ }),
	/* 226 */
	/***/ (function(module, exports, __webpack_require__) {

	var createCaseFirst = __webpack_require__(227);

	/**
	 * Converts the first character of `string` to lower case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the converted string.
	 * @example
	 *
	 * _.lowerFirst('Fred');
	 * // => 'fred'
	 *
	 * _.lowerFirst('FRED');
	 * // => 'fRED'
	 */
	var lowerFirst = createCaseFirst('toLowerCase');

	module.exports = lowerFirst;

	/***/ }),
	/* 227 */
	/***/ (function(module, exports, __webpack_require__) {

	var castSlice = __webpack_require__(228),
	    hasUnicode = __webpack_require__(92),
	    stringToArray = __webpack_require__(230),
	    toString = __webpack_require__(14);

	/**
	 * Creates a function like `_.lowerFirst`.
	 *
	 * @private
	 * @param {string} methodName The name of the `String` case method to use.
	 * @returns {Function} Returns the new case function.
	 */
	function createCaseFirst(methodName) {
	  return function (string) {
	    string = toString(string);

	    var strSymbols = hasUnicode(string) ? stringToArray(string) : undefined;

	    var chr = strSymbols ? strSymbols[0] : string.charAt(0);

	    var trailing = strSymbols ? castSlice(strSymbols, 1).join('') : string.slice(1);

	    return chr[methodName]() + trailing;
	  };
	}

	module.exports = createCaseFirst;

	/***/ }),
	/* 228 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseSlice = __webpack_require__(229);

	/**
	 * Casts `array` to a slice if it's needed.
	 *
	 * @private
	 * @param {Array} array The array to inspect.
	 * @param {number} start The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the cast slice.
	 */
	function castSlice(array, start, end) {
	  var length = array.length;
	  end = end === undefined ? length : end;
	  return !start && end >= length ? array : baseSlice(array, start, end);
	}

	module.exports = castSlice;

	/***/ }),
	/* 229 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.slice` without an iteratee call guard.
	 *
	 * @private
	 * @param {Array} array The array to slice.
	 * @param {number} [start=0] The start position.
	 * @param {number} [end=array.length] The end position.
	 * @returns {Array} Returns the slice of `array`.
	 */
	function baseSlice(array, start, end) {
	  var index = -1,
	      length = array.length;

	  if (start < 0) {
	    start = -start > length ? 0 : length + start;
	  }
	  end = end > length ? length : end;
	  if (end < 0) {
	    end += length;
	  }
	  length = start > end ? 0 : end - start >>> 0;
	  start >>>= 0;

	  var result = Array(length);
	  while (++index < length) {
	    result[index] = array[index + start];
	  }
	  return result;
	}

	module.exports = baseSlice;

	/***/ }),
	/* 230 */
	/***/ (function(module, exports, __webpack_require__) {

	var asciiToArray = __webpack_require__(231),
	    hasUnicode = __webpack_require__(92),
	    unicodeToArray = __webpack_require__(232);

	/**
	 * Converts `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function stringToArray(string) {
	    return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
	}

	module.exports = stringToArray;

	/***/ }),
	/* 231 */
	/***/ (function(module, exports) {

	/**
	 * Converts an ASCII `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function asciiToArray(string) {
	  return string.split('');
	}

	module.exports = asciiToArray;

	/***/ }),
	/* 232 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsVarRange = '\\ufe0e\\ufe0f';

	/** Used to compose unicode capture groups. */
	var rsAstral = '[' + rsAstralRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

	/** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
	var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

	/**
	 * Converts a Unicode `string` to an array.
	 *
	 * @private
	 * @param {string} string The string to convert.
	 * @returns {Array} Returns the converted array.
	 */
	function unicodeToArray(string) {
	    return string.match(reUnicode) || [];
	}

	module.exports = unicodeToArray;

	/***/ }),
	/* 233 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayMap = __webpack_require__(85),
	    baseIteratee = __webpack_require__(13),
	    baseMap = __webpack_require__(234),
	    isArray = __webpack_require__(3);

	/**
	 * Creates an array of values by running each element in `collection` thru
	 * `iteratee`. The iteratee is invoked with three arguments:
	 * (value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
	 *
	 * The guarded methods are:
	 * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
	 * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
	 * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
	 * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 * @example
	 *
	 * function square(n) {
	 *   return n * n;
	 * }
	 *
	 * _.map([4, 8], square);
	 * // => [16, 64]
	 *
	 * _.map({ 'a': 4, 'b': 8 }, square);
	 * // => [16, 64] (iteration order is not guaranteed)
	 *
	 * var users = [
	 *   { 'user': 'barney' },
	 *   { 'user': 'fred' }
	 * ];
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.map(users, 'user');
	 * // => ['barney', 'fred']
	 */
	function map(collection, iteratee) {
	  var func = isArray(collection) ? arrayMap : baseMap;
	  return func(collection, baseIteratee(iteratee, 3));
	}

	module.exports = map;

	/***/ }),
	/* 234 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseEach = __webpack_require__(34),
	    isArrayLike = __webpack_require__(12);

	/**
	 * The base implementation of `_.map` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @returns {Array} Returns the new mapped array.
	 */
	function baseMap(collection, iteratee) {
	  var index = -1,
	      result = isArrayLike(collection) ? Array(collection.length) : [];

	  baseEach(collection, function (value, key, collection) {
	    result[++index] = iteratee(value, key, collection);
	  });
	  return result;
	}

	module.exports = baseMap;

	/***/ }),
	/* 235 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(93),
	    baseGt = __webpack_require__(236),
	    baseIteratee = __webpack_require__(13);

	/**
	 * This method is like `_.max` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the maximum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.maxBy(objects, function(o) { return o.n; });
	 * // => { 'n': 2 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.maxBy(objects, 'n');
	 * // => { 'n': 2 }
	 */
	function maxBy(array, iteratee) {
	    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseGt) : undefined;
	}

	module.exports = maxBy;

	/***/ }),
	/* 236 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.gt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is greater than `other`,
	 *  else `false`.
	 */
	function baseGt(value, other) {
	  return value > other;
	}

	module.exports = baseGt;

	/***/ }),
	/* 237 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseExtremum = __webpack_require__(93),
	    baseIteratee = __webpack_require__(13),
	    baseLt = __webpack_require__(238);

	/**
	 * This method is like `_.min` except that it accepts `iteratee` which is
	 * invoked for each element in `array` to generate the criterion by which
	 * the value is ranked. The iteratee is invoked with one argument: (value).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Math
	 * @param {Array} array The array to iterate over.
	 * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
	 * @returns {*} Returns the minimum value.
	 * @example
	 *
	 * var objects = [{ 'n': 1 }, { 'n': 2 }];
	 *
	 * _.minBy(objects, function(o) { return o.n; });
	 * // => { 'n': 1 }
	 *
	 * // The `_.property` iteratee shorthand.
	 * _.minBy(objects, 'n');
	 * // => { 'n': 1 }
	 */
	function minBy(array, iteratee) {
	    return array && array.length ? baseExtremum(array, baseIteratee(iteratee, 2), baseLt) : undefined;
	}

	module.exports = minBy;

	/***/ }),
	/* 238 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.lt` which doesn't coerce arguments.
	 *
	 * @private
	 * @param {*} value The value to compare.
	 * @param {*} other The other value to compare.
	 * @returns {boolean} Returns `true` if `value` is less than `other`,
	 *  else `false`.
	 */
	function baseLt(value, other) {
	  return value < other;
	}

	module.exports = baseLt;

	/***/ }),
	/* 239 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePick = __webpack_require__(240),
	    flatRest = __webpack_require__(243);

	/**
	 * Creates an object composed of the picked `object` properties.
	 *
	 * @static
	 * @since 0.1.0
	 * @memberOf _
	 * @category Object
	 * @param {Object} object The source object.
	 * @param {...(string|string[])} [paths] The property paths to pick.
	 * @returns {Object} Returns the new object.
	 * @example
	 *
	 * var object = { 'a': 1, 'b': '2', 'c': 3 };
	 *
	 * _.pick(object, ['a', 'c']);
	 * // => { 'a': 1, 'c': 3 }
	 */
	var pick = flatRest(function (object, paths) {
	  return object == null ? {} : basePick(object, paths);
	});

	module.exports = pick;

	/***/ }),
	/* 240 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePickBy = __webpack_require__(241),
	    hasIn = __webpack_require__(86);

	/**
	 * The base implementation of `_.pick` without support for individual
	 * property identifiers.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @returns {Object} Returns the new object.
	 */
	function basePick(object, paths) {
	  return basePickBy(object, paths, function (value, path) {
	    return hasIn(object, path);
	  });
	}

	module.exports = basePick;

	/***/ }),
	/* 241 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseGet = __webpack_require__(55),
	    baseSet = __webpack_require__(242),
	    castPath = __webpack_require__(35);

	/**
	 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
	 *
	 * @private
	 * @param {Object} object The source object.
	 * @param {string[]} paths The property paths to pick.
	 * @param {Function} predicate The function invoked per property.
	 * @returns {Object} Returns the new object.
	 */
	function basePickBy(object, paths, predicate) {
	    var index = -1,
	        length = paths.length,
	        result = {};

	    while (++index < length) {
	        var path = paths[index],
	            value = baseGet(object, path);

	        if (predicate(value, path)) {
	            baseSet(result, castPath(path, object), value);
	        }
	    }
	    return result;
	}

	module.exports = basePickBy;

	/***/ }),
	/* 242 */
	/***/ (function(module, exports, __webpack_require__) {

	var assignValue = __webpack_require__(44),
	    castPath = __webpack_require__(35),
	    isIndex = __webpack_require__(46),
	    isObject = __webpack_require__(7),
	    toKey = __webpack_require__(20);

	/**
	 * The base implementation of `_.set`.
	 *
	 * @private
	 * @param {Object} object The object to modify.
	 * @param {Array|string} path The path of the property to set.
	 * @param {*} value The value to set.
	 * @param {Function} [customizer] The function to customize path creation.
	 * @returns {Object} Returns `object`.
	 */
	function baseSet(object, path, value, customizer) {
	  if (!isObject(object)) {
	    return object;
	  }
	  path = castPath(path, object);

	  var index = -1,
	      length = path.length,
	      lastIndex = length - 1,
	      nested = object;

	  while (nested != null && ++index < length) {
	    var key = toKey(path[index]),
	        newValue = value;

	    if (index != lastIndex) {
	      var objValue = nested[key];
	      newValue = customizer ? customizer(objValue, key, nested) : undefined;
	      if (newValue === undefined) {
	        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
	      }
	    }
	    assignValue(nested, key, newValue);
	    nested = nested[key];
	  }
	  return object;
	}

	module.exports = baseSet;

	/***/ }),
	/* 243 */
	/***/ (function(module, exports, __webpack_require__) {

	var flatten = __webpack_require__(87),
	    overRest = __webpack_require__(94),
	    setToString = __webpack_require__(95);

	/**
	 * A specialized version of `baseRest` which flattens the rest array.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @returns {Function} Returns the new function.
	 */
	function flatRest(func) {
	  return setToString(overRest(func, undefined, flatten), func + '');
	}

	module.exports = flatRest;

	/***/ }),
	/* 244 */
	/***/ (function(module, exports) {

	/**
	 * A faster alternative to `Function#apply`, this function invokes `func`
	 * with the `this` binding of `thisArg` and the arguments of `args`.
	 *
	 * @private
	 * @param {Function} func The function to invoke.
	 * @param {*} thisArg The `this` binding of `func`.
	 * @param {Array} args The arguments to invoke `func` with.
	 * @returns {*} Returns the result of `func`.
	 */
	function apply(func, thisArg, args) {
	  switch (args.length) {
	    case 0:
	      return func.call(thisArg);
	    case 1:
	      return func.call(thisArg, args[0]);
	    case 2:
	      return func.call(thisArg, args[0], args[1]);
	    case 3:
	      return func.call(thisArg, args[0], args[1], args[2]);
	  }
	  return func.apply(thisArg, args);
	}

	module.exports = apply;

	/***/ }),
	/* 245 */
	/***/ (function(module, exports, __webpack_require__) {

	var constant = __webpack_require__(246),
	    defineProperty = __webpack_require__(68),
	    identity = __webpack_require__(57);

	/**
	 * The base implementation of `setToString` without support for hot loop shorting.
	 *
	 * @private
	 * @param {Function} func The function to modify.
	 * @param {Function} string The `toString` result.
	 * @returns {Function} Returns `func`.
	 */
	var baseSetToString = !defineProperty ? identity : function (func, string) {
	  return defineProperty(func, 'toString', {
	    'configurable': true,
	    'enumerable': false,
	    'value': constant(string),
	    'writable': true
	  });
	};

	module.exports = baseSetToString;

	/***/ }),
	/* 246 */
	/***/ (function(module, exports) {

	/**
	 * Creates a function that returns `value`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.4.0
	 * @category Util
	 * @param {*} value The value to return from the new function.
	 * @returns {Function} Returns the new constant function.
	 * @example
	 *
	 * var objects = _.times(2, _.constant({ 'a': 1 }));
	 *
	 * console.log(objects);
	 * // => [{ 'a': 1 }, { 'a': 1 }]
	 *
	 * console.log(objects[0] === objects[1]);
	 * // => true
	 */
	function constant(value) {
	  return function () {
	    return value;
	  };
	}

	module.exports = constant;

	/***/ }),
	/* 247 */
	/***/ (function(module, exports) {

	/** Used to detect hot functions by number of calls within a span of milliseconds. */
	var HOT_COUNT = 800,
	    HOT_SPAN = 16;

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeNow = Date.now;

	/**
	 * Creates a function that'll short out and invoke `identity` instead
	 * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
	 * milliseconds.
	 *
	 * @private
	 * @param {Function} func The function to restrict.
	 * @returns {Function} Returns the new shortable function.
	 */
	function shortOut(func) {
	  var count = 0,
	      lastCalled = 0;

	  return function () {
	    var stamp = nativeNow(),
	        remaining = HOT_SPAN - (stamp - lastCalled);

	    lastCalled = stamp;
	    if (remaining > 0) {
	      if (++count >= HOT_COUNT) {
	        return arguments[0];
	      }
	    } else {
	      count = 0;
	    }
	    return func.apply(undefined, arguments);
	  };
	}

	module.exports = shortOut;

	/***/ }),
	/* 248 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(96),
	    baseEach = __webpack_require__(34),
	    baseIteratee = __webpack_require__(13),
	    baseReduce = __webpack_require__(249),
	    isArray = __webpack_require__(3);

	/**
	 * Reduces `collection` to a value which is the accumulated result of running
	 * each element in `collection` thru `iteratee`, where each successive
	 * invocation is supplied the return value of the previous. If `accumulator`
	 * is not given, the first element of `collection` is used as the initial
	 * value. The iteratee is invoked with four arguments:
	 * (accumulator, value, index|key, collection).
	 *
	 * Many lodash methods are guarded to work as iteratees for methods like
	 * `_.reduce`, `_.reduceRight`, and `_.transform`.
	 *
	 * The guarded methods are:
	 * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
	 * and `sortBy`
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Collection
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} [iteratee=_.identity] The function invoked per iteration.
	 * @param {*} [accumulator] The initial value.
	 * @returns {*} Returns the accumulated value.
	 * @see _.reduceRight
	 * @example
	 *
	 * _.reduce([1, 2], function(sum, n) {
	 *   return sum + n;
	 * }, 0);
	 * // => 3
	 *
	 * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
	 *   (result[value] || (result[value] = [])).push(key);
	 *   return result;
	 * }, {});
	 * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
	 */
	function reduce(collection, iteratee, accumulator) {
	    var func = isArray(collection) ? arrayReduce : baseReduce,
	        initAccum = arguments.length < 3;

	    return func(collection, baseIteratee(iteratee, 4), accumulator, initAccum, baseEach);
	}

	module.exports = reduce;

	/***/ }),
	/* 249 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.reduce` and `_.reduceRight`, without support
	 * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
	 *
	 * @private
	 * @param {Array|Object} collection The collection to iterate over.
	 * @param {Function} iteratee The function invoked per iteration.
	 * @param {*} accumulator The initial value.
	 * @param {boolean} initAccum Specify using the first or last element of
	 *  `collection` as the initial value.
	 * @param {Function} eachFunc The function to iterate over `collection`.
	 * @returns {*} Returns the accumulated value.
	 */
	function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
	  eachFunc(collection, function (value, index, collection) {
	    accumulator = initAccum ? (initAccum = false, value) : iteratee(accumulator, value, index, collection);
	  });
	  return accumulator;
	}

	module.exports = baseReduce;

	/***/ }),
	/* 250 */
	/***/ (function(module, exports, __webpack_require__) {

	var toString = __webpack_require__(14);

	/**
	 * Replaces matches for `pattern` in `string` with `replacement`.
	 *
	 * **Note:** This method is based on
	 * [`String#replace`](https://mdn.io/String/replace).
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to modify.
	 * @param {RegExp|string} pattern The pattern to replace.
	 * @param {Function|string} replacement The match replacement.
	 * @returns {string} Returns the modified string.
	 * @example
	 *
	 * _.replace('Hi Fred', 'Fred', 'Barney');
	 * // => 'Hi Barney'
	 */
	function replace() {
	  var args = arguments,
	      string = toString(args[0]);

	  return args.length < 3 ? string : string.replace(args[1], args[2]);
	}

	module.exports = replace;

	/***/ }),
	/* 251 */
	/***/ (function(module, exports, __webpack_require__) {

	var createRound = __webpack_require__(252);

	/**
	 * Computes `number` rounded to `precision`.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.10.0
	 * @category Math
	 * @param {number} number The number to round.
	 * @param {number} [precision=0] The precision to round to.
	 * @returns {number} Returns the rounded number.
	 * @example
	 *
	 * _.round(4.006);
	 * // => 4
	 *
	 * _.round(4.006, 2);
	 * // => 4.01
	 *
	 * _.round(4060, -2);
	 * // => 4100
	 */
	var round = createRound('round');

	module.exports = round;

	/***/ }),
	/* 252 */
	/***/ (function(module, exports, __webpack_require__) {

	var toInteger = __webpack_require__(90),
	    toNumber = __webpack_require__(91),
	    toString = __webpack_require__(14);

	/* Built-in method references for those with the same name as other `lodash` methods. */
	var nativeMin = Math.min;

	/**
	 * Creates a function like `_.round`.
	 *
	 * @private
	 * @param {string} methodName The name of the `Math` method to use when rounding.
	 * @returns {Function} Returns the new round function.
	 */
	function createRound(methodName) {
	  var func = Math[methodName];
	  return function (number, precision) {
	    number = toNumber(number);
	    precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
	    if (precision) {
	      // Shift with exponential notation to avoid floating-point issues.
	      // See [MDN](https://mdn.io/round#Examples) for more details.
	      var pair = (toString(number) + 'e').split('e'),
	          value = func(pair[0] + 'e' + (+pair[1] + precision));

	      pair = (toString(value) + 'e').split('e');
	      return +(pair[0] + 'e' + (+pair[1] - precision));
	    }
	    return func(number);
	  };
	}

	module.exports = createRound;

	/***/ }),
	/* 253 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseFlatten = __webpack_require__(88),
	    baseRest = __webpack_require__(254),
	    baseUniq = __webpack_require__(97),
	    isArrayLikeObject = __webpack_require__(259);

	/**
	 * Creates an array of unique values, in order, from all given arrays using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {...Array} [arrays] The arrays to inspect.
	 * @returns {Array} Returns the new array of combined values.
	 * @example
	 *
	 * _.union([2], [1, 2]);
	 * // => [2, 1]
	 */
	var union = baseRest(function (arrays) {
	  return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
	});

	module.exports = union;

	/***/ }),
	/* 254 */
	/***/ (function(module, exports, __webpack_require__) {

	var identity = __webpack_require__(57),
	    overRest = __webpack_require__(94),
	    setToString = __webpack_require__(95);

	/**
	 * The base implementation of `_.rest` which doesn't validate or coerce arguments.
	 *
	 * @private
	 * @param {Function} func The function to apply a rest parameter to.
	 * @param {number} [start=func.length-1] The start position of the rest parameter.
	 * @returns {Function} Returns the new function.
	 */
	function baseRest(func, start) {
	  return setToString(overRest(func, start, identity), func + '');
	}

	module.exports = baseRest;

	/***/ }),
	/* 255 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseIndexOf = __webpack_require__(89);

	/**
	 * A specialized version of `_.includes` for arrays without support for
	 * specifying an index to search from.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludes(array, value) {
	  var length = array == null ? 0 : array.length;
	  return !!length && baseIndexOf(array, value, 0) > -1;
	}

	module.exports = arrayIncludes;

	/***/ }),
	/* 256 */
	/***/ (function(module, exports) {

	/**
	 * This function is like `arrayIncludes` except that it accepts a comparator.
	 *
	 * @private
	 * @param {Array} [array] The array to inspect.
	 * @param {*} target The value to search for.
	 * @param {Function} comparator The comparator invoked per element.
	 * @returns {boolean} Returns `true` if `target` is found, else `false`.
	 */
	function arrayIncludesWith(array, value, comparator) {
	  var index = -1,
	      length = array == null ? 0 : array.length;

	  while (++index < length) {
	    if (comparator(value, array[index])) {
	      return true;
	    }
	  }
	  return false;
	}

	module.exports = arrayIncludesWith;

	/***/ }),
	/* 257 */
	/***/ (function(module, exports, __webpack_require__) {

	var Set = __webpack_require__(78),
	    noop = __webpack_require__(258),
	    setToArray = __webpack_require__(54);

	/** Used as references for various `Number` constants. */
	var INFINITY = 1 / 0;

	/**
	 * Creates a set object of `values`.
	 *
	 * @private
	 * @param {Array} values The values to add to the set.
	 * @returns {Object} Returns the new set.
	 */
	var createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {
	  return new Set(values);
	};

	module.exports = createSet;

	/***/ }),
	/* 258 */
	/***/ (function(module, exports) {

	/**
	 * This method returns `undefined`.
	 *
	 * @static
	 * @memberOf _
	 * @since 2.3.0
	 * @category Util
	 * @example
	 *
	 * _.times(2, _.noop);
	 * // => [undefined, undefined]
	 */
	function noop() {
	  // No operation performed.
	}

	module.exports = noop;

	/***/ }),
	/* 259 */
	/***/ (function(module, exports, __webpack_require__) {

	var isArrayLike = __webpack_require__(12),
	    isObjectLike = __webpack_require__(5);

	/**
	 * This method is like `_.isArrayLike` except that it also checks if `value`
	 * is an object.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category Lang
	 * @param {*} value The value to check.
	 * @returns {boolean} Returns `true` if `value` is an array-like object,
	 *  else `false`.
	 * @example
	 *
	 * _.isArrayLikeObject([1, 2, 3]);
	 * // => true
	 *
	 * _.isArrayLikeObject(document.body.children);
	 * // => true
	 *
	 * _.isArrayLikeObject('abc');
	 * // => false
	 *
	 * _.isArrayLikeObject(_.noop);
	 * // => false
	 */
	function isArrayLikeObject(value) {
	  return isObjectLike(value) && isArrayLike(value);
	}

	module.exports = isArrayLikeObject;

	/***/ }),
	/* 260 */
	/***/ (function(module, exports, __webpack_require__) {

	var baseUniq = __webpack_require__(97);

	/**
	 * Creates a duplicate-free version of an array, using
	 * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
	 * for equality comparisons, in which only the first occurrence of each element
	 * is kept. The order of result values is determined by the order they occur
	 * in the array.
	 *
	 * @static
	 * @memberOf _
	 * @since 0.1.0
	 * @category Array
	 * @param {Array} array The array to inspect.
	 * @returns {Array} Returns the new duplicate free array.
	 * @example
	 *
	 * _.uniq([2, 1, 2]);
	 * // => [2, 1]
	 */
	function uniq(array) {
	  return array && array.length ? baseUniq(array) : [];
	}

	module.exports = uniq;

	/***/ }),
	/* 261 */
	/***/ (function(module, exports, __webpack_require__) {

	var createCompounder = __webpack_require__(262);

	/**
	 * Converts `string`, as space separated words, to upper case.
	 *
	 * @static
	 * @memberOf _
	 * @since 4.0.0
	 * @category String
	 * @param {string} [string=''] The string to convert.
	 * @returns {string} Returns the upper cased string.
	 * @example
	 *
	 * _.upperCase('--foo-bar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('fooBar');
	 * // => 'FOO BAR'
	 *
	 * _.upperCase('__foo_bar__');
	 * // => 'FOO BAR'
	 */
	var upperCase = createCompounder(function (result, word, index) {
	  return result + (index ? ' ' : '') + word.toUpperCase();
	});

	module.exports = upperCase;

	/***/ }),
	/* 262 */
	/***/ (function(module, exports, __webpack_require__) {

	var arrayReduce = __webpack_require__(96),
	    deburr = __webpack_require__(263),
	    words = __webpack_require__(266);

	/** Used to compose unicode capture groups. */
	var rsApos = '[\'\u2019]';

	/** Used to match apostrophes. */
	var reApos = RegExp(rsApos, 'g');

	/**
	 * Creates a function like `_.camelCase`.
	 *
	 * @private
	 * @param {Function} callback The function to combine each word.
	 * @returns {Function} Returns the new compounder function.
	 */
	function createCompounder(callback) {
	  return function (string) {
	    return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
	  };
	}

	module.exports = createCompounder;

	/***/ }),
	/* 263 */
	/***/ (function(module, exports, __webpack_require__) {

	var deburrLetter = __webpack_require__(264),
	    toString = __webpack_require__(14);

	/** Used to match Latin Unicode letters (excluding mathematical operators). */
	var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

	/** Used to compose unicode character classes. */
	var rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange;

	/** Used to compose unicode capture groups. */
	var rsCombo = '[' + rsComboRange + ']';

	/**
	 * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
	 * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
	 */
	var reComboMark = RegExp(rsCombo, 'g');

	/**
	 * Deburrs `string` by converting
	 * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
	 * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
	 * letters to basic Latin letters and removing
	 * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to deburr.
	 * @returns {string} Returns the deburred string.
	 * @example
	 *
	 * _.deburr('déjà vu');
	 * // => 'deja vu'
	 */
	function deburr(string) {
	  string = toString(string);
	  return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
	}

	module.exports = deburr;

	/***/ }),
	/* 264 */
	/***/ (function(module, exports, __webpack_require__) {

	var basePropertyOf = __webpack_require__(265);

	/** Used to map Latin Unicode letters to basic Latin letters. */
	var deburredLetters = {
	  // Latin-1 Supplement block.
	  '\xc0': 'A', '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
	  '\xe0': 'a', '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
	  '\xc7': 'C', '\xe7': 'c',
	  '\xd0': 'D', '\xf0': 'd',
	  '\xc8': 'E', '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
	  '\xe8': 'e', '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
	  '\xcc': 'I', '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
	  '\xec': 'i', '\xed': 'i', '\xee': 'i', '\xef': 'i',
	  '\xd1': 'N', '\xf1': 'n',
	  '\xd2': 'O', '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
	  '\xf2': 'o', '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
	  '\xd9': 'U', '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
	  '\xf9': 'u', '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
	  '\xdd': 'Y', '\xfd': 'y', '\xff': 'y',
	  '\xc6': 'Ae', '\xe6': 'ae',
	  '\xde': 'Th', '\xfe': 'th',
	  '\xdf': 'ss',
	  // Latin Extended-A block.
	  '\u0100': 'A', '\u0102': 'A', '\u0104': 'A',
	  '\u0101': 'a', '\u0103': 'a', '\u0105': 'a',
	  '\u0106': 'C', '\u0108': 'C', '\u010A': 'C', '\u010C': 'C',
	  '\u0107': 'c', '\u0109': 'c', '\u010B': 'c', '\u010D': 'c',
	  '\u010E': 'D', '\u0110': 'D', '\u010F': 'd', '\u0111': 'd',
	  '\u0112': 'E', '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011A': 'E',
	  '\u0113': 'e', '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011B': 'e',
	  '\u011C': 'G', '\u011E': 'G', '\u0120': 'G', '\u0122': 'G',
	  '\u011D': 'g', '\u011F': 'g', '\u0121': 'g', '\u0123': 'g',
	  '\u0124': 'H', '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
	  '\u0128': 'I', '\u012A': 'I', '\u012C': 'I', '\u012E': 'I', '\u0130': 'I',
	  '\u0129': 'i', '\u012B': 'i', '\u012D': 'i', '\u012F': 'i', '\u0131': 'i',
	  '\u0134': 'J', '\u0135': 'j',
	  '\u0136': 'K', '\u0137': 'k', '\u0138': 'k',
	  '\u0139': 'L', '\u013B': 'L', '\u013D': 'L', '\u013F': 'L', '\u0141': 'L',
	  '\u013A': 'l', '\u013C': 'l', '\u013E': 'l', '\u0140': 'l', '\u0142': 'l',
	  '\u0143': 'N', '\u0145': 'N', '\u0147': 'N', '\u014A': 'N',
	  '\u0144': 'n', '\u0146': 'n', '\u0148': 'n', '\u014B': 'n',
	  '\u014C': 'O', '\u014E': 'O', '\u0150': 'O',
	  '\u014D': 'o', '\u014F': 'o', '\u0151': 'o',
	  '\u0154': 'R', '\u0156': 'R', '\u0158': 'R',
	  '\u0155': 'r', '\u0157': 'r', '\u0159': 'r',
	  '\u015A': 'S', '\u015C': 'S', '\u015E': 'S', '\u0160': 'S',
	  '\u015B': 's', '\u015D': 's', '\u015F': 's', '\u0161': 's',
	  '\u0162': 'T', '\u0164': 'T', '\u0166': 'T',
	  '\u0163': 't', '\u0165': 't', '\u0167': 't',
	  '\u0168': 'U', '\u016A': 'U', '\u016C': 'U', '\u016E': 'U', '\u0170': 'U', '\u0172': 'U',
	  '\u0169': 'u', '\u016B': 'u', '\u016D': 'u', '\u016F': 'u', '\u0171': 'u', '\u0173': 'u',
	  '\u0174': 'W', '\u0175': 'w',
	  '\u0176': 'Y', '\u0177': 'y', '\u0178': 'Y',
	  '\u0179': 'Z', '\u017B': 'Z', '\u017D': 'Z',
	  '\u017A': 'z', '\u017C': 'z', '\u017E': 'z',
	  '\u0132': 'IJ', '\u0133': 'ij',
	  '\u0152': 'Oe', '\u0153': 'oe',
	  '\u0149': "'n", '\u017F': 's'
	};

	/**
	 * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
	 * letters to basic Latin letters.
	 *
	 * @private
	 * @param {string} letter The matched letter to deburr.
	 * @returns {string} Returns the deburred letter.
	 */
	var deburrLetter = basePropertyOf(deburredLetters);

	module.exports = deburrLetter;

	/***/ }),
	/* 265 */
	/***/ (function(module, exports) {

	/**
	 * The base implementation of `_.propertyOf` without support for deep paths.
	 *
	 * @private
	 * @param {Object} object The object to query.
	 * @returns {Function} Returns the new accessor function.
	 */
	function basePropertyOf(object) {
	  return function (key) {
	    return object == null ? undefined : object[key];
	  };
	}

	module.exports = basePropertyOf;

	/***/ }),
	/* 266 */
	/***/ (function(module, exports, __webpack_require__) {

	var asciiWords = __webpack_require__(267),
	    hasUnicodeWord = __webpack_require__(268),
	    toString = __webpack_require__(14),
	    unicodeWords = __webpack_require__(269);

	/**
	 * Splits `string` into an array of its words.
	 *
	 * @static
	 * @memberOf _
	 * @since 3.0.0
	 * @category String
	 * @param {string} [string=''] The string to inspect.
	 * @param {RegExp|string} [pattern] The pattern to match words.
	 * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
	 * @returns {Array} Returns the words of `string`.
	 * @example
	 *
	 * _.words('fred, barney, & pebbles');
	 * // => ['fred', 'barney', 'pebbles']
	 *
	 * _.words('fred, barney, & pebbles', /[^, ]+/g);
	 * // => ['fred', 'barney', '&', 'pebbles']
	 */
	function words(string, pattern, guard) {
	  string = toString(string);
	  pattern = guard ? undefined : pattern;

	  if (pattern === undefined) {
	    return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
	  }
	  return string.match(pattern) || [];
	}

	module.exports = words;

	/***/ }),
	/* 267 */
	/***/ (function(module, exports) {

	/** Used to match words composed of alphanumeric characters. */
	var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

	/**
	 * Splits an ASCII `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function asciiWords(string) {
	  return string.match(reAsciiWord) || [];
	}

	module.exports = asciiWords;

	/***/ }),
	/* 268 */
	/***/ (function(module, exports) {

	/** Used to detect strings that need a more robust regexp to match words. */
	var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2,}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

	/**
	 * Checks if `string` contains a word composed of Unicode symbols.
	 *
	 * @private
	 * @param {string} string The string to inspect.
	 * @returns {boolean} Returns `true` if a word is found, else `false`.
	 */
	function hasUnicodeWord(string) {
	  return reHasUnicodeWord.test(string);
	}

	module.exports = hasUnicodeWord;

	/***/ }),
	/* 269 */
	/***/ (function(module, exports) {

	/** Used to compose unicode character classes. */
	var rsAstralRange = '\\ud800-\\udfff',
	    rsComboMarksRange = '\\u0300-\\u036f',
	    reComboHalfMarksRange = '\\ufe20-\\ufe2f',
	    rsComboSymbolsRange = '\\u20d0-\\u20ff',
	    rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
	    rsDingbatRange = '\\u2700-\\u27bf',
	    rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
	    rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
	    rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
	    rsPunctuationRange = '\\u2000-\\u206f',
	    rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
	    rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
	    rsVarRange = '\\ufe0e\\ufe0f',
	    rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

	/** Used to compose unicode capture groups. */
	var rsApos = '[\'\u2019]',
	    rsBreak = '[' + rsBreakRange + ']',
	    rsCombo = '[' + rsComboRange + ']',
	    rsDigits = '\\d+',
	    rsDingbat = '[' + rsDingbatRange + ']',
	    rsLower = '[' + rsLowerRange + ']',
	    rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
	    rsFitz = '\\ud83c[\\udffb-\\udfff]',
	    rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
	    rsNonAstral = '[^' + rsAstralRange + ']',
	    rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
	    rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
	    rsUpper = '[' + rsUpperRange + ']',
	    rsZWJ = '\\u200d';

	/** Used to compose unicode regexes. */
	var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
	    rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
	    rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
	    rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
	    reOptMod = rsModifier + '?',
	    rsOptVar = '[' + rsVarRange + ']?',
	    rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
	    rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
	    rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
	    rsSeq = rsOptVar + reOptMod + rsOptJoin,
	    rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq;

	/** Used to match complex or compound words. */
	var reUnicodeWord = RegExp([rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')', rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')', rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower, rsUpper + '+' + rsOptContrUpper, rsOrdUpper, rsOrdLower, rsDigits, rsEmoji].join('|'), 'g');

	/**
	 * Splits a Unicode `string` into an array of its words.
	 *
	 * @private
	 * @param {string} The string to inspect.
	 * @returns {Array} Returns the words of `string`.
	 */
	function unicodeWords(string) {
	    return string.match(reUnicodeWord) || [];
	}

	module.exports = unicodeWords;

	/***/ }),
	/* 270 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Default animation funciton
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var G = __webpack_require__(1);
	var PathUtil = G.PathUtil;

	function getClip(coord) {
	  var start = coord.start;
	  var end = coord.end;
	  var width = coord.getWidth();
	  var height = coord.getHeight();
	  var margin = 200;
	  var startAngle = void 0;
	  var endAngle = void 0;
	  var center = void 0;
	  var radius = void 0;
	  var clip = void 0;

	  if (coord.isPolar) {
	    radius = coord.getRadius();
	    center = coord.getCenter();
	    startAngle = coord.startAngle;
	    endAngle = coord.endAngle;
	    clip = new G.Fan({
	      attrs: {
	        x: center.x,
	        y: center.y,
	        rs: 0,
	        re: radius + margin,
	        startAngle: startAngle,
	        endAngle: startAngle
	      }
	    });
	    clip.endState = {
	      endAngle: endAngle
	    };
	  } else {
	    clip = new G.Rect({
	      attrs: {
	        x: start.x - margin,
	        y: end.y - margin,
	        width: coord.isTransposed ? width + margin * 2 : 0,
	        height: coord.isTransposed ? 0 : height + margin * 2
	      }
	    });

	    if (coord.isTransposed) {
	      clip.endState = {
	        height: height + margin * 2
	      };
	    } else {
	      clip.endState = {
	        width: width + margin * 2
	      };
	    }
	  }
	  clip.isClip = true;
	  return clip;
	}

	// 获取图形的包围盒
	function getPointsBox(points) {
	  if (Util.isEmpty(points)) {
	    return null;
	  }

	  var minX = points[0].x;
	  var maxX = points[0].x;
	  var minY = points[0].y;
	  var maxY = points[0].y;
	  Util.each(points, function (point) {
	    minX = minX > point.x ? point.x : minX;
	    maxX = maxX < point.x ? point.x : maxX;
	    minY = minY > point.y ? point.y : minY;
	    maxY = maxY < point.y ? point.y : maxY;
	  });
	  return {
	    minX: minX,
	    maxX: maxX,
	    minY: minY,
	    maxY: maxY,
	    centerX: (minX + maxX) / 2,
	    centerY: (minY + maxY) / 2
	  };
	}

	function getAngle(shape, coord) {
	  var points = shape.points || shape.get('origin').points;
	  var box = getPointsBox(points);
	  var endAngle = void 0;
	  var startAngle = void 0;
	  var coordStartAngle = coord.startAngle;
	  var coordEndAngle = coord.endAngle;
	  var diffAngle = coordEndAngle - coordStartAngle;

	  if (coord.isTransposed) {
	    endAngle = box.maxY * diffAngle;
	    startAngle = box.minY * diffAngle;
	  } else {
	    endAngle = box.maxX * diffAngle;
	    startAngle = box.minX * diffAngle;
	  }
	  endAngle += coordStartAngle;
	  startAngle += coordStartAngle;
	  return {
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}

	function getAnimateParam(animateCfg, index, id) {
	  var result = {};
	  if (animateCfg.delay) {
	    result.delay = Util.isFunction(animateCfg.delay) ? animateCfg.delay(index, id) : animateCfg.delay;
	  }
	  result.easing = Util.isFunction(animateCfg.easing) ? animateCfg.easing(index, id) : animateCfg.easing;
	  result.duration = Util.isFunction(animateCfg.duration) ? animateCfg.duration(index, id) : animateCfg.duration;
	  result.callback = animateCfg.callback;
	  return result;
	}

	function scaleInY(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x = (box.minX + box.maxX) / 2;
	  var y = void 0;

	  if (points[0].y - points[1].y <= 0) {
	    // 当顶点在零点之下
	    y = box.maxY;
	  } else {
	    y = box.minY;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr('transform', [['t', -x, -y], ['s', 1, 0.01], ['t', x, y]]);
	  var endState = {
	    transform: [['t', -x, -y], ['s', 1, 100], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function scaleInX(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var box = shape.getBBox();
	  var points = shape.get('origin').points;
	  var x = void 0;
	  var y = (box.minY + box.maxY) / 2;

	  if (points[0].y - points[1].y > 0) {
	    // 当顶点在零点之下
	    x = box.maxX;
	  } else {
	    x = box.minX;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr({
	    transform: [['t', -x, -y], ['s', 0.01, 1], ['t', x, y]]
	  });
	  var endState = {
	    transform: [['t', -x, -y], ['s', 100, 1], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function lineWidthOut(shape, animateCfg) {
	  var endState = {
	    lineWidth: 0,
	    opacity: 0
	  };
	  var id = shape._id;
	  var index = shape.get('index');
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function zoomIn(shape, animateCfg, coord) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var x = void 0;
	  var y = void 0;
	  if (coord.isPolar && shape.name !== 'point') {
	    x = coord.getCenter().x;
	    y = coord.getCenter().y;
	  } else {
	    var box = shape.getBBox();
	    x = (box.minX + box.maxX) / 2;
	    y = (box.minY + box.maxY) / 2;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  shape.attr({
	    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
	  });
	  var endState = {
	    transform: [['t', -x, -y], ['s', 100, 100], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function zoomOut(shape, animateCfg, coord) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var x = void 0;
	  var y = void 0;
	  if (coord.isPolar && shape.name !== 'point') {
	    x = coord.getCenter().x;
	    y = coord.getCenter().y;
	  } else {
	    var box = shape.getBBox();
	    x = (box.minX + box.maxX) / 2;
	    y = (box.minY + box.maxY) / 2;
	  }
	  var v = [x, y, 1];
	  shape.apply(v);
	  var endState = {
	    transform: [['t', -x, -y], ['s', 0.01, 0.01], ['t', x, y]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function pathIn(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape._id;
	  var index = shape.get('index');
	  var path = PathUtil.pathToAbsolute(shape.attr('path'));
	  shape.attr('path', [path[0]]);
	  var endState = {
	    path: path
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function pathOut(shape, animateCfg) {
	  if (shape.get('type') !== 'path') return;
	  var id = shape._id;
	  var index = shape.get('index');
	  var path = PathUtil.pathToAbsolute(shape.attr('path'));
	  var endState = {
	    path: [path[0]]
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function clipIn(shape, animateCfg, coord, startAngle, endAngle) {
	  var clip = getClip(coord);
	  var canvas = shape.get('canvas');
	  var id = shape._id;
	  var index = shape.get('index');
	  var endState = void 0;
	  if (startAngle) {
	    clip.attr('startAngle', startAngle);
	    clip.attr('endAngle', startAngle);
	    endState = {
	      endAngle: endAngle
	    };
	  } else {
	    endState = clip.endState;
	  }
	  clip.set('canvas', canvas);
	  shape.attr('clip', clip);
	  shape.setSilent('animating', true);
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  clip.animate(endState, animateParam.duration, animateParam.easing, function () {
	    if (shape && !shape.get('destroyed')) {
	      shape.attr('clip', null);
	      shape.setSilent('cacheShape', null);
	      shape.setSilent('animating', false);
	      clip.remove();
	    }
	  }, animateParam.delay);
	}

	function fadeIn(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var fillOpacity = Util.isNil(shape.attr('fillOpacity')) ? 1 : shape.attr('fillOpacity');
	  var strokeOpacity = Util.isNil(shape.attr('strokeOpacity')) ? 1 : shape.attr('strokeOpacity');
	  shape.attr('fillOpacity', 0);
	  shape.attr('strokeOpacity', 0);
	  var endState = {
	    fillOpacity: fillOpacity,
	    strokeOpacity: strokeOpacity
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, animateParam.callback, animateParam.delay);
	}

	function fadeOut(shape, animateCfg) {
	  var id = shape._id;
	  var index = shape.get('index');
	  var endState = {
	    fillOpacity: 0,
	    strokeOpacity: 0
	  };
	  var animateParam = getAnimateParam(animateCfg, index, id, endState);
	  shape.animate(endState, animateParam.duration, animateParam.easing, function () {
	    shape.remove();
	  }, animateParam.delay);
	}

	function fanIn(shape, animateCfg, coord) {
	  var angle = getAngle(shape, coord);
	  var endAngle = angle.endAngle;
	  var startAngle = angle.startAngle;
	  clipIn(shape, animateCfg, coord, startAngle, endAngle);
	}

	// 默认动画库
	module.exports = {
	  enter: {
	    clipIn: clipIn,
	    zoomIn: zoomIn,
	    pathIn: pathIn,
	    scaleInY: scaleInY,
	    scaleInX: scaleInX,
	    fanIn: fanIn,
	    fadeIn: fadeIn
	  },
	  leave: {
	    lineWidthOut: lineWidthOut,
	    zoomOut: zoomOut,
	    pathOut: pathOut,
	    fadeOut: fadeOut
	  },
	  appear: {
	    clipIn: clipIn,
	    zoomIn: zoomIn,
	    pathIn: pathIn,
	    scaleInY: scaleInY,
	    scaleInX: scaleInX,
	    fanIn: fanIn,
	    fadeIn: fadeIn
	  },
	  update: {
	    fadeIn: fadeIn,
	    fanIn: fanIn
	  }
	};

	/***/ }),
	/* 271 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	/*!
	 * EventEmitter v5.1.0 - git.io/ee
	 * Unlicense - http://unlicense.org/
	 * Oliver Caldwell - http://oli.me.uk/
	 * @preserve
	 */

	;(function (exports) {
	    'use strict';

	    /**
	     * Class for managing events.
	     * Can be extended to provide event functionality in other classes.
	     *
	     * @class EventEmitter Manages event registering and emitting.
	     */

	    function EventEmitter() {}

	    // Shortcuts to improve speed and size
	    var proto = EventEmitter.prototype;
	    var originalGlobalValue = exports.EventEmitter;

	    /**
	     * Finds the index of the listener for the event in its storage array.
	     *
	     * @param {Function[]} listeners Array of listeners to search through.
	     * @param {Function} listener Method to look for.
	     * @return {Number} Index of the specified listener, -1 if not found
	     * @api private
	     */
	    function indexOfListener(listeners, listener) {
	        var i = listeners.length;
	        while (i--) {
	            if (listeners[i].listener === listener) {
	                return i;
	            }
	        }

	        return -1;
	    }

	    /**
	     * Alias a method while keeping the context correct, to allow for overwriting of target method.
	     *
	     * @param {String} name The name of the target method.
	     * @return {Function} The aliased method
	     * @api private
	     */
	    function alias(name) {
	        return function aliasClosure() {
	            return this[name].apply(this, arguments);
	        };
	    }

	    /**
	     * Returns the listener array for the specified event.
	     * Will initialise the event object and listener arrays if required.
	     * Will return an object if you use a regex search. The object contains keys for each matched event. So /ba[rz]/ might return an object containing bar and baz. But only if you have either defined them with defineEvent or added some listeners to them.
	     * Each property in the object response is an array of listener functions.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Function[]|Object} All listener functions for the event.
	     */
	    proto.getListeners = function getListeners(evt) {
	        var events = this._getEvents();
	        var response;
	        var key;

	        // Return a concatenated array of all matching events if
	        // the selector is a regular expression.
	        if (evt instanceof RegExp) {
	            response = {};
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    response[key] = events[key];
	                }
	            }
	        } else {
	            response = events[evt] || (events[evt] = []);
	        }

	        return response;
	    };

	    /**
	     * Takes a list of listener objects and flattens it into a list of listener functions.
	     *
	     * @param {Object[]} listeners Raw listener objects.
	     * @return {Function[]} Just the listener functions.
	     */
	    proto.flattenListeners = function flattenListeners(listeners) {
	        var flatListeners = [];
	        var i;

	        for (i = 0; i < listeners.length; i += 1) {
	            flatListeners.push(listeners[i].listener);
	        }

	        return flatListeners;
	    };

	    /**
	     * Fetches the requested listeners via getListeners but will always return the results inside an object. This is mainly for internal use but others may find it useful.
	     *
	     * @param {String|RegExp} evt Name of the event to return the listeners from.
	     * @return {Object} All listener functions for an event in an object.
	     */
	    proto.getListenersAsObject = function getListenersAsObject(evt) {
	        var listeners = this.getListeners(evt);
	        var response;

	        if (listeners instanceof Array) {
	            response = {};
	            response[evt] = listeners;
	        }

	        return response || listeners;
	    };

	    function isValidListener(listener) {
	        if (typeof listener === 'function' || listener instanceof RegExp) {
	            return true;
	        } else if (listener && (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object') {
	            return isValidListener(listener.listener);
	        } else {
	            return false;
	        }
	    }

	    /**
	     * Adds a listener function to the specified event.
	     * The listener will not be added if it is a duplicate.
	     * If the listener returns true then it will be removed after it is called.
	     * If you pass a regular expression as the event name then the listener will be added to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListener = function addListener(evt, listener) {
	        if (!isValidListener(listener)) {
	            throw new TypeError('listener must be a function');
	        }

	        var listeners = this.getListenersAsObject(evt);
	        var listenerIsWrapped = (typeof listener === 'undefined' ? 'undefined' : _typeof(listener)) === 'object';
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key) && indexOfListener(listeners[key], listener) === -1) {
	                listeners[key].push(listenerIsWrapped ? listener : {
	                    listener: listener,
	                    once: false
	                });
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of addListener
	     */
	    proto.on = alias('addListener');

	    /**
	     * Semi-alias of addListener. It will add a listener that will be
	     * automatically removed after its first execution.
	     *
	     * @param {String|RegExp} evt Name of the event to attach the listener to.
	     * @param {Function} listener Method to be called when the event is emitted. If the function returns true then it will be removed after calling.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addOnceListener = function addOnceListener(evt, listener) {
	        return this.addListener(evt, {
	            listener: listener,
	            once: true
	        });
	    };

	    /**
	     * Alias of addOnceListener.
	     */
	    proto.once = alias('addOnceListener');

	    /**
	     * Defines an event name. This is required if you want to use a regex to add a listener to multiple events at once. If you don't do this then how do you expect it to know what event to add to? Should it just add to every possible match for a regex? No. That is scary and bad.
	     * You need to tell it what event names should be matched by a regex.
	     *
	     * @param {String} evt Name of the event to create.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvent = function defineEvent(evt) {
	        this.getListeners(evt);
	        return this;
	    };

	    /**
	     * Uses defineEvent to define multiple events.
	     *
	     * @param {String[]} evts An array of event names to define.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.defineEvents = function defineEvents(evts) {
	        for (var i = 0; i < evts.length; i += 1) {
	            this.defineEvent(evts[i]);
	        }
	        return this;
	    };

	    /**
	     * Removes a listener function from the specified event.
	     * When passed a regular expression as the event name, it will remove the listener from all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to remove the listener from.
	     * @param {Function} listener Method to remove from the event.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListener = function removeListener(evt, listener) {
	        var listeners = this.getListenersAsObject(evt);
	        var index;
	        var key;

	        for (key in listeners) {
	            if (listeners.hasOwnProperty(key)) {
	                index = indexOfListener(listeners[key], listener);

	                if (index !== -1) {
	                    listeners[key].splice(index, 1);
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of removeListener
	     */
	    proto.off = alias('removeListener');

	    /**
	     * Adds listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can add to multiple events at once. The object should contain key value pairs of events and listeners or listener arrays. You can also pass it an event name and an array of listeners to be added.
	     * You can also pass it a regular expression to add the array of listeners to all events that match it.
	     * Yeah, this function does quite a bit. That's probably a bad thing.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add to multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.addListeners = function addListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(false, evt, listeners);
	    };

	    /**
	     * Removes listeners in bulk using the manipulateListeners method.
	     * If you pass an object as the second argument you can remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be removed.
	     * You can also pass it a regular expression to remove the listeners from all events that match it.
	     *
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeListeners = function removeListeners(evt, listeners) {
	        // Pass through to manipulateListeners
	        return this.manipulateListeners(true, evt, listeners);
	    };

	    /**
	     * Edits listeners in bulk. The addListeners and removeListeners methods both use this to do their job. You should really use those instead, this is a little lower level.
	     * The first argument will determine if the listeners are removed (true) or added (false).
	     * If you pass an object as the second argument you can add/remove from multiple events at once. The object should contain key value pairs of events and listeners or listener arrays.
	     * You can also pass it an event name and an array of listeners to be added/removed.
	     * You can also pass it a regular expression to manipulate the listeners of all events that match it.
	     *
	     * @param {Boolean} remove True if you want to remove listeners, false if you want to add.
	     * @param {String|Object|RegExp} evt An event name if you will pass an array of listeners next. An object if you wish to add/remove from multiple events at once.
	     * @param {Function[]} [listeners] An optional array of listener functions to add/remove.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.manipulateListeners = function manipulateListeners(remove, evt, listeners) {
	        var i;
	        var value;
	        var single = remove ? this.removeListener : this.addListener;
	        var multiple = remove ? this.removeListeners : this.addListeners;

	        // If evt is an object then pass each of its properties to this method
	        if ((typeof evt === 'undefined' ? 'undefined' : _typeof(evt)) === 'object' && !(evt instanceof RegExp)) {
	            for (i in evt) {
	                if (evt.hasOwnProperty(i) && (value = evt[i])) {
	                    // Pass the single listener straight through to the singular method
	                    if (typeof value === 'function') {
	                        single.call(this, i, value);
	                    } else {
	                        // Otherwise pass back to the multiple function
	                        multiple.call(this, i, value);
	                    }
	                }
	            }
	        } else {
	            // So evt must be a string
	            // And listeners must be an array of listeners
	            // Loop over it and pass each one to the multiple method
	            i = listeners.length;
	            while (i--) {
	                single.call(this, evt, listeners[i]);
	            }
	        }

	        return this;
	    };

	    /**
	     * Removes all listeners from a specified event.
	     * If you do not specify an event then all listeners will be removed.
	     * That means every event will be emptied.
	     * You can also pass a regex to remove all events that match it.
	     *
	     * @param {String|RegExp} [evt] Optional name of the event to remove all listeners for. Will remove from every event if not passed.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.removeEvent = function removeEvent(evt) {
	        var type = typeof evt === 'undefined' ? 'undefined' : _typeof(evt);
	        var events = this._getEvents();
	        var key;

	        // Remove different things depending on the state of evt
	        if (type === 'string') {
	            // Remove all listeners for the specified event
	            delete events[evt];
	        } else if (evt instanceof RegExp) {
	            // Remove all events matching the regex.
	            for (key in events) {
	                if (events.hasOwnProperty(key) && evt.test(key)) {
	                    delete events[key];
	                }
	            }
	        } else {
	            // Remove all listeners in all events
	            delete this._events;
	        }

	        return this;
	    };

	    /**
	     * Alias of removeEvent.
	     *
	     * Added to mirror the node API.
	     */
	    proto.removeAllListeners = alias('removeEvent');

	    /**
	     * Emits an event of your choice.
	     * When emitted, every listener attached to that event will be executed.
	     * If you pass the optional argument array then those arguments will be passed to every listener upon execution.
	     * Because it uses `apply`, your array of arguments will be passed as if you wrote them out separately.
	     * So they will not arrive within the array on the other side, they will be separate.
	     * You can also pass a regular expression to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {Array} [args] Optional array of arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emitEvent = function emitEvent(evt, args) {
	        var listenersMap = this.getListenersAsObject(evt);
	        var listeners;
	        var listener;
	        var i;
	        var key;
	        var response;

	        for (key in listenersMap) {
	            if (listenersMap.hasOwnProperty(key)) {
	                listeners = listenersMap[key].slice(0);

	                for (i = 0; i < listeners.length; i++) {
	                    // If the listener returns true then it shall be removed from the event
	                    // The function is executed either with a basic call or an apply if there is an args array
	                    listener = listeners[i];

	                    if (listener.once === true) {
	                        this.removeListener(evt, listener.listener);
	                    }

	                    response = listener.listener.apply(this, args || []);

	                    if (response === this._getOnceReturnValue()) {
	                        this.removeListener(evt, listener.listener);
	                    }
	                }
	            }
	        }

	        return this;
	    };

	    /**
	     * Alias of emitEvent
	     */
	    proto.trigger = alias('emitEvent');

	    /**
	     * Subtly different from emitEvent in that it will pass its arguments on to the listeners, as opposed to taking a single array of arguments to pass on.
	     * As with emitEvent, you can pass a regex in place of the event name to emit to all events that match it.
	     *
	     * @param {String|RegExp} evt Name of the event to emit and execute listeners for.
	     * @param {...*} Optional additional arguments to be passed to each listener.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.emit = function emit(evt) {
	        var args = Array.prototype.slice.call(arguments, 1);
	        return this.emitEvent(evt, args);
	    };

	    /**
	     * Sets the current value to check against when executing listeners. If a
	     * listeners return value matches the one set here then it will be removed
	     * after execution. This value defaults to true.
	     *
	     * @param {*} value The new value to check for when executing listeners.
	     * @return {Object} Current instance of EventEmitter for chaining.
	     */
	    proto.setOnceReturnValue = function setOnceReturnValue(value) {
	        this._onceReturnValue = value;
	        return this;
	    };

	    /**
	     * Fetches the current value to check against when executing listeners. If
	     * the listeners return value matches this one then it should be removed
	     * automatically. It will return true by default.
	     *
	     * @return {*|Boolean} The current value to check for or the default, true.
	     * @api private
	     */
	    proto._getOnceReturnValue = function _getOnceReturnValue() {
	        if (this.hasOwnProperty('_onceReturnValue')) {
	            return this._onceReturnValue;
	        } else {
	            return true;
	        }
	    };

	    /**
	     * Fetches the events object and creates one if required.
	     *
	     * @return {Object} The events storage object.
	     * @api private
	     */
	    proto._getEvents = function _getEvents() {
	        return this._events || (this._events = {});
	    };

	    /**
	     * Reverts the global {@link EventEmitter} to its previous value and returns a reference to this version.
	     *
	     * @return {Function} Non conflicting EventEmitter class.
	     */
	    EventEmitter.noConflict = function noConflict() {
	        exports.EventEmitter = originalGlobalValue;
	        return EventEmitter;
	    };

	    // Expose the class either via AMD, CommonJS or the global object
	    if (true) {
	        !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
	            return EventEmitter;
	        }).call(exports, __webpack_require__, exports, module),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	    } else if ((typeof module === 'undefined' ? 'undefined' : _typeof(module)) === 'object' && module.exports) {
	        module.exports = EventEmitter;
	    } else {
	        exports.EventEmitter = EventEmitter;
	    }
	})(this || {});

	/***/ }),
	/* 272 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the color attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var ColorUtil = __webpack_require__(63);
	var Base = __webpack_require__(15);
	var Util = __webpack_require__(0);

	/**
	 * 视觉通道 color
	 * @class Attr.Color
	 */

	var Color = function (_Base) {
	  _inherits(Color, _Base);

	  function Color(cfg) {
	    _classCallCheck(this, Color);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['color'];
	    _this.type = 'color';
	    _this.gradient = null;
	    if (Util.isString(_this.values)) {
	      _this.linear = true;
	    }
	    return _this;
	  }

	  /**
	   * @override
	   */


	  Color.prototype.getLinearValue = function getLinearValue(percent) {
	    var gradient = this.gradient;
	    if (!gradient) {
	      var values = this.values;
	      gradient = ColorUtil.gradient(values);
	      this.gradient = gradient;
	    }
	    return gradient(percent);
	  };

	  return Color;
	}(Base);

	module.exports = Color;

	/***/ }),
	/* 273 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the size attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 size
	 * @class Attr.Size
	 */

	var Size = function (_Base) {
	  _inherits(Size, _Base);

	  function Size(cfg) {
	    _classCallCheck(this, Size);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['size'];
	    _this.type = 'size';
	    _this.gradient = null;
	    return _this;
	  }

	  return Size;
	}(Base);

	module.exports = Size;

	/***/ }),
	/* 274 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the opacity attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 Opacity
	 * @class Attr.Opacity
	 */

	var Opacity = function (_Base) {
	  _inherits(Opacity, _Base);

	  function Opacity(cfg) {
	    _classCallCheck(this, Opacity);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['opacity'];
	    _this.type = 'opacity';
	    _this.gradient = null;
	    return _this;
	  }

	  return Opacity;
	}(Base);

	module.exports = Opacity;

	/***/ }),
	/* 275 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the shape attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Base = __webpack_require__(15);

	/**
	 * 视觉通道 Shape
	 * @class Attr.Shape
	 */

	var Shape = function (_Base) {
	  _inherits(Shape, _Base);

	  function Shape(cfg) {
	    _classCallCheck(this, Shape);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['shape'];
	    _this.type = 'shape';
	    _this.gradient = null;
	    return _this;
	  }

	  /**
	   * @override
	   */


	  Shape.prototype.getLinearValue = function getLinearValue(percent) {
	    var values = this.values;
	    var index = Math.round((values.length - 1) * percent);
	    return values[index];
	  };

	  return Shape;
	}(Base);

	module.exports = Shape;

	/***/ }),
	/* 276 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the position attribute of core
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Base = __webpack_require__(15);

	var Position = function (_Base) {
	  _inherits(Position, _Base);

	  function Position(cfg) {
	    _classCallCheck(this, Position);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this.names = ['x', 'y'];
	    _this.type = 'position';
	    return _this;
	  }

	  Position.prototype.mapping = function mapping(x, y) {
	    var scales = this.scales;
	    var coord = this.coord;
	    var scaleX = scales[0];
	    var scaleY = scales[1];
	    var rstX = void 0;
	    var rstY = void 0;
	    var obj = void 0;
	    if (Util.isNil(x) || Util.isNil(y)) {
	      return [];
	    }
	    if (Util.isArray(y) && Util.isArray(x)) {
	      rstX = [];
	      rstY = [];
	      for (var i = 0, j = 0; i < x.length && j < y.length; i++, j++) {
	        obj = coord.convertPoint({
	          x: scaleX.scale(x[i]),
	          y: scaleY.scale(y[j])
	        });
	        rstX.push(obj.x);
	        rstY.push(obj.y);
	      }
	    } else if (Util.isArray(y)) {
	      x = scaleX.scale(x);
	      rstY = [];
	      Util.each(y, function (yVal) {
	        yVal = scaleY.scale(yVal);
	        obj = coord.convertPoint({
	          x: x,
	          y: yVal
	        });
	        if (rstX && rstX !== obj.x) {
	          if (!Util.isArray(rstX)) {
	            rstX = [rstX];
	          }
	          rstX.push(obj.x);
	        } else {
	          rstX = obj.x;
	        }
	        rstY.push(obj.y);
	      });
	    } else if (Util.isArray(x)) {
	      y = scaleY.scale(y);
	      rstX = [];
	      Util.each(x, function (xVal) {
	        xVal = scaleX.scale(xVal);
	        obj = coord.convertPoint({
	          x: xVal,
	          y: y
	        });
	        if (rstY && rstY !== obj.y) {
	          if (!Util.isArray(rstY)) {
	            rstY = [rstY];
	          }
	          rstY.push(obj.y);
	        } else {
	          rstY = obj.y;
	        }
	        rstX.push(obj.x);
	      });
	    } else {
	      x = scaleX.scale(x);
	      y = scaleY.scale(y);
	      var point = coord.convertPoint({
	        x: x,
	        y: y
	      });
	      rstX = point.x;
	      rstY = point.y;
	    }
	    return [rstX, rstY];
	  };

	  return Position;
	}(Base);

	module.exports = Position;

	/***/ }),
	/* 277 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Theme entry
	 * @author sima.zhang
	 */
	var Theme = {
	  default: __webpack_require__(98),
	  dark: __webpack_require__(278)
	};

	module.exports = Theme;

	/***/ }),
	/* 278 */
	/***/ (function(module, exports, __webpack_require__) {

	var _html, _tooltip;

	/**
	 * @fileOverview G2 3.0 dark theme
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var BasicTheme = __webpack_require__(98);

	// tooltip 相关 dom 的 css 类名
	var TOOLTIP_CONTAINER_CLASS = 'g2-tooltip';
	var LEGEND_CONTAINER_CLASS = 'g2-legend';

	var DarkTheme = Util.deepMix({}, BasicTheme, {
	  background: {
	    fill: '#1F1F1F',
	    radius: 2
	  }, // 容器区域
	  plotBackground: {
	    fill: '#1F1F1F'
	  }, // 绘图区域
	  axis: {
	    top: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    },
	    bottom: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    },
	    left: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    right: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    circle: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    radius: {
	      label: {
	        textStyle: {
	          fill: '#A6A6A6'
	        }
	      },
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      },
	      grid: {
	        lineStyle: {
	          stroke: '#404040'
	        }
	      }
	    },
	    helix: {
	      line: {
	        stroke: '#737373'
	      },
	      tickLine: {
	        stroke: '#737373'
	      }
	    }
	  },
	  label: {
	    textStyle: {
	      fill: '#A6A6A6'
	    }
	  },
	  legend: {
	    right: {
	      textStyle: {
	        fill: '#737373'
	      },
	      unCheckColor: '#bfbfbf'
	    },
	    left: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    top: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    bottom: {
	      textStyle: {
	        fill: '#737373'
	      }, // 图例项文本的样式
	      unCheckColor: '#bfbfbf'
	    },
	    html: (_html = {}, _html['' + LEGEND_CONTAINER_CLASS] = {
	      color: '#D9D9D9'
	    }, _html),
	    gradient: {
	      textStyle: {
	        fill: '#D9D9D9'
	      },
	      lineStyle: {
	        stroke: '#404040'
	      }
	    }
	  },
	  tooltip: (_tooltip = {}, _tooltip['' + TOOLTIP_CONTAINER_CLASS] = {
	    color: '#D9D9D9'
	  }, _tooltip),
	  tooltipCrosshairsRect: {
	    type: 'rect',
	    style: {
	      fill: '#fff',
	      opacity: 0.1
	    }
	  }, // tooltip 辅助背景框样式
	  tooltipCrosshairsLine: {
	    style: {
	      stroke: 'rgba(255, 255, 255, 0.45)'
	    }
	  },
	  guide: {
	    line: {
	      text: {
	        style: {
	          fill: '#A6A6A6'
	        }
	      }
	    },
	    text: {
	      style: {
	        fill: '#A6A6A6'
	      }
	    },
	    region: {
	      // TODO
	      style: {
	        lineWidth: 0, // 辅助框的边框宽度
	        fill: '#000', // 辅助框填充的颜色
	        fillOpacity: 0.04 // 辅助框的背景透明度
	        // 辅助框的图形样式属性
	      } }
	  }
	});

	module.exports = DarkTheme;

	/***/ }),
	/* 279 */
	/***/ (function(module, exports, __webpack_require__) {


	var Adjust = __webpack_require__(21);
	Adjust.Stack = __webpack_require__(280);
	Adjust.Jitter = __webpack_require__(281);
	Adjust.Symmetric = __webpack_require__(282);
	Adjust.Dodge = __webpack_require__(283);

	module.exports = Adjust;

	/***/ }),
	/* 280 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The extension function of stack ,which mixin to geom
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Stack
	 */

	var Stack = function (_Adjust) {
	  _inherits(Stack, _Adjust);

	  function Stack() {
	    _classCallCheck(this, Stack);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Stack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      /**
	       * 仅有一个维度调整时，总的高度
	       * @type {Number}
	       */
	      height: null,
	      /**
	       * 单个点的大小
	       * @type {Number}
	       */
	      size: 10,
	      /**
	       * 是否反序进行层叠
	       * @type {Boolean}
	       */
	      reverseOrder: false,

	      /**
	       * @override
	       */
	      adjustNames: ['y'] // Only support stack y
	    });
	  };

	  Stack.prototype.processOneDimStack = function processOneDimStack(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField || 'y';
	    var height = self.height;

	    var stackY = {};
	    // 如果层叠的顺序翻转
	    if (self.reverseOrder) {
	      dataArray = dataArray.slice(0).reverse();
	    }
	    for (var i = 0; i < dataArray.length; i++) {
	      // var preY = stackHeight;
	      var data = dataArray[i];
	      // cates
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var size = item.size || self.size;
	        var stackHeight = size * 2 / height;
	        var x = item[xField];
	        if (!stackY[x]) {
	          stackY[x] = stackHeight / 2;
	        }
	        item[yField] = stackY[x];
	        stackY[x] += stackHeight;
	      }
	    }
	  };

	  Stack.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    if (self.yField) {
	      self.processStack(dataArray);
	    } else {
	      self.processOneDimStack(dataArray);
	    }
	  };

	  Stack.prototype.processStack = function processStack(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField;
	    var count = dataArray.length;
	    var stackCache = {
	      positive: {},
	      negative: {}
	    };
	    // 层叠顺序翻转
	    if (self.reverseOrder) {
	      dataArray = dataArray.slice(0).reverse();
	    }
	    for (var i = 0; i < count; i++) {
	      var data = dataArray[i];
	      for (var j = 0; j < data.length; j++) {
	        var item = data[j];
	        var x = item[xField] || 0;
	        var y = item[yField] || 0;
	        var xkey = x.toString();
	        y = Util.isArray(y) ? y[1] : y;
	        var direction = y >= 0 ? 'positive' : 'negative';
	        if (!stackCache[direction][xkey]) {
	          stackCache[direction][xkey] = 0;
	        }
	        item[yField] = [stackCache[direction][xkey], y + stackCache[direction][xkey]];
	        stackCache[direction][xkey] += y;
	      }
	    }
	  };

	  return Stack;
	}(Adjust);

	module.exports = Stack;

	/***/ }),
	/* 281 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Repositions graphic elements randomly using a normal or uniform distribution
	 * @author dxq613@gmail.com
	 * reference: http://www-01.ibm.com/support/knowledgecenter/SSLVMB_21.0.0/com.ibm.spss.statistics.help/gpl_statement_element_jitter.htm
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Jitter
	 */

	var Jitter = function (_Adjust) {
	  _inherits(Jitter, _Adjust);

	  function Jitter() {
	    _classCallCheck(this, Jitter);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Jitter.prototype.getAdjustOffset = function getAdjustOffset(pre, next) {
	    var r = Math.random(); // 随机位置，均匀分布
	    var avg = next - pre; // * length
	    var append = avg * 0.05;
	    return pre + append + avg * 0.9 * r;
	  };

	  // adjust group data


	  Jitter.prototype._adjustGroup = function _adjustGroup(group, dim, key, values) {
	    var self = this;
	    var range = self.getAdjustRange(dim, key, values);

	    Util.each(group, function (record) {
	      record[dim] = self.getAdjustOffset(range.pre, range.next); // 获取调整的位置
	    });
	  };

	  Jitter.prototype.adjustDim = function adjustDim(dim, values, data) {
	    var self = this;
	    var groupData = self.groupData(data, dim);
	    Util.each(groupData, function (group, key) {
	      key = parseFloat(key);
	      self._adjustGroup(group, dim, key, values);
	    });
	  };

	  return Jitter;
	}(Adjust);

	module.exports = Jitter;

	/***/ }),
	/* 282 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The extension function of symmetric ,which mixin to geom
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);

	/**
	 * 数据调整的基类
	 * @class Adjust.Symmetric
	 */

	var Symmetric = function (_Adjust) {
	  _inherits(Symmetric, _Adjust);

	  function Symmetric() {
	    _classCallCheck(this, Symmetric);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Symmetric.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      // 缓存的最大值
	      cacheMax: null,
	      /**
	       * @override
	       */
	      adjustNames: ['y'] // Only support stack y
	    });
	  };
	  // 获取最大的y值


	  Symmetric.prototype._getMax = function _getMax(dim) {
	    var self = this;
	    var mergeData = self.mergeData;
	    var maxRecord = Util.maxBy(mergeData, function (obj) {
	      var value = obj[dim];
	      if (Util.isArray(value)) {
	        return Math.max.apply(null, value);
	      }
	      return value;
	    });
	    var maxValue = maxRecord[dim];
	    var max = Util.isArray(maxValue) ? Math.max.apply(null, maxValue) : maxValue;
	    return max;
	  };

	  // 获取每个字段最大的值


	  Symmetric.prototype._getXValuesMax = function _getXValuesMax() {
	    var self = this;
	    var yField = self.yField;
	    var xField = self.xField;
	    var cache = {};
	    var mergeData = self.mergeData;
	    Util.each(mergeData, function (obj) {
	      var xValue = obj[xField];
	      var yValue = obj[yField];
	      var max = Util.isArray(yValue) ? Math.max.apply(null, yValue) : yValue;
	      cache[xValue] = cache[xValue] || 0;
	      if (cache[xValue] < max) {
	        cache[xValue] = max;
	      }
	    });
	    return cache;
	  };

	  // 入口函数


	  Symmetric.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);
	    self.mergeData = mergeData;
	    self._processSymmetric(dataArray);
	    self.mergeData = null;
	  };

	  // 处理对称


	  Symmetric.prototype._processSymmetric = function _processSymmetric(dataArray) {
	    var self = this;
	    var xField = self.xField;
	    var yField = self.yField;
	    var max = self._getMax(yField);
	    var first = dataArray[0][0];

	    var cache = void 0;
	    if (first && Util.isArray(first[yField])) {
	      cache = self._getXValuesMax();
	    }
	    Util.each(dataArray, function (data) {
	      Util.each(data, function (obj) {
	        var value = obj[yField];
	        var offset = void 0;
	        if (Util.isArray(value)) {
	          var xValue = obj[xField];
	          var valueMax = cache[xValue];
	          offset = (max - valueMax) / 2;
	          var tmp = [];
	          /* eslint-disable no-loop-func */
	          Util.each(value, function (subVal) {
	            // 多个字段
	            tmp.push(offset + subVal);
	          });
	          /* eslint-enable no-loop-func */
	          obj[yField] = tmp;
	        } else {
	          offset = (max - value) / 2;
	          obj[yField] = [offset, value + offset];
	        }
	      });
	    });
	  };

	  return Symmetric;
	}(Adjust);

	module.exports = Symmetric;

	/***/ }),
	/* 283 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Moves graphic elements next to other graphic elements that appear at the same value, rather than superimposing them.
	 * @fileOverview dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Adjust = __webpack_require__(21);
	var Global = __webpack_require__(2);
	/**
	 * 数据调整的基类
	 * @class Adjust.Dodge
	 */

	var Dodge = function (_Adjust) {
	  _inherits(Dodge, _Adjust);

	  function Dodge() {
	    _classCallCheck(this, Dodge);

	    return _possibleConstructorReturn(this, _Adjust.apply(this, arguments));
	  }

	  Dodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Adjust.prototype.getDefaultCfg.call(this);
	    return Util.assign(cfg, {
	      /**
	       * 调整过程中,2个数据的间距
	       * @type {Number}
	       */
	      marginRatio: 1 / 2,

	      /**
	       * 调整占单位宽度的比例,例如：占2个分类间距的 1/2
	       * @type {Number}
	       */
	      dodgeRatio: Global.widthRatio.column,

	      dodgeBy: null
	    });
	  };

	  /**
	   * @protected
	   * @override
	   */


	  Dodge.prototype.processAdjust = function processAdjust(dataArray) {
	    var self = this;
	    var mergeData = Util.Array.merge(dataArray);
	    var dodgeDim = self.dodgeBy;
	    var adjDataArray = dataArray;
	    if (dodgeDim) {
	      // 如果指定了分组dim的字段
	      adjDataArray = Util.Array.group(mergeData, dodgeDim);
	    }
	    self.cacheMap = {};
	    self.adjDataArray = adjDataArray;
	    self.mergeData = mergeData;
	    self.adjustData(adjDataArray, mergeData);

	    self.adjDataArray = null;
	    self.mergeData = null;
	  };

	  Dodge.prototype.getDistribution = function getDistribution(dim) {
	    var self = this;
	    var dataArray = self.adjDataArray;
	    var cacheMap = self.cacheMap;
	    var map = cacheMap[dim];
	    if (!map) {
	      map = {};
	      Util.each(dataArray, function (data, index) {
	        var values = Util.Array.values(data, dim);
	        if (!values.length) {
	          values.push(0);
	        }
	        Util.each(values, function (val) {
	          if (!map[val]) {
	            map[val] = [];
	          }
	          map[val].push(index);
	        });
	      });
	      cacheMap[dim] = map;
	    }

	    return map;
	  };

	  Dodge.prototype.adjustDim = function adjustDim(dim, values, data, frameCount, frameIndex) {
	    var self = this;
	    var map = self.getDistribution(dim);
	    var groupData = self.groupData(data, dim); // 根据值分组

	    Util.each(groupData, function (group, key) {
	      key = parseFloat(key);
	      var range = void 0;
	      if (values.length === 1) {
	        range = {
	          pre: values[0] - 1,
	          next: values[0] + 1
	        };
	      } else {
	        range = self.getAdjustRange(dim, key, values);
	      }
	      Util.each(group, function (record) {
	        var value = record[dim];
	        var valueArr = map[value];
	        var valIndex = valueArr.indexOf(frameIndex);
	        record[dim] = self.getDodgeOffset(range, valIndex, valueArr.length);
	      });
	    });
	  };

	  Dodge.prototype.getDodgeOffset = function getDodgeOffset(range, index, count) {
	    var self = this;
	    var pre = range.pre;
	    var next = range.next;
	    var tickLength = next - pre;
	    var dodgeRatio = self.dodgeRatio;
	    var width = tickLength * dodgeRatio / count;
	    var margin = self.marginRatio * width;
	    var offset = 1 / 2 * (tickLength - count * width - (count - 1) * margin) + ((index + 1) * width + index * margin) - 1 / 2 * width - 1 / 2 * tickLength;
	    return (pre + next) / 2 + offset;
	  };

	  return Dodge;
	}(Adjust);

	module.exports = Dodge;

	/***/ }),
	/* 284 */
	/***/ (function(module, exports, __webpack_require__) {

	var GeomLabels = __webpack_require__(99);
	var PolarLabels = __webpack_require__(102);
	var PieLabels = __webpack_require__(287);

	var Labels = {
	  getLabelsClass: function getLabelsClass(coordType) {
	    var rst = GeomLabels;
	    if (coordType === 'polar') {
	      rst = PolarLabels;
	    } else if (coordType === 'theta') {
	      // pie chart
	      rst = PieLabels;
	    }
	    return rst;
	  }
	};

	module.exports = Labels;

	/***/ }),
	/* 285 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The class that performs label rendering
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Labels = __webpack_require__(101);

	module.exports = {
	  renderLabels: function renderLabels() {
	    var labelCfg = this.get('label');

	    if (Util.isNil(labelCfg)) {
	      return;
	    }

	    if (Util.isNil(labelCfg.items)) {
	      labelCfg.items = [];
	    }

	    var labelsGroup = this.addGroup(Labels, labelCfg);
	    this.set('labelsGroup', labelsGroup);
	  },
	  resetLabels: function resetLabels(items) {
	    var self = this;
	    var labelCfg = self.get('label');

	    if (!labelCfg) {
	      return;
	    }

	    var labelsGroup = self.get('labelsGroup');
	    var children = labelsGroup.getLabels();
	    var count = children.length;
	    items = items || labelCfg.items;
	    Util.each(items, function (item, index) {
	      if (index < count) {
	        var label = children[index];
	        labelsGroup.changeLabel(label, item);
	      } else {
	        var labelShape = self.addLabel(item.text, item);
	        if (labelShape) {
	          labelShape._id = item._id;
	          labelShape.set('coord', item.coord);
	        }
	      }
	    });
	    for (var i = count - 1; i >= items.length; i--) {
	      children[i].remove();
	    }
	  },
	  addLabel: function addLabel(value, offsetPoint) {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var label = {};
	    var rst = void 0;
	    if (labelsGroup) {
	      label.text = value;
	      label.x = offsetPoint.x;
	      label.y = offsetPoint.y;
	      label.point = offsetPoint;
	      label.textAlign = offsetPoint.textAlign;
	      if (offsetPoint.rotate) {
	        label.rotate = offsetPoint.rotate;
	      }
	      rst = labelsGroup.addLabel(label);
	    }
	    return rst;
	  },
	  removeLabels: function removeLabels() {
	    var labelsGroup = this.get('labelsGroup');
	    labelsGroup && labelsGroup.remove();
	    this.set('labelsGroup', null);
	  }
	};

	/***/ }),
	/* 286 */
	/***/ (function(module, exports, __webpack_require__) {

	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var Vector2 = MatrixUtil.vec2;

	function smoothBezier(points, smooth, isLoop, constraint) {
	  var cps = [];

	  var prevPoint = void 0;
	  var nextPoint = void 0;
	  var hasConstraint = !!constraint;
	  var min = void 0,
	      max = void 0;
	  if (hasConstraint) {
	    min = [Infinity, Infinity];
	    max = [-Infinity, -Infinity];

	    for (var i = 0, l = points.length; i < l; i++) {
	      var point = points[i];
	      min = Vector2.min([], min, point);
	      max = Vector2.max([], max, point);
	    }
	    min = Vector2.min([], min, constraint[0]);
	    max = Vector2.max([], max, constraint[1]);
	  }

	  for (var _i = 0, len = points.length; _i < len; _i++) {
	    var _point = points[_i];
	    if (isLoop) {
	      prevPoint = points[_i ? _i - 1 : len - 1];
	      nextPoint = points[(_i + 1) % len];
	    } else {
	      if (_i === 0 || _i === len - 1) {
	        cps.push(_point);
	        continue;
	      } else {
	        prevPoint = points[_i - 1];
	        nextPoint = points[_i + 1];
	      }
	    }
	    var v = [];
	    v = Vector2.sub(v, nextPoint, prevPoint);
	    v = Vector2.scale(v, v, smooth);

	    var d0 = Vector2.distance(_point, prevPoint);
	    var d1 = Vector2.distance(_point, nextPoint);

	    var sum = d0 + d1;
	    if (sum !== 0) {
	      d0 /= sum;
	      d1 /= sum;
	    }

	    var v1 = Vector2.scale([], v, -d0);
	    var v2 = Vector2.scale([], v, d1);

	    var cp0 = Vector2.add([], _point, v1);
	    var cp1 = Vector2.add([], _point, v2);

	    if (hasConstraint) {
	      cp0 = Vector2.max([], cp0, min);
	      cp0 = Vector2.min([], cp0, max);
	      cp1 = Vector2.max([], cp1, min);
	      cp1 = Vector2.min([], cp1, max);
	    }

	    cps.push(cp0);
	    cps.push(cp1);
	  }

	  if (isLoop) {
	    cps.push(cps.shift());
	  }
	  return cps;
	}

	function catmullRom2bezier(crp, z, constraint) {
	  var isLoop = !!z;

	  var pointList = [];

	  for (var i = 0, l = crp.length; i < l; i += 2) {
	    pointList.push([crp[i], crp[i + 1]]);
	  }

	  var controlPointList = smoothBezier(pointList, 0.4, isLoop, constraint);
	  var len = pointList.length;
	  var d1 = [];

	  var cp1 = void 0;
	  var cp2 = void 0;
	  var p = void 0;

	  for (var _i2 = 0; _i2 < len - 1; _i2++) {
	    cp1 = controlPointList[_i2 * 2];
	    cp2 = controlPointList[_i2 * 2 + 1];
	    p = pointList[_i2 + 1];

	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
	  }

	  if (isLoop) {
	    cp1 = controlPointList[len];
	    cp2 = controlPointList[len + 1];
	    p = pointList[0];

	    d1.push(['C', cp1[0], cp1[1], cp2[0], cp2[1], p[0], p[1]]);
	  }
	  return d1;
	}

	module.exports = {
	  catmullRom2bezier: catmullRom2bezier
	};

	/***/ }),
	/* 287 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var PolarLabels = __webpack_require__(102);
	var PathUtil = __webpack_require__(22);
	var Global = __webpack_require__(2);
	var MARGIN = 5;

	function getEndPoint(center, angle, r) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}

	function antiCollision(labels, lineHeight, plotRange, center, isRight) {
	  // adjust y position of labels to avoid overlapping
	  var overlapping = true;
	  var start = plotRange.start;
	  var end = plotRange.end;
	  var startY = Math.min(start.y, end.y);
	  var totalHeight = Math.abs(start.y - end.y);
	  var i = void 0;

	  var maxY = 0;
	  var minY = Number.MIN_VALUE;
	  var boxes = labels.map(function (label) {
	    if (label.y > maxY) {
	      maxY = label.y;
	    }
	    if (label.y < minY) {
	      minY = label.y;
	    }
	    return {
	      size: lineHeight,
	      targets: [label.y - startY]
	    };
	  });
	  minY -= startY;
	  if (maxY - startY > totalHeight) {
	    totalHeight = maxY - startY;
	  }

	  while (overlapping) {
	    /* eslint no-loop-func: 0 */
	    boxes.forEach(function (box) {
	      var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;
	      box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);
	      // box.pos = Math.max(0, target - box.size / 2);
	    });

	    // detect overlapping and join boxes
	    overlapping = false;
	    i = boxes.length;
	    while (i--) {
	      if (i > 0) {
	        var previousBox = boxes[i - 1];
	        var box = boxes[i];
	        if (previousBox.pos + previousBox.size > box.pos) {
	          // overlapping
	          previousBox.size += box.size;
	          previousBox.targets = previousBox.targets.concat(box.targets);

	          // overflow, shift up
	          if (previousBox.pos + previousBox.size > totalHeight) {
	            previousBox.pos = totalHeight - previousBox.size;
	          }
	          boxes.splice(i, 1); // removing box
	          overlapping = true;
	        }
	      }
	    }
	  }

	  i = 0;
	  // step 4: normalize y and adjust x
	  boxes.forEach(function (b) {
	    var posInCompositeBox = startY + lineHeight / 2; // middle of the label
	    b.targets.forEach(function () {
	      labels[i].y = b.pos + posInCompositeBox;
	      posInCompositeBox += lineHeight;
	      i++;
	    });
	  });

	  // (x - cx)^2 + (y - cy)^2 = totalR^2
	  labels.forEach(function (label) {
	    var rPow2 = label.r * label.r;
	    var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);
	    if (rPow2 < dyPow2) {
	      label.x = center.x;
	    } else {
	      var dx = Math.sqrt(rPow2 - dyPow2);
	      if (!isRight) {
	        // left
	        label.x = center.x - dx;
	      } else {
	        // right
	        label.x = center.x + dx;
	      }
	    }
	  });
	}

	var PieLabels = function (_PolarLabels) {
	  _inherits(PieLabels, _PolarLabels);

	  function PieLabels() {
	    _classCallCheck(this, PieLabels);

	    return _possibleConstructorReturn(this, _PolarLabels.apply(this, arguments));
	  }

	  PieLabels.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      label: Global.thetaLabels
	    };
	  };

	  PieLabels.prototype.getDefaultOffset = function getDefaultOffset() {
	    var labelCfg = this.get('label');
	    var offset = labelCfg.offset || 0;
	    return offset;
	  };

	  /**
	   * @protected
	   * to avoid overlapping
	   * @param {Array} items labels to be placed
	   * @return {Array} items
	   */


	  PieLabels.prototype.adjustItems = function adjustItems(items) {
	    var self = this;
	    var offset = self.getDefaultOffset();
	    if (offset > 0) {
	      items = self._distribute(items, offset);
	    }

	    return items;
	  };

	  /**
	   * @private
	   * distribute labels
	   * @param {Array} labels labels
	   * @param {Number} offset offset
	   * @return {Array} labels
	   */


	  PieLabels.prototype._distribute = function _distribute(labels, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var radius = coord.getRadius();
	    var lineHeight = self.get('label').labelHeight;
	    var center = coord.getCenter();
	    var totalR = radius + offset;
	    var totalHeight = totalR * 2 + lineHeight * 2;
	    var plotRange = {
	      start: coord.start,
	      end: coord.end
	    };
	    var geom = self.get('geom');
	    if (geom) {
	      var view = geom.get('view');
	      plotRange = view.getViewRegion();
	    }

	    // step 1: separate labels
	    var halves = [[], // left
	    [] // right
	    ];
	    labels.forEach(function (label) {
	      if (label.textAlign === 'right') {
	        // left
	        halves[0].push(label);
	      } else {
	        // right or center will be put on the right side
	        halves[1].push(label);
	      }
	    });

	    halves.forEach(function (half, index) {
	      // step 2: reduce labels
	      var maxLabelsCountForOneSide = parseInt(totalHeight / lineHeight, 10);
	      if (half.length > maxLabelsCountForOneSide) {
	        half.sort(function (a, b) {
	          // sort by percentage DESC
	          return b['..percent'] - a['..percent'];
	        });
	        half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);
	      }

	      // step 3: distribute position (x and y)
	      half.sort(function (a, b) {
	        // sort by y ASC
	        return a.y - b.y;
	      });
	      antiCollision(half, lineHeight, plotRange, center, index);
	    });

	    return halves[0].concat(halves[1]);
	  };

	  // 连接线


	  PieLabels.prototype.lineToLabel = function lineToLabel(label, labelLine) {
	    var self = this;
	    var coord = self.get('coord');
	    var r = coord.getRadius();
	    var distance = self.getDefaultOffset();
	    var angle = label.orignAngle || label.angle;
	    var center = coord.getCenter();
	    var start = getEndPoint(center, angle, r + MARGIN / 2);
	    var inner = getEndPoint(center, angle, r + distance / 2);
	    var lineGroup = self.get('lineGroup');
	    // var lineShape;
	    if (!lineGroup) {
	      lineGroup = self.addGroup({
	        elCls: 'x-line-group'
	      });
	      self.set('lineGroup', lineGroup);
	    }
	    // lineShape =
	    var lineShape = lineGroup.addShape('path', {
	      attrs: Util.mix({
	        path: ['M' + start.x, start.y + ' Q' + inner.x, inner.y + ' ' + label.x, label.y].join(','),
	        fill: null,
	        stroke: label.color
	      }, labelLine)
	    });
	    // label 对应线的动画关闭
	    lineShape.name = 'labelLine';
	    lineShape._id = label._id && label._id.replace('glabel', 'glabelline'); // generate labelLine id according to label id
	    lineShape.set('coord', coord);
	  };

	  /**
	   * @protected
	   * get rotation for label
	   * @param {Number} angle angle
	   * @param {Number} offset offset
	   * @return {Number} rotate
	   */


	  PieLabels.prototype.getLabelRotate = function getLabelRotate(angle, offset) {
	    var rotate = void 0;
	    if (offset < 0) {
	      rotate = angle * 180 / Math.PI;
	      if (rotate > 90) {
	        rotate = rotate - 180;
	      }
	      if (rotate < -90) {
	        rotate = rotate + 180;
	      }
	    }
	    return rotate / 180 * Math.PI;
	  };

	  /**
	   * @protected
	   * get text align for label
	   * @param {Object} point point
	   * @return {String} align
	   */


	  PieLabels.prototype.getLabelAlign = function getLabelAlign(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();

	    var align = void 0;
	    if (point.angle <= Math.PI / 2 && point.x >= center.x) {
	      align = 'left';
	    } else {
	      align = 'right';
	    }

	    var offset = self.getDefaultOffset();
	    if (offset <= 0) {
	      if (align === 'right') {
	        align = 'left';
	      } else {
	        align = 'right';
	      }
	    }
	    return align;
	  };

	  PieLabels.prototype.getArcPoint = function getArcPoint(point) {
	    return point;
	  };

	  PieLabels.prototype.getPointAngle = function getPointAngle(point) {
	    var self = this;
	    var coord = self.get('coord');
	    var startPoint = {
	      x: Util.isArray(point.x) ? point.x[0] : point.x,
	      y: point.y[0]
	    };
	    self.transLabelPoint(startPoint); // 转换到画布坐标，如果坐标系发生改变
	    var endPoint = {
	      x: Util.isArray(point.x) ? point.x[1] : point.x,
	      y: point.y[1]
	    };
	    self.transLabelPoint(endPoint); // 转换到画布坐标，如果坐标系发生改变
	    var angle = void 0;
	    var startAngle = PathUtil.getPointAngle(coord, startPoint);
	    if (point.points && point.points[0].y === point.points[1].y) {
	      angle = startAngle;
	    } else {
	      var endAngle = PathUtil.getPointAngle(coord, endPoint);
	      if (startAngle >= endAngle) {
	        // 100% pie slice
	        endAngle = endAngle + Math.PI * 2;
	      }
	      angle = startAngle + (endAngle - startAngle) / 2;
	    }
	    return angle;
	  };

	  PieLabels.prototype.getCirclePoint = function getCirclePoint(angle, offset) {
	    var self = this;
	    var coord = self.get('coord');
	    var center = coord.getCenter();
	    var r = coord.getRadius() + offset;
	    var point = getEndPoint(center, angle, r);
	    point.angle = angle;
	    point.r = r;
	    return point;
	  };

	  return PieLabels;
	}(PolarLabels);

	module.exports = PieLabels;

	/***/ }),
	/* 288 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The tooltip handler
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(2),
	    defaultColor = _require.defaultColor;

	var FIELD_ORIGIN = '_origin';

	function getScaleName(scale) {
	  return scale.alias || scale.field;
	}

	var TooltipMixin = {
	  _getIntervalSize: function _getIntervalSize(obj) {
	    var size = null;
	    var type = this.get('type');
	    var coord = this.get('coord');
	    if (coord.isRect && (type === 'interval' || type === 'schema')) {
	      size = this.getSize(obj[FIELD_ORIGIN]); // 如果字段发生了映射，宽度计算就会报错

	      var dim = coord.isTransposed ? 'y' : 'x';
	      if (Util.isArray(obj[dim])) {
	        var width = Math.abs(obj[dim][1] - obj[dim][0]);
	        size = size < width ? null : size; // 直方图计算错误
	      }
	    }

	    return size;
	  },
	  _snapEqual: function _snapEqual(v1, v2, scale) {
	    var equals = void 0;
	    v1 = scale.translate(v1);
	    v2 = scale.translate(v2);

	    if (scale.isCategory) {
	      equals = v1 === v2;
	    } else {
	      equals = Util.snapEqual(v1, v2);
	    }
	    return equals;
	  },
	  _getScaleValueByPoint: function _getScaleValueByPoint(point) {
	    var result = 0;
	    var coord = this.get('coord');
	    var xScale = this.getXScale();
	    var invertPoint = coord.invert(point);
	    var xValue = invertPoint.x;

	    if (this.isInCircle() && xValue > (1 + xScale.rangeMax()) / 2) {
	      xValue = xScale.rangeMin(); // 极坐标下，scale 的 range 被做过特殊处理 see view.js#L88
	    }
	    result = xScale.invert(xValue);

	    if (xScale.isCategory) {
	      result = xScale.translate(result); // 防止分类类型
	    }

	    return result;
	  },
	  _getOriginByPoint: function _getOriginByPoint(point) {
	    var xScale = this.getXScale();
	    var yScale = this.getYScale();
	    var xField = xScale.field;
	    var yField = yScale.field;
	    var coord = this.get('coord');
	    var invertPoint = coord.invert(point);
	    var xValue = xScale.invert(invertPoint.x);
	    var yValue = yScale.invert(invertPoint.y);

	    var result = {};
	    result[xField] = xValue;
	    result[yField] = yValue;
	    return result;
	  },
	  _getScale: function _getScale(field) {
	    var self = this;
	    var scales = self.get('scales');
	    var rst = null;

	    Util.each(scales, function (scale) {
	      if (scale.field === field) {
	        rst = scale;
	        return false;
	      }
	    });
	    return rst;
	  },


	  // 获取值对应的度量
	  _getTipValueScale: function _getTipValueScale() {
	    var attrs = this.getAttrsForLegend();
	    var scale = void 0;
	    Util.each(attrs, function (attr) {
	      var tmpScale = attr.getScale(attr.type);
	      if (tmpScale.isLinear) {
	        // 如果指定字段是非position的，同时是连续的
	        scale = tmpScale;
	        return false;
	      }
	    });

	    var xScale = this.getXScale();
	    var yScale = this.getYScale();

	    if (!scale && yScale && yScale.field === '..y') {
	      return xScale;
	    }

	    return scale || yScale || xScale;
	  },
	  _getTipTitleScale: function _getTipTitleScale(titleField) {
	    var self = this;
	    if (titleField) {
	      return self._getScale(titleField);
	    }
	    var position = self.getAttr('position');
	    var fields = position.getFields();
	    var tmpField = void 0;
	    Util.each(fields, function (field) {
	      if (field.indexOf('..') === -1) {
	        tmpField = field;
	        return false;
	      }
	    });
	    return self._getScale(tmpField);
	  },
	  _filterValue: function _filterValue(arr, point) {
	    var coord = this.get('coord');
	    var yScale = this.getYScale();
	    var yField = yScale.field;
	    var invertPoint = coord.invert(point);
	    var yValue = invertPoint.y;
	    yValue = yScale.invert(yValue);
	    var rst = arr[arr.length - 1];

	    Util.each(arr, function (obj) {
	      var origin = obj[FIELD_ORIGIN];
	      if (origin[yField][0] <= yValue && origin[yField][1] >= yValue) {
	        rst = obj;
	        return false;
	      }
	    });
	    return rst;
	  },
	  getXDistance: function getXDistance() {
	    var self = this;
	    var distance = self.get('xDistance');
	    if (!distance) {
	      var xScale = self.getXScale();
	      if (xScale.isCategory) {
	        distance = 1;
	      } else {
	        var values = xScale.values; // values 是无序的
	        var min = xScale.translate(values[0]);
	        var max = min;
	        Util.each(values, function (value) {
	          // 时间类型需要 translate
	          value = xScale.translate(value);
	          if (value < min) {
	            min = value;
	          }
	          if (value > max) {
	            max = value;
	          }
	        });
	        var length = values.length;
	        // 应该是除以 length - 1
	        distance = (max - min) / (length - 1);
	      }
	      self.set('xDistance', distance);
	    }

	    return distance;
	  },
	  findPoint: function findPoint(point, dataArray) {
	    var self = this;
	    var type = self.get('type');
	    var xScale = self.getXScale();
	    var yScale = self.getYScale();
	    var xField = xScale.field;
	    var yField = yScale.field;
	    var rst = null;

	    if (Util.indexOf(['heatmap'], type) > -1) {
	      var coord = self.get('coord');
	      var invertPoint = coord.invert(point);
	      var xValue = xScale.invert(invertPoint.x);
	      var yValue = yScale.invert(invertPoint.y);
	      var min = Infinity;
	      Util.each(dataArray, function (obj) {
	        var distance = Math.pow(obj[FIELD_ORIGIN][xField] - xValue, 2) + Math.pow(obj[FIELD_ORIGIN][yField] - yValue, 2);
	        if (distance < min) {
	          min = distance;
	          rst = obj;
	        }
	      });
	      return rst;
	    }

	    var first = dataArray[0];
	    var last = dataArray[dataArray.length - 1];

	    if (!first) {
	      return rst;
	    }

	    var value = self._getScaleValueByPoint(point); // 根据该点获得对应度量后数据的值
	    var firstXValue = first[FIELD_ORIGIN][xField];
	    var firstYValue = first[FIELD_ORIGIN][yField];
	    var lastXValue = last[FIELD_ORIGIN][xField];
	    var isYRange = yScale.isLinear && Util.isArray(firstYValue); // 考虑 x 维度相同，y 是数组区间的情况

	    // 如果x的值是数组
	    if (Util.isArray(firstXValue)) {
	      Util.each(dataArray, function (record) {
	        var origin = record[FIELD_ORIGIN];
	        if (xScale.translate(origin[xField][0]) <= value && xScale.translate(origin[xField][1]) >= value) {
	          if (isYRange) {
	            if (!Util.isArray(rst)) {
	              rst = [];
	            }
	            rst.push(record);
	          } else {
	            rst = record;
	            return false;
	          }
	        }
	      });
	      if (Util.isArray(rst)) {
	        rst = this._filterValue(rst, point);
	      }
	    } else {
	      var next = void 0;
	      if (!xScale.isLinear && xScale.type !== 'timeCat') {
	        Util.each(dataArray, function (record, index) {
	          var origin = record[FIELD_ORIGIN];
	          if (self._snapEqual(origin[xField], value, xScale)) {
	            if (isYRange) {
	              if (!Util.isArray(rst)) {
	                rst = [];
	              }
	              rst.push(record);
	            } else {
	              rst = record;
	              return false;
	            }
	          } else if (xScale.translate(origin[xField]) <= value) {
	            last = record;
	            next = dataArray[index + 1];
	          }
	        });

	        if (Util.isArray(rst)) {
	          rst = this._filterValue(rst, point);
	        }
	      } else {
	        if ((value > xScale.translate(lastXValue) || value < xScale.translate(firstXValue)) && (value > xScale.max || value < xScale.min)) {
	          return null;
	        }

	        var firstIdx = 0;
	        var lastIdx = dataArray.length - 1;
	        var middleIdx = void 0;
	        while (firstIdx <= lastIdx) {
	          middleIdx = Math.floor((firstIdx + lastIdx) / 2);
	          var item = dataArray[middleIdx][FIELD_ORIGIN][xField];
	          if (self._snapEqual(item, value, xScale)) {
	            return dataArray[middleIdx];
	          }

	          if (xScale.translate(item) <= xScale.translate(value)) {
	            firstIdx = middleIdx + 1;
	            last = dataArray[middleIdx];
	            next = dataArray[middleIdx + 1];
	          } else {
	            if (lastIdx === 0) {
	              last = dataArray[0];
	            }
	            lastIdx = middleIdx - 1;
	          }
	        }
	      }

	      if (last && next) {
	        // 计算最逼近的
	        if (Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) > Math.abs(xScale.translate(next[FIELD_ORIGIN][xField]) - value)) {
	          last = next;
	        }
	      }
	    }

	    var distance = self.getXDistance(); // 每个分类间的平均间距
	    if (!rst && Math.abs(xScale.translate(last[FIELD_ORIGIN][xField]) - value) <= distance / 2) {
	      rst = last;
	    }

	    return rst;
	  },

	  /**
	   * @protected
	   * 获取tooltip的标题
	   * @param  {Object} origin 点的原始信息
	   * @param  {String} titleField 标题的字段
	   * @return {String} 提示信息的标题
	   */
	  getTipTitle: function getTipTitle(origin, titleField) {
	    var tipTitle = '';
	    var titleScale = this._getTipTitleScale(titleField);

	    if (titleScale) {
	      var value = origin[titleScale.field];
	      tipTitle = titleScale.getText(value);
	    } else if (this.get('type') === 'heatmap') {
	      // 热力图在不存在 title 的时候特殊处理
	      var xScale = this.getXScale();
	      var yScale = this.getYScale();
	      var xValue = xScale.getText(origin[xScale.field]);
	      var yValue = yScale.getText(origin[yScale.field]);

	      tipTitle = '( ' + xValue + ', ' + yValue + ' )';
	    }
	    return tipTitle;
	  },
	  getTipValue: function getTipValue(origin, valueScale) {
	    var value = void 0;
	    var field = valueScale.field;
	    value = origin[field];

	    if (Util.isArray(value)) {
	      var tmp = [];
	      Util.each(value, function (sub) {
	        tmp.push(valueScale.getText(sub));
	      });
	      value = tmp.join('-');
	    } else {
	      value = valueScale.getText(value);
	    }
	    return value;
	  },

	  /**
	   * @protected
	   * 获取tooltip的名称
	   * @param  {Object} origin 点的原始信息
	   * @return {String} 提示信息的名称
	   */
	  getTipName: function getTipName(origin) {
	    var name = void 0;
	    var nameScale = void 0;
	    var groupScales = this._getGroupScales();
	    if (groupScales.length) {
	      // 如果存在分组类型，取第一个分组类型
	      Util.each(groupScales, function (scale) {
	        nameScale = scale;
	        return false;
	      });
	    }
	    if (nameScale) {
	      var field = nameScale.field;
	      name = nameScale.getText(origin[field]);
	    } else {
	      var valueScale = this._getTipValueScale();
	      name = getScaleName(valueScale);
	    }
	    return name;
	  },

	  /**
	   * 获取点对应tooltip的信息
	   * @protected
	   * @param  {Object} point 原始的数据记录
	   * @param  {String} titleField tooltipTitle 配置信息
	   * @return {Array}  一条或者多条记录
	   */
	  getTipItems: function getTipItems(point, titleField) {
	    var self = this;
	    var origin = point[FIELD_ORIGIN];
	    var tipTitle = self.getTipTitle(origin, titleField);
	    var tooltipCfg = self.get('tooltipCfg');
	    var items = [];
	    var name = void 0;
	    var value = void 0;

	    function addItem(itemName, itemValue, cfg) {
	      if (!Util.isNil(itemValue) && itemValue !== '') {
	        // 值为null的时候，忽视
	        var item = {
	          title: tipTitle,
	          point: point,
	          name: itemName || tipTitle,
	          value: itemValue,
	          color: point.color || defaultColor,
	          marker: true
	        };
	        item.size = self._getIntervalSize(point);

	        items.push(Util.mix({}, item, cfg));
	      }
	    }

	    if (tooltipCfg) {
	      var fields = tooltipCfg.fields;
	      var cfg = tooltipCfg.cfg;
	      var callbackParams = [];
	      Util.each(fields, function (field) {
	        callbackParams.push(origin[field]);
	      });
	      if (cfg) {
	        // 存在回调函数
	        if (Util.isFunction(cfg)) {
	          cfg = cfg.apply(null, callbackParams);
	        }
	        var itemCfg = Util.mix({}, {
	          point: point,
	          title: tipTitle,
	          color: point.color || defaultColor,
	          marker: true // 默认展示 marker
	        }, cfg);

	        itemCfg.size = self._getIntervalSize(point);
	        items.push(itemCfg);
	      } else {
	        Util.each(fields, function (field) {
	          if (!Util.isNil(origin[field])) {
	            // 字段数据为null ,undefined时不显示
	            var scale = self._getScale(field);
	            name = getScaleName(scale);
	            value = scale.getText(origin[field]);
	            addItem(name, value);
	          }
	        });
	      }
	    } else {
	      var valueScale = self._getTipValueScale();
	      if (!Util.isNil(origin[valueScale.field])) {
	        // 字段数据为null ,undefined时不显示
	        value = self.getTipValue(origin, valueScale);
	        name = self.getTipName(origin);
	        addItem(name, value);
	      }
	    }
	    return items;
	  },
	  isShareTooltip: function isShareTooltip() {
	    var shareTooltip = this.get('shareTooltip');
	    var type = this.get('type');
	    var view = this.get('view');
	    var options = void 0;
	    if (view.get('parent')) {
	      options = view.get('parent').get('options');
	    } else {
	      options = view.get('options');
	    }

	    if (type === 'interval') {
	      var coord = this.get('coord');
	      var coordType = coord.type;
	      if (coordType === 'theta' || coordType === 'polar' && coord.isTransposed) {
	        shareTooltip = false;
	      }
	    } else if (!this.getYScale() || Util.inArray(['contour', 'point', 'polygon', 'edge'], type)) {
	      shareTooltip = false;
	    }

	    if (options.tooltip && Util.isBoolean(options.tooltip.shared)) {
	      // 以用户设置的为准
	      shareTooltip = options.tooltip.shared;
	    }
	    return shareTooltip;
	  }
	};

	module.exports = TooltipMixin;

	/***/ }),
	/* 289 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the interaction when geom was actived
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var FIELD_ORIGIN = '_origin';

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');
	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function isChange(preShapes, shapes) {
	  if (!preShapes) {
	    return true;
	  }

	  if (preShapes.length !== shapes.length) {
	    return true;
	  }

	  var rst = false;
	  Util.each(shapes, function (shape, index) {
	    if (!isSameShape(shape, preShapes[index])) {
	      rst = true;
	      return false;
	    }
	  });
	  return rst;
	}

	function getOriginAttrs(activeCfg, shape) {
	  var originAttrs = {};
	  Util.each(activeCfg, function (v, k) {
	    var originValue = shape.__attrs[k];
	    if (Util.isArray(originValue)) {
	      originValue = Util.cloneDeep(originValue); // 缓存原来的属性，由于 __attrs.matrix 是数组，所以此处需要深度复制
	    }
	    originAttrs[k] = originValue;
	  });
	  return originAttrs;
	}

	var ActiveMixin = {
	  _isAllowActive: function _isAllowActive() {
	    var allowActive = this.get('allowActive');
	    if (Util.isNil(allowActive)) {
	      // 用户未设置，使用默认的策略
	      var view = this.get('view');
	      var isShareTooltip = this.isShareTooltip();
	      var options = view.get('options');
	      // 默认情况下，tooltip 关闭或者 tooltip 模式为 shared === false 的时候允许 active
	      if (options.tooltip === false || !isShareTooltip) {
	        return true;
	      }
	    } else {
	      return allowActive;
	    }

	    return false;
	  },
	  _onMouseenter: function _onMouseenter(ev) {
	    var self = this;
	    var shape = ev.shape;
	    var shapeContainer = self.get('shapeContainer');
	    if (shape && shapeContainer.contain(shape) && self._isAllowActive()) {
	      // shape.get('animating')
	      self.setShapesActived(shape);
	    }
	  },
	  _onMouseleave: function _onMouseleave() {
	    var self = this;
	    var view = self.get('view');
	    var canvas = view.get('canvas');
	    if (self.get('activeShapes')) {
	      self.clearActivedShapes();
	      canvas.draw();
	    }
	  },
	  _bindActiveAction: function _bindActiveAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.on(type + ':mouseenter', Util.wrapBehavior(self, '_onMouseenter'));
	    view.on(type + ':mouseleave', Util.wrapBehavior(self, '_onMouseleave'));
	  },
	  _offActiveAction: function _offActiveAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.off(type + ':mouseenter', Util.getWrapBehavior(self, '_onMouseenter'));
	    view.off(type + ':mouseleave', Util.getWrapBehavior(self, '_onMouseleave'));
	  },
	  _setActiveShape: function _setActiveShape(shape) {
	    var self = this;
	    var activedOptions = self.get('activedOptions') || {};
	    var shapeData = shape.get('origin');
	    var shapeName = shapeData.shape || self.getDefaultValue('shape');
	    if (Util.isArray(shapeName)) {
	      shapeName = shapeName[0];
	    }
	    var shapeFactory = self.get('shapeFactory');
	    var shapeCfg = Util.mix({}, shape.__attrs, {
	      origin: shapeData
	    });
	    var activeCfg = shapeFactory.getActiveCfg(shapeName, shapeCfg);
	    if (activedOptions.style) {
	      Util.mix(activeCfg, activedOptions.style);
	    }
	    var originAttrs = getOriginAttrs(activeCfg, shape);
	    shape.setSilent('_originAttrs', originAttrs);
	    if (activedOptions.animate) {
	      shape.animate(activeCfg, 300);
	    } else {
	      // Util.mix(shape.__attrs, activeCfg);
	      shape.attr(activeCfg);
	    }
	    shape.setZIndex(1); // 提前
	  },
	  setShapesActived: function setShapesActived(shapes) {
	    var self = this;
	    if (!Util.isArray(shapes)) {
	      shapes = [shapes];
	    }
	    var preShapes = self.get('activeShapes'); // 获取上次被激活的 shapes
	    if (!isChange(preShapes, shapes)) {
	      return;
	    }
	    var view = self.get('view');
	    var canvas = view.get('canvas');
	    var shapeContainer = self.get('shapeContainer');
	    var activedOptions = self.get('activedOptions');
	    if (activedOptions && activedOptions.highlight) {
	      // 上次的动画未完成，所以要停止掉动画
	      Util.each(shapes, function (shape) {
	        if (shape.get('animating')) {
	          shape.stopAnimate();
	        }
	      });
	      self.highlightShapes(shapes);
	    } else {
	      if (preShapes) {
	        self.clearActivedShapes(); // 先清除激活元素
	      }

	      Util.each(shapes, function (shape) {
	        if (shape.get('animating')) {
	          shape.stopAnimate();
	        }
	        if (shape.get('visible') && !shape.get('selected')) {
	          self._setActiveShape(shape);
	        }
	      });
	    }
	    self.set('activeShapes', shapes);
	    shapeContainer.sort();
	    canvas.draw();
	  },
	  clearActivedShapes: function clearActivedShapes() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var activedOptions = self.get('activedOptions');
	    var activeAnimate = activedOptions && activedOptions.animate;
	    if (shapeContainer && !shapeContainer.get('destroyed')) {
	      var activeShapes = self.get('activeShapes');
	      Util.each(activeShapes, function (activeShape) {
	        if (!activeShape.get('selected')) {
	          var originAttrs = activeShape.get('_originAttrs');
	          if (activeAnimate) {
	            activeShape.stopAnimate();
	            activeShape.animate(originAttrs, 300);
	          } else {
	            activeShape.attr(originAttrs);
	          }
	          activeShape.setZIndex(0);
	          activeShape.set('_originAttrs', null);
	        }
	      });
	      var preHighlightShapes = self.get('preHighlightShapes');
	      if (preHighlightShapes) {
	        var shapes = shapeContainer.get('children');
	        Util.each(shapes, function (shape) {
	          if (!shape.get('selected')) {
	            var originAttrs = shape.get('_originAttrs');
	            if (originAttrs) {
	              if (activeAnimate) {
	                shape.stopAnimate();
	                shape.animate(originAttrs, 300);
	              } else {
	                shape.attr(originAttrs);
	              }
	              shape.setZIndex(0);
	              shape.set('_originAttrs', null);
	            }
	          }
	        });
	      }
	      // 恢复原来排序
	      var children = shapeContainer.get('children');
	      children.sort(function (obj1, obj2) {
	        return obj1._INDEX - obj2._INDEX;
	      });

	      self.set('activeShapes', null);
	      self.set('preHighlightShapes', null);
	    }
	  },
	  getGroupShapesByPoint: function getGroupShapesByPoint(point) {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var activeShapes = [];
	    if (shapeContainer) {
	      var xField = self.getXScale().field;
	      var shapes = self.getShapes();
	      var originObj = self._getOriginByPoint(point);
	      Util.each(shapes, function (shape) {
	        var origin = shape.get('origin');
	        if (shape.get('visible') && origin) {
	          // 有可能不是图形，而是label文本，所以判断一下
	          var shapeXValue = origin[FIELD_ORIGIN][xField];
	          if (shapeXValue === originObj[xField]) {
	            activeShapes.push(shape);
	          }
	        }
	      });
	    }
	    return activeShapes;
	  },
	  getSingleShapeByPoint: function getSingleShapeByPoint(point) {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    var canvas = shapeContainer.get('canvas');
	    var pixelRatio = canvas.get('pixelRatio');
	    var result = void 0;
	    if (shapeContainer) {
	      result = shapeContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
	    }

	    if (result && result.get('origin')) {
	      return result;
	    }
	  },
	  highlightShapes: function highlightShapes(_highlightShapes, highlightCfg) {
	    var self = this;
	    if (!Util.isArray(_highlightShapes)) {
	      _highlightShapes = [_highlightShapes];
	    }

	    var preHighlightShapes = self.get('activeShapes'); // 获取上次被激活的 shapes
	    if (!isChange(preHighlightShapes, _highlightShapes)) {
	      return;
	    }
	    if (preHighlightShapes) {
	      self.clearActivedShapes();
	    }

	    var shapes = self.getShapes();
	    var activedOptions = self.get('activedOptions');
	    var activeAnimate = activedOptions && activedOptions.animate;
	    var activeStyle = activedOptions && activedOptions.style;

	    Util.each(shapes, function (shape) {
	      var changeAttrs = {};
	      shape.stopAnimate();
	      if (Util.indexOf(_highlightShapes, shape) !== -1) {
	        Util.mix(changeAttrs, activeStyle, highlightCfg);
	        // shape.__attrs = Util.mix({}, shape.get('_originAttrs'), highlightCfg);
	        shape.setZIndex(1); // 提前
	      } else {
	        Util.mix(changeAttrs, {
	          fillOpacity: 0.3
	        });
	        shape.setZIndex(0);
	      }
	      var originAttrs = getOriginAttrs(changeAttrs, shape);
	      shape.setSilent('_originAttrs', originAttrs);
	      if (activeAnimate) {
	        shape.animate(changeAttrs, 300);
	      } else {
	        shape.attr(changeAttrs);
	      }
	    });
	    self.set('preHighlightShapes', _highlightShapes);
	    self.set('activeShapes', _highlightShapes);
	  }
	};

	module.exports = ActiveMixin;

	/***/ }),
	/* 290 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the interaction when geom was selected
	 * @author sima.zhang
	 */

	var Util = __webpack_require__(0);
	var FIELD_ORIGIN = '_origin';

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');
	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function getOriginAttrs(selectedCfg, shape) {
	  var originAttrs = {};
	  Util.each(selectedCfg, function (v, k) {
	    if (k === 'transform') {
	      k = 'matrix';
	    }
	    var originValue = shape.__attrs[k];
	    if (Util.isArray(originValue)) {
	      originValue = Util.cloneDeep(originValue); // 缓存原来的属性，由于 __attrs.matrix 是数组，所以此处需要深度复制
	    }
	    originAttrs[k] = originValue;
	  });
	  return originAttrs;
	}

	var SelectMixin = {
	  _isAllowSelect: function _isAllowSelect() {
	    var isAllowSelect = this.get('allowSelect');
	    if (Util.isNil(isAllowSelect)) {
	      var type = this.get('type');
	      var coord = this.get('coord');
	      var coordType = coord && coord.type;

	      if (type === 'interval' && coordType === 'theta') {
	        // 饼图默认可以进行选中
	        return true;
	      }
	    } else {
	      // 用户设置了 select 配置
	      return isAllowSelect;
	    }

	    return false;
	  },
	  _onClick: function _onClick(ev) {
	    var self = this;
	    if (self._isAllowSelect()) {
	      // 允许选中下才执行
	      self.clearActivedShapes(); // 清除hover效果
	      var shape = ev.shape;
	      var shapeContainer = self.get('shapeContainer');
	      if (shape && !shape.get('animating') && shapeContainer.contain(shape)) {
	        self.setShapeSelected(shape);
	      }
	    }
	  },
	  _bindSelectedAction: function _bindSelectedAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.on(type + ':click', Util.wrapBehavior(self, '_onClick'));
	  },
	  _offSelectedAction: function _offSelectedAction() {
	    var self = this;
	    var view = self.get('view');
	    var type = self.get('type');
	    view.off(type + ':click', Util.getWrapBehavior(self, '_onClick'));
	  },
	  _setShapeStatus: function _setShapeStatus(shape, status) {
	    var self = this;
	    var view = self.get('view');
	    var selectedOptions = self.get('selectedOptions') || {};
	    var animate = selectedOptions.animate !== false; // 默认允许动画
	    var canvas = view.get('canvas');

	    shape.set('selected', status);
	    var shapeData = shape.get('origin');

	    if (status) {
	      // 选中状态
	      var shapeName = shapeData.shape || self.getDefaultValue('shape');
	      if (Util.isArray(shapeName)) {
	        shapeName = shapeName[0];
	      }
	      var shapeFactory = self.get('shapeFactory');
	      var cfg = Util.mix({
	        geom: self,
	        point: shapeData
	      }, selectedOptions);
	      var selectedStyle = shapeFactory.getSelectedCfg(shapeName, cfg);
	      Util.mix(selectedStyle, cfg.style); // 用户设置的优先级更高

	      if (!shape.get('_originAttrs')) {
	        // 缓存原有属性
	        if (shape.get('animating')) {
	          // 停止动画
	          shape.stopAnimate();
	        }
	        shape.set('_originAttrs', getOriginAttrs(selectedStyle, shape));
	      }

	      if (animate) {
	        shape.animate(selectedStyle, 300);
	      } else {
	        shape.attr(selectedStyle);
	        canvas.draw();
	      }
	    } else {
	      var originAttrs = shape.get('_originAttrs');
	      shape.set('_originAttrs', null);
	      if (animate) {
	        shape.animate(originAttrs, 300);
	      } else {
	        shape.attr(originAttrs);
	        canvas.draw();
	      }
	    }
	  },
	  setShapeSelected: function setShapeSelected(shape) {
	    var self = this;
	    var selectedShapes = self._getSelectedShapes();
	    var selectedOptions = self.get('selectedOptions') || {};
	    var cancelable = selectedOptions.cancelable !== false; // 选中状态是否允许取消，默认允许
	    if (selectedOptions.mode === 'multiple') {
	      // 支持多选
	      if (Util.indexOf(selectedShapes, shape) === -1) {
	        selectedShapes.push(shape);
	        self._setShapeStatus(shape, true);
	      } else if (cancelable) {
	        // 图形已经被选中并且选中状态允许取消选中
	        Util.Array.remove(selectedShapes, shape);
	        self._setShapeStatus(shape, false);
	      }
	    } else {
	      var selectedShape = selectedShapes[0];
	      if (cancelable) {
	        // 如果允许取消，则选中null
	        shape = isSameShape(selectedShape, shape) ? null : shape;
	      }
	      if (!isSameShape(selectedShape, shape)) {
	        if (selectedShape) {
	          self._setShapeStatus(selectedShape, false);
	        }
	        if (shape) {
	          self._setShapeStatus(shape, true);
	        }
	      }
	    }
	  },
	  clearSelected: function clearSelected() {
	    var self = this;
	    var shapeContainer = self.get('shapeContainer');
	    if (shapeContainer && !shapeContainer.get('destroyed')) {
	      var selectedShapes = self._getSelectedShapes();
	      Util.each(selectedShapes, function (shape) {
	        self._setShapeStatus(shape, false);
	        shape.set('_originAttrs', null);
	      });
	    }
	  },

	  /**
	   * 设置记录对应的图形选中
	   * @param {Object} record 选中的记录
	   * @chainable
	   * @return {Geom} 返回当前的 Geometry
	   */
	  setSelected: function setSelected(record) {
	    var self = this;
	    var shapes = self.getShapes();
	    Util.each(shapes, function (shape) {
	      var origin = shape.get('origin');
	      if (origin && origin[FIELD_ORIGIN] === record) {
	        self.setShapeSelected(shape);
	      }
	    });
	    return this;
	  },
	  _getSelectedShapes: function _getSelectedShapes() {
	    var self = this;
	    var shapes = self.getShapes();
	    var selectedShapes = [];

	    Util.each(shapes, function (shape) {
	      if (shape.get('selected')) {
	        selectedShapes.push(shape);
	      }
	    });
	    self.set('selectedShapes', selectedShapes);
	    return selectedShapes;
	  }
	};

	module.exports = SelectMixin;

	/***/ }),
	/* 291 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview 度量的控制器
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Scale = __webpack_require__(104);
	var dateRegex = /^(?:(?!0000)[0-9]{4}([-/.]+)(?:(?:0?[1-9]|1[0-2])\1(?:0?[1-9]|1[0-9]|2[0-8])|(?:0?[13-9]|1[0-2])\1(?:29|30)|(?:0?[13578]|1[02])\1(?:31))|(?:[0-9]{2}(?:0[48]|[2468][048]|[13579][26])|(?:0[48]|[2468][048]|[13579][26])00)([-/.]?)0?2\2(?:29))(\s+([01]|([01][0-9]|2[0-3])):([0-9]|[0-5][0-9]):([0-9]|[0-5][0-9]))?$/;
	var TYPES = {
	  LINEAR: 'linear',
	  CAT: 'cat',
	  TIME: 'time'
	};

	var ScaleController = function () {
	  function ScaleController(cfg) {
	    _classCallCheck(this, ScaleController);

	    // defs 列定义
	    this.defs = {};
	    Util.assign(this, cfg);
	  }

	  ScaleController.prototype._getDef = function _getDef(field) {
	    var defs = this.defs;
	    var def = null;
	    if (Global.scales[field] || defs[field]) {
	      def = Util.mix({}, Global.scales[field]);
	      // 处理覆盖属性的问题
	      Util.each(defs[field], function (v, k) {
	        if (Util.isNil(v)) {
	          delete def[k];
	        } else {
	          def[k] = v;
	        }
	      });
	    }
	    return def;
	  };

	  ScaleController.prototype._getDefaultType = function _getDefaultType(field, data) {
	    var type = TYPES.LINEAR;
	    var value = Util.Array.firstValue(data, field);
	    if (Util.isArray(value)) {
	      value = value[0];
	    }
	    if (dateRegex.test(value)) {
	      type = TYPES.TIME;
	    } else if (Util.isString(value)) {
	      type = TYPES.CAT;
	    }
	    return type;
	  };

	  ScaleController.prototype._getScaleCfg = function _getScaleCfg(type, field, data) {
	    var cfg = {
	      field: field
	    };
	    var values = Util.Array.values(data, field);
	    cfg.values = values;
	    if (!Scale.isCategory(type) && type !== 'time') {
	      var range = Util.Array.getRange(values);
	      cfg.min = range.min;
	      cfg.max = range.max;
	      cfg.nice = true;
	    }

	    if (type === 'time') {
	      cfg.nice = false;
	    }
	    return cfg;
	  };

	  ScaleController.prototype.createScale = function createScale(field, data) {
	    var self = this;
	    var def = self._getDef(field);
	    var scale = void 0;
	    // 如果数据为空直接返回常量度量
	    if (!data || !data.length) {
	      if (def && def.type) {
	        scale = Scale[def.type](def);
	      } else {
	        scale = Scale.identity({
	          value: field,
	          field: field.toString(),
	          values: [field]
	        });
	      }
	      return scale;
	    }
	    var firstValue = Util.Array.firstValue(data, field);

	    if (Util.isNumber(field) || Util.isNil(firstValue) && !def) {
	      scale = Scale.identity({
	        value: field,
	        field: field.toString(),
	        values: [field]
	      });
	    } else {
	      // 如果已经定义过这个度量
	      var type = void 0;
	      if (def) {
	        type = def.type;
	      }
	      type = type || self._getDefaultType(field, data);
	      var cfg = self._getScaleCfg(type, field, data);
	      if (def) {
	        Util.mix(cfg, def);
	      }
	      scale = Scale[type](cfg);
	    }
	    return scale;
	  };

	  return ScaleController;
	}();

	module.exports = ScaleController;

	/***/ }),
	/* 292 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自动计算数字坐标轴
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var AutoUtil = __webpack_require__(105);
	var MIN_COUNT = 5;
	var MAX_COUNT = 7;
	var Global = __webpack_require__(2);

	module.exports = function (info) {
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var ticks = [];
	  var minCount = info.minCount || MIN_COUNT;
	  var maxCount = info.maxCount || MAX_COUNT;
	  var isFixedCount = minCount === maxCount; // 是否限定死了个数
	  var minLimit = Util.isNil(info.minLimit) ? -Infinity : info.minLimit; // 限定的最小值
	  var maxLimit = Util.isNil(info.maxLimit) ? Infinity : info.maxLimit; // 限定最大值
	  var avgCount = (minCount + maxCount) / 2;
	  var count = avgCount;
	  // 用户传入的逼近数组
	  var snapArray = info.snapArray ? info.snapArray : isFixedCount ? Global.snapCountArray : Global.snapArray;

	  // 如果限定大小范围，同时大小范围等于用户传入的范围，同时限定了个数，interval 按照个数均分
	  if (min === minLimit && max === maxLimit && isFixedCount) {
	    interval = (max - min) / (count - 1);
	  }

	  if (Util.isNil(min)) {
	    min = 0;
	  }
	  if (Util.isNil(max)) {
	    max = 0;
	  }
	  if (max === min) {
	    if (min === 0) {
	      max = 1;
	    } else {
	      if (min > 0) {
	        min = 0;
	      } else {
	        max = 0;
	      }
	    }
	    if (max - min < 5 && !interval && max - min >= 1) {
	      interval = 1;
	    }
	  }

	  if (Util.isNil(interval)) {
	    // 计算间距
	    var temp = (max - min) / (avgCount - 1);
	    interval = AutoUtil.snapFactorTo(temp, snapArray, 'ceil');
	    if (maxCount !== minCount) {
	      count = parseInt((max - min) / interval, 10);
	      if (count > maxCount) {
	        count = maxCount;
	      }
	      if (count < minCount) {
	        count = minCount;
	      }
	      // 不确定tick的个数时，使得tick偏小
	      interval = AutoUtil.snapFactorTo((max - min) / (count - 1), snapArray, 'floor');
	    }
	  }
	  if (info.interval || maxCount !== minCount) {
	    // 校正 max 和 min
	    max = Math.min(AutoUtil.snapMultiple(max, interval, 'ceil'), maxLimit); // 向上逼近
	    min = Math.max(AutoUtil.snapMultiple(min, interval, 'floor'), minLimit); // 向下逼近

	    count = Math.round((max - min) / interval);
	    min = Util.fixedBase(min, interval);
	    max = Util.fixedBase(max, interval);
	  } else {
	    avgCount = parseInt(avgCount, 10); // 取整
	    var avg = (max + min) / 2;
	    var avgTick = AutoUtil.snapMultiple(avg, interval, 'ceil');
	    var sideCount = Math.floor((avgCount - 2) / 2);
	    var maxTick = avgTick + sideCount * interval;
	    var minTick = void 0;
	    if (avgCount % 2 === 0) {
	      minTick = avgTick - sideCount * interval;
	    } else {
	      minTick = avgTick - (sideCount + 1) * interval;
	    }
	    if (maxTick < max) {
	      maxTick = maxTick + interval;
	    }
	    if (minTick > min) {
	      minTick = minTick - interval;
	    }
	    max = Util.fixedBase(maxTick, interval);
	    min = Util.fixedBase(minTick, interval);
	  }

	  max = Math.min(max, maxLimit);
	  min = Math.max(min, minLimit);

	  ticks.push(min);
	  for (var i = 1; i < count; i++) {
	    var tickValue = Util.fixedBase(interval * i + min, interval);
	    if (tickValue < max) {
	      ticks.push(tickValue);
	    }
	  }
	  if (ticks[ticks.length - 1] < max) {
	    ticks.push(max);
	  }
	  return {
	    min: min,
	    max: max,
	    interval: interval,
	    count: count,
	    ticks: ticks
	  };
	};

	/***/ }),
	/* 293 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The data is replaced with constant
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(36);
	var Util = __webpack_require__(0);

	var Identity = function (_Base) {
	  _inherits(Identity, _Base);

	  function Identity() {
	    _classCallCheck(this, Identity);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Identity.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      isIdentity: true,
	      /**
	       * @override
	       * @type {String}
	       */
	      type: 'identity',

	      /**
	       * 常量值
	       * @type {*}
	       */
	      value: null
	    });
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.getText = function getText() {
	    return this.value.toString();
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.scale = function scale(value) {
	    if (this.value !== value && Util.isNumber(value)) {
	      return value;
	    }
	    return this.range[0];
	  };

	  /**
	   * @override
	   */


	  Identity.prototype.invert = function invert() {
	    return this.value;
	  };

	  return Identity;
	}(Base);

	module.exports = Identity;

	/***/ }),
	/* 294 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The measurement of linear data scale function
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);
	var timeAuto = __webpack_require__(295);
	var fecha = __webpack_require__(108);
	var TimeUtil = __webpack_require__(109);

	/**
	 * 时间度量的构造函数
	 * @class Scale.Time
	 */

	var Time = function (_Linear) {
	  _inherits(Time, _Linear);

	  function Time() {
	    _classCallCheck(this, Time);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Time.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'time',

	      /**
	       * 格式化符
	       * @type {String}
	       */
	      mask: 'YYYY-MM-DD'
	    });
	  };

	  /**
	   * @override
	   */


	  Time.prototype.init = function init() {
	    var self = this;
	    var values = self.values;
	    if (values && values.length) {
	      // 重新计算最大最小值
	      var timeStamps = [];
	      var min = Infinity; // 最小值
	      var secondMin = min; // 次小值
	      var max = 0;
	      // 使用一个循环，计算min,max,secondMin
	      Util.each(values, function (v) {
	        var timeStamp = self._toTimeStamp(v);
	        if (isNaN(timeStamp)) {
	          throw new TypeError('Invalid Time: ' + v);
	        }
	        if (min > timeStamp) {
	          secondMin = min;
	          min = timeStamp;
	        } else if (secondMin > timeStamp) {
	          secondMin = timeStamp;
	        }
	        if (max < timeStamp) {
	          max = timeStamp;
	        }
	        timeStamps.push(timeStamp);
	      });
	      // 存在多个值时，设置最小间距
	      if (values.length > 1) {
	        self.minTickInterval = secondMin - min;
	      }
	      if (Util.isNil(self.min) || self._toTimeStamp(self.min) > min) {
	        self.min = min;
	      }
	      if (Util.isNil(self.max) || self._toTimeStamp(self.max) < max) {
	        self.max = max;
	      }
	    }
	    _Linear.prototype.init.call(this);
	  };

	  Time.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var min = self.min;
	    var max = self.max;
	    var count = self.tickCount;
	    var interval = self.tickInterval;
	    var tmp = timeAuto({
	      min: min,
	      max: max,
	      minCount: count,
	      maxCount: count,
	      interval: interval,
	      minInterval: self.minTickInterval
	    });
	    return tmp.ticks;
	  };

	  /**
	   * @override
	   */


	  Time.prototype.getText = function getText(value) {
	    var formatter = this.formatter;
	    value = this.translate(value);
	    value = formatter ? formatter(value) : fecha.format(value, this.mask);
	    return value;
	  };

	  /**
	   * @override
	   */


	  Time.prototype.scale = function scale(value) {
	    if (Util.isString(value)) {
	      value = this.translate(value);
	    }
	    return _Linear.prototype.scale.call(this, value);
	  };

	  /**
	   * @override
	   */


	  Time.prototype.translate = function translate(value) {
	    return this._toTimeStamp(value);
	  };

	  // 将时间转换为时间戳


	  Time.prototype._toTimeStamp = function _toTimeStamp(value) {
	    return TimeUtil.toTimeStamp(value);
	  };

	  return Time;
	}(Linear);

	module.exports = Time;

	/***/ }),
	/* 295 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 计算时间坐标轴
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var AutoUtil = __webpack_require__(105);

	var MAX_COUNT = 6;
	var SNAP_ARRAY = [1, 2, 4, 6, 8, 12];
	var MINUTE_MS = 60 * 1000;
	var HOUR_MS = 3600 * 1000;
	var DAY_MS = 24 * 3600 * 1000;

	function getYear(date) {
	  return new Date(date).getFullYear();
	}

	function createYear(year) {
	  return new Date(year, 0, 1).getTime();
	}

	function getMonth(date) {
	  return new Date(date).getMonth();
	}

	function diffMonth(min, max) {
	  var minYear = getYear(min);
	  var maxYear = getYear(max);
	  var minMonth = getMonth(min);
	  var maxMonth = getMonth(max);
	  return (maxYear - minYear) * 12 + (maxMonth - minMonth) % 12;
	}

	function creatMonth(year, month) {
	  return new Date(year, month, 1).getTime();
	}

	function diffDay(min, max) {
	  return Math.ceil((max - min) / DAY_MS);
	}

	function diffHour(min, max) {
	  return Math.ceil((max - min) / HOUR_MS);
	}

	function diffMinus(min, max) {
	  return Math.ceil((max - min) / (60 * 1000));
	}

	module.exports = function (info) {
	  var minInterval = info.minInterval;
	  var ticks = [];
	  var min = info.min;
	  var max = info.max;
	  var interval = info.interval;
	  var count = void 0;

	  // 如果最大值和最小值相等，则设置最大值大于最小值一天
	  if (max === min) {
	    max = min + DAY_MS;
	  }

	  // 计算间距
	  if (Util.isNil(interval)) {
	    var innerTime = max - min;
	    var dms = DAY_MS; // 天代表的秒
	    var yms = 365 * dms; // 年代表的秒
	    interval = parseInt(innerTime / (info.maxCount || MAX_COUNT), 10);
	    if (minInterval && minInterval > interval) {
	      interval = minInterval;
	    }
	    var yfactor = interval / yms;
	    var minYear = getYear(min);
	    // 大于半年
	    if (yfactor > 0.51) {
	      var year = Math.ceil(yfactor);
	      // interval = year * yms;
	      var maxYear = getYear(max);

	      for (var i = minYear; i <= maxYear + year; i = i + year) {
	        ticks.push(createYear(i));
	      }
	      interval = null;
	    } else if (yfactor > 0.0834) {
	      // 大于一个月
	      var month = Math.ceil(yfactor / 0.0834);
	      var mmMoth = getMonth(min);
	      var dMonths = diffMonth(min, max);

	      for (var _i = 0; _i <= dMonths + month; _i = _i + month) {
	        ticks.push(creatMonth(minYear, _i + mmMoth));
	      }
	      interval = null;
	    } else if (interval > dms * 0.5) {
	      // 大于一天
	      var date = new Date(min);
	      var _year = date.getFullYear();
	      var _month = date.getMonth(min);
	      var mday = date.getDate();
	      var day = Math.ceil(interval / dms);
	      var ddays = diffDay(min, max);
	      interval = day * dms;
	      for (var _i2 = 0; _i2 < ddays + day; _i2 = _i2 + day) {
	        ticks.push(new Date(_year, _month, mday + _i2).getTime());
	      }
	    } else if (interval > HOUR_MS) {
	      // 大于一个小时
	      var _date = new Date(min);
	      var _year2 = _date.getFullYear();
	      var _month2 = _date.getMonth(min);
	      var _day = _date.getDate();
	      var hour = _date.getHours();
	      var hours = AutoUtil.snapTo(SNAP_ARRAY, Math.ceil(interval / HOUR_MS));
	      var dHours = diffHour(min, max);
	      interval = hours * HOUR_MS;

	      for (var _i3 = 0; _i3 <= dHours + hours; _i3 = _i3 + hours) {
	        ticks.push(new Date(_year2, _month2, _day, hour + _i3).getTime());
	      }
	    } else if (interval > MINUTE_MS) {
	      // 最小单位是分钟
	      var dMinus = diffMinus(min, max);
	      var minutes = Math.ceil(interval / MINUTE_MS);
	      interval = minutes * MINUTE_MS;

	      for (var _i4 = 0; _i4 <= dMinus + minutes; _i4 = _i4 + minutes) {
	        ticks.push(min + _i4 * MINUTE_MS);
	      }
	    } else {
	      if (interval < 1000) {
	        interval = 1000;
	      }
	      min = Math.floor(min / 1000) * 1000;
	      var dSeconds = Math.ceil((max - min) / 1000);
	      var seconds = Math.ceil(interval / 1000);
	      interval = seconds * 1000;

	      for (var _i5 = 0; _i5 < dSeconds + seconds; _i5 = _i5 + seconds) {
	        ticks.push(min + _i5 * 1000);
	      }
	    }
	  }

	  if (!ticks.length) {
	    min = Math.floor(min / 1000) * 1000;
	    max = Math.ceil(max / 1000) * 1000;
	    count = (max - min) / interval;
	    for (var _i6 = 0; _i6 <= count; _i6++) {
	      ticks.push(Util.fixedBase(interval * _i6 + min, interval));
	    }
	  }

	  return {
	    max: max,
	    min: min,
	    interval: interval,
	    ticks: ticks,
	    count: ticks.length
	  };
	};

	/***/ }),
	/* 296 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 时间数据作为分类类型
	 * @author dxq613@gmail.com
	 */

	var Category = __webpack_require__(106);
	var Util = __webpack_require__(0);
	var fecha = __webpack_require__(108);
	var catAuto = __webpack_require__(107);
	var TimeUtil = __webpack_require__(109);

	/**
	 * 度量的构造函数
	 * @class Scale.TimeCategory
	 */

	var TimeCategory = function (_Category) {
	  _inherits(TimeCategory, _Category);

	  function TimeCategory() {
	    _classCallCheck(this, TimeCategory);

	    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  TimeCategory.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Category.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'timeCat',

	      /**
	       * 格式化符
	       * @type {String}
	       */
	      mask: 'YYYY-MM-DD',

	      /**
	       * @override
	       */
	      tickCount: 7
	    });
	  };

	  TimeCategory.prototype.init = function init() {
	    var self = this;
	    var values = this.values;
	    // 针对时间分类类型，会将时间统一转换为时间戳
	    Util.each(values, function (v, i) {
	      values[i] = self._toTimeStamp(v);
	    });
	    values.sort(function (v1, v2) {
	      return v1 - v2;
	    });

	    if (!self.ticks) {
	      self.ticks = this.calculateTicks(false);
	    }
	  };

	  /**
	   * 计算 ticks
	   * @param  {boolean} formated 是否将 ticks 按照指定的 mask 格式化
	   * @return {array} 返回 ticks 数组
	   */


	  TimeCategory.prototype.calculateTicks = function calculateTicks(formated) {
	    var self = this;
	    var count = self.tickCount;
	    var ticks = void 0;
	    if (count) {
	      var temp = catAuto({
	        maxCount: count,
	        data: self.values
	      });
	      ticks = temp.ticks;
	    } else {
	      ticks = self.values;
	    }

	    if (formated) {
	      Util.each(ticks, function (value, index) {
	        ticks[index] = fecha.format(value, self.mask);
	      });
	    }
	    return ticks;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.translate = function translate(value) {
	    value = this._toTimeStamp(value);
	    var index = this.values.indexOf(value);

	    if (index === -1) {
	      if (Util.isNumber(value) && value < this.values.length) {
	        index = value;
	      } else {
	        index = NaN;
	      }
	    }
	    return index;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.scale = function scale(value) {
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    var index = this.translate(value);
	    var percent = void 0;

	    if (this.values.length === 1) {
	      percent = index;
	    } else if (index > -1) {
	      percent = index / (this.values.length - 1);
	    } else {
	      percent = 0;
	    }

	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.getText = function getText(value) {
	    var result = '';
	    var index = this.translate(value);
	    if (index > -1) {
	      result = this.values[index];
	    } else {
	      result = value;
	    }

	    var formatter = this.formatter;
	    result = parseInt(result, 10);
	    result = formatter ? formatter(result) : fecha.format(result, this.mask);
	    return result;
	  };

	  /**
	   * @override
	   */


	  TimeCategory.prototype.getTicks = function getTicks() {
	    var self = this;
	    var ticks = this.ticks;
	    var rst = [];
	    Util.each(ticks, function (tick) {
	      var obj = void 0;
	      if (Util.isObject(tick)) {
	        obj = tick;
	      } else {
	        obj = {
	          text: Util.isString(tick) ? tick : self.getText(tick),
	          tickValue: tick, // 用于坐标轴上文本动画时确定前后帧的对应关系
	          value: self.scale(tick)
	        };
	      }
	      rst.push(obj);
	    });
	    return rst;
	  };

	  // 将时间转换为时间戳


	  TimeCategory.prototype._toTimeStamp = function _toTimeStamp(value) {
	    return TimeUtil.toTimeStamp(value);
	  };

	  return TimeCategory;
	}(Category);

	module.exports = TimeCategory;

	/***/ }),
	/* 297 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 使用度量，进行log转换
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);

	// 计算log
	function log(a, b) {
	  if (a === 1) {
	    return 1;
	  }
	  return Math.log(b) / Math.log(a);
	}

	/**
	 * 度量的log计算
	 * @class Scale.Log
	 */

	var Log = function (_Linear) {
	  _inherits(Log, _Linear);

	  function Log() {
	    _classCallCheck(this, Log);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Log.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'log',

	      /**
	       * 进行log计算的基数
	       * @type {Number}
	       */
	      base: 2,

	      /**
	       * @override
	       * log 的坐标点的个数控制在10个以下
	       * @type {Number}
	       */
	      tickCount: 10,

	      // 最小的tick，仅内部使用
	      _minTick: null
	    });
	  };
	  /**
	   * @override
	   */


	  Log.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var base = self.base;
	    var minTick = void 0;
	    if (self.min < 0) {
	      throw new Error('The minimum value must be greater than zero!');
	    }
	    var maxTick = log(base, self.max);

	    if (self.min > 0) {
	      minTick = Math.floor(log(base, self.min));
	    } else {
	      var values = self.values;
	      var positiveMin = self.max; // 查找大于0的第一个值, 如果都小于0，默认为1
	      Util.each(values, function (value) {
	        if (value > 0 && value < positiveMin) {
	          positiveMin = value;
	        }
	      });
	      if (positiveMin === self.max) {
	        positiveMin = self.max / base;
	      }
	      if (positiveMin > 1) {
	        positiveMin = 1;
	      }
	      minTick = Math.floor(log(base, positiveMin));
	      self._minTick = minTick;
	      self.positiveMin = positiveMin;
	    }
	    var count = maxTick - minTick;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];

	    for (var i = minTick; i < maxTick + avg; i = i + avg) {
	      ticks.push(Math.pow(base, i));
	    } /**/
	    if (self.min === 0) {
	      ticks.unshift(0);
	    }
	    return ticks;
	  };
	  // 获取度量计算时，value占的定义域百分比


	  Log.prototype._getScalePercent = function _getScalePercent(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    // 如果值小于等于0，则按照0处理
	    if (value <= 0) {
	      return 0;
	    }
	    var base = this.base;
	    var positiveMin = this.positiveMin;
	    // 如果min == 0, 则根据比0大的最小值，计算比例关系。这个最小值作为坐标轴上的第二个tick，第一个是0但是不显示
	    if (positiveMin) {
	      min = positiveMin * 1 / base;
	    }
	    var percent = void 0;
	    // 如果数值小于次小值，那么就计算 value / 次小值 占整体的比例
	    if (value < positiveMin) {
	      percent = value / positiveMin / (log(base, max) - log(base, min));
	    } else {
	      percent = (log(base, value) - log(base, min)) / (log(base, max) - log(base, min));
	    }
	    return percent;
	  };

	  /**
	   * @override
	   */


	  Log.prototype.scale = function scale(value) {
	    var percent = this._getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };
	  /**
	   * @override
	   */


	  Log.prototype.invert = function invert(value) {
	    var base = this.base;
	    var max = log(base, this.max);
	    var rangeMin = this.rangeMin();
	    var range = this.rangeMax() - rangeMin;
	    var min = void 0;
	    var positiveMin = this.positiveMin;
	    if (positiveMin) {
	      if (value === 0) {
	        return 0;
	      }
	      min = log(base, positiveMin / base);
	      var appendPercent = 1 / (max - min) * range; // 0 到 positiveMin的占比
	      if (value < appendPercent) {
	        // 落到 0 - positiveMin 之间
	        return value / appendPercent * positiveMin;
	      }
	    } else {
	      min = log(base, this.min);
	    }
	    var percent = (value - rangeMin) / range;
	    var tmp = percent * (max - min) + min;
	    return Math.pow(base, tmp);
	  };

	  return Log;
	}(Linear);

	module.exports = Log;

	/***/ }),
	/* 298 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 使用pow进行度量计算
	 * @author dxq613@gmail.com
	 */

	var Linear = __webpack_require__(37);
	var Util = __webpack_require__(0);

	// 求以a为次幂，结果为b的基数，如 x^^a = b;求x
	function calBase(a, b) {
	  var e = Math.E;
	  var value = Math.pow(e, Math.log(b) / a); // 使用换底公式求底
	  return value;
	}

	/**
	 * 度量的Pow计算
	 * @class Scale.Log
	 */

	var Pow = function (_Linear) {
	  _inherits(Pow, _Linear);

	  function Pow() {
	    _classCallCheck(this, Pow);

	    return _possibleConstructorReturn(this, _Linear.apply(this, arguments));
	  }

	  /**
	   * @override
	   */
	  Pow.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Linear.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * @override
	       */
	      type: 'pow',

	      /**
	       * 进行pow计算的基数
	       * @type {Number}
	       */
	      exponent: 2,

	      /**
	       * @override
	       * pow 的坐标点的个数控制在10个以下
	       * @type {Number}
	       */
	      tickCount: 10
	    });
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.calculateTicks = function calculateTicks() {
	    var self = this;
	    var exponent = self.exponent;
	    var min = void 0;
	    var max = Math.ceil(calBase(exponent, self.max));

	    if (self.min >= 0) {
	      min = Math.floor(calBase(exponent, self.min));
	    } else {
	      min = 0;
	    }
	    if (min > max) {
	      var tmp = max;
	      max = min;
	      min = tmp;
	    }
	    var count = max - min;
	    var tickCount = self.tickCount;
	    var avg = Math.ceil(count / tickCount);
	    var ticks = [];

	    for (var i = min; i < max + avg; i = i + avg) {
	      ticks.push(Math.pow(i, exponent));
	    }
	    return ticks;
	  };

	  // 获取度量计算时，value占的定义域百分比


	  Pow.prototype._getScalePercent = function _getScalePercent(value) {
	    var max = this.max;
	    var min = this.min;
	    if (max === min) {
	      return 0;
	    }
	    var exponent = this.exponent;
	    var percent = (calBase(exponent, value) - calBase(exponent, min)) / (calBase(exponent, max) - calBase(exponent, min));
	    return percent;
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.scale = function scale(value) {
	    var percent = this._getScalePercent(value);
	    var rangeMin = this.rangeMin();
	    var rangeMax = this.rangeMax();
	    return rangeMin + percent * (rangeMax - rangeMin);
	  };

	  /**
	   * @override
	   */


	  Pow.prototype.invert = function invert(value) {
	    var percent = (value - this.rangeMin()) / (this.rangeMax() - this.rangeMin());
	    var exponent = this.exponent;
	    var max = calBase(exponent, this.max);
	    var min = calBase(exponent, this.min);
	    var tmp = percent * (max - min) + min;
	    return Math.pow(tmp, exponent);
	  };

	  return Pow;
	}(Linear);

	module.exports = Pow;

	/***/ }),
	/* 299 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Coord = __webpack_require__(300);

	var CoordController = function () {
	  function CoordController(option) {
	    _classCallCheck(this, CoordController);

	    this.type = 'rect';
	    this.actions = [];
	    this.cfg = {};
	    Util.mix(this, option);
	    this.option = option || {};
	  }

	  CoordController.prototype.reset = function reset(coordOption) {
	    this.actions = coordOption.actions || [];
	    this.type = coordOption.type;
	    this.cfg = coordOption.cfg;
	    this.option.actions = this.actions;
	    this.option.type = this.type;
	    this.option.cfg = this.cfg;
	    return this;
	  };

	  CoordController.prototype._execActions = function _execActions(coord) {
	    var actions = this.actions;
	    Util.each(actions, function (action) {
	      var m = action[0];
	      coord[m](action[1], action[2]);
	    });
	  };

	  CoordController.prototype.hasAction = function hasAction(actionName) {
	    var actions = this.actions;
	    var rst = false;
	    Util.each(actions, function (action) {
	      if (actionName === action[0]) {
	        rst = true;
	        return false;
	      }
	    });
	    return rst;
	  };
	  /**
	   * 创建坐标系对象
	   * @param  {Object} start 坐标系起始点
	   * @param  {Object} end   坐标系结束点
	   * @return {Function} 坐标系的构造函数
	   */


	  CoordController.prototype.createCoord = function createCoord(start, end) {
	    var self = this;
	    var type = self.type;
	    var cfg = self.cfg;
	    var C = void 0; // 构造函数
	    var coord = void 0;

	    var coordCfg = Util.mix({
	      start: start,
	      end: end
	    }, cfg);

	    if (type === 'theta') {
	      // definition of theta coord
	      C = Coord.Polar;

	      if (!self.hasAction('transpose')) {
	        self.transpose(); // 极坐标，同时transpose
	      }
	      coord = new C(coordCfg);
	      coord.type = type;
	    } else {
	      C = Coord[Util.upperFirst(type)] || Coord.Rect;
	      coord = new C(coordCfg);
	    }

	    self._execActions(coord);
	    return coord;
	  };

	  CoordController.prototype.rotate = function rotate(angle) {
	    angle = angle * Math.PI / 180;
	    this.actions.push(['rotate', angle]);
	    return this;
	  };

	  CoordController.prototype.reflect = function reflect(dim) {
	    this.actions.push(['reflect', dim]);
	    return this;
	  };

	  CoordController.prototype.scale = function scale(sx, sy) {
	    this.actions.push(['scale', sx, sy]);
	    return this;
	  };

	  CoordController.prototype.transpose = function transpose() {
	    this.actions.push(['transpose']);
	    return this;
	  };

	  return CoordController;
	}();

	module.exports = CoordController;

	/***/ }),
	/* 300 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of coordinate
	 * @author sima.zhang1990@gmail.com
	 */
	var Coord = __webpack_require__(38);
	Coord.Cartesian = __webpack_require__(301);
	Coord.Rect = Coord.Cartesian;
	Coord.Polar = __webpack_require__(302);
	Coord.Helix = __webpack_require__(303);

	module.exports = Coord;

	/***/ }),
	/* 301 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Cartesian Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);

	var Cartesian = function (_Base) {
	  _inherits(Cartesian, _Base);

	  /**
	   * @override
	   */
	  Cartesian.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      start: {
	        x: 0,
	        y: 0
	      },
	      end: {
	        x: 0,
	        y: 0
	      },
	      type: 'cartesian',
	      isRect: true
	    });
	  };

	  function Cartesian(cfg) {
	    _classCallCheck(this, Cartesian);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Cartesian.prototype._init = function _init() {
	    var start = this.start,
	        end = this.end;

	    var x = {
	      start: start.x,
	      end: end.x
	    };
	    var y = {
	      start: start.y,
	      end: end.y
	    };
	    this.x = x;
	    this.y = y;
	  };

	  Cartesian.prototype.convertPoint = function convertPoint(point) {
	    var x = void 0;
	    var y = void 0;
	    if (this.isTransposed) {
	      x = point.y;
	      y = point.x;
	    } else {
	      x = point.x;
	      y = point.y;
	    }

	    return {
	      x: this.convertDim(x, 'x'),
	      y: this.convertDim(y, 'y')
	    };
	  };

	  Cartesian.prototype.invertPoint = function invertPoint(point) {
	    var x = this.invertDim(point.x, 'x');
	    var y = this.invertDim(point.y, 'y');

	    if (this.isTransposed) {
	      return {
	        x: y,
	        y: x
	      };
	    }

	    return {
	      x: x,
	      y: y
	    };
	  };

	  return Cartesian;
	}(Base);

	module.exports = Cartesian;

	/***/ }),
	/* 302 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Polar Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var mat3 = MatrixUtil.mat3;
	var vec2 = MatrixUtil.vec2;
	var vec3 = MatrixUtil.vec3;

	var Polar = function (_Base) {
	  _inherits(Polar, _Base);

	  Polar.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      startAngle: -Math.PI / 2,
	      endAngle: Math.PI * 3 / 2,
	      innerRadius: 0,
	      type: 'polar',
	      isPolar: true
	    });
	  };

	  function Polar(cfg) {
	    _classCallCheck(this, Polar);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Polar.prototype._init = function _init() {
	    var radius = this.radius;
	    var innerRadius = this.innerRadius;
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;
	    var center = this.center;
	    var oneBox = this.getOneBox();

	    var oneWidth = oneBox.maxX - oneBox.minX;
	    var oneHeight = oneBox.maxY - oneBox.minY;
	    var left = Math.abs(oneBox.minX) / oneWidth;
	    var top = Math.abs(oneBox.minY) / oneHeight;
	    var width = this.width;
	    var height = this.height;
	    var maxRadius = void 0;
	    var circleCentre = void 0;
	    if (height / oneHeight > width / oneWidth) {
	      // width为主
	      maxRadius = width / oneWidth;
	      circleCentre = {
	        x: center.x - (0.5 - left) * width,
	        y: center.y - (0.5 - top) * maxRadius * oneHeight
	      };
	    } else {
	      // height为主
	      maxRadius = height / oneHeight;
	      circleCentre = {
	        x: center.x - (0.5 - left) * maxRadius * oneWidth,
	        y: center.y - (0.5 - top) * height
	      };
	    }

	    if (!radius) {
	      radius = maxRadius;
	    } else if (radius > 0 && radius <= 1) {
	      radius = maxRadius * radius;
	    } else if (radius <= 0 || radius > maxRadius) {
	      radius = maxRadius;
	    }

	    var x = {
	      start: startAngle,
	      end: endAngle
	    };

	    var y = {
	      start: innerRadius * radius,
	      end: radius
	    };

	    this.x = x;
	    this.y = y;
	    this.radius = radius;
	    this.circleCentre = circleCentre;
	    this.center = circleCentre;
	  };

	  Polar.prototype.getCenter = function getCenter() {
	    return this.circleCentre;
	  };

	  Polar.prototype.getOneBox = function getOneBox() {
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;
	    if (endAngle - startAngle >= Math.PI * 2) {
	      return {
	        minX: -1,
	        maxX: 1,
	        minY: -1,
	        maxY: 1
	      };
	    }
	    var xs = [0, Math.cos(startAngle), Math.cos(endAngle)];
	    var ys = [0, Math.sin(startAngle), Math.sin(endAngle)];

	    for (var i = -Math.PI * 5 / 2; i < Math.PI * 3 / 2; i += Math.PI / 2) {
	      if (startAngle <= i && i <= endAngle) {
	        xs.push(Math.cos(i));
	        ys.push(Math.sin(i));
	      }
	    }

	    return {
	      minX: Math.min.apply(Math, xs),
	      maxX: Math.max.apply(Math, xs),
	      minY: Math.min.apply(Math, ys),
	      maxY: Math.max.apply(Math, ys)
	    };
	  };

	  Polar.prototype.getRadius = function getRadius() {
	    return this.radius;
	  };

	  Polar.prototype.convertPoint = function convertPoint(point) {
	    var center = this.getCenter();
	    var x = this.isTransposed ? point.y : point.x;
	    var y = this.isTransposed ? point.x : point.y;

	    x = this.convertDim(x, 'x');
	    y = this.convertDim(y, 'y');

	    return {
	      x: center.x + Math.cos(x) * y,
	      y: center.y + Math.sin(x) * y
	    };
	  };

	  Polar.prototype.invertPoint = function invertPoint(point) {
	    var center = this.getCenter();
	    var vPoint = [point.x - center.x, point.y - center.y];
	    var x = this.x;
	    var m = [1, 0, 0, 0, 1, 0, 0, 0, 1];
	    mat3.rotate(m, m, x.start);

	    var vStart = [1, 0, 0];
	    vec3.transformMat3(vStart, vStart, m);
	    vStart = [vStart[0], vStart[1]];
	    var angle = vec2.angleTo(vStart, vPoint, x.end < x.start);
	    if (Util.snapEqual(angle, Math.PI * 2)) {
	      angle = 0;
	    }
	    var radius = vec2.length(vPoint);

	    var xPercent = angle / (x.end - x.start);
	    xPercent = x.end - x.start > 0 ? xPercent : -xPercent;

	    var yPercent = this.invertDim(radius, 'y');
	    var rst = {};
	    rst.x = this.isTransposed ? yPercent : xPercent;
	    rst.y = this.isTransposed ? xPercent : yPercent;
	    return rst;
	  };

	  return Polar;
	}(Base);

	module.exports = Polar;

	/***/ }),
	/* 303 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the class of Helix Coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(38);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var vec2 = MatrixUtil.vec2;

	var Helix = function (_Base) {
	  _inherits(Helix, _Base);

	  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      startAngle: 1.25 * Math.PI,
	      endAngle: 7.25 * Math.PI,
	      innerRadius: 0,
	      type: 'helix',
	      isHelix: true
	    });
	  };

	  function Helix(cfg) {
	    _classCallCheck(this, Helix);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init();
	    return _this;
	  }

	  Helix.prototype._init = function _init() {
	    var width = this.width;
	    var height = this.height;
	    var radius = this.radius;
	    var innerRadius = this.innerRadius;
	    var startAngle = this.startAngle;
	    var endAngle = this.endAngle;

	    var index = (endAngle - startAngle) / (2 * Math.PI) + 1; // 螺线圈数
	    var maxRadius = Math.min(width, height) / 2;
	    if (radius && radius >= 0 && radius <= 1) {
	      maxRadius = maxRadius * radius;
	    }

	    var d = Math.floor(maxRadius * (1 - innerRadius) / index);
	    var a = d / (Math.PI * 2); // 螺线系数

	    var x = {
	      start: startAngle,
	      end: endAngle
	    };
	    var y = {
	      start: innerRadius * maxRadius,
	      end: innerRadius * maxRadius + d * 0.99
	    };

	    this.a = a;
	    this.d = d;
	    this.x = x;
	    this.y = y;
	  };

	  Helix.prototype.getCenter = function getCenter() {
	    return this.center;
	  };

	  /**
	   * 将百分比数据变成屏幕坐标
	   * @param  {Object} point 归一化的点坐标
	   * @return {Object}       返回对应的屏幕坐标
	   */


	  Helix.prototype.convertPoint = function convertPoint(point) {
	    var a = this.a;
	    var center = this.center;
	    var x = void 0;
	    var y = void 0;

	    if (this.isTransposed) {
	      x = point.y;
	      y = point.x;
	    } else {
	      x = point.x;
	      y = point.y;
	    }

	    var thi = this.convertDim(x, 'x');
	    var r = a * thi;
	    var newY = this.convertDim(y, 'y');

	    return {
	      x: center.x + Math.cos(thi) * (r + newY),
	      y: center.y + Math.sin(thi) * (r + newY)
	    };
	  };

	  /**
	   * 将屏幕坐标点还原成百分比数据
	   * @param  {Object} point 屏幕坐标
	   * @return {Object}       返回对应的归一化后的数据
	   */


	  Helix.prototype.invertPoint = function invertPoint(point) {
	    var center = this.center;
	    var a = this.a;
	    var d = this.d + this.y.start;
	    var v = vec2.subtract([], [point.x, point.y], [center.x, center.y]);
	    var thi = vec2.angleTo(v, [1, 0], true);
	    var rMin = thi * a; // 坐标与原点的连线在第一圈上的交点，最小r值

	    if (vec2.length(v) < rMin) {
	      // 坐标与原点的连线不可能小于最小r值，但不排除因小数计算产生的略小于rMin的情况
	      rMin = vec2.length(v);
	    }

	    var index = Math.floor((vec2.length(v) - rMin) / d); // 当前点位于第index圈
	    thi = 2 * index * Math.PI + thi;
	    var r = a * thi;
	    var newY = vec2.length(v) - r;
	    newY = Util.snapEqual(newY, 0) ? 0 : newY;

	    var x = this.invertDim(thi, 'x');
	    var y = this.invertDim(newY, 'y');
	    x = Util.snapEqual(x, 0) ? 0 : x;
	    y = Util.snapEqual(y, 0) ? 0 : y;

	    var rst = {};
	    rst.x = this.isTransposed ? y : x;
	    rst.y = this.isTransposed ? x : y;
	    return rst;
	  };

	  return Helix;
	}(Base);

	module.exports = Helix;

	/***/ }),
	/* 304 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of axis
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Axis = __webpack_require__(305);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Global = __webpack_require__(2);

	function formatTicks(ticks) {
	  var tmp = [];
	  if (ticks.length > 0) {
	    tmp = ticks.slice(0);
	    var first = tmp[0];
	    var last = tmp[tmp.length - 1];
	    if (first.value !== 0) {
	      tmp.unshift({
	        value: 0
	      });
	    }
	    if (last.value !== 1) {
	      tmp.push({
	        value: 1
	      });
	    }
	  }
	  return tmp;
	}

	function fillAxisTicks(ticks, isLinear, gridCentering) {
	  var result = [];
	  if (ticks.length < 1) return result;

	  if (ticks.length >= 2 && isLinear && gridCentering) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 0
	    });
	  }
	  if (ticks[0].value !== 0) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 0
	    });
	  }
	  result = result.concat(ticks);
	  if (result[result.length - 1].value !== 1) {
	    result.push({
	      text: '',
	      tickValue: '',
	      value: 1
	    });
	  }
	  return result;
	}

	var AxisController = function () {
	  function AxisController(cfg) {
	    _classCallCheck(this, AxisController);

	    this.visible = true;
	    this.container = null;
	    this.coord = null;
	    this.options = null;
	    this.axes = [];
	    Util.mix(this, cfg);
	  }

	  AxisController.prototype._isHide = function _isHide(field) {
	    // 对应的坐标轴是否隐藏
	    var options = this.options;

	    if (options && options[field] === false) {
	      return true;
	    }
	    return false;
	  };

	  AxisController.prototype._getMiddleValue = function _getMiddleValue(curValue, ticks, index, isLinear) {
	    if (curValue === 0 && !isLinear) {
	      return 0;
	    }
	    if (curValue === 1) {
	      return 1;
	    }
	    var nextValue = ticks[index + 1].value;
	    if (!isLinear && nextValue === 1) {
	      return 1;
	    }
	    return (curValue + nextValue) / 2;
	  };

	  AxisController.prototype._getLineRange = function _getLineRange(coord, scale, dimType, index) {
	    var start = void 0;
	    var end = void 0;
	    var isVertical = void 0;
	    var field = scale.field;
	    var options = this.options;
	    var position = '';
	    if (options[field] && options[field].position) {
	      position = options[field].position;
	    }

	    if (dimType === 'x') {
	      // x轴的坐标轴,底部的横坐标
	      start = {
	        x: 0,
	        y: position === 'top' ? 1 : 0
	      };
	      end = {
	        x: 1,
	        y: position === 'top' ? 1 : 0
	      };
	      isVertical = false;
	    } else {
	      // y轴坐标轴
	      if (index) {
	        // 多轴的情况
	        start = {
	          x: position === 'left' ? 0 : 1,
	          y: 0
	        };
	        end = {
	          x: position === 'left' ? 0 : 1,
	          y: 1
	        };
	      } else {
	        // 单个y轴，或者第一个y轴
	        start = {
	          x: position === 'right' ? 1 : 0,
	          y: 0
	        };
	        end = {
	          x: position === 'right' ? 1 : 0,
	          y: 1
	        };
	      }
	      isVertical = true;
	    }

	    start = coord.convert(start);
	    end = coord.convert(end);

	    return {
	      start: start,
	      end: end,
	      isVertical: isVertical
	    };
	  };

	  AxisController.prototype._getLineCfg = function _getLineCfg(coord, scale, dimType, index) {
	    var factor = void 0;
	    var range = this._getLineRange(coord, scale, dimType, index);
	    var isVertical = range.isVertical; // 标识该坐标轴是否是纵坐标
	    var start = range.start;
	    var end = range.end;
	    var center = coord.center;

	    if (coord.isTransposed) {
	      isVertical = !isVertical;
	    }

	    if (isVertical && start.x > center.x || !isVertical && start.y > center.y) {
	      factor = 1;
	    } else {
	      factor = -1;
	    }

	    return {
	      isVertical: isVertical,
	      factor: factor,
	      start: start,
	      end: end
	    };
	  };

	  // 获取圆弧坐标轴配置项信息


	  AxisController.prototype._getCircleCfg = function _getCircleCfg(coord) {
	    var circleCfg = {};
	    var rangeX = coord.x;
	    var rangeY = coord.y;
	    var isReflectY = rangeY.start > rangeY.end;
	    var start = void 0;
	    if (coord.isTransposed) {
	      start = {
	        x: isReflectY ? 0 : 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: isReflectY ? 0 : 1
	      };
	    }

	    start = coord.convert(start);
	    var center = coord.circleCentre;
	    var startVector = [start.x - center.x, start.y - center.y];
	    var normalVector = [1, 0];
	    var startAngle = void 0;
	    if (start.y > center.y) {
	      startAngle = vec2.angle(startVector, normalVector);
	    } else {
	      startAngle = vec2.angle(startVector, normalVector) * -1;
	    }
	    var endAngle = startAngle + (rangeX.end - rangeX.start);

	    circleCfg.startAngle = startAngle;
	    circleCfg.endAngle = endAngle;
	    circleCfg.center = center;
	    circleCfg.radius = Math.sqrt(Math.pow(start.x - center.x, 2) + Math.pow(start.y - center.y, 2));
	    circleCfg.inner = coord.innerRadius || 0;
	    return circleCfg;
	  };

	  AxisController.prototype._getRadiusCfg = function _getRadiusCfg(coord) {
	    var startAngle = coord.x.start;
	    var factor = startAngle < 0 ? -1 : 1;
	    var start = void 0;
	    var end = void 0;
	    if (coord.isTransposed) {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 1,
	        y: 0
	      };
	    } else {
	      start = {
	        x: 0,
	        y: 0
	      };
	      end = {
	        x: 0,
	        y: 1
	      };
	    }
	    return {
	      factor: factor,
	      start: coord.convert(start),
	      end: coord.convert(end)
	    };
	  };

	  // 确定坐标轴的位置


	  AxisController.prototype._getAxisPosition = function _getAxisPosition(coord, dimType, index, field) {
	    var position = '';
	    // 用户自己定义了 position
	    var options = this.options;
	    if (options[field] && options[field].position) {
	      position = options[field].position;
	    } else {
	      var coordType = coord.type;
	      if (coord.isRect) {
	        if (dimType === 'x') {
	          position = 'bottom';
	        } else if (dimType === 'y') {
	          if (index) {
	            position = 'right';
	          } else {
	            position = 'left';
	          }
	        }
	      } else if (coordType === 'helix') {
	        position = 'helix';
	      } else if (dimType === 'x') {
	        position = coord.isTransposed ? 'radius' : 'circle';
	      } else {
	        position = coord.isTransposed ? 'circle' : 'radius';
	      }
	    }

	    return position;
	  };

	  // 获取坐标轴构成的配置信息


	  AxisController.prototype._getAxisDefaultCfg = function _getAxisDefaultCfg(coord, scale, type, position) {
	    var self = this;
	    var cfg = {};
	    var options = self.options;
	    var field = scale.field;

	    cfg = Util.deepMix({}, Global.axis[position], cfg, options[field]);
	    if (cfg.title) {
	      Util.deepMix(cfg, {
	        title: {
	          text: scale.alias || field
	        }
	      });
	    }

	    cfg.ticks = scale.getTicks();

	    if (coord.isPolar && !scale.isCategory) {
	      if (type === 'x' && Math.abs(coord.endAngle - coord.startAngle) === Math.PI * 2) {
	        cfg.ticks.pop();
	      }
	    }

	    cfg.coord = coord;
	    if (cfg.label && Util.isNil(cfg.label.autoRotate)) {
	      cfg.label.autoRotate = true; // 允许自动旋转，避免重叠
	    }

	    if (options.hasOwnProperty('xField') && options.xField.hasOwnProperty('grid')) {
	      if (cfg.position === 'left') {
	        Util.deepMix(cfg, options.xField);
	      }
	    }

	    return cfg;
	  };

	  // 确定坐标轴的配置信息


	  AxisController.prototype._getAxisCfg = function _getAxisCfg(coord, scale, verticalScale, dimType) {
	    var index = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : '';
	    var viewId = arguments[5];

	    var self = this;
	    var position = self._getAxisPosition(coord, dimType, index, scale.field);
	    var cfg = self._getAxisDefaultCfg(coord, scale, dimType, position);
	    if (!Util.isEmpty(cfg.grid) && verticalScale) {
	      // 生成 gridPoints
	      var gridPoints = [];
	      var tickValues = [];
	      var verticalTicks = formatTicks(verticalScale.getTicks());
	      // 没有垂直的坐标点时不会只栅格
	      if (verticalTicks.length) {
	        var ticks = fillAxisTicks(cfg.ticks, scale.isLinear, cfg.grid.align === 'center');
	        Util.each(ticks, function (tick, idx) {
	          tickValues.push(tick.tickValue);
	          var subPoints = [];
	          var value = tick.value;
	          if (cfg.grid.align === 'center') {
	            value = self._getMiddleValue(value, ticks, idx, scale.isLinear);
	          }
	          if (!Util.isNil(value)) {
	            var rangeX = coord.x;
	            var rangeY = coord.y;
	            Util.each(verticalTicks, function (verticalTick) {
	              var x = dimType === 'x' ? value : verticalTick.value;
	              var y = dimType === 'x' ? verticalTick.value : value;
	              var point = coord.convert({
	                x: x,
	                y: y
	              });
	              if (coord.isPolar) {
	                var center = coord.circleCentre;
	                if (rangeY.start > rangeY.end) {
	                  y = 1 - y;
	                }
	                point.flag = rangeX.start > rangeX.end ? 0 : 1;
	                point.radius = Math.sqrt(Math.pow(point.x - center.x, 2) + Math.pow(point.y - center.y, 2));
	              }
	              subPoints.push(point);
	            });
	            gridPoints.push({
	              _id: viewId + '-' + dimType + index + '-grid-' + tick.tickValue,
	              points: subPoints
	            });
	          }
	        });
	      }
	      cfg.grid.items = gridPoints;
	      cfg.grid.tickValues = tickValues;
	    }
	    cfg.type = scale.type;
	    return cfg;
	  };

	  AxisController.prototype._getHelixCfg = function _getHelixCfg(coord) {
	    var helixCfg = {};
	    var a = coord.a;
	    var startAngle = coord.startAngle;
	    var endAngle = coord.endAngle;
	    var index = 100;
	    var crp = [];
	    for (var i = 0; i <= index; i++) {
	      var point = coord.convert({
	        x: i / 100,
	        y: 0
	      });
	      crp.push(point.x);
	      crp.push(point.y);
	    }
	    var axisStart = coord.convert({
	      x: 0,
	      y: 0
	    });
	    helixCfg.a = a;
	    helixCfg.startAngle = startAngle;
	    helixCfg.endAngle = endAngle;
	    helixCfg.crp = crp;
	    helixCfg.axisStart = axisStart;
	    helixCfg.center = coord.center;
	    helixCfg.inner = coord.y.start; // 内半径
	    return helixCfg;
	  };

	  AxisController.prototype._drawAxis = function _drawAxis(coord, scale, verticalScale, dimType, viewId, xAxis, index) {
	    var container = this.container;
	    var C = void 0; // 坐标轴类
	    var appendCfg = void 0; // 每个坐标轴 start end 等绘制边界的信息

	    if (coord.type === 'cartesian') {
	      C = Axis.Line;
	      appendCfg = this._getLineCfg(coord, scale, dimType, index);
	    } else if (coord.type === 'helix' && dimType === 'x') {
	      C = Axis.Helix;
	      appendCfg = this._getHelixCfg(coord);
	    } else if (dimType === 'x') {
	      C = Axis.Circle;
	      appendCfg = this._getCircleCfg(coord);
	    } else {
	      C = Axis.Line;
	      appendCfg = this._getRadiusCfg(coord);
	    }
	    var cfg = this._getAxisCfg(coord, scale, verticalScale, dimType, index, viewId);
	    cfg = Util.mix({}, cfg, appendCfg);

	    if (dimType === 'y' && xAxis && xAxis.get('type') === 'circle') {
	      cfg.circle = xAxis;
	    }
	    cfg._id = viewId + '-' + dimType;
	    if (!Util.isNil(index)) {
	      cfg._id = viewId + '-' + dimType + index;
	    }

	    var axis = container.addGroup(C, cfg);
	    this.axes.push(axis);
	    return axis;
	  };

	  AxisController.prototype.createAxis = function createAxis(xScale, yScales, viewId) {
	    var self = this;
	    var coord = this.coord;
	    var coordType = coord.type;

	    // theta坐标系默认不绘制坐标轴
	    if (coordType !== 'theta' && !(coordType === 'polar' && coord.isTransposed)) {
	      var xAxis = void 0;
	      if (xScale && !self._isHide(xScale.field)) {
	        xAxis = self._drawAxis(coord, xScale, yScales[0], 'x', viewId); // 绘制 x 轴
	      }
	      if (!Util.isEmpty(yScales) && coordType !== 'helix') {
	        Util.each(yScales, function (yScale, index) {
	          if (!self._isHide(yScale.field)) {
	            self._drawAxis(coord, yScale, xScale, 'y', viewId, xAxis, index);
	          }
	        });
	      }
	    }
	  };

	  AxisController.prototype.changeVisible = function changeVisible(visible) {
	    var axes = this.axes;
	    Util.each(axes, function (axis) {
	      axis.set('visible', visible);
	    });
	  };

	  AxisController.prototype.clear = function clear() {
	    var axes = this.axes;
	    Util.each(axes, function (axis) {
	      axis.remove();
	    });
	    this.axes = [];
	  };

	  return AxisController;
	}();

	module.exports = AxisController;

	/***/ }),
	/* 305 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of axis
	 * @author sima.zhang
	 */
	module.exports = {
	  Line: __webpack_require__(306), // 基础的直线坐标轴
	  Circle: __webpack_require__(308), // 极坐标下
	  Helix: __webpack_require__(309), // 螺旋坐标轴
	  PolyLine: __webpack_require__(310) // 多线段组成的坐标轴
	};

	/***/ }),
	/* 306 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the radius axis of polar coordinate and axis of cartesian coordinate
	 * @author sima.zhang
	 */
	var Base = __webpack_require__(39);
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil;

	var vec2 = MatrixUtil.vec2;

	var Line = function (_Base) {
	  _inherits(Line, _Base);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      x: null, // @type {Number} 距离初始位置的x轴偏移量,仅对于左侧、右侧的纵向坐标有效
	      y: null, // @type {Number} 距离初始位置的y轴偏移量，仅对顶部、底部的横向坐标轴有效
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      isVertical: false,
	      start: null, // @type {Object} 起点
	      end: null // @type {Object} 终点
	    });
	  };

	  Line.prototype._getAvgLabelLength = function _getAvgLabelLength(labelsGroup) {
	    var labels = labelsGroup.get('children');
	    return labels[1].attr('x') - labels[0].attr('x');
	  };

	  /**
	   * 获取距离坐标轴的向量
	   * @override
	   * @param  {Number} offset 偏移值
	   * @return {Array}        返回二维向量
	   */


	  Line.prototype.getSideVector = function getSideVector(offset) {
	    var self = this;
	    var factor = self.get('factor');
	    var isVertical = self.get('isVertical');
	    var start = self.get('start');
	    var end = self.get('end');
	    var axisVector = self.getAxisVector();
	    var normal = vec2.normalize([], axisVector);
	    var direction = false;
	    if (isVertical && start.y < end.y || !isVertical && start.x > end.x) {
	      direction = true;
	    }
	    var verticalVector = vec2.vertical([], normal, direction);
	    return vec2.scale([], verticalVector, offset * factor);
	  };

	  Line.prototype.getAxisVector = function getAxisVector() {
	    var start = this.get('start');
	    var end = this.get('end');
	    return [end.x - start.x, end.y - start.y];
	  };

	  Line.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    return path;
	  };

	  Line.prototype.getTickEnd = function getTickEnd(start, value) {
	    var self = this;
	    var offsetVector = self.getSideVector(value);
	    return {
	      x: start.x + offsetVector[0],
	      y: start.y + offsetVector[1]
	    };
	  };

	  Line.prototype.getTickPoint = function getTickPoint(tickValue) {
	    var self = this;
	    var start = self.get('start');
	    var end = self.get('end');
	    var rangeX = end.x - start.x;
	    var rangeY = end.y - start.y;
	    return {
	      x: start.x + rangeX * tickValue,
	      y: start.y + rangeY * tickValue
	    };
	  };

	  Line.prototype.renderTitle = function renderTitle() {
	    var self = this;
	    var title = self.get('title');
	    var offsetPoint = self.getTickPoint(0.5);
	    var titleOffset = title.offset;
	    if (Util.isNil(titleOffset)) {
	      // 没有指定 offset 则自动计算
	      titleOffset = 20;
	      var labelsGroup = self.get('labelsGroup');
	      if (labelsGroup) {
	        var labelLength = self.getMaxLabelWidth(labelsGroup);
	        var labelOffset = self.get('label').offset || self.get('_labelOffset');
	        titleOffset += labelLength + labelOffset;
	      }
	    }

	    var textStyle = title.textStyle;
	    var cfg = Util.mix({}, textStyle);
	    if (title.text) {
	      var vector = self.getAxisVector(); // 坐标轴方向的向量
	      if (title.autoRotate && Util.isNil(textStyle.rotate)) {
	        // 自动旋转并且用户没有指定标题的旋转角度
	        var angle = 0;
	        if (!Util.snapEqual(vector[1], 0)) {
	          // 所有水平坐标轴，文本不转置
	          var v1 = [1, 0];
	          var v2 = [vector[0], vector[1]];
	          angle = vec2.angleTo(v2, v1, true);
	        }

	        cfg.rotate = angle * (180 / Math.PI);
	      } else if (!Util.isNil(textStyle.rotate)) {
	        // 用户设置了旋转角度就以用户设置的为准
	        cfg.rotate = textStyle.rotate / 180 * Math.PI; // 将角度转换为弧度
	      }

	      var sideVector = self.getSideVector(titleOffset);
	      var point = void 0;
	      var position = title.position;
	      if (position === 'start') {
	        point = {
	          x: this.get('start').x + sideVector[0],
	          y: this.get('start').y + sideVector[1]
	        };
	      } else if (position === 'end') {
	        point = {
	          x: this.get('end').x + sideVector[0],
	          y: this.get('end').y + sideVector[1]
	        };
	      } else {
	        point = {
	          x: offsetPoint.x + sideVector[0],
	          y: offsetPoint.y + sideVector[1]
	        };
	      }

	      cfg.x = point.x;
	      cfg.y = point.y;
	      cfg.text = title.text;

	      var titleShape = self.addShape('Text', {
	        zIndex: 2,
	        attrs: cfg
	      });
	      titleShape.name = 'axis-title';
	      self.get('appendInfo') && titleShape.setSilent('appendInfo', self.get('appendInfo'));
	    }
	  };

	  Line.prototype.autoRotateLabels = function autoRotateLabels() {
	    var self = this;
	    var labelsGroup = self.get('labelsGroup');
	    var title = self.get('title');
	    if (labelsGroup) {
	      var offset = self.get('label').offset;
	      var append = 12;
	      var titleOffset = title ? title.offset : 48;
	      if (titleOffset < 0) {
	        // 如果是负的的话就不旋转
	        return;
	      }
	      var vector = self.getAxisVector(); // 坐标轴的向量，仅处理水平或者垂直的场景
	      var angle = void 0;
	      var maxWidth = void 0;
	      if (Util.snapEqual(vector[0], 0) && title && title.text) {
	        // 坐标轴垂直，由于不知道边距，只能防止跟title重合，如果title不存在，则不自动旋转
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if (maxWidth > titleOffset - offset - append) {
	          angle = Math.acos((titleOffset - offset - append) / maxWidth) * -1;
	        }
	      } else if (Util.snapEqual(vector[1], 0) && labelsGroup.getCount() > 1) {
	        // 坐标轴水平，不考虑边距，根据最长的和平均值进行翻转
	        var avgWidth = Math.abs(self._getAvgLabelLength(labelsGroup));
	        maxWidth = self.getMaxLabelWidth(labelsGroup);
	        if (maxWidth > avgWidth) {
	          angle = Math.asin((titleOffset - offset - append) * 1.25 / maxWidth);
	        }
	      }

	      if (angle) {
	        var factor = self.get('factor');
	        Util.each(labelsGroup.get('children'), function (label) {
	          label.rotateAtStart(angle);
	          if (Util.snapEqual(vector[1], 0)) {
	            if (factor > 0) {
	              label.attr('textAlign', 'left');
	            } else {
	              label.attr('textAlign', 'right');
	            }
	          }
	        });
	      }
	    }
	  };

	  return Line;
	}(Base);

	module.exports = Line;

	/***/ }),
	/* 307 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the grid of axis
	 * @author sima.zhang
	 */
	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var Util = __webpack_require__(0);

	var Grid = function (_Group) {
	  _inherits(Grid, _Group);

	  function Grid() {
	    _classCallCheck(this, Grid);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Grid.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      zIndex: 1,
	      /**
	       * 栅格线的类型
	       *  - line 不封闭的线
	       *  - polygon 封闭的多边形
	       * @type {String}
	       */
	      type: 'line',
	      /**
	       * 线的样式配置
	       * @type {Object}
	       */
	      lineStyle: null,
	      /**
	       * 线集合的配置
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 为网格设置交替的背景色，指定一个值则先渲染奇数层，两个值则交替渲染
	       * @type {String | Array}
	       */
	      alternateColor: null,
	      matrix: null,
	      /**
	       * 是否隐藏第一条网格线，默认为 false
	       * @type {Boolean}
	       */
	      hideFirstLine: false,
	      /**
	       * 是否隐藏最后一条网格线，默认为 false
	       * @type {Boolean}
	       */
	      hideLastLine: false,
	      /**
	       * 0基线不在轴线上时，是否强调0基线
	       * @type {Boolean}
	       */
	      hightLightZero: true,
	      /**
	       * 0基线样式
	       * @type {Object}
	       */
	      zeroLineStyle: { stroke: '#000', lineDash: [0, 0] }
	    };
	  };

	  Grid.prototype._renderUI = function _renderUI() {
	    _Group.prototype._renderUI.call(this);
	    this._drawLines();
	  };

	  Grid.prototype._drawLines = function _drawLines() {
	    var self = this;
	    var lineStyle = self.get('lineStyle');
	    var items = self.get('items');
	    if (items && items.length) {
	      self._precessItems(items);
	      self._drawGridLines(items, lineStyle);
	    }
	  };

	  Grid.prototype._precessItems = function _precessItems(items) {
	    var self = this;
	    var preItem = void 0;
	    Util.each(items, function (item, index) {
	      if (preItem && self.get('alternateColor')) {
	        self._drawAlternativeBg(item, preItem, index);
	      }
	      preItem = item;
	    });
	  };

	  Grid.prototype._drawGridLines = function _drawGridLines(items, lineStyle) {
	    var self = this;
	    var type = this.get('type');

	    var gridLine = void 0;
	    var path = void 0;
	    var cfg = void 0;
	    var points = void 0;
	    var itemsLength = items.length;

	    if (type === 'line' || type === 'polygon') {
	      Util.each(items, function (item, idx) {
	        if (self.get('hideFirstLine') && idx === 0) {
	          // 不展示第一条网格线
	          return;
	        }
	        if (self.get('hideLastLine') && idx === itemsLength - 1) {
	          // 不展示最后一条网格线
	          return;
	        }

	        points = item.points;
	        path = [];
	        if (type === 'line') {
	          path.push(['M', points[0].x, points[0].y]);
	          path.push(['L', points[points.length - 1].x, points[points.length - 1].y]);
	        } else {
	          Util.each(points, function (point, index) {
	            if (index === 0) {
	              path.push(['M', point.x, point.y]);
	            } else {
	              path.push(['L', point.x, point.y]);
	            }
	          });
	        }

	        if (self._drawZeroLine(type, idx)) {
	          cfg = Util.mix({}, self.get('zeroLineStyle'), {
	            path: path
	          });
	        } else {
	          cfg = Util.mix({}, lineStyle, {
	            path: path
	          });
	        }

	        gridLine = self.addShape('path', {
	          attrs: cfg
	        });
	        gridLine.name = 'axis-grid';
	        gridLine._id = item._id;
	        gridLine.set('coord', self.get('coord'));
	        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
	      });
	    } else {
	      Util.each(items, function (item, idx) {
	        if (self.get('hideFirstLine') && idx === 0) {
	          // 不展示第一条网格线
	          return;
	        }
	        if (self.get('hideLastLine') && idx === itemsLength - 1) {
	          // 不展示最后一条网格线
	          return;
	        }

	        points = item.points;
	        path = [];
	        Util.each(points, function (point, index) {
	          var radius = point.radius;
	          if (index === 0) {
	            path.push(['M', point.x, point.y]);
	          } else {
	            path.push(['A', radius, radius, 0, 0, point.flag, point.x, point.y]);
	          }
	        });
	        cfg = Util.mix({}, lineStyle, {
	          path: path
	        });
	        gridLine = self.addShape('path', {
	          attrs: cfg
	        });
	        gridLine.name = 'axis-grid';
	        gridLine._id = item._id;
	        gridLine.set('coord', self.get('coord'));
	        self.get('appendInfo') && gridLine.setSilent('appendInfo', self.get('appendInfo'));
	      });
	    }
	  };

	  Grid.prototype._drawZeroLine = function _drawZeroLine(type, idx) {
	    var self = this;
	    var tickValues = self.get('tickValues');
	    if (type === 'line' && tickValues) {
	      if (tickValues[idx] === 0 && self.get('hightLightZero')) {
	        return true;
	      }
	    }
	    return false;
	  };

	  Grid.prototype._drawAlternativeBg = function _drawAlternativeBg(item, preItem, index) {
	    var self = this;
	    var alternateColor = self.get('alternateColor');
	    var attrs = void 0;
	    var oddColor = void 0;
	    var evenColor = void 0;

	    if (Util.isString(alternateColor)) {
	      oddColor = alternateColor;
	    } else if (Util.isArray(alternateColor)) {
	      oddColor = alternateColor[0];
	      evenColor = alternateColor[1];
	    }

	    if (index % 2 === 0) {
	      if (evenColor) {
	        attrs = self._getBackItem(preItem.points, item.points, evenColor);
	      }
	    } else if (oddColor) {
	      attrs = self._getBackItem(preItem.points, item.points, oddColor);
	    }

	    var shape = self.addShape('Path', {
	      attrs: attrs
	    });
	    shape.name = 'axis-grid-rect';
	    shape._id = item._id && item._id.replace('grid', 'grid-rect');
	    shape.set('coord', self.get('coord'));
	    self.get('appendInfo') && shape.setSilent('appendInfo', self.get('appendInfo'));
	  };

	  Grid.prototype._getBackItem = function _getBackItem(start, end, bgColor) {
	    var path = [];
	    var type = this.get('type');

	    if (type === 'line') {
	      path.push(['M', start[0].x, start[0].y]);
	      path.push(['L', start[start.length - 1].x, start[start.length - 1].y]);
	      path.push(['L', end[end.length - 1].x, end[end.length - 1].y]);
	      path.push(['L', end[0].x, end[0].y]);
	      path.push(['Z']);
	    } else if (type === 'polygon') {
	      Util.each(start, function (subItem, index) {
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['L', subItem.x, subItem.y]);
	        }
	      });
	      for (var i = end.length - 1; i >= 0; i--) {
	        path.push(['L', end[i].x, end[i].y]);
	      }
	      path.push(['Z']);
	    } else {
	      var flag = start[0].flag;
	      Util.each(start, function (subItem, index) {
	        var radius = subItem.radius;
	        if (index === 0) {
	          path.push(['M', subItem.x, subItem.y]);
	        } else {
	          path.push(['A', radius, radius, 0, 0, subItem.flag, subItem.x, subItem.y]);
	        }
	      });
	      for (var j = end.length - 1; j >= 0; j--) {
	        var endSubItem = end[j];
	        var endRadius = endSubItem.radius;
	        if (j === end.length - 1) {
	          path.push(['M', endSubItem.x, endSubItem.y]);
	        } else {
	          path.push(['A', endRadius, endRadius, 0, 0, flag === 1 ? 0 : 1, endSubItem.x, endSubItem.y]);
	        }
	      }
	    }

	    return {
	      fill: bgColor,
	      path: path
	    };
	  };

	  return Grid;
	}(Group);

	module.exports = Grid;

	/***/ }),
	/* 308 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the circle axis of polar coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Circle = function (_Base) {
	  _inherits(Circle, _Base);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      /**
	       * 坐标轴的类型
	       * @type {String}
	       */
	      type: 'circle',
	      /**
	       * 指定刻度之间的间距
	       * @type {Number}
	       */
	      tickInterval: null,
	      /**
	       * 开始弧度
	       * @type {Number}
	       */
	      startAngle: -Math.PI / 2,
	      /**
	       * 结束弧度
	       * @type {Number}
	       */
	      endAngle: Math.PI * 3 / 2,
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      /**
	       * 默认文本距离轴线的距离
	       * @type {Number}
	       */
	      _labelOffset: 5
	    });
	  };

	  Circle.prototype.parseTick = function parseTick(tick, index, length) {
	    return {
	      text: tick,
	      value: index / length
	    };
	  };

	  Circle.prototype._getCirclePoint = function _getCirclePoint(angle, radius) {
	    var self = this;
	    var center = self.get('center');
	    radius = radius || self.get('radius');
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Circle.prototype.getTickPoint = function getTickPoint(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getCirclePoint(angle);
	  };

	  Circle.prototype.getSideVector = function getSideVector(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = [point.x - center.x, point.y - center.y];
	    if (!Util.isNil(offset)) {
	      var vecLen = vec2.length(vector);
	      vec2.scale(vector, vector, offset / vecLen);
	    }
	    return vector;
	  };

	  Circle.prototype.getSidePoint = function getSidePoint(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);

	    return {
	      x: point.x + vector[0],
	      y: point.y + vector[1]
	    };
	  };

	  Circle.prototype.getTickEnd = function getTickEnd(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.length;
	    return self.getSidePoint(start, length);
	  };

	  Circle.prototype.getTextAnchor = function getTextAnchor(vector) {
	    var align = void 0;
	    if (Util.snapEqual(vector[0], 0)) {
	      align = 'center';
	    } else if (vector[0] > 0) {
	      align = 'left';
	    } else if (vector[0] < 0) {
	      align = 'right';
	    }
	    return align;
	  };

	  Circle.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var center = self.get('center');
	    var x = center.x;
	    var y = center.y;
	    var rx = self.get('radius');
	    var ry = rx;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var inner = self.get('inner');

	    var path = [];
	    if (Math.abs(endAngle - startAngle) === Math.PI * 2) {
	      path = [['M', x, y], ['m', 0, -ry], ['a', rx, ry, 0, 1, 1, 0, 2 * ry], ['a', rx, ry, 0, 1, 1, 0, -2 * ry], ['z']];
	    } else {
	      var startPoint = self._getCirclePoint(startAngle);
	      var endPoint = self._getCirclePoint(endAngle);
	      var large = Math.abs(endAngle - startAngle) > Math.PI ? 1 : 0;
	      var sweep = startAngle > endAngle ? 0 : 1;
	      if (!inner) {
	        path = [['M', x, y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', x, y]];
	      } else {
	        var innerStartVector = self.getSideVector(inner * rx, startPoint);
	        var innerEndVector = self.getSideVector(inner * rx, endPoint);
	        var innerStartPoint = {
	          x: innerStartVector[0] + x,
	          y: innerStartVector[1] + y
	        };
	        var innerEndPoint = {
	          x: innerEndVector[0] + x,
	          y: innerEndVector[1] + y
	        };

	        path = [['M', innerStartPoint.x, innerStartPoint.y], ['L', startPoint.x, startPoint.y], ['A', rx, ry, 0, large, sweep, endPoint.x, endPoint.y], ['L', innerEndPoint.x, innerEndPoint.y], ['A', rx * inner, ry * inner, 0, large, Math.abs(sweep - 1), innerStartPoint.x, innerStartPoint.y]];
	      }
	    }
	    return path;
	  };

	  Circle.prototype.addLabel = function addLabel(tick, point, index) {
	    var self = this;
	    var offset = self.get('label').offset || self.get('_labelOffset') || 0.001;
	    point = self.getSidePoint(point, offset);
	    _Base.prototype.addLabel.call(this, tick, point, index);
	  };

	  Circle.prototype.autoRotateLabels = function autoRotateLabels() {
	    var self = this;
	    var ticks = self.get('ticks');
	    var labelsGroup = self.get('labelsGroup');
	    if (labelsGroup && ticks.length > 12) {
	      // 小于12个文本时文本不旋转
	      var radius = self.get('radius');
	      var startAngle = self.get('startAngle');
	      var endAngle = self.get('endAngle');
	      var totalAngle = endAngle - startAngle;
	      var avgAngle = totalAngle / (ticks.length - 1);
	      var avgWidth = Math.sin(avgAngle / 2) * radius * 2;
	      var maxLength = self.getMaxLabelWidth(labelsGroup);
	      Util.each(labelsGroup.get('children'), function (label, index) {
	        var tick = ticks[index];
	        var angle = tick.value * totalAngle + startAngle;
	        var mode = angle % (Math.PI * 2);
	        if (maxLength < avgWidth) {
	          // 文本的最大宽度大于
	          if (mode <= 0) {
	            angle = angle + Math.PI;
	          }
	          if (mode > Math.PI) {
	            angle = angle - Math.PI;
	          }
	          angle = angle - Math.PI / 2;
	          label.attr('textAlign', 'center');
	        } else {
	          if (mode > Math.PI / 2) {
	            angle = angle - Math.PI;
	          } else if (mode < Math.PI / 2 * -1) {
	            angle = angle + Math.PI;
	          }
	        }
	        label.rotateAtStart(angle);
	      });
	    }
	  };

	  return Circle;
	}(Base);

	module.exports = Circle;

	/***/ }),
	/* 309 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the helix axis of helix coordinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil,
	    PathUtil = _require.PathUtil;

	var vec2 = MatrixUtil.vec2;

	var Helix = function (_Base) {
	  _inherits(Helix, _Base);

	  function Helix() {
	    _classCallCheck(this, Helix);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Helix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'helix',
	      line: { // @type {Attrs} 坐标轴线的图形属性,如果设置成null，则不显示轴线
	        lineWidth: 1,
	        stroke: '#C0D0E0'
	      },
	      tickLine: { // @type {Attrs} 标注坐标线的图形属性
	        lineWidth: 1,
	        stroke: '#C0D0E0',
	        length: 5
	      },
	      startAngle: 1.25 * Math.PI,
	      endAngle: 7.25 * Math.PI,
	      // 螺旋系数
	      a: 0,
	      // 画布中心坐标
	      center: null,
	      // 坐标轴绘制起点
	      axisStart: null,
	      // 坐标轴的n个坐标点
	      crp: []
	    });
	  };

	  Helix.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var crp = self.get('crp');
	    var axisStart = self.get('axisStart');
	    var path = PathUtil.catmullRomToBezier(crp);
	    path.unshift(['M', axisStart.x, axisStart.y]);
	    return path;
	  };

	  Helix.prototype.getTickPoint = function getTickPoint(value) {
	    var self = this;
	    var startAngle = self.get('startAngle');
	    var endAngle = self.get('endAngle');
	    var angle = startAngle + (endAngle - startAngle) * value;
	    return self._getHelixPoint(angle);
	  };

	  Helix.prototype._getHelixPoint = function _getHelixPoint(angle) {
	    var self = this;
	    var center = self.get('center');
	    var a = self.get('a'); // 螺线系数
	    var radius = a * angle + self.get('inner'); // 螺线方程
	    return {
	      x: center.x + Math.cos(angle) * radius,
	      y: center.y + Math.sin(angle) * radius
	    };
	  };

	  Helix.prototype.getSideVector = function getSideVector(offset, point) {
	    var self = this;
	    var center = self.get('center');
	    var vector = [point.x - center.x, point.y - center.y];
	    if (offset) {
	      var vecLen = vec2.length(vector);
	      vec2.scale(vector, vector, offset / vecLen);
	    }
	    return vector;
	  };

	  Helix.prototype.getSidePoint = function getSidePoint(point, offset) {
	    var self = this;
	    var vector = self.getSideVector(offset, point);

	    return {
	      x: point.x + vector[0],
	      y: point.y + vector[1]
	    };
	  };

	  Helix.prototype.getTickEnd = function getTickEnd(start, length) {
	    var self = this;
	    var tickLine = self.get('tickLine');
	    length = length ? length : tickLine.length;
	    return self.getSidePoint(start, length);
	  };

	  return Helix;
	}(Base);

	module.exports = Helix;

	/***/ }),
	/* 310 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the axis of map coodinate
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(39);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil,
	    PathUtil = _require.PathUtil;

	var vec2 = MatrixUtil.vec2;

	var Polyline = function (_Base) {
	  _inherits(Polyline, _Base);

	  function Polyline() {
	    _classCallCheck(this, Polyline);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Polyline.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'polyline'
	    });
	  };

	  Polyline.prototype.getLinePath = function getLinePath() {
	    var self = this;
	    var tickPoints = self.get('tickPoints');
	    var start = self.get('start');
	    var end = self.get('end');
	    var points = [];
	    points.push(start.x);
	    points.push(start.y);
	    Util.each(tickPoints, function (tick) {
	      points.push(tick.x);
	      points.push(tick.y);
	    });
	    points.push(end.x);
	    points.push(end.y);

	    var path = PathUtil.catmullRomToBezier(points);
	    path.unshift(['M', start.x, start.y]);
	    return path;
	  };

	  Polyline.prototype.getTickPoint = function getTickPoint(value, index) {
	    var tickPoints = this.get('tickPoints');
	    return tickPoints[index];
	  };

	  Polyline.prototype.getTickEnd = function getTickEnd(start, value, index) {
	    var self = this;
	    var lineAttrs = self.get('tickLine');
	    var tickLength = value ? value : lineAttrs.length;
	    var offsetVector = self.getSideVector(tickLength, start, index);
	    return {
	      x: start.x + offsetVector[0],
	      y: start.y + offsetVector[1]
	    };
	  };

	  Polyline.prototype.getSideVector = function getSideVector(offset, point, index) {
	    var self = this;
	    var preTickPoint = void 0;
	    if (index === 0) {
	      preTickPoint = self.get('start');
	    } else {
	      var tickPoints = self.get('tickPoints');
	      preTickPoint = tickPoints[index - 1];
	    }

	    var vector = [point.x - preTickPoint.x, point.y - preTickPoint.y];
	    var normal = vec2.normalize([], vector);
	    var verticalVector = vec2.vertical([], normal, false);
	    return vec2.scale([], verticalVector, offset);
	  };

	  return Polyline;
	}(Base);

	module.exports = Polyline;

	/***/ }),
	/* 311 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Guide = __webpack_require__(312);
	var Global = __webpack_require__(2);

	var GuideController = function () {
	  function GuideController(cfg) {
	    _classCallCheck(this, GuideController);

	    this.guides = [];
	    this.options = [];
	    this.xScales = null;
	    this.yScales = null;
	    this.view = null;
	    this.frontGroup = null;
	    this.backGroup = null;
	    Util.mix(this, cfg);
	  }

	  GuideController.prototype._creatGuides = function _creatGuides() {
	    var self = this;
	    var options = this.options;
	    var xScales = this.xScales;
	    var yScales = this.yScales;
	    var view = this.view;
	    if (this.backContainer && view) {
	      this.backGroup = this.backContainer.addGroup({
	        viewId: view.get('_id')
	      });
	    }
	    if (this.frontContainer && view) {
	      this.frontGroup = this.frontContainer.addGroup({
	        viewId: view.get('_id')
	      });
	    }
	    options.forEach(function (option) {
	      var type = option.type;
	      var config = Util.deepMix({
	        xScales: xScales,
	        yScales: yScales,
	        view: view
	      }, Global.guide[type], option);
	      type = Util.upperFirst(type);
	      var guide = new Guide[type](config);
	      self.guides.push(guide);
	    });

	    return self.guides;
	  };

	  GuideController.prototype.line = function line() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'line'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.arc = function arc() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'arc'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.text = function text() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'text'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.image = function image() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'image'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.region = function region() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'region'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.regionFilter = function regionFilter() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'regionFilter'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.html = function html() {
	    var cfg = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

	    this.options.push(Util.mix({
	      type: 'html'
	    }, cfg));
	    return this;
	  };

	  GuideController.prototype.render = function render(coord) {
	    var _this = this;

	    var self = this;
	    var guides = self._creatGuides();
	    var container = self.backGroup || this.backContainer;

	    Util.each(guides, function (guide) {
	      if (guide.top) {
	        // 默认 guide 绘制到 backPlot，用户也可以声明 top: true，显示在最上层
	        container = self.frontGroup || _this.frontContainer;
	      }
	      guide.render(coord, container);
	    });
	  };

	  GuideController.prototype.clear = function clear() {
	    this.options = [];
	    this.reset();
	  };

	  GuideController.prototype.changeVisible = function changeVisible(visible) {
	    var guides = this.guides;
	    Util.each(guides, function (guide) {
	      guide.setVisible(visible);
	    });
	  };

	  GuideController.prototype.reset = function reset() {
	    var guides = this.guides;
	    Util.each(guides, function (guide) {
	      guide.remove();
	    });
	    this.guides = [];
	    this.backGroup && this.backGroup.remove();
	    this.frontGroup && this.frontGroup.remove();
	  };

	  return GuideController;
	}();

	module.exports = GuideController;

	/***/ }),
	/* 312 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview the entry of guide
	 * @author sima.zhang
	 */
	module.exports = {
	  Line: __webpack_require__(313),
	  Text: __webpack_require__(314),
	  Image: __webpack_require__(315),
	  Region: __webpack_require__(316),
	  RegionFilter: __webpack_require__(317),
	  Html: __webpack_require__(318),
	  Arc: __webpack_require__(319)
	};

	/***/ }),
	/* 313 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the line guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var vec2 = __webpack_require__(1).MatrixUtil.vec2;

	var Line = function (_Base) {
	  _inherits(Line, _Base);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'line',
	      /**
	       * 辅助线的起点位置
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助线的终点位置
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助线的图形样式
	       * @type {Object}
	       */
	      lineStyle: {
	        stroke: '#000',
	        lineWidth: 1
	      },
	      /**
	       * 辅助文本配置
	       * @type {Object}
	       */
	      text: {
	        position: 'end', // 文本的显示位置： start / center / end / 百分比
	        autoRotate: true, // 文本是否沿着辅助线的方向自动旋转
	        style: {
	          fill: '#999',
	          fontSize: 12,
	          fontWeight: 500,
	          fontFamily: 'sans-serif'
	        }, // 辅助文本的样式
	        content: null // 辅助文本的文字
	      }
	    });
	  };

	  Line.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var guideLineGroup = group.addGroup();

	    self._drawLines(start, end, guideLineGroup);
	    if (this.text && this.text.content) {
	      self._drawText(start, end, guideLineGroup);
	    }
	    self.el = guideLineGroup;
	  };

	  Line.prototype._drawLines = function _drawLines(start, end, group) {
	    var path = [['M', start.x, start.y], ['L', end.x, end.y]];
	    var guideLine = group.addShape('Path', {
	      attrs: Util.mix({
	        path: path
	      }, this.lineStyle)
	    });
	    guideLine.name = 'guide-line';
	    this.appendInfo && guideLine.setSilent('appendInfo', this.appendInfo);
	  };

	  Line.prototype._drawText = function _drawText(start, end, group) {
	    var textCfg = this.text;
	    var position = textCfg.position;
	    var textStyle = textCfg.style;

	    var percent = void 0;
	    if (position === 'start') {
	      percent = 0;
	    } else if (position === 'center') {
	      percent = 0.5;
	    } else if (Util.isString(position) && position.indexOf('%') !== -1) {
	      percent = parseInt(position, 10) / 100;
	    } else if (Util.isNumber(position)) {
	      percent = position;
	    } else {
	      percent = 1;
	    }

	    if (percent > 1 || percent < 0) {
	      percent = 1;
	    }

	    var cfg = {
	      x: start.x + (end.x - start.x) * percent,
	      y: start.y + (end.y - start.y) * percent
	    };

	    if (textCfg.offsetX) {
	      // 设置了偏移量
	      cfg.x += textCfg.offsetX;
	    }

	    if (textCfg.offsetY) {
	      // 设置了偏移量
	      cfg.y += textCfg.offsetY;
	    }

	    cfg.text = textCfg.content;
	    cfg = Util.mix({}, cfg, textStyle);
	    if (textCfg.autoRotate && Util.isNil(textStyle.rotate)) {
	      // 自动旋转且用户没有设置旋转角度
	      var angle = vec2.angleTo([end.x - start.x, end.y - start.y], [1, 0], 1);
	      cfg.rotate = angle;
	    } else if (!Util.isNil(textStyle.rotate)) {
	      // 用户设置了旋转角度
	      cfg.rotate = textStyle.rotate * Math.PI / 180;
	    }

	    var shape = group.addShape('Text', {
	      attrs: cfg
	    });
	    shape.name = 'guide-line-text';
	    this.appendInfo && shape.setSilent('appendInfo', this.appendInfo);
	  };

	  return Line;
	}(Base);

	module.exports = Line;

	/***/ }),
	/* 314 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the text guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Text = function (_Base) {
	  _inherits(Text, _Base);

	  function Text() {
	    _classCallCheck(this, Text);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Text.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'text',
	      /**
	       * 辅助文本的位置
	       * @type {Object | Function | Array}
	       */
	      position: null,
	      /**
	       * 辅助文本的显示文字
	       * @type {String}
	       */
	      content: null,
	      /**
	       * 辅助文本的样式配置
	       * @type {Object}
	       */
	      style: {
	        fill: '#999',
	        fontSize: 12,
	        fontWeight: 500,
	        textAlign: 'center'
	      },
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null,
	      top: true
	    });
	  };

	  Text.prototype.render = function render(coord, group) {
	    var self = this;
	    var position = self.position;
	    var point = self.parsePoint(coord, position);
	    var textStyle = Util.mix({}, this.style);

	    if (self.offsetX) {
	      point.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      point.y += self.offsetY;
	    }

	    if (textStyle.rotate) {
	      textStyle.rotate = textStyle.rotate * Math.PI / 180; // 将角度转换为弧度
	    }

	    var guideText = group.addShape('Text', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        text: self.content
	      }, textStyle, point)
	    });
	    guideText.name = 'guide-text';
	    self.appendInfo && guideText.setSilent('appendInfo', self.appendInfo);
	    self.el = guideText;
	  };

	  return Text;
	}(Base);

	module.exports = Text;

	/***/ }),
	/* 315 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the image guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Image = function (_Base) {
	  _inherits(Image, _Base);

	  function Image() {
	    _classCallCheck(this, Image);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Image.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'image',
	      zIndex: 1,
	      /**
	       * 辅助图片的起点位置
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助图片的终点位置
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助图片的地址
	       * @type {Strinf}
	       */
	      src: null,
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null
	    });
	  };

	  Image.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);

	    var cfg = {
	      x: start.x,
	      y: start.y
	    };
	    cfg.img = self.src;

	    if (!self.end) {
	      // 如果咩有指定结束点，则 start 为图片的左上角坐标
	      if (self.width) {
	        cfg.width = self.width;
	      }

	      if (self.height) {
	        cfg.height = self.height;
	      }
	    } else {
	      var end = self.parsePoint(coord, self.end);
	      // cfg.width = Math.abs(end.x - start.x);
	      // cfg.height = Math.abs(start.y - end.y);
	      cfg.width = end.x - start.x;
	      cfg.height = end.y - start.y;
	    }

	    if (self.offsetX) {
	      cfg.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      cfg.y += self.offsetY;
	    }

	    var imgGuide = group.addShape('Image', {
	      zIndex: 1,
	      attrs: cfg
	    });
	    imgGuide.name = 'guide-image';
	    self.appendInfo && imgGuide.setSilent('appendInfo', self.appendInfo);
	    self.el = imgGuide;
	  };

	  return Image;
	}(Base);

	module.exports = Image;

	/***/ }),
	/* 316 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the region guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Region = function (_Base) {
	  _inherits(Region, _Base);

	  function Region() {
	    _classCallCheck(this, Region);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Region.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'region',
	      zIndex: 1,
	      start: null,
	      end: null,
	      style: {
	        lineWidth: 0,
	        fill: '#CCD7EB',
	        opacity: 0.4
	      }
	    });
	  };

	  Region.prototype.render = function render(coord, group) {
	    var self = this;
	    var rectStyle = self.style;
	    var path = self._getPath(coord);

	    var regionGroup = group.addShape('path', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        path: path
	      }, rectStyle)
	    });
	    regionGroup.name = 'guide-region';
	    self.appendInfo && regionGroup.setSilent('appendInfo', self.appendInfo);
	    self.el = regionGroup;
	  };

	  Region.prototype._getPath = function _getPath(coord) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var path = [];
	    path.push(['M', start.x, start.y]);
	    path.push(['L', end.x, start.y]);
	    path.push(['L', end.x, end.y]);
	    path.push(['L', start.x, end.y]);
	    path.push(['z']);
	    return path;
	  };

	  return Region;
	}(Base);

	module.exports = Region;

	/***/ }),
	/* 317 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the region guide
	 * @author Ye Liu liuye10@yahoo.com
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var RegionFilter = function (_Base) {
	  _inherits(RegionFilter, _Base);

	  function RegionFilter() {
	    _classCallCheck(this, RegionFilter);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  RegionFilter.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);

	    return Util.mix({}, cfg, {
	      type: 'regionFilter',
	      zIndex: 1,
	      top: true,
	      start: null,
	      end: null,
	      color: null,
	      style: {
	        opacity: 1
	      }
	    });
	  };

	  RegionFilter.prototype.render = function render(coord, group) {
	    var self = this;
	    var view = self.view;
	    var layer = group.addGroup();
	    view.once('afterpaint', function () {
	      self._drawShapes(view, layer);
	      var clip = self._drawClip(coord, group);
	      layer.attr({ clip: clip });
	    });

	    self.appendInfo && layer.setSilent('appendInfo', self.appendInfo);
	    self.el = layer;
	  };

	  RegionFilter.prototype._drawShapes = function _drawShapes(view, layer) {
	    var self = this;
	    var output = [];
	    var geoms = view.getAllGeoms();
	    geoms.map(function (geom) {
	      var shapes = geom.getShapes();
	      shapes.map(function (shape) {
	        var shapeType = shape.type;
	        var shapeAttr = Util.cloneDeep(shape.get('attrs'));
	        self._adjustDisplay(shapeAttr);
	        var s = layer.addShape(shapeType, {
	          attrs: shapeAttr
	        });
	        output.push(s);
	        return shape;
	      });
	      return geom;
	    });
	    return output;
	  };

	  RegionFilter.prototype._drawClip = function _drawClip(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var c = group.addShape('rect', {
	      attrs: {
	        x: start.x,
	        y: start.y,
	        width: end.x - start.x,
	        height: end.y - start.y,
	        opacity: 1
	      }
	    });
	    return c;
	  };

	  RegionFilter.prototype._adjustDisplay = function _adjustDisplay(attr) {
	    var self = this;
	    var color = self.color;
	    if (attr.fill) {
	      attr.fill = color;
	    }
	    attr.stroke = color;
	  };

	  return RegionFilter;
	}(Base);

	module.exports = RegionFilter;

	/***/ }),
	/* 318 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the html guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var Base = __webpack_require__(9);

	var Html = function (_Base) {
	  _inherits(Html, _Base);

	  function Html() {
	    _classCallCheck(this, Html);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Html.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'html',
	      zIndex: 7,
	      /**
	       * dom 显示位置点
	       * @type {Object | Array}
	       */
	      position: null,
	      /**
	       * 水平方向对齐方式，可取值 'left'、'middle'、'right'
	       * @type {String}
	       */
	      alignX: 'middle',
	      /**
	       * 垂直方向对齐方式，可取值 'top'、'middle'、'bottom'
	       * @type {String}
	       */
	      alignY: 'middle',
	      /**
	       * x 方向的偏移量
	       * @type {Number}
	       */
	      offsetX: null,
	      /**
	       * y 方向的偏移量
	       * @type {Number}
	       */
	      offsetY: null,
	      /**
	      * html内容
	      *@type {String | Function}
	      */
	      html: null
	    });
	  };

	  Html.prototype.render = function render(coord, group) {
	    var self = this;
	    var position = self.parsePoint(coord, self.position);

	    var parentNode = group.get('canvas').get('el').parentNode;
	    var wrapperNode = DomUtil.createDom('<div class="g-guide"></div>');
	    parentNode.appendChild(wrapperNode);

	    var html = self.html;
	    if (Util.isFunction(html)) {
	      html = html(self.xScales, self.yScales);
	    }
	    var htmlNode = DomUtil.createDom(html);
	    wrapperNode.appendChild(htmlNode);
	    self._setDomPosition(wrapperNode, htmlNode, position);
	    self.el = wrapperNode;
	  };

	  Html.prototype._setDomPosition = function _setDomPosition(parentDom, childDom, point) {
	    var self = this;
	    var alignX = self.alignX;
	    var alignY = self.alignY;
	    var domWidth = DomUtil.getOuterWidth(childDom);
	    var domHeight = DomUtil.getOuterHeight(childDom);

	    var position = {
	      x: point.x,
	      y: point.y
	    };

	    if (alignX === 'middle' && alignY === 'top') {
	      position.x -= Util.round(domWidth / 2);
	    } else if (alignX === 'middle' && alignY === 'bottom') {
	      position.x -= Util.round(domWidth / 2);
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'left' && alignY === 'bottom') {
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'left' && alignY === 'middle') {
	      position.y -= Util.round(domHeight / 2);
	    } else if (alignX === 'left' && alignY === 'top') {
	      position.x = point.x;
	      position.y = point.y;
	    } else if (alignX === 'right' && alignY === 'bottom') {
	      position.x -= Util.round(domWidth);
	      position.y -= Util.round(domHeight);
	    } else if (alignX === 'right' && alignY === 'middle') {
	      position.x -= Util.round(domWidth);
	      position.y -= Util.round(domHeight / 2);
	    } else if (alignX === 'right' && alignY === 'top') {
	      position.x -= Util.round(domWidth);
	    } else {
	      // 默认位于中心点
	      position.x -= Util.round(domWidth / 2);
	      position.y -= Util.round(domHeight / 2);
	    }

	    if (self.offsetX) {
	      position.x += self.offsetX;
	    }

	    if (self.offsetY) {
	      position.y += self.offsetY;
	    }

	    DomUtil.modifyCSS(parentDom, {
	      position: 'absolute',
	      top: Math.round(position.y) + 'px',
	      left: Math.round(position.x) + 'px',
	      visibility: 'visible',
	      zIndex: self.zIndex
	    });
	  };

	  Html.prototype.remove = function remove() {
	    var self = this;
	    var el = self.el;
	    if (el) {
	      el.parentNode.removeChild(el);
	    }
	  };

	  return Html;
	}(Base);

	module.exports = Html;

	/***/ }),
	/* 319 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview the arc guide
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(9);

	var Arc = function (_Base) {
	  _inherits(Arc, _Base);

	  function Arc() {
	    _classCallCheck(this, Arc);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Arc.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 辅助元素类型
	       * @type {String}
	       */
	      type: 'arc',
	      /**
	       * 辅助弧线的起始点
	       * @type {Object | Function | Array}
	       */
	      start: null,
	      /**
	       * 辅助弧线的终止点
	       * @type {Object | Function | Array}
	       */
	      end: null,
	      /**
	       * 辅助文本的样式配置
	       * @type {Object}
	       */
	      style: {
	        stroke: '#999',
	        lineWidth: 1
	      }
	    });
	  };

	  Arc.prototype.render = function render(coord, group) {
	    var self = this;
	    var start = self.parsePoint(coord, self.start);
	    var end = self.parsePoint(coord, self.end);
	    var coordCenter = coord.getCenter();
	    var radius = Math.sqrt((start.x - coordCenter.x) * (start.x - coordCenter.x) + (start.y - coordCenter.y) * (start.y - coordCenter.y));
	    var startAngle = Math.atan2(start.y - coordCenter.y, start.x - coordCenter.x);
	    var endAngle = Math.atan2(end.y - coordCenter.y, end.x - coordCenter.x);

	    var arcShape = group.addShape('arc', {
	      zIndex: self.zIndex,
	      attrs: Util.mix({
	        x: coordCenter.x,
	        y: coordCenter.y,
	        r: radius,
	        startAngle: startAngle,
	        endAngle: endAngle
	      }, self.style)
	    });
	    arcShape.name = 'guide-arc';
	    self.appendInfo && arcShape.setSilent('appendInfo', self.appendInfo);
	    self.el = arcShape;
	  };

	  return Arc;
	}(Base);

	module.exports = Arc;

	/***/ }),
	/* 320 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Legend = __webpack_require__(321);
	var Shape = __webpack_require__(10);

	var FIELD_ORIGIN = '_origin';
	var MARKER_SIZE = 4.5;
	var requireAnimationFrameFn = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame;

	function _snapEqual(v1, v2, scale) {
	  var isEqual = void 0;
	  if (Util.isNil(scale)) {
	    return false;
	  }
	  v1 = scale.translate(v1);
	  v2 = scale.translate(v2);
	  if (scale.isCategory) {
	    isEqual = v1 === v2;
	  } else {
	    isEqual = Math.abs(v1 - v2) <= 1;
	  }
	  return isEqual;
	}

	function findGeom(geoms, value) {
	  var rst = void 0;
	  Util.each(geoms, function (geom) {
	    if (geom.get('visible')) {
	      var yScale = geom.getYScale();
	      if (yScale.field === value) {
	        rst = geom;
	        return;
	      }
	    }
	  });

	  return rst;
	}

	var LegendController = function () {
	  function LegendController(cfg) {
	    _classCallCheck(this, LegendController);

	    this.options = {};
	    Util.mix(this, cfg);
	    this.clear();
	    var chart = this.chart;
	    this.container = chart.get('frontPlot');
	    this.plotRange = chart.get('plotRange');
	  }

	  LegendController.prototype.clear = function clear() {
	    var legends = this.legends;
	    this.backRange = null;
	    Util.each(legends, function (legendItems) {
	      Util.each(legendItems, function (legend) {
	        legend.remove();
	      });
	    });
	    this.legends = {};
	  };

	  // 获取坐标轴等背景元素占的范围，防止遮挡坐标轴


	  LegendController.prototype.getBackRange = function getBackRange() {
	    var backRange = this.backRange;
	    if (!backRange) {
	      backRange = this.chart.get('backPlot').getBBox();
	      if (backRange.minX === Infinity) {
	        // 如果背景不占宽高，则直接使用 plotRange
	        var plotRange = this.plotRange;
	        backRange = {
	          minX: plotRange.tl.x,
	          minY: plotRange.tl.y,
	          maxX: plotRange.br.x,
	          maxY: plotRange.br.y
	        };
	      }
	      this.backRange = backRange;
	    }
	    return backRange;
	  };

	  LegendController.prototype._isFieldInView = function _isFieldInView(field, value, view) {
	    var flag = false;
	    var scales = view.get('scales');
	    var fieldScale = scales[field];
	    if (fieldScale && fieldScale.values) {
	      flag = Util.inArray(fieldScale.values, value);
	    }

	    return flag;
	  };

	  LegendController.prototype._bindClickEvent = function _bindClickEvent(legend, scale, filterVals) {
	    var self = this;
	    var chart = self.chart;
	    var views = chart.get('views');
	    var field = scale.field;
	    var options = self.options;

	    legend.on('itemclick', function (ev) {
	      if (options.onClick) {
	        // 用户自定义了图例点击事件
	        options.onClick(ev);
	      } else {
	        var item = ev.item;
	        var checked = ev.checked;
	        var isSingeSelected = legend.get('selectedMode') === 'single'; // 图例的选中模式
	        var clickedValue = item.dataValue; // import: 需要取该图例项原始的数值

	        if (checked) {
	          filterVals.push(clickedValue);
	          if (self._isFieldInView(field, clickedValue, chart)) {
	            chart.filter(field, function (field) {
	              return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
	            });
	          }
	          Util.each(views, function (view) {
	            if (self._isFieldInView(field, clickedValue, view)) {
	              view.filter(field, function (field) {
	                return isSingeSelected ? field === clickedValue : Util.inArray(filterVals, field);
	              });
	            }
	          });
	        } else if (!isSingeSelected) {
	          Util.Array.remove(filterVals, clickedValue);

	          if (self._isFieldInView(field, clickedValue, chart)) {
	            chart.filter(field, function (field) {
	              return Util.inArray(filterVals, field);
	            });
	          }
	          Util.each(views, function (view) {
	            if (self._isFieldInView(field, clickedValue, view)) {
	              view.filter(field, function (field) {
	                return Util.inArray(filterVals, field);
	              });
	            }
	          });
	        }
	        chart.set('keepLegend', true); // 图例不重新渲染
	        chart.set('keepPadding', true); // 边框不重新计算
	        chart.repaint();
	        chart.set('keepPadding', false);
	        chart.set('keepLegend', false);
	      }
	    });
	  };

	  LegendController.prototype._filterLabels = function _filterLabels(shape, geom, visible) {
	    if (shape.get('gLabel')) {
	      shape.get('gLabel').set('visible', visible);
	    } else {
	      var labelCfg = geom.get('labelCfg');
	      if (labelCfg && labelCfg.fields && labelCfg.fields.length > 0) {
	        var xScale = geom.getXScale();
	        var yScale = geom.getYScale();
	        var xField = xScale.field;
	        var yField = yScale.field;
	        var shapeData = shape.get('origin')._origin;
	        var labelContainer = geom.get('labelContainer');
	        var labels = labelContainer.get('labelsGroup').get('children');
	        Util.each(labels, function (label) {
	          var labelData = label.get('origin') || [];
	          if (labelData[xField] === shapeData[xField] && labelData[yField] === shapeData[yField]) {
	            label.set('visible', visible);
	            shape.set('gLabel', label);
	          }
	        });
	      }
	    }
	  };

	  LegendController.prototype._bindFilterEvent = function _bindFilterEvent(legend, scale) {
	    var self = this;
	    var chart = this.chart;
	    var field = scale.field;
	    legend.on('itemfilter', function (ev) {
	      var range = ev.range;
	      chart.filterShape(function (obj, shape, geom) {
	        if (obj[field]) {
	          var filtered = obj[field] >= range[0] && obj[field] <= range[1];
	          // shape 带 label，则还需要隐藏 label
	          self._filterLabels(shape, geom, filtered);
	          return filtered;
	        }
	        return true;
	      });
	      var geoms = chart.getAllGeoms() || [];

	      var _loop = function _loop(i) {
	        var geom = geoms[i];
	        if (geom.get('type') === 'heatmap') {
	          requireAnimationFrameFn(function () {
	            geom.drawWithRange(range);
	          });
	        }
	      };

	      for (var i = 0; i < geoms.length; i++) {
	        _loop(i);
	      }
	    });
	  };

	  LegendController.prototype._getShapeData = function _getShapeData(shape) {
	    var originData = shape.get('origin');

	    if (Util.isArray(originData)) {
	      originData = originData[0];
	    }
	    return originData[FIELD_ORIGIN];
	  };

	  LegendController.prototype._bindHoverEvent = function _bindHoverEvent(legend, field) {
	    var self = this;
	    var chart = self.chart;
	    var geoms = chart.getAllGeoms();
	    var options = self.options;
	    var canvas = chart.get('canvas');
	    legend.on('itemhover', function (ev) {
	      var value = ev.item.value;
	      var pre = self.pre;
	      if (!pre) {
	        Util.each(geoms, function (geom) {
	          var shapeContainer = geom.get('shapeContainer');
	          var shapes = geom.getShapes();
	          var activeShapes = [];
	          if (field) {
	            var scale = geom.get('scales')[field];
	            Util.each(shapes, function (shape) {
	              var origin = self._getShapeData(shape);
	              if (origin && _snapEqual(origin[field], value, scale)) {
	                activeShapes.push(shape);
	              }
	            });
	          } else if (geom.getYScale().field === value) {
	            activeShapes = shapes;
	          }

	          if (!Util.isEmpty(activeShapes)) {
	            ev.shapes = activeShapes;
	            ev.geom = geom;
	            if (options.onHover) {
	              options.onHover(ev);
	              shapeContainer.sort();
	              canvas.draw();
	            } else {
	              geom.setShapesActived(activeShapes);
	            }
	          }
	        });
	        self.pre = value;
	      } else if (pre === value) {
	        return;
	      }
	    });

	    legend.on('itemunhover', function () {
	      self.pre = null;
	      Util.each(geoms, function (geom) {
	        if (geom.get('activeShapes')) {
	          geom.clearActivedShapes();
	          canvas.draw();
	        }
	      });
	    });
	  };

	  LegendController.prototype._isFiltered = function _isFiltered(scale, values, value) {
	    if (!scale.isCategory) {
	      return true;
	    }
	    var rst = false;
	    value = scale.invert(value);
	    Util.each(values, function (val) {
	      rst = rst || scale.getText(val) === scale.getText(value);
	      if (rst) {
	        return false;
	      }
	    });
	    return rst;
	  };

	  LegendController.prototype._alignLegend = function _alignLegend(legend, pre, region, position) {
	    var self = this;
	    var container = self.container;
	    var canvas = container.get('canvas');
	    var width = canvas.get('width');
	    var height = canvas.get('height');
	    var totalRegion = self.totalRegion;
	    var plotRange = self.plotRange;
	    var backRange = self.getBackRange(); // 背景占得范围
	    var offsetX = legend.get('offsetX') || 0;
	    var offsetY = legend.get('offsetY') || 0;
	    // const offset = Util.isNil(legend.get('offset')) ? MARGIN : legend.get('offset');
	    var legendHeight = legend.getHeight();
	    var legendWidth = legend.getWidth();
	    var borderMargin = Global.legend.margin;
	    var innerMargin = Global.legend.legendMargin;
	    var legendNum = self.legends[position].length;
	    var posArray = position.split('-');

	    var x = 0;
	    var y = 0;
	    var tempoRegion = legendNum > 1 ? totalRegion : region;

	    if (posArray[0] === 'left' || posArray[0] === 'right') {
	      height = plotRange.br.y;
	      x = self._getXAlign(posArray[0], width, region, backRange, legendWidth, borderMargin);
	      if (pre) {
	        y = pre.get('y') + pre.getHeight() + innerMargin;
	      } else {
	        y = self._getYAlignVertical(posArray[1], height, tempoRegion, backRange, 0, borderMargin, canvas.get('height'));
	      }
	    } else if (posArray[0] === 'top' || posArray[0] === 'bottom') {
	      y = self._getYAlignHorizontal(posArray[0], height, region, backRange, legendHeight, borderMargin);
	      if (pre) {
	        var preWidth = pre.getWidth();
	        x = pre.get('x') + preWidth + innerMargin;
	      } else {
	        x = self._getXAlign(posArray[1], width, tempoRegion, backRange, 0, borderMargin);
	        if (posArray[1] === 'right') x = plotRange.br.x - tempoRegion.totalWidth;
	      }
	    }

	    legend.move(x + offsetX, y + offsetY);
	  };

	  LegendController.prototype._getXAlign = function _getXAlign(pos, width, region, backRange, legendWidth, borderMargin) {
	    var x = pos === 'left' ? backRange.minX - legendWidth - borderMargin[3] : backRange.maxX + borderMargin[1];
	    if (pos === 'center') {
	      x = (width - region.totalWidth) / 2;
	    }
	    return x;
	  };

	  LegendController.prototype._getYAlignHorizontal = function _getYAlignHorizontal(pos, height, region, backRange, legendHeight, borderMargin) {
	    var y = pos === 'top' ? backRange.minY - legendHeight - borderMargin[0] : backRange.maxY + borderMargin[2];
	    return y;
	  };

	  LegendController.prototype._getYAlignVertical = function _getYAlignVertical(pos, height, region, backRange, legendHeight, borderMargin, canvasHeight) {
	    var y = pos === 'top' ? backRange.minY - legendHeight - borderMargin[0] : height - region.totalHeight;
	    if (pos === 'center') {
	      y = (canvasHeight - region.totalHeight) / 2;
	    }
	    return y;
	  };

	  LegendController.prototype._getSubRegion = function _getSubRegion(legends) {
	    var maxWidth = 0;
	    var maxHeight = 0;
	    var totalWidth = 0;
	    var totalHeight = 0;
	    Util.each(legends, function (legend) {
	      var width = legend.getWidth();
	      var height = legend.getHeight();
	      if (maxWidth < width) {
	        maxWidth = width;
	      }
	      totalWidth += width;
	      if (maxHeight < height) {
	        maxHeight = height;
	      }
	      totalHeight += height;
	    });
	    return {
	      maxWidth: maxWidth,
	      totalWidth: totalWidth,
	      maxHeight: maxHeight,
	      totalHeight: totalHeight
	    };
	  };

	  LegendController.prototype._getRegion = function _getRegion() {
	    var self = this;
	    var legends = self.legends;
	    var innerMargin = Global.legend.legendMargin;
	    var subs = [];
	    var totalWidth = 0;
	    var totalHeight = 0;
	    Util.each(legends, function (legendItems) {
	      var subRegion = self._getSubRegion(legendItems);
	      subs.push(subRegion);
	      totalWidth += subRegion.totalWidth + innerMargin;
	      totalHeight += subRegion.totalHeight + innerMargin;
	    });
	    return {
	      totalWidth: totalWidth,
	      totalHeight: totalHeight,
	      subs: subs
	    };
	  };

	  LegendController.prototype._addCategroyLegend = function _addCategroyLegend(scale, attr, geom, filterVals, position) {
	    var self = this;
	    var field = scale.field;
	    var legendOptions = self.options;
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var container = self.container;
	    var items = [];
	    var ticks = scale.getTicks();

	    var isByAttr = true;
	    var shapeType = geom.get('shapeType') || 'point';
	    var shape = geom.getDefaultValue('shape') || 'circle';
	    if (legendOptions[field] && legendOptions[field].marker) {
	      // 用户为 field 对应的图例定义了 marker
	      shape = legendOptions[field].marker;
	      shapeType = 'point';
	      isByAttr = false;
	    } else if (legendOptions.marker) {
	      shape = legendOptions.marker;
	      shapeType = 'point';
	      isByAttr = false;
	    }

	    var chart = self.chart;
	    var canvas = chart.get('canvas');
	    var plotRange = self.plotRange;
	    var posArray = position.split('-');
	    var maxLength = posArray[0] === 'right' || posArray[0] === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');
	    Util.each(ticks, function (tick) {
	      var text = tick.text;
	      var name = text;
	      var scaleValue = tick.value;
	      var value = scale.invert(scaleValue);
	      var cfg = {
	        isInCircle: geom.isInCircle()
	      };
	      var checked = filterVals ? self._isFiltered(scale, filterVals, scaleValue) : true;

	      var colorAttr = geom.getAttr('color');
	      var shapeAttr = geom.getAttr('shape');
	      if (colorAttr) {
	        // 存在颜色映射
	        if (colorAttr.callback && colorAttr.callback.length > 1) {
	          // 多参数映射，阻止程序报错
	          var restArgs = Array(colorAttr.callback.length - 1).fill('');
	          cfg.color = colorAttr.mapping.apply(colorAttr, [value].concat(restArgs)).join('') || Global.defaultColor;
	        } else {
	          cfg.color = colorAttr.mapping(value).join('') || Global.defaultColor;
	        }
	      }
	      if (isByAttr && shapeAttr) {
	        // 存在形状映射
	        if (shapeAttr.callback && shapeAttr.callback.length > 1) {
	          // 多参数映射，阻止程序报错
	          var _restArgs = Array(shapeAttr.callback.length - 1).fill('');
	          shape = shapeAttr.mapping.apply(shapeAttr, [value].concat(_restArgs)).join('');
	        } else {
	          shape = shapeAttr.mapping(value).join('');
	        }
	      }

	      var shapeObject = Shape.getShapeFactory(shapeType);
	      var marker = shapeObject.getMarkerCfg(shape, cfg);

	      if (Util.isFunction(shape)) {
	        marker.symbol = shape;
	      }

	      items.push({
	        value: name, // 图例项显示文本的内容
	        dataValue: value, // 图例项对应原始数据中的数值
	        checked: checked,
	        marker: marker
	      });
	    });

	    var legendCfg = Util.deepMix({}, Global.legend[posArray[0]], legendOptions[field] || legendOptions, {
	      viewId: chart.get('_id'),
	      maxLength: maxLength,
	      items: items
	    });
	    if (legendCfg.title) {
	      Util.deepMix(legendCfg, {
	        title: {
	          text: scale.alias || scale.field
	        }
	      });
	    }

	    var legend = void 0;
	    if (self._isTailLegend(legendOptions, geom)) {
	      legendCfg.chart = self.chart;
	      legendCfg.geom = geom;
	      legend = container.addGroup(Legend.Tail, legendCfg);
	    } else {
	      legend = container.addGroup(Legend.Category, legendCfg);
	    }
	    self._bindClickEvent(legend, scale, filterVals);
	    legends[position].push(legend);
	    return legend;
	  };

	  LegendController.prototype._addContinuousLegend = function _addContinuousLegend(scale, attr, position) {
	    var self = this;
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var container = self.container;
	    var field = scale.field;
	    var ticks = scale.getTicks();
	    var items = [];
	    var legend = void 0;
	    var minValue = void 0;
	    var maxValue = void 0;

	    Util.each(ticks, function (tick) {
	      var scaleValue = tick.value;
	      var invertValue = scale.invert(scaleValue);
	      var attrValue = attr.mapping(invertValue).join('');

	      items.push({
	        value: tick.tickValue, // tick.text
	        attrValue: attrValue,
	        scaleValue: scaleValue
	      });
	      if (scaleValue === 0) {
	        minValue = true;
	      }
	      if (scaleValue === 1) {
	        maxValue = true;
	      }
	    });

	    if (!minValue) {
	      items.push({
	        value: scale.min,
	        attrValue: attr.mapping(0).join(''),
	        scaleValue: 0
	      });
	    }
	    if (!maxValue) {
	      items.push({
	        value: scale.max,
	        attrValue: attr.mapping(1).join(''),
	        scaleValue: 1
	      });
	    }

	    var options = self.options;

	    var posArray = position.split('-');
	    var defaultCfg = Global.legend[posArray[0]];
	    if (options && options.slidable === false || options[field] && options[field].slidable === false) {
	      defaultCfg = Util.mix({}, defaultCfg, Global.legend.gradient);
	    }

	    var legendCfg = Util.deepMix({}, defaultCfg, options[field] || options, {
	      items: items,
	      attr: attr,
	      numberFormatter: scale.formatter
	    });
	    if (legendCfg.title) {
	      Util.deepMix(legendCfg, {
	        title: {
	          text: scale.alias || scale.field
	        }
	      });
	    }

	    if (attr.type === 'color') {
	      legend = container.addGroup(Legend.Color, legendCfg);
	    } else if (attr.type === 'size') {
	      legend = container.addGroup(Legend.Size, legendCfg);
	    }
	    self._bindFilterEvent(legend, scale);
	    legends[position].push(legend);
	    return legend;
	  };

	  LegendController.prototype._isTailLegend = function _isTailLegend(opt, geom) {
	    if (opt.hasOwnProperty('attachLast') && opt.attachLast) {
	      var geomType = geom.get('type');
	      if (geomType === 'line' || geomType === 'lineStack' || geomType === 'area' || geomType === 'areaStack') return true;
	    }
	    return false;
	  };

	  LegendController.prototype._adjustPosition = function _adjustPosition(position, isTailLegend) {
	    var pos = void 0;
	    if (isTailLegend) {
	      pos = 'right-top';
	    } else if (Util.isArray(position)) {
	      pos = String(position[0]) + '-' + String(position[1]);
	    } else {
	      var posArr = position.split('-');
	      if (posArr.length === 1) {
	        // 只用了left/right/bottom/top一个位置定位
	        if (posArr[0] === 'left') pos = 'left-bottom';
	        if (posArr[0] === 'right') pos = 'right-bottom';
	        if (posArr[0] === 'top') pos = 'top-center';
	        if (posArr[0] === 'bottom') pos = 'bottom-center';
	      } else {
	        pos = position;
	      }
	    }
	    return pos;
	  };

	  LegendController.prototype.addLegend = function addLegend(scale, attr, geom, filterVals) {
	    var self = this;
	    var legendOptions = self.options;
	    var field = scale.field;
	    var fieldOption = legendOptions[field];

	    if (fieldOption === false) {
	      // 如果不显示此图例
	      return null;
	    }

	    if (fieldOption && fieldOption.custom) {
	      self.addCustomLegend(field);
	    } else {
	      var position = legendOptions.position || Global.defaultLegendPosition;
	      position = self._adjustPosition(position, self._isTailLegend(legendOptions, geom));
	      if (fieldOption && fieldOption.position) {
	        // 如果对某个图例单独设置 position，则对 position 重新赋值
	        position = fieldOption.position;
	      }

	      var legend = void 0;
	      if (scale.isLinear) {
	        legend = self._addContinuousLegend(scale, attr, position);
	      } else {
	        legend = self._addCategroyLegend(scale, attr, geom, filterVals, position);
	      }
	      self._bindHoverEvent(legend, field);
	    }
	  };

	  /**
	   * 自定义图例
	   * @param {string} field 自定义图例的数据字段名，可以为空
	   */


	  LegendController.prototype.addCustomLegend = function addCustomLegend(field) {
	    var self = this;
	    var chart = self.chart;
	    var container = self.container;
	    var legendOptions = self.options;

	    if (field) {
	      legendOptions = legendOptions[field];
	    }

	    var position = legendOptions.position || Global.defaultLegendPosition;
	    position = self._adjustPosition(position);
	    var legends = self.legends;
	    legends[position] = legends[position] || [];
	    var items = legendOptions.items;
	    if (!items) {
	      return;
	    }

	    var geoms = chart.getAllGeoms();
	    Util.each(items, function (item) {
	      var geom = findGeom(geoms, item.value);
	      if (!Util.isObject(item.marker)) {
	        item.marker = {
	          symbol: item.marker ? item.marker : 'circle',
	          fill: item.fill,
	          radius: MARKER_SIZE
	        };
	      } else {
	        item.marker.radius = item.marker.radius || MARKER_SIZE;
	      }
	      item.checked = Util.isNil(item.checked) ? true : item.checked;
	      item.geom = geom;
	    });

	    var canvas = chart.get('canvas');
	    var plotRange = self.plotRange;
	    var posArray = position.split('-');
	    var maxLength = posArray[0] === 'right' || posArray[0] === 'left' ? plotRange.bl.y - plotRange.tr.y : canvas.get('width');

	    var legendCfg = Util.deepMix({}, Global.legend[posArray[0]], legendOptions, {
	      maxLength: maxLength,
	      items: items
	    });

	    var legend = container.addGroup(Legend.Category, legendCfg);
	    legends[position].push(legend);

	    legend.on('itemclick', function (ev) {
	      if (legendOptions.onClick) {
	        // 用户自定义了图例点击事件
	        legendOptions.onClick(ev);
	      }
	    });

	    self._bindHoverEvent(legend);
	  };

	  LegendController.prototype.alignLegends = function alignLegends() {
	    var self = this;
	    var legends = self.legends;
	    var totalRegion = self._getRegion(legends);
	    self.totalRegion = totalRegion;
	    var i = 0;
	    Util.each(legends, function (legendItems, position) {
	      var region = /* self._getRegion(legendItems)*/totalRegion.subs[i];
	      Util.each(legendItems, function (legend, index) {
	        var pre = legendItems[index - 1];
	        if (!(legend.get('useHtml') && !legend.get('autoPosition'))) {
	          self._alignLegend(legend, pre, region, position);
	        }
	      });
	      i++;
	    });

	    return this;
	  };

	  return LegendController;
	}();

	module.exports = LegendController;

	/***/ }),
	/* 321 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The entry of legend
	 * @author sima.zhang
	 */
	module.exports = {
	  Category: __webpack_require__(110), // 分类图例
	  Tail: __webpack_require__(322), // 尾部跟随图例
	  Color: __webpack_require__(323), // 颜色图例
	  Size: __webpack_require__(325) // 大小图例
	};

	/***/ }),
	/* 322 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of tail legend
	 * @author Ye Liu
	 */

	var Util = __webpack_require__(0);
	var Category = __webpack_require__(110);

	var Tail = function (_Category) {
	  _inherits(Tail, _Category);

	  function Tail() {
	    _classCallCheck(this, Tail);

	    return _possibleConstructorReturn(this, _Category.apply(this, arguments));
	  }

	  Tail.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Category.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * type标识
	       * @type {String}
	       */
	      type: 'tail-legend',
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical'
	    });
	  };

	  Tail.prototype._addItemMarker = function _addItemMarker(item, itemGroup) {
	    var unCheckColor = this.get('unCheckColor');
	    var markerAttrs = Util.mix({}, item.marker, {
	      x: item.marker.radius,
	      y: 0
	    });

	    if (!item.checked) {
	      if (markerAttrs.fill) {
	        markerAttrs.fill = unCheckColor;
	      }
	      if (markerAttrs.stroke) {
	        markerAttrs.stroke = unCheckColor;
	      }
	    }

	    var markerShape = itemGroup.addShape('marker', {
	      type: 'marker',
	      attrs: markerAttrs
	    });
	    markerShape.attr('cursor', 'pointer');
	    markerShape.name = 'legend-marker';

	    return markerShape;
	  };

	  Tail.prototype._addItemText = function _addItemText(item, itemGroup, startX) {
	    var self = this;
	    var unCheckColor = self.get('unCheckColor');
	    var textStyle = self.get('textStyle');
	    var textAttrs = Util.mix({}, textStyle, {
	      x: startX,
	      y: 0,
	      text: self._formatItemValue(item.value)
	    });
	    if (!item.checked) {
	      Util.mix(textAttrs, {
	        fill: unCheckColor
	      });
	    }
	    var textShape = itemGroup.addShape('text', {
	      attrs: textAttrs
	    });
	    textShape.attr('cursor', 'pointer');
	    textShape.name = 'legend-text';
	    self.get('appendInfo') && textShape.setSilent('appendInfo', this.get('appendInfo'));
	  };

	  Tail.prototype._addItemWrapper = function _addItemWrapper(item, itemGroup, x, y) {
	    var self = this;
	    var bbox = itemGroup.getBBox();
	    var itemWidth = self.get('itemWidth');
	    var wrapperShape = itemGroup.addShape('rect', {
	      attrs: {
	        x: x,
	        y: y - bbox.height / 2,
	        fill: '#fff',
	        fillOpacity: 0,
	        width: itemWidth || bbox.width,
	        height: bbox.height
	      }
	    });
	    wrapperShape.attr('cursor', 'pointer');
	    wrapperShape.setSilent('origin', item); // 保存图例项相关的数据，便于事件操作
	    wrapperShape.name = 'legend-item';
	    this.get('appendInfo') && wrapperShape.setSilent('appendInfo', this.get('appendInfo'));
	  };

	  Tail.prototype._addItem = function _addItem(item) {
	    var self = this;
	    var itemsGroup = self.get('itemsGroup');
	    var x = 0;
	    var y = 0;
	    var itemGroup = itemsGroup.addGroup({
	      x: x,
	      y: y,
	      value: item.value,
	      scaleValue: item.scaleValue,
	      checked: item.checked
	    });
	    itemGroup.translate(x, y);
	    itemGroup.setSilent('viewId', itemsGroup.get('viewId'));
	    var wordSpace = this.get('_wordSpaceing');
	    var startX = 0;
	    // 如果有marker添加marker
	    if (item.marker) {
	      var markerShape = self._addItemMarker(item, itemGroup);
	      startX += markerShape.getBBox().width + wordSpace;
	    }
	    // text
	    self._addItemText(item, itemGroup, startX);
	    // 添加一个包围矩形，用于事件支持
	    self._addItemWrapper(item, itemGroup, x, y);
	    itemGroup.name = 'legendGroup';
	    return itemGroup;
	  };

	  Tail.prototype._adjust = function _adjust() {
	    var self = this;
	    var geom = self.get('geom');
	    if (geom) {
	      var dataArray = self.get('geom').get('dataArray');
	      var groups = this.get('itemsGroup').get('children');
	      var index = 0;
	      Util.each(groups, function (groupItem) {
	        var dArray = dataArray[index];
	        var lastY = dArray[dArray.length - 1].y;
	        if (Util.isArray(lastY)) {
	          lastY = lastY[1];
	        }
	        var groupHeight = groupItem.getBBox().height;
	        var x = groupItem.get('x');
	        groupItem.translate(x, lastY - groupHeight);
	        index++;
	      });
	    }
	  };

	  Tail.prototype._renderUI = function _renderUI() {
	    var self = this;
	    if (!self.get('useHtml')) {
	      // super._renderUI();
	      self._renderItems();
	      self.get('autoWrap') && self._adjustItems(); // 默认自动换行
	      self._renderBack();
	    } else {
	      // 使用 html 渲染图例
	      self._renderHTML();
	    }
	    var chart = self.get('chart');
	    chart.once('afterpaint', function () {
	      self._adjust();
	    });
	  };

	  return Tail;
	}(Category);

	module.exports = Tail;

	/***/ }),
	/* 323 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of the gradient color legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Continuous = __webpack_require__(112);
	var ColorUtil = __webpack_require__(63); // TODO： 这个 Util 是否可换个位置

	var Color = function (_Continuous) {
	  _inherits(Color, _Continuous);

	  function Color() {
	    _classCallCheck(this, Color);

	    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
	  }

	  Color.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'color-legend',
	      /**
	       * 布局方式
	       * horizontal 水平
	       * vertical 垂直
	       * @type {String}
	       */
	      layout: 'vertical',
	      labelOffset: 15,
	      lineStyle: {
	        lineWidth: 1,
	        stroke: '#fff'
	      }
	    });
	  };

	  Color.prototype._renderSliderShape = function _renderSliderShape() {
	    var slider = this.get('slider');
	    var backgroundElement = slider.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var layout = this.get('layout');
	    var items = this.get('items');
	    var fill = '';
	    var rgbColor = void 0;

	    if (layout === 'vertical') {
	      fill += 'l (90) ';
	      Util.each(items, function (v) {
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
	      });
	    } else {
	      fill += 'l (0) ';
	      Util.each(items, function (v) {
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += v.scaleValue + ':' + rgbColor + ' ';
	      });
	    }
	    return this._addBackground(backgroundElement, 'Rect', {
	      x: 0,
	      y: 0,
	      width: width,
	      height: height,
	      fill: fill,
	      strokeOpacity: 0
	    });
	  };

	  Color.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var titleShape = this.get('titleShape');
	    var titleGap = this.get('titleGap');
	    titleGap = titleShape ? titleShape.getBBox().height + titleGap : titleGap;
	    var width = this.get('width');
	    var height = this.get('height');
	    var layout = this.get('layout');
	    var items = this.get('items');
	    var fill = '';
	    var rgbColor = void 0;

	    var path = [];
	    var bgGroup = this.addGroup();

	    if (layout === 'vertical') {
	      fill += 'l (90) ';
	      Util.each(items, function (v, index) {
	        if (index !== 0 && index !== items.length - 1) {
	          path.push(['M', 0, height - v.scaleValue * height]);
	          path.push(['L', width, height - v.scaleValue * height]);
	        }

	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += 1 - v.scaleValue + ':' + rgbColor + ' ';
	        bgGroup.addShape('text', {
	          attrs: Util.mix({}, {
	            x: width + self.get('labelOffset') / 2,
	            y: height - v.scaleValue * height,
	            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
	          }, self.get('textStyle'), {
	            textAlign: 'start'
	          })
	        });
	      });
	    } else {
	      fill += 'l (0) ';
	      Util.each(items, function (v, index) {
	        if (index !== 0 && index !== items.length - 1) {
	          path.push(['M', v.scaleValue * width, 0]);
	          path.push(['L', v.scaleValue * width, height]);
	        }
	        rgbColor = ColorUtil.toRGB(v.attrValue);
	        fill += v.scaleValue + ':' + rgbColor + ' ';
	        bgGroup.addShape('text', {
	          attrs: Util.mix({}, {
	            x: v.scaleValue * width,
	            y: height + self.get('labelOffset'),
	            text: self._formatItemValue(v.value) + '' // 以字符串格式展示
	          }, self.get('textStyle'))
	        });
	      });
	    }
	    bgGroup.addShape('rect', {
	      attrs: {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height,
	        fill: fill,
	        strokeOpacity: 0
	      }
	    });

	    bgGroup.addShape('path', {
	      attrs: Util.mix({
	        path: path
	      }, this.get('lineStyle'))
	    });

	    bgGroup.move(0, titleGap);
	  };

	  return Color;
	}(Continuous);

	module.exports = Color;

	/***/ }),
	/* 324 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of slider
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    Group = _require.Group,
	    DomUtil = _require.DomUtil;

	var Slider = function (_Group) {
	  _inherits(Slider, _Group);

	  function Slider() {
	    _classCallCheck(this, Slider);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  Slider.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 范围
	       * @type {Array}
	       */
	      range: null,
	      /**
	       * 中滑块属性
	       * @type {ATTRS}
	       */
	      middleAttr: null,
	      /**
	       * 背景
	       * @type {G-Element}
	       */
	      backgroundElement: null,
	      /**
	       * 下滑块
	       * @type {G-Element}
	       */
	      minHandleElement: null,
	      /**
	       * 上滑块
	       * @type {G-Element}
	       */
	      maxHandleElement: null,
	      /**
	       * 中块
	       * @type {G-Element}
	       */
	      middleHandleElement: null,
	      /**
	       * 当前的激活的元素
	       * @type {G-Element}
	       */
	      currentTarget: null,
	      /**
	       * 布局方式： horizontal，vertical
	       * @type {String}
	       */
	      layout: 'vertical',
	      /**
	       * 宽
	       * @type {Number}
	       */
	      width: null,
	      /**
	       * 高
	       * @type {Number}
	       */
	      height: null,
	      /**
	       * 当前的PageX
	       * @type {Number}
	       */
	      pageX: null,
	      /**
	       * 当前的PageY
	       * @type {Number}
	       */
	      pageY: null
	    };
	  };

	  Slider.prototype._beforeRenderUI = function _beforeRenderUI() {
	    var layout = this.get('layout');
	    var backgroundElement = this.get('backgroundElement');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.addShape('rect', {
	      attrs: this.get('middleAttr')
	    });
	    var trigerCursor = layout === 'vertical' ? 'ns-resize' : 'ew-resize';

	    this.add([backgroundElement, minHandleElement, maxHandleElement]);
	    this.set('middleHandleElement', middleHandleElement);
	    backgroundElement.set('zIndex', 0);
	    middleHandleElement.set('zIndex', 1);
	    minHandleElement.set('zIndex', 2);
	    maxHandleElement.set('zIndex', 2);
	    middleHandleElement.attr('cursor', trigerCursor);
	    minHandleElement.attr('cursor', trigerCursor);
	    maxHandleElement.attr('cursor', trigerCursor);
	    this.sort();
	  };

	  Slider.prototype._renderUI = function _renderUI() {
	    if (this.get('layout') === 'horizontal') {
	      this._renderHorizontal();
	    } else {
	      this._renderVertical();
	    }
	  };

	  Slider.prototype._transform = function _transform(layout) {
	    var range = this.get('range');
	    var minRatio = range[0] / 100;
	    var maxRatio = range[1] / 100;
	    var width = this.get('width');
	    var height = this.get('height');
	    var minHandleElement = this.get('minHandleElement');
	    var maxHandleElement = this.get('maxHandleElement');
	    var middleHandleElement = this.get('middleHandleElement');

	    minHandleElement.initTransform();
	    maxHandleElement.initTransform();

	    if (layout === 'horizontal') {
	      middleHandleElement.attr({
	        x: width * minRatio,
	        y: 0,
	        width: (maxRatio - minRatio) * width,
	        height: height
	      });
	      minHandleElement.translate(minRatio * width, height);
	      maxHandleElement.translate(maxRatio * width, height);
	    } else {
	      middleHandleElement.attr({
	        x: 0,
	        y: height * (1 - maxRatio),
	        width: width,
	        height: (maxRatio - minRatio) * height
	      });
	      minHandleElement.translate(width / 2, (1 - minRatio) * height);
	      maxHandleElement.translate(width / 2, (1 - maxRatio) * height);
	    }
	  };

	  Slider.prototype._renderHorizontal = function _renderHorizontal() {
	    this._transform('horizontal');
	  };

	  Slider.prototype._renderVertical = function _renderVertical() {
	    this._transform('vertical');
	  };

	  Slider.prototype._bindUI = function _bindUI() {
	    this.on('mousedown', Util.wrapBehavior(this, '_onMouseDown'));
	  };

	  Slider.prototype._isElement = function _isElement(target, name) {
	    // 判断是否是该元素
	    var element = this.get(name);
	    if (target === element) {
	      return true;
	    }
	    if (element.isGroup) {
	      var elementChildren = element.get('children');
	      return elementChildren.indexOf(target) > -1;
	    }
	    return false;
	  };

	  Slider.prototype._getRange = function _getRange(diff, range) {
	    var rst = diff + range;
	    rst = rst > 100 ? 100 : rst;
	    rst = rst < 0 ? 0 : rst;
	    return rst;
	  };

	  Slider.prototype._updateStatus = function _updateStatus(dim, ev) {
	    var totalLength = dim === 'x' ? this.get('width') : this.get('height');
	    dim = Util.upperFirst(dim);
	    var range = this.get('range');
	    var page = this.get('page' + dim);
	    var currentTarget = this.get('currentTarget');
	    var rangeStash = this.get('rangeStash');
	    var layout = this.get('layout');
	    var sign = layout === 'vertical' ? -1 : 1;
	    var currentPage = ev['page' + dim];
	    var diffPage = currentPage - page;
	    var diffRange = diffPage / totalLength * 100 * sign;
	    var diffStashRange = void 0;

	    if (range[1] <= range[0]) {
	      if (this._isElement(currentTarget, 'minHandleElement') || this._isElement(currentTarget, 'maxHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	        range[1] = this._getRange(diffRange, range[0]);
	      }
	    } else {
	      if (this._isElement(currentTarget, 'minHandleElement')) {
	        range[0] = this._getRange(diffRange, range[0]);
	      }
	      if (this._isElement(currentTarget, 'maxHandleElement')) {
	        range[1] = this._getRange(diffRange, range[1]);
	      }
	    }

	    if (this._isElement(currentTarget, 'middleHandleElement')) {
	      diffStashRange = rangeStash[1] - rangeStash[0];
	      range[0] = this._getRange(diffRange, range[0]);
	      range[1] = range[0] + diffStashRange;
	      if (range[1] > 100) {
	        range[1] = 100;
	        range[0] = range[1] - diffStashRange;
	      }
	    }

	    this.emit('sliderchange', {
	      range: range
	    });

	    this.set('page' + dim, currentPage);
	    this._renderUI();
	    this.get('canvas').draw(); // need delete
	    return;
	  };

	  Slider.prototype._onMouseDown = function _onMouseDown(ev) {
	    var currentTarget = ev.currentTarget;
	    var originEvent = ev.event;
	    var range = this.get('range');
	    originEvent.stopPropagation();
	    originEvent.preventDefault();
	    this.set('pageX', originEvent.pageX);
	    this.set('pageY', originEvent.pageY);
	    this.set('currentTarget', currentTarget);
	    this.set('rangeStash', [range[0], range[1]]);
	    this._bindCanvasEvents();
	  };

	  Slider.prototype._bindCanvasEvents = function _bindCanvasEvents() {
	    var containerDOM = this.get('canvas').get('containerDOM');
	    this.onMouseMoveListener = DomUtil.addEventListener(containerDOM, 'mousemove', Util.wrapBehavior(this, '_onCanvasMouseMove'));
	    this.onMouseUpListener = DomUtil.addEventListener(containerDOM, 'mouseup', Util.wrapBehavior(this, '_onCanvasMouseUp'));
	  };

	  Slider.prototype._onCanvasMouseMove = function _onCanvasMouseMove(ev) {
	    var layout = this.get('layout');
	    if (layout === 'horizontal') {
	      this._updateStatus('x', ev);
	    } else {
	      this._updateStatus('y', ev);
	    }
	  };

	  Slider.prototype._onCanvasMouseUp = function _onCanvasMouseUp() {
	    this._removeDocumentEvents();
	  };

	  Slider.prototype._removeDocumentEvents = function _removeDocumentEvents() {
	    this.onMouseMoveListener.remove();
	    this.onMouseUpListener.remove();
	  };

	  return Slider;
	}(Group);

	module.exports = Slider;

	/***/ }),
	/* 325 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of the size legend
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Continuous = __webpack_require__(112);
	var CIRCLE_GAP = 8;

	var Size = function (_Continuous) {
	  _inherits(Size, _Continuous);

	  function Size() {
	    _classCallCheck(this, Size);

	    return _possibleConstructorReturn(this, _Continuous.apply(this, arguments));
	  }

	  Size.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Continuous.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'size-legend',
	      width: 100,
	      height: 200,
	      _circleStyle: {
	        stroke: '#4E7CCC',
	        fill: '#fff',
	        fillOpacity: 0
	      },
	      textStyle: {
	        fill: '#333',
	        textAlign: 'start',
	        textBaseline: 'middle',
	        fontFamily: Global.fontFamily
	      }
	    });
	  };

	  Size.prototype._renderSliderShape = function _renderSliderShape() {
	    var slider = this.get('slider');
	    var backgroundElement = slider.get('backgroundElement');
	    var width = this.get('width');
	    var height = this.get('height');
	    var inRange = this.get('inRange');
	    var layout = this.get('layout');
	    var points = layout === 'vertical' ? [[0, 0], [width, 0], [width, height]] : [[0, height], [width, 0], [width, height]];

	    return this._addBackground(backgroundElement, 'Polygon', Util.mix({
	      points: points
	    }, inRange));
	  };

	  Size.prototype._addCircle = function _addCircle(x, y, r, text, maxWidth) {
	    var group = this.addGroup();
	    var circleStyle = this.get('_circleStyle');
	    var textStyle = this.get('textStyle');
	    var titleShape = this.get('titleShape');
	    var titleGap = this.get('titleGap');
	    if (titleShape) {
	      titleGap += titleShape.getBBox().height;
	    }

	    group.addShape('circle', {
	      attrs: Util.mix({
	        x: x,
	        y: y + titleGap,
	        r: r === 0 ? 1 : r
	      }, circleStyle)
	    });
	    group.addShape('text', {
	      attrs: Util.mix({
	        x: maxWidth + 5,
	        y: y + titleGap,
	        text: text === 0 ? '0' : text
	      }, textStyle)
	    });
	  };

	  Size.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var minRadius = this.get('firstItem').attrValue * 1;
	    var maxRadius = this.get('lastItem').attrValue * 1;
	    var medianRadius = (minRadius + maxRadius) / 2;
	    self._addCircle(maxRadius, maxRadius, maxRadius, medianRadius, 2 * maxRadius);
	    self._addCircle(maxRadius, maxRadius * 2 + CIRCLE_GAP + medianRadius, medianRadius, (minRadius + medianRadius) / 2, 2 * maxRadius);
	    self._addCircle(maxRadius, (maxRadius + CIRCLE_GAP + medianRadius) * 2 + minRadius, minRadius, minRadius, 2 * maxRadius);
	  };

	  return Size;
	}(Continuous);

	module.exports = Size;

	/***/ }),
	/* 326 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of tooltip
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);
	var Tooltip = __webpack_require__(327);
	var MatrixUtil = __webpack_require__(1).MatrixUtil;
	var Vector2 = MatrixUtil.vec2;

	var TYPE_SHOW_MARKERS = ['line', 'area', 'path', 'areaStack']; // 默认展示 tooltip marker 的几何图形
	var TYPE_SHOW_CROSSHAIRS = ['line', 'area']; // 默认展示十字瞄准线的几何图形

	// TODO FIXME this is HARD CODING
	var IGNORE_TOOLTIP_ITEM_PROPERTIES = ['marker', 'showMarker'];

	function _indexOfArray(items, item) {
	  var rst = -1;
	  Util.each(items, function (sub, index) {
	    var isEqual = true;
	    for (var key in item) {
	      if (item.hasOwnProperty(key) && IGNORE_TOOLTIP_ITEM_PROPERTIES.indexOf(key) === -1) {
	        if (!Util.isObject(item[key]) && item[key] !== sub[key]) {
	          isEqual = false;
	          break;
	        }
	      }
	    }
	    if (isEqual) {
	      rst = index;
	      return false;
	    }
	  });
	  return rst;
	}

	// 判断是否有样式
	function _hasClass(dom, className) {
	  if (!dom) {
	    return false;
	  }
	  var cls = '';
	  if (!dom.className) return false;
	  if (!Util.isNil(dom.className.baseVal)) {
	    cls = dom.className.baseVal;
	  } else {
	    cls = dom.className;
	  }
	  return cls.indexOf(className) !== -1;
	}

	function _isParent(dom, cls) {
	  var parent = dom.parentNode;
	  var rst = false;
	  while (parent && parent !== document.body) {
	    if (_hasClass(parent, cls)) {
	      rst = true;
	      break;
	    }
	    parent = parent.parentNode;
	  }
	  return rst;
	}

	// 去除重复的值, 去除不同图形相同数据，只展示一份即可
	function _uniqItems(items) {
	  var tmp = [];
	  Util.each(items, function (item) {
	    var index = _indexOfArray(tmp, item);
	    if (index === -1) {
	      tmp.push(item);
	    } else {
	      tmp[index] = item;
	    }
	  });
	  return tmp;
	}

	var TooltipController = function () {
	  function TooltipController(cfg) {
	    _classCallCheck(this, TooltipController);

	    Util.assign(this, cfg);
	    this.timeStamp = 0;
	  }

	  TooltipController.prototype._normalizeEvent = function _normalizeEvent(event) {
	    var chart = this.chart;
	    var canvas = this._getCanvas();
	    var point = canvas.getPointByClient(event.clientX, event.clientY);
	    var pixelRatio = canvas.get('pixelRatio');
	    point.x = point.x / pixelRatio;
	    point.y = point.y / pixelRatio;
	    var views = chart.getViewsByPoint(point);
	    point.views = views;
	    return point;
	  };

	  TooltipController.prototype._getCanvas = function _getCanvas() {
	    return this.chart.get('canvas');
	  };

	  TooltipController.prototype._getTriggerEvent = function _getTriggerEvent() {
	    var options = this.options;
	    var triggerOn = options.triggerOn;
	    var eventName = void 0;

	    if (!triggerOn || triggerOn === 'mousemove') {
	      eventName = 'plotmove';
	    } else if (triggerOn === 'click') {
	      eventName = 'plotclick';
	    } else if (triggerOn === 'none') {
	      eventName = null;
	    }

	    return eventName;
	  };

	  TooltipController.prototype._getDefaultTooltipCfg = function _getDefaultTooltipCfg() {
	    var self = this;
	    var options = self.options;
	    var defaultCfg = Util.mix({}, Global.tooltip);
	    var chart = self.chart;
	    var geoms = chart.getAllGeoms().filter(function (geom) {
	      return geom.get('visible');
	    });
	    var shapes = [];
	    Util.each(geoms, function (geom) {
	      var type = geom.get('type');
	      var adjusts = geom.get('adjusts');
	      var isSymmetric = false;
	      if (adjusts) {
	        Util.each(adjusts, function (adjust) {
	          if (adjust.type === 'symmetric' || adjust.type === 'Symmetric') {
	            isSymmetric = true;
	            return false;
	          }
	        });
	      }
	      if (Util.indexOf(shapes, type) === -1 && !isSymmetric) {
	        shapes.push(type);
	      }
	    });

	    var crosshairsCfg = void 0;
	    if (geoms.length && geoms[0].get('coord') && geoms[0].get('coord').type === 'cartesian' && shapes.length === 1) {
	      if (shapes[0] === 'interval' && options.shared !== false) {
	        // 直角坐标系下 interval 的 crosshair 为矩形背景框
	        crosshairsCfg = {
	          zIndex: 0, // 矩形背景框不可覆盖 geom
	          crosshairs: Global.tooltipCrosshairsRect
	        };
	      } else if (Util.indexOf(TYPE_SHOW_CROSSHAIRS, shapes[0]) > -1) {
	        crosshairsCfg = {
	          crosshairs: Global.tooltipCrosshairsLine
	        };
	      }
	    }

	    return Util.mix(defaultCfg, crosshairsCfg, {
	      isTransposed: geoms.length && geoms[0].get('coord') ? geoms[0].get('coord').isTransposed : false
	    });
	  };

	  TooltipController.prototype._bindEvent = function _bindEvent() {
	    var chart = this.chart;
	    var triggerEvent = this._getTriggerEvent();
	    if (triggerEvent) {
	      chart.on(triggerEvent, Util.wrapBehavior(this, 'onMouseMove'));
	      chart.on('plotleave', Util.wrapBehavior(this, 'onMouseOut'));
	    }
	  };

	  TooltipController.prototype._offEvent = function _offEvent() {
	    var chart = this.chart;
	    var triggerEvent = this._getTriggerEvent();
	    if (triggerEvent) {
	      chart.off(triggerEvent, Util.getWrapBehavior(this, 'onMouseMove'));
	      chart.off('plotleave', Util.getWrapBehavior(this, 'onMouseOut'));
	    }
	  };

	  TooltipController.prototype._setTooltip = function _setTooltip(point, items, markersItems, target) {
	    var self = this;
	    var tooltip = self.tooltip;
	    var prePoint = self.prePoint;
	    if (!prePoint || prePoint.x !== point.x || prePoint.y !== point.y) {
	      items = _uniqItems(items);
	      self.prePoint = point;

	      var chart = self.chart;
	      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	      if (!tooltip.get('visible')) {
	        chart.emit('tooltip:show', {
	          x: x,
	          y: y,
	          tooltip: tooltip
	        });
	      }
	      var first = items[0];
	      var title = first.title || first.name;
	      if (tooltip.isContentChange(title, items)) {
	        chart.emit('tooltip:change', {
	          tooltip: tooltip,
	          x: x,
	          y: y,
	          items: items
	        });
	        // bugfix: when set the title in the tooltip:change event does not take effect.
	        title = items[0].title || items[0].name;
	        tooltip.setContent(title, items);
	        if (!Util.isEmpty(markersItems)) {
	          if (self.options.hideMarkers === true) {
	            // 不展示 tooltip marker
	            tooltip.set('markerItems', markersItems); // 用于 tooltip 辅助线的定位
	          } else {
	            tooltip.setMarkers(markersItems, Global.tooltipMarker);
	          }
	        } else {
	          tooltip.clearMarkers();
	        }
	      }
	      tooltip.setPosition(x, y, target);
	      tooltip.show();
	    }
	  };

	  TooltipController.prototype.hideTooltip = function hideTooltip() {
	    var tooltip = this.tooltip;
	    var chart = this.chart;
	    var canvas = this._getCanvas();
	    this.prePoint = null;
	    tooltip.hide();
	    chart.emit('tooltip:hide', {
	      tooltip: tooltip
	    });
	    canvas.draw();
	  };

	  TooltipController.prototype.onMouseMove = function onMouseMove(ev) {
	    if (Util.isEmpty(ev.views)) {
	      return;
	    }

	    var lastTimeStamp = this.timeStamp;
	    var timeStamp = +new Date();
	    var point = {
	      x: ev.x,
	      y: ev.y
	    };
	    if (timeStamp - lastTimeStamp > 16) {
	      var target = void 0;
	      if (ev.shape && Util.inArray(['point', 'interval', 'polygon', 'schema'], ev.shape.name)) {
	        target = ev.shape;
	      }
	      this.showTooltip(point, ev.views, target);
	      this.timeStamp = timeStamp;
	    }
	  };

	  TooltipController.prototype.onMouseOut = function onMouseOut(ev) {
	    var tooltip = this.tooltip;
	    var canvas = this._getCanvas();
	    if (!tooltip.get('visible')) {
	      return;
	    }
	    if (ev && ev.target !== canvas) {
	      return;
	    }
	    if (ev && ev.toElement && (_hasClass(ev.toElement, 'g2-tooltip') || _isParent(ev.toElement, 'g2-tooltip'))) {
	      return;
	    }
	    this.hideTooltip();
	  };

	  TooltipController.prototype.renderTooltip = function renderTooltip() {
	    var self = this;
	    if (self.tooltip) {
	      // tooltip 对象已经创建
	      return;
	    }
	    var chart = self.chart;
	    var canvas = self._getCanvas();
	    var defaultCfg = self._getDefaultTooltipCfg();
	    var options = self.options;
	    options = Util.deepMix({
	      plotRange: chart.get('plotRange'),
	      capture: false,
	      canvas: canvas,
	      frontPlot: chart.get('frontPlot'),
	      backPlot: chart.get('backPlot')
	    }, defaultCfg, options);
	    if (options.crosshairs && options.crosshairs.type === 'rect') {
	      options.zIndex = 0; // toolip 背景框不可遮盖住 geom，防止用户配置了 crosshairs
	    }

	    options.visible = false;
	    if (options.shared === false && Util.isNil(options.position)) {
	      options.position = 'top';
	    }

	    var tooltip = new Tooltip(options);
	    self.tooltip = tooltip;

	    var triggerEvent = self._getTriggerEvent();
	    if (!tooltip.get('enterable') && triggerEvent === 'plotmove') {
	      // 鼠标不允许进入 tooltip 容器
	      var tooltipContainer = tooltip.get('container');
	      if (tooltipContainer) {
	        tooltipContainer.onmousemove = function (e) {
	          // 避免 tooltip 频繁闪烁
	          var eventObj = self._normalizeEvent(e);
	          chart.emit(triggerEvent, eventObj);
	        };
	      }
	    }
	    self._bindEvent();
	  };

	  TooltipController.prototype.showTooltip = function showTooltip(point, views, target) {
	    var self = this;
	    if (Util.isEmpty(views) || !point) {
	      return;
	    }
	    if (!this.tooltip) {
	      this.renderTooltip(); // 如果一开始 tooltip 关闭，用户重新调用的时候需要先生成 tooltip
	    }
	    var options = self.options;
	    var markersItems = [];
	    var items = [];

	    Util.each(views, function (view) {
	      if (!view.get('tooltipEnable')) {
	        // 如果不显示tooltip，则跳过
	        return true;
	      }
	      var geoms = view.get('geoms');
	      var coord = view.get('coord');
	      Util.each(geoms, function (geom) {
	        var type = geom.get('type');
	        if (geom.get('visible') && geom.get('tooltipCfg') !== false) {
	          var dataArray = geom.get('dataArray');
	          if (geom.isShareTooltip() || options.shared === false && Util.inArray(['area', 'line', 'path'], type)) {
	            Util.each(dataArray, function (obj) {
	              var tmpPoint = geom.findPoint(point, obj);
	              if (tmpPoint) {
	                var subItems = geom.getTipItems(tmpPoint, options.title);
	                if (Util.indexOf(TYPE_SHOW_MARKERS, type) !== -1) {
	                  Util.each(subItems, function (v) {
	                    var point = v.point;
	                    if (point && point.x && point.y) {
	                      // hotfix: make sure there is no null value
	                      var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	                      var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	                      point = coord.applyMatrix(x, y, 1);
	                      v.x = point[0];
	                      v.y = point[1];
	                      v.showMarker = true;
	                      markersItems.push(v);
	                    }
	                  });
	                }
	                items = items.concat(subItems);
	              }
	            });
	          } else {
	            var geomContainer = geom.get('shapeContainer');
	            var canvas = geomContainer.get('canvas');
	            var pixelRatio = canvas.get('pixelRatio');
	            var shape = geomContainer.getShape(point.x * pixelRatio, point.y * pixelRatio);
	            if (shape && shape.get('visible') && shape.get('origin')) {
	              items = geom.getTipItems(shape.get('origin'), options.title);
	            }
	          }
	        }
	      });

	      Util.each(items, function (item) {
	        var point = item.point;
	        var x = Util.isArray(point.x) ? point.x[point.x.length - 1] : point.x;
	        var y = Util.isArray(point.y) ? point.y[point.y.length - 1] : point.y;
	        point = coord.applyMatrix(x, y, 1);
	        item.x = point[0];
	        item.y = point[1];
	      });
	    });

	    if (items.length) {
	      var first = items[0];

	      // bugfix: multiple tooltip items with different titles
	      if (!items.every(function (item) {
	        return item.title === first.title;
	      })) {
	        var nearestItem = first;
	        var nearestDistance = Infinity;
	        items.forEach(function (item) {
	          var distance = Vector2.distance([point.x, point.y], [item.x, item.y]);
	          if (distance < nearestDistance) {
	            nearestDistance = distance;
	            nearestItem = item;
	          }
	        });
	        items = items.filter(function (item) {
	          return item.title === nearestItem.title;
	        });
	        markersItems = markersItems.filter(function (item) {
	          return item.title === nearestItem.title;
	        });
	      }

	      if (options.shared === false && items.length > 1) {
	        var snapItem = items[0];
	        var min = Math.abs(point.y - snapItem.y);
	        Util.each(items, function (aItem) {
	          if (Math.abs(point.y - aItem.y) <= min) {
	            snapItem = aItem;
	            min = Math.abs(point.y - aItem.y);
	          }
	        });
	        if (snapItem && snapItem.x && snapItem.y) {
	          markersItems = [snapItem];
	        }
	        items = [snapItem];
	      }
	      // 3.0 采用当前鼠标位置作为 tooltip 的参考点
	      // if (!Util.isEmpty(markersItems)) {
	      //   point = markersItems[0];
	      // }
	      self._setTooltip(point, items, markersItems, target);
	    } else {
	      self.hideTooltip();
	    }
	  };

	  TooltipController.prototype.clear = function clear() {
	    var tooltip = this.tooltip;
	    tooltip && tooltip.destroy();
	    this.tooltip = null;
	    this.prePoint = null;
	    this._offEvent();
	  };

	  return TooltipController;
	}();

	module.exports = TooltipController;

	/***/ }),
	/* 327 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of tooltip
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Base = __webpack_require__(58);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var CONTAINER_CLASS = 'g2-tooltip';
	var TITLE_CLASS = 'g2-tooltip-title';
	var LIST_CLASS = 'g2-tooltip-list';
	var MARKER_CLASS = 'g2-tooltip-marker';
	var LIST_ITEM_CLASS = 'g2-tooltip-list-item';

	function find(dom, cls) {
	  return dom.getElementsByClassName(cls)[0];
	}

	function refixTooltipPosition(x, y, el, viewWidth, viewHeight) {
	  var width = el.clientWidth;
	  var height = el.clientHeight;
	  var gap = 20;

	  if (x + width + gap > viewWidth) {
	    x -= width + gap;
	    x = x < 0 ? 0 : x;
	  } else {
	    x += gap;
	  }
	  if (y + height + gap > viewHeight) {
	    y -= height + gap;
	    y = x < 0 ? 0 : y;
	  } else {
	    y += gap;
	  }
	  return [x, y];
	}

	function calcTooltipPosition(x, y, position, dom, target) {
	  var domWidth = dom.clientWidth;
	  var domHeight = dom.clientHeight;
	  var rectWidth = 0;
	  var rectHeight = 0;
	  var gap = 20;

	  if (target) {
	    var rect = target.getBBox();
	    rectWidth = rect.width;
	    rectHeight = rect.height;
	    x = rect.x;
	    y = rect.y;
	    gap = 5;
	  }
	  switch (position) {
	    case 'inside':
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'top':
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y - domHeight - gap;
	      break;
	    case 'left':
	      x = x - domWidth - gap;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'right':
	      x = x + rectWidth + gap;
	      y = y + rectHeight / 2 - domHeight / 2;
	      break;
	    case 'bottom':
	    default:
	      x = x + rectWidth / 2 - domWidth / 2;
	      y = y + rectHeight + gap;
	      break;
	  }
	  return [x, y];
	}

	function confineTooltipPosition(x, y, el, plotRange) {
	  var gap = 20;
	  var width = el.clientWidth;
	  var height = el.clientHeight;
	  if (x + width > plotRange.tr.x) {
	    x -= width + 2 * gap;
	  }

	  if (x < plotRange.tl.x) {
	    x = plotRange.tl.x;
	  }

	  if (y + height > plotRange.bl.y) {
	    y -= height + 2 * gap;
	  }

	  if (y < plotRange.tl.y) {
	    y = plotRange.tl.y;
	  }

	  return [x, y];
	}

	var Tooltip = function (_Base) {
	  _inherits(Tooltip, _Base);

	  Tooltip.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 右下角坐标
	       * @type {Number}
	       */
	      x: 0,
	      /**
	       * y 右下角坐标
	       * @type {Number}
	       */
	      y: 0,
	      /**
	       * tooltip 记录项
	       * @type {Array}
	       */
	      items: null,
	      /**
	       * 是否展示 title
	       * @type {Boolean}
	       */
	      showTitle: true,
	      /**
	       * tooltip 辅助线配置
	       * @type {Object}
	       */
	      crosshairs: null,
	      /**
	       * 视图范围
	       * @type {Object}
	       */
	      plotRange: null,
	      /**
	       * x轴上，移动到位置的偏移量
	       * @type {Number}
	       */
	      offset: 10,
	      /**
	       * 时间戳
	       * @type {Number}
	       */
	      timeStamp: 0,
	      /**
	       * tooltip 容器模板
	       * @type {String}
	       */
	      containerTpl: '<div class="' + CONTAINER_CLASS + '">' + '<div class="' + TITLE_CLASS + '"></div>' + '<ul class="' + LIST_CLASS + '"></ul>' + '</div>',
	      /**
	       * tooltip 列表项模板
	       * @type {String}
	       */
	      itemTpl: '<li data-index={index}>' + '<span style="background-color:{color};" class=' + MARKER_CLASS + '></span>' + '{name}: {value}</li>',
	      /**
	       * 将 tooltip 展示在指定区域内
	       * @type {Boolean}
	       */
	      inPlot: true,
	      /**
	       * tooltip 内容跟随鼠标移动
	       * @type {Boolean}
	       */
	      follow: true,
	      /**
	       * 是否允许鼠标停留在 tooltip 上，默认不允许
	       * @type {Boolean}
	       */
	      enterable: false
	    };
	  };

	  Tooltip.prototype._initTooltipWrapper = function _initTooltipWrapper() {
	    var self = this;
	    var containerTpl = self.get('containerTpl');
	    var outterNode = self.get('canvas').get('el').parentNode;
	    var container = void 0;
	    if (/^\#/.test(containerTpl)) {
	      // 如果传入 dom 节点的 id
	      var id = containerTpl.replace('#', '');
	      container = document.getElementById(id);
	    } else {
	      container = DomUtil.createDom(containerTpl);
	      DomUtil.modifyCSS(container, self.get(CONTAINER_CLASS));
	      outterNode.appendChild(container);
	      outterNode.style.position = 'relative';
	    }
	    self.set('container', container);
	  };

	  Tooltip.prototype._init = function _init() {
	    var crosshairs = this.get('crosshairs');
	    var frontPlot = this.get('frontPlot');
	    var backPlot = this.get('backPlot');
	    var crosshairsGroup = void 0;

	    if (crosshairs) {
	      if (crosshairs.type === 'rect') {
	        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsRect, crosshairs));
	        crosshairsGroup = backPlot.addGroup({
	          zIndex: 0
	        });
	      } else {
	        this.set('crosshairs', Util.deepMix({}, Global.tooltipCrosshairsLine, crosshairs));
	        crosshairsGroup = frontPlot.addGroup();
	      }
	    }

	    this.set('crosshairsGroup', crosshairsGroup);
	    this._initTooltipWrapper();
	  };

	  function Tooltip(cfg) {
	    _classCallCheck(this, Tooltip);

	    var _this = _possibleConstructorReturn(this, _Base.call(this, cfg));

	    _this._init(); // 初始化属性

	    if (_this.get('items')) {
	      _this._renderTooltip();
	    }
	    _this._renderCrosshairs();
	    return _this;
	  }

	  Tooltip.prototype._clearDom = function _clearDom() {
	    var container = this.get('container');
	    var titleDom = find(container, TITLE_CLASS);
	    var listDom = find(container, LIST_CLASS);
	    if (titleDom) {
	      titleDom.innerHTML = '';
	    }
	    if (listDom) {
	      listDom.innerHTML = '';
	    }
	  };

	  Tooltip.prototype._addItem = function _addItem(item, index) {
	    var itemTpl = this.get('itemTpl'); // TODO: 有可能是个回调函数

	    var itemDiv = Util.substitute(itemTpl, Util.mix({
	      index: index
	    }, item));

	    var itemDOM = DomUtil.createDom(itemDiv);
	    DomUtil.modifyCSS(itemDOM, this.get(LIST_ITEM_CLASS));
	    var markerDom = find(itemDOM, MARKER_CLASS);
	    if (markerDom) {
	      DomUtil.modifyCSS(markerDom, this.get(MARKER_CLASS));
	    }

	    return itemDOM;
	  };

	  Tooltip.prototype._renderTooltip = function _renderTooltip() {
	    var self = this;
	    var showTitle = self.get('showTitle');
	    var titleContent = self.get('titleContent');
	    var container = self.get('container');
	    var titleDom = find(container, TITLE_CLASS);
	    var listDom = find(container, LIST_CLASS);
	    var items = self.get('items');
	    self._clearDom();

	    if (titleDom && showTitle) {
	      DomUtil.modifyCSS(titleDom, self.get(TITLE_CLASS));
	      titleDom.innerHTML = titleContent;
	    }

	    if (listDom) {
	      DomUtil.modifyCSS(listDom, self.get(LIST_CLASS));
	      Util.each(items, function (item, index) {
	        listDom.appendChild(self._addItem(item, index));
	      });
	    }
	  };

	  Tooltip.prototype._clearCrosshairsGroup = function _clearCrosshairsGroup() {
	    var crosshairsGroup = this.get('crosshairsGroup');
	    this.set('crossLineShapeX', null);
	    this.set('crossLineShapeY', null);
	    this.set('crosshairsRectShape', null);
	    crosshairsGroup.clear();
	  };

	  Tooltip.prototype._renderCrosshairs = function _renderCrosshairs() {
	    var crosshairs = this.get('crosshairs');
	    var canvas = this.get('canvas');
	    var plotRange = this.get('plotRange');
	    var isTransposed = this.get('isTransposed');
	    if (crosshairs) {
	      this._clearCrosshairsGroup();
	      switch (crosshairs.type) {
	        case 'x':
	          this._renderHorizontalLine(canvas, plotRange);
	          break;
	        case 'y':
	          this._renderVerticalLine(canvas, plotRange);
	          break;
	        case 'cross':
	          this._renderHorizontalLine(canvas, plotRange);
	          this._renderVerticalLine(canvas, plotRange);
	          break;
	        case 'rect':
	          this._renderBackground(canvas, plotRange);
	          break;
	        default:
	          isTransposed ? this._renderHorizontalLine(canvas, plotRange) : this._renderVerticalLine(canvas, plotRange);
	      }
	    }
	  };

	  Tooltip.prototype._addCrossLineShape = function _addCrossLineShape(attrs, type) {
	    var crosshairsGroup = this.get('crosshairsGroup');
	    var shape = crosshairsGroup.addShape('line', {
	      capture: false,
	      attrs: attrs
	    });
	    shape.hide();
	    this.set('crossLineShape' + type, shape);
	    return shape;
	  };

	  Tooltip.prototype._renderVerticalLine = function _renderVerticalLine(canvas, plotRange) {
	    var _get = this.get('crosshairs'),
	        style = _get.style;

	    var attrs = Util.mix({
	      x1: 0,
	      y1: plotRange ? plotRange.bl.y : canvas.get('height'),
	      x2: 0,
	      y2: plotRange ? plotRange.tl.y : 0
	    }, style);

	    this._addCrossLineShape(attrs, 'Y');
	  };

	  Tooltip.prototype._renderHorizontalLine = function _renderHorizontalLine(canvas, plotRange) {
	    var _get2 = this.get('crosshairs'),
	        style = _get2.style;

	    var attrs = Util.mix({
	      x1: plotRange ? plotRange.bl.x : canvas.get('width'),
	      y1: 0,
	      x2: plotRange ? plotRange.br.x : 0,
	      y2: 0
	    }, style);

	    this._addCrossLineShape(attrs, 'X');
	  };

	  Tooltip.prototype._renderBackground = function _renderBackground(canvas, plotRange) {
	    var _get3 = this.get('crosshairs'),
	        style = _get3.style;

	    var crosshairsGroup = this.get('crosshairsGroup');
	    var attrs = Util.mix({
	      x: plotRange ? plotRange.tl.x : 0,
	      y: plotRange ? plotRange.tl.y : canvas.get('height'),
	      width: plotRange ? plotRange.br.x - plotRange.bl.x : canvas.get('width'),
	      height: plotRange ? Math.abs(plotRange.tl.y - plotRange.bl.y) : canvas.get('height')
	    }, style);

	    var shape = crosshairsGroup.addShape('rect', {
	      attrs: attrs
	    });
	    shape.hide();
	    this.set('crosshairsRectShape', shape);
	    return shape;
	  };

	  Tooltip.prototype.isContentChange = function isContentChange(title, items) {
	    var titleContent = this.get('titleContent');
	    var lastItems = this.get('items');
	    var isChanged = !(title === titleContent && lastItems.length === items.length);
	    if (!isChanged) {
	      Util.each(items, function (item, index) {
	        var preItem = lastItems[index];
	        for (var key in item) {
	          if (item.hasOwnProperty(key)) {
	            if (!Util.isObject(item[key]) && item[key] !== preItem[key]) {
	              isChanged = true;
	              break;
	            }
	          }
	        }
	        // isChanged = (item.value !== preItem.value) || (item.color !== preItem.color) || (item.name !== preItem.name) || (item.title !== preItem.title);
	        if (isChanged) {
	          return false;
	        }
	      });
	    }

	    return isChanged;
	  };

	  Tooltip.prototype.setContent = function setContent(title, items) {
	    // const isChange = this.isContentChange(title, items);
	    // if (isChange) {
	    // 在外面进行判断是否内容发生改变
	    var timeStamp = +new Date();
	    this.set('items', items);
	    this.set('titleContent', title);
	    this.set('timeStamp', timeStamp);
	    this._renderTooltip();
	    // }
	    return this;
	  };

	  Tooltip.prototype.setMarkers = function setMarkers(markerItems, markerCfg) {
	    var self = this;
	    var markerGroup = self.get('markerGroup');
	    var frontPlot = self.get('frontPlot');
	    if (!markerGroup) {
	      markerGroup = frontPlot.addGroup({
	        zIndex: 1,
	        capture: false // 不进行拾取
	      });
	      self.set('markerGroup', markerGroup);
	    } else {
	      markerGroup.clear();
	    }
	    Util.each(markerItems, function (item) {
	      markerGroup.addShape('marker', {
	        color: item.color,
	        attrs: Util.mix({}, markerCfg, {
	          x: item.x,
	          y: item.y
	        })
	      });
	    });
	    this.set('markerItems', markerItems);
	  };

	  Tooltip.prototype.clearMarkers = function clearMarkers() {
	    var markerGroup = this.get('markerGroup');
	    markerGroup && markerGroup.clear();
	  };

	  Tooltip.prototype.setPosition = function setPosition(x, y, target) {
	    var container = this.get('container');
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var endx = x;
	    var endy = y;
	    // const outterNode = this.get('canvas').get('el').parentNode;
	    var outterNode = this.get('canvas').get('el');
	    var viewWidth = DomUtil.getWidth(outterNode);
	    var viewHeight = DomUtil.getHeight(outterNode);
	    var offset = this.get('offset');

	    var position = void 0;
	    if (this.get('position')) {
	      position = calcTooltipPosition(x, y, this.get('position'), container, target);
	      x = position[0];
	      y = position[1];
	    } else if (!this.get('position')) {
	      position = refixTooltipPosition(x, y, container, viewWidth, viewHeight);
	      x = position[0];
	      y = position[1];
	    }

	    if (this.get('inPlot')) {
	      // tooltip 必须限制在绘图区域内
	      var plotRange = this.get('plotRange');
	      position = confineTooltipPosition(x, y, container, plotRange);
	      x = position[0];
	      y = position[1];
	    }

	    if (this.get('x') !== x || this.get('y') !== y) {
	      var markerItems = this.get('markerItems');
	      if (!Util.isEmpty(markerItems)) {
	        endx = markerItems[0].x;
	        endy = markerItems[0].y;
	      }
	      if (crossLineShapeY) {
	        // 第一次进入时，画布需要单独绘制，所以需要先设定corss的位置
	        crossLineShapeY.move(endx, 0);
	      }
	      if (crossLineShapeX) {
	        crossLineShapeX.move(0, endy);
	      }

	      if (crosshairsRectShape) {
	        // 绘制矩形辅助框，只在直角坐标系下生效
	        var isTransposed = this.get('isTransposed');
	        var items = this.get('items');
	        var firstItem = items[0];
	        var lastItem = items[items.length - 1];
	        var dim = isTransposed ? 'y' : 'x';
	        var attr = isTransposed ? 'height' : 'width';
	        var startDim = firstItem[dim];
	        if (items.length > 1 && firstItem[dim] > lastItem[dim]) {
	          startDim = lastItem[dim];
	        }

	        if (this.get('crosshairs').width) {
	          // 用户定义了 width
	          crosshairsRectShape.attr(dim, startDim - this.get('crosshairs').width / 2);
	          crosshairsRectShape.attr(attr, this.get('crosshairs').width);
	        } else {
	          if (Util.isArray(firstItem.point[dim]) && !firstItem.size) {
	            // 直方图
	            var width = firstItem.point[dim][1] - firstItem.point[dim][0];
	            crosshairsRectShape.attr(dim, firstItem.point[dim][0]);
	            crosshairsRectShape.attr(attr, width);
	          } else {
	            offset = 3 * firstItem.size / 4;
	            crosshairsRectShape.attr(dim, startDim - offset);

	            if (items.length === 1) {
	              crosshairsRectShape.attr(attr, 3 * firstItem.size / 2);
	            } else {
	              crosshairsRectShape.attr(attr, Math.abs(lastItem[dim] - firstItem[dim]) + 2 * offset);
	            }
	          }
	        }
	      }

	      var follow = this.get('follow');
	      container.style.left = follow ? x + 'px' : 0;
	      container.style.top = follow ? y + 'px' : 0;
	    }
	  };

	  Tooltip.prototype.show = function show() {
	    var crossLineShapeX = this.get('crossLineShapeX');
	    var crossLineShapeY = this.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var markerGroup = this.get('markerGroup');
	    var container = this.get('container');
	    var canvas = this.get('canvas');
	    crossLineShapeX && crossLineShapeX.show();
	    crossLineShapeY && crossLineShapeY.show();
	    crosshairsRectShape && crosshairsRectShape.show();
	    markerGroup && markerGroup.show();
	    _Base.prototype.show.call(this);
	    container.style.visibility = 'visible';
	    // canvas.sort();
	    canvas.draw();
	  };

	  Tooltip.prototype.hide = function hide() {
	    var self = this;
	    var container = self.get('container');
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var crosshairsRectShape = this.get('crosshairsRectShape');
	    var markerGroup = self.get('markerGroup');
	    var canvas = self.get('canvas');
	    container.style.visibility = 'hidden';
	    crossLineShapeX && crossLineShapeX.hide();
	    crossLineShapeY && crossLineShapeY.hide();
	    crosshairsRectShape && crosshairsRectShape.hide();
	    markerGroup && markerGroup.hide();
	    _Base.prototype.hide.call(this);
	    canvas.draw();
	  };

	  Tooltip.prototype.destroy = function destroy() {
	    var self = this;
	    var crossLineShapeX = self.get('crossLineShapeX');
	    var crossLineShapeY = self.get('crossLineShapeY');
	    var markerGroup = self.get('markerGroup');
	    var crosshairsRectShape = self.get('crosshairsRectShape');
	    var container = self.get('container');
	    var containerTpl = self.get('containerTpl');

	    if (container && !/^\#/.test(containerTpl)) {
	      container.parentNode.removeChild(container);
	    }

	    crossLineShapeX && crossLineShapeX.remove();
	    crossLineShapeY && crossLineShapeY.remove();
	    markerGroup && markerGroup.remove();
	    crosshairsRectShape && crosshairsRectShape.remove();
	    // super.remove();
	    _Base.prototype.destroy.call(this);
	  };

	  return Tooltip;
	}(Base);

	module.exports = Tooltip;

	/***/ }),
	/* 328 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview The controller of chart's events
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	function isSameShape(shape1, shape2) {
	  if (Util.isNil(shape1) || Util.isNil(shape2)) {
	    return false;
	  }
	  var shape1Origin = shape1.get('origin');
	  var shape2Origin = shape2.get('origin');

	  // hotfix: if both shapes have no data，just compare shapes.
	  if (Util.isNil(shape1Origin) && Util.isNil(shape2Origin)) {
	    return Util.isEqual(shape1, shape2);
	  }

	  return Util.isEqual(shape1Origin, shape2Origin);
	}

	function registerData(eventObj) {
	  if (eventObj.shape && eventObj.shape.get('origin')) {
	    eventObj.data = eventObj.shape.get('origin');
	  }
	}

	var EventController = function () {
	  function EventController(cfg) {
	    _classCallCheck(this, EventController);

	    this.view = null;
	    this.canvas = null;
	    Util.assign(this, cfg);

	    this._init();
	  }

	  EventController.prototype._init = function _init() {
	    this.pixelRatio = this.canvas.get('pixelRatio');
	  };

	  EventController.prototype._getShapeEventObj = function _getShapeEventObj(ev) {
	    return {
	      x: ev.x / this.pixelRatio,
	      y: ev.y / this.pixelRatio,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement || ev.event.relatedTarget
	    };
	  };

	  EventController.prototype._getShape = function _getShape(x, y) {
	    var view = this.view;
	    var container = view.get('canvas');
	    return container.getShape(x, y);
	  };

	  EventController.prototype._getPointInfo = function _getPointInfo(ev) {
	    var view = this.view;
	    var point = {
	      x: ev.x / this.pixelRatio,
	      y: ev.y / this.pixelRatio
	    };
	    var views = view.getViewsByPoint(point);
	    point.views = views;
	    return point;
	  };

	  EventController.prototype._getEventObj = function _getEventObj(ev, point, views) {
	    return {
	      x: point.x,
	      y: point.y,
	      target: ev.target, // canvas 元素
	      toElement: ev.event.toElement || ev.event.relatedTarget, // 目标元素
	      views: views
	    };
	  };

	  EventController.prototype.bindEvents = function bindEvents() {
	    var canvas = this.canvas;
	    canvas.on('mousedown', Util.wrapBehavior(this, 'onDown'));
	    canvas.on('mousemove', Util.wrapBehavior(this, 'onMove'));
	    canvas.on('mouseleave', Util.wrapBehavior(this, 'onOut'));
	    canvas.on('mouseup', Util.wrapBehavior(this, 'onUp'));
	    canvas.on('click', Util.wrapBehavior(this, 'onClick'));
	    canvas.on('dblclick', Util.wrapBehavior(this, 'onClick'));
	    canvas.on('touchstart', Util.wrapBehavior(this, 'onTouchstart'));
	    canvas.on('touchmove', Util.wrapBehavior(this, 'onTouchmove'));
	    canvas.on('touchend', Util.wrapBehavior(this, 'onTouchend'));
	  };

	  EventController.prototype._triggerShapeEvent = function _triggerShapeEvent(shape, eventName, eventObj) {
	    if (shape && shape.name && !shape.get('destroyed')) {
	      var view = this.view;
	      if (view.isShapeInView(shape)) {
	        var name = shape.name + ':' + eventName;
	        eventObj.view = view;
	        eventObj.appendInfo = shape.get('appendInfo'); // appendInfo is defined by user
	        view.emit(name, eventObj);
	        var parent = view.get('parent');
	        if (parent) {
	          // chart 上也需要抛出该事件，本期先不抛出
	          parent.emit(name, eventObj);
	        }
	      }
	    }
	  };

	  EventController.prototype.onDown = function onDown(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    registerData(eventObj);
	    view.emit('mousedown', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'mousedown', eventObj);
	  };

	  EventController.prototype.onMove = function onMove(ev) {
	    var self = this;
	    var view = self.view;
	    var currentShape = self.currentShape;
	    // 如果图形被销毁，则设置当前 shape 为空
	    if (currentShape && currentShape.get('destroyed')) {
	      currentShape = null;
	      self.currentShape = null;
	    }
	    var shape = self._getShape(ev.x, ev.y);
	    var eventObj = self._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('mousemove', eventObj);
	    self._triggerShapeEvent(shape, 'mousemove', eventObj);

	    if (currentShape && !isSameShape(currentShape, shape)) {
	      var leaveObj = self._getShapeEventObj(ev);
	      leaveObj.shape = currentShape;
	      leaveObj.toShape = shape;
	      registerData(leaveObj);
	      self._triggerShapeEvent(currentShape, 'mouseleave', leaveObj);
	    }

	    if (shape && !isSameShape(currentShape, shape)) {
	      var enterObj = self._getShapeEventObj(ev);
	      enterObj.shape = shape;
	      enterObj.fromShape = currentShape;
	      registerData(enterObj);
	      self._triggerShapeEvent(shape, 'mouseenter', enterObj);
	    }
	    self.currentShape = shape;

	    var point = self._getPointInfo(ev);
	    var preViews = self.curViews || [];

	    if (preViews.length === 0 && point.views.length) {
	      view.emit('plotenter', self._getEventObj(ev, point, point.views));
	    }
	    // if (preViews.length && point.views.length === 0) {
	    //   view.emit('plotleave', self._getEventObj(ev, point, preViews));
	    // }

	    if (point.views.length) {
	      eventObj = self._getEventObj(ev, point, point.views);
	      eventObj.shape = shape;
	      registerData(eventObj);
	      view.emit('plotmove', eventObj);
	    }

	    self.curViews = point.views;
	  };

	  EventController.prototype.onOut = function onOut(ev) {
	    var self = this;
	    var view = self.view;
	    var point = self._getPointInfo(ev);
	    var preViews = self.curViews || [];
	    var evtObj = self._getEventObj(ev, point, preViews);
	    if (point.views.length === 0 && (!evtObj.toElement || evtObj.toElement.tagName !== 'CANVAS')) {
	      view.emit('plotleave', evtObj);
	    }
	  };

	  EventController.prototype.onUp = function onUp(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    view.emit('mouseup', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'mouseup', eventObj);
	  };

	  EventController.prototype.onClick = function onClick(ev) {
	    var self = this;
	    var view = self.view;
	    var shape = self._getShape(ev.x, ev.y);
	    var shapeEventObj = self._getShapeEventObj(ev);
	    shapeEventObj.shape = shape;
	    registerData(shapeEventObj);
	    view.emit('click', shapeEventObj);
	    self._triggerShapeEvent(shape, ev.type, shapeEventObj);
	    self.currentShape = shape;

	    var point = self._getPointInfo(ev);
	    var views = point.views;
	    if (!Util.isEmpty(views)) {
	      var eventObj = self._getEventObj(ev, point, views);
	      if (self.currentShape) {
	        var _shape = self.currentShape;
	        eventObj.shape = _shape;
	        registerData(eventObj);
	        // eventObj.data = shape.get('origin');
	      }
	      view.emit('plotclick', eventObj);
	      if (ev.type === 'dblclick') {
	        view.emit('plotdblclick', eventObj);
	        view.emit('dblclick', shapeEventObj);
	      }
	    }
	  };

	  EventController.prototype.onTouchstart = function onTouchstart(ev) {
	    var view = this.view;
	    var shape = this._getShape(ev.x, ev.y);
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('touchstart', eventObj);
	    this._triggerShapeEvent(shape, 'touchstart', eventObj);
	    this.currentShape = shape;
	  };

	  EventController.prototype.onTouchmove = function onTouchmove(ev) {
	    var view = this.view;
	    var shape = this._getShape(ev.x, ev.y);
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = shape;
	    registerData(eventObj);
	    view.emit('touchmove', eventObj);
	    this._triggerShapeEvent(shape, 'touchmove', eventObj);
	    this.currentShape = shape;
	  };

	  EventController.prototype.onTouchend = function onTouchend(ev) {
	    var view = this.view;
	    var eventObj = this._getShapeEventObj(ev);
	    eventObj.shape = this.currentShape;
	    registerData(eventObj);
	    view.emit('touchend', eventObj);
	    this._triggerShapeEvent(this.currentShape, 'touchend', eventObj);
	  };

	  EventController.prototype.clearEvents = function clearEvents() {
	    var canvas = this.canvas;
	    canvas.off('mousemove', Util.getWrapBehavior(this, 'onMove'));
	    canvas.off('mouseleave', Util.getWrapBehavior(this, 'onOut'));
	    canvas.off('mousedown', Util.getWrapBehavior(this, 'onDown'));
	    canvas.off('mouseup', Util.getWrapBehavior(this, 'onUp'));
	    canvas.off('click', Util.getWrapBehavior(this, 'onClick'));
	    canvas.off('dblclick', Util.getWrapBehavior(this, 'onClick'));
	    canvas.off('touchstart', Util.getWrapBehavior(this, 'onTouchstart'));
	    canvas.off('touchmove', Util.getWrapBehavior(this, 'onTouchmove'));
	    canvas.off('touchend', Util.getWrapBehavior(this, 'onTouchend'));
	  };

	  return EventController;
	}();

	module.exports = EventController;

	/***/ }),
	/* 329 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview The entry of chart's animation
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);
	var Animate = __webpack_require__(64);

	var _require = __webpack_require__(1),
	    MatrixUtil = _require.MatrixUtil;

	var mat3 = MatrixUtil.mat3;

	// 获取图组内所有的shapes

	function getShapes(container, viewId) {
	  var shapes = [];
	  if (container.get('animate') === false) {
	    return [];
	  }
	  var children = container.get('children');
	  Util.each(children, function (child) {
	    if (child.isGroup) {
	      shapes = shapes.concat(getShapes(child, viewId));
	    } else if (child.isShape && child._id) {
	      var id = child._id;
	      id = id.split('-')[0];
	      if (id === viewId) {
	        shapes.push(child);
	      }
	    }
	  });

	  return shapes;
	}

	function cache(shapes) {
	  var rst = {};
	  Util.each(shapes, function (shape) {
	    if (!shape._id || shape.isClip) return;
	    var id = shape._id;
	    rst[id] = {
	      _id: id,
	      type: shape.get('type'),
	      attrs: Util.cloneDeep(shape.__attrs), // 原始属性
	      name: shape.name,
	      index: shape.get('index'),
	      animateCfg: shape.get('animateCfg'),
	      coord: shape.get('coord')
	    };
	  });
	  return rst;
	}

	function getAnimate(geomType, coord, animationType, animationName) {
	  var result = void 0;
	  if (animationName) {
	    result = Animate.Action[animationType][animationName];
	  } else {
	    result = Animate.getAnimation(geomType, coord, animationType);
	  }
	  return result;
	}

	function getAnimateCfg(geomType, animationType, animateCfg) {
	  var defaultCfg = Animate.getAnimateCfg(geomType, animationType);
	  if (animateCfg && animateCfg[animationType]) {
	    return Util.deepMix({}, defaultCfg, animateCfg[animationType]);
	  }
	  return defaultCfg;
	}

	function addAnimate(cache, shapes, canvas, isUpdate) {
	  var animate = void 0;
	  var animateCfg = void 0;
	  var canvasDrawn = false;

	  if (isUpdate) {
	    // Step: leave -> update -> enter
	    var updateShapes = []; // 存储的是 shapes
	    var newShapes = []; // 存储的是 shapes
	    Util.each(shapes, function (shape) {
	      var result = cache[shape._id];
	      if (!result) {
	        newShapes.push(shape);
	      } else {
	        shape.setSilent('cacheShape', result);
	        updateShapes.push(shape);
	        delete cache[shape._id];
	      }
	    });

	    Util.each(cache, function (deletedShape) {
	      var name = deletedShape.name,
	          coord = deletedShape.coord,
	          _id = deletedShape._id,
	          attrs = deletedShape.attrs,
	          index = deletedShape.index,
	          type = deletedShape.type;

	      animateCfg = getAnimateCfg(name, 'leave', deletedShape.animateCfg);
	      animate = getAnimate(name, coord, 'leave', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        var tempShape = canvas.addShape(type, {
	          attrs: attrs,
	          index: index
	        });
	        tempShape._id = _id;
	        tempShape.name = name;
	        if (coord && name !== 'label') {
	          var tempShapeMatrix = tempShape.getMatrix();
	          var finalMatrix = mat3.multiply([], tempShapeMatrix, coord.matrix);
	          tempShape.setMatrix(finalMatrix);
	        }
	        canvasDrawn = true;
	        animate(tempShape, animateCfg, coord);
	      }
	    });

	    Util.each(updateShapes, function (updateShape) {
	      var name = updateShape.name;
	      var coord = updateShape.get('coord');
	      var cacheAttrs = updateShape.get('cacheShape').attrs;
	      // 判断如果属性相同的话就不进行变换
	      if (!Util.isEqual(cacheAttrs, updateShape.__attrs)) {
	        animateCfg = getAnimateCfg(name, 'update', updateShape.get('animateCfg'));
	        animate = getAnimate(name, coord, 'update', animateCfg.animation);
	        if (Util.isFunction(animate)) {
	          animate(updateShape, animateCfg, coord);
	        } else {
	          var endState = Util.cloneDeep(updateShape.__attrs);
	          // updateShape.__attrs = cacheAttrs;
	          updateShape.attr(cacheAttrs);
	          updateShape.animate(endState, animateCfg.duration, animateCfg.easing, function () {
	            updateShape.setSilent('cacheShape', null);
	          });
	        }
	        canvasDrawn = true;
	      }
	    });

	    Util.each(newShapes, function (newShape) {
	      var name = newShape.name;
	      var coord = newShape.get('coord');

	      animateCfg = getAnimateCfg(name, 'enter', newShape.get('animateCfg'));
	      animate = getAnimate(name, coord, 'enter', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(newShape, animateCfg, coord);
	        canvasDrawn = true;
	      }
	    });
	  } else {
	    Util.each(shapes, function (shape) {
	      var name = shape.name;
	      var coord = shape.get('coord');
	      animateCfg = getAnimateCfg(name, 'appear', shape.get('animateCfg'));
	      animate = getAnimate(name, coord, 'appear', animateCfg.animation);
	      if (Util.isFunction(animate)) {
	        animate(shape, animateCfg, coord);
	        canvasDrawn = true;
	      }
	    });
	  }
	  return canvasDrawn;
	}

	module.exports = {
	  execAnimation: function execAnimation(view, isUpdate) {
	    var viewContainer = view.get('middlePlot');
	    var axisContainer = view.get('backPlot');
	    var viewId = view.get('_id');
	    var canvas = view.get('canvas');
	    var caches = canvas.get(viewId + 'caches') || [];
	    if (caches.length === 0) {
	      isUpdate = false;
	    }
	    var shapes = getShapes(viewContainer, viewId);
	    var axisShapes = getShapes(axisContainer, viewId);
	    var cacheShapes = shapes.concat(axisShapes);
	    canvas.setSilent(viewId + 'caches', cache(cacheShapes));
	    var drawn = void 0;
	    if (isUpdate) {
	      drawn = addAnimate(caches, cacheShapes, canvas, isUpdate);
	    } else {
	      drawn = addAnimate(caches, shapes, canvas, isUpdate);
	    }
	    if (!drawn) {
	      canvas.draw();
	    }
	  }
	};

	/***/ }),
	/* 330 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview The class of canvas plot
	 * @author sima.zhang
	 */
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    Group = _require.Group;

	var AUTO_STR = 'auto';

	var PlotBack = function (_Group) {
	  _inherits(PlotBack, _Group);

	  function PlotBack() {
	    _classCallCheck(this, PlotBack);

	    return _possibleConstructorReturn(this, _Group.apply(this, arguments));
	  }

	  PlotBack.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      /**
	       * 类型
	       * @type {String}
	       */
	      type: 'plotBack',
	      /**
	       * 画布边距
	       * @type {Number | Array | Object | "auto"}
	       */
	      padding: null,
	      /**
	       * 大背景
	       * @type {Object}
	       */
	      background: null,
	      /**
	       * 绘图区域范围
	       * @type {Object}
	       */
	      plotRange: null,
	      /**
	       * 绘图区域背景
	       * @type {Object}
	       */
	      plotBackground: null
	    };
	  };

	  PlotBack.prototype._beforeRenderUI = function _beforeRenderUI() {
	    this._calculateRange();
	  };

	  PlotBack.prototype._renderUI = function _renderUI() {
	    this._renderBackground();
	    this._renderPlotBackground();
	  };

	  PlotBack.prototype._renderBackground = function _renderBackground() {
	    var self = this;
	    var background = self.get('background');
	    if (background) {
	      var canvas = this.get('canvas');
	      var width = self.get('width') || canvas.get('width');
	      var height = self.get('height') || canvas.get('height');
	      var cfg = {
	        x: 0,
	        y: 0,
	        width: width,
	        height: height
	      };

	      var rect = self.get('backgroundShape');
	      if (!rect) {
	        rect = this.addShape('rect', {
	          attrs: Util.mix(cfg, background)
	        });
	        this.set('backgroundShape', rect);
	      } else {
	        rect.attr(cfg);
	      }
	    } else {
	      return;
	    }
	  };

	  PlotBack.prototype._renderPlotBackground = function _renderPlotBackground() {
	    var self = this;
	    var plotBackground = self.get('plotBackground');
	    if (plotBackground) {
	      var plotRange = self.get('plotRange');
	      var width = plotRange.br.x - plotRange.bl.x;
	      var height = plotRange.br.y - plotRange.tr.y;
	      var tl = plotRange.tl;
	      var cfg = {
	        x: tl.x,
	        y: tl.y,
	        width: width,
	        height: height
	      };
	      var plotBackShape = self.get('plotBackShape');
	      if (!plotBackShape) {
	        if (plotBackground.image) {
	          cfg.img = plotBackground.image;
	          plotBackShape = self.addShape('image', {
	            attrs: cfg
	          });
	        } else {
	          // 矩形
	          Util.mix(cfg, plotBackground);
	          plotBackShape = self.addShape('rect', {
	            attrs: cfg
	          });
	        }
	        self.set('plotBackShape', plotBackShape);
	      } else {
	        plotBackShape.attr(cfg);
	      }
	    } else {
	      return;
	    }
	  };

	  PlotBack.prototype._convert = function _convert(val, isHorizontal) {
	    if (Util.isString(val)) {
	      if (val === AUTO_STR) {
	        val = 0;
	      } else if (val.indexOf('%') !== -1) {
	        var canvas = this.get('canvas');
	        var width = this.get('width') || canvas.get('width');
	        var height = this.get('height') || canvas.get('height');
	        val = parseInt(val, 10) / 100;
	        val = isHorizontal ? val * width : val * height;
	      }
	    }

	    return val;
	  };

	  PlotBack.prototype._calculateRange = function _calculateRange() {
	    var self = this;
	    var plotRange = self.get('plotRange');
	    if (Util.isNil(plotRange)) {
	      plotRange = {};
	    }

	    var padding = self.get('padding');
	    var canvas = this.get('canvas');
	    var width = self.get('width') || canvas.get('width');
	    var height = self.get('height') || canvas.get('height');

	    var allPadding = Util.toAllPadding(padding);

	    var top = self._convert(allPadding[0], false);
	    var right = self._convert(allPadding[1], true);
	    var bottom = self._convert(allPadding[2], false);
	    var left = self._convert(allPadding[3], true);

	    var minX = Math.min(left, width - right);
	    var maxX = Math.max(left, width - right);
	    var minY = Math.min(height - bottom, top);
	    var maxY = Math.max(height - bottom, top);

	    plotRange.tl = {
	      x: minX,
	      y: minY
	    }; // top-left

	    plotRange.tr = {
	      x: maxX,
	      y: minY
	    }; // top-right

	    plotRange.bl = {
	      x: minX,
	      y: maxY
	    }; // bottom-left

	    plotRange.br = {
	      x: maxX,
	      y: maxY
	    }; // bottom-right

	    plotRange.cc = {
	      x: (maxX + minX) / 2,
	      y: (maxY + minY) / 2
	    };

	    this.set('plotRange', plotRange);
	  };

	  PlotBack.prototype.repaint = function repaint() {
	    this._calculateRange();
	    this._renderBackground();
	    this._renderPlotBackground();
	    return this;
	  };

	  return PlotBack;
	}(Group);

	module.exports = PlotBack;

	/***/ }),
	/* 331 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview track g2
	 * @author dxq613@gmail.com
	 */
	var Global = __webpack_require__(2);
	var SERVER_URL = 'https://kcart.alipay.com/web/bi.do';

	// 延迟发送请求
	setTimeout(function () {
	  if (Global.trackable) {
	    var image = new Image();
	    var newObj = {
	      pg: document.URL,
	      r: new Date().getTime(),
	      g2: true,
	      version: Global.version,
	      page_type: 'syslog'
	    };
	    var d = encodeURIComponent(JSON.stringify([newObj]));
	    image.src = SERVER_URL + '?BIProfile=merge&d=' + d;
	  }
	}, 3000);

	/***/ }),
	/* 332 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["c"] = hue;
	/* harmony export (immutable) */ __webpack_exports__["b"] = gamma;
	/* harmony export (immutable) */ __webpack_exports__["a"] = nogamma;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__constant__ = __webpack_require__(372);


	function linear(a, d) {
	  return function (t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function (t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function (a, b) {
	    return b - a ? exponential(a, b, y) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : Object(__WEBPACK_IMPORTED_MODULE_0__constant__["a" /* default */])(isNaN(a) ? b : a);
	}

	/***/ }),
	/* 333 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 分割数据用于处理存在 null 值的折线图、区域图
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Global = __webpack_require__(2);

	module.exports = {
	  splitData: function splitData(data) {
	    if (!data.length) return [];
	    var arr = [];
	    var tmp = [];
	    var yScale = this.getYScale();
	    var yDim = yScale.field;
	    var yValue = void 0;
	    Util.each(data, function (obj) {
	      yValue = obj._origin ? obj._origin[yDim] : obj[yDim];
	      if (Global.connectNulls) {
	        // 如果忽视 Null 直接连接节点，则将 value = null 的数据过滤掉
	        if (!Util.isNil(yValue)) {
	          tmp.push(obj);
	        }
	      } else {
	        if (Util.isArray(yValue) && Util.isNil(yValue[0]) || Util.isNil(yValue)) {
	          if (tmp.length) {
	            arr.push(tmp);
	            tmp = [];
	          }
	        } else {
	          tmp.push(obj);
	        }
	      }
	    });
	    if (tmp.length) {
	      arr.push(tmp);
	    }
	    return arr;
	  }
	};

	/***/ }),
	/* 334 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 需要计算所占x轴上的宽度的辅助类
	 * @author sima.zhang1990@gmail.com
	 * @author dxq613@gmail.com
	 */

	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	// 已经排序后的数据查找距离最小的
	function findMinDistance(arr, scale) {
	  var count = arr.length;
	  // 日期类型的 values 经常上文本类型，所以需要转换一下
	  if (Util.isString(arr[0])) {
	    arr = arr.map(function (v) {
	      return scale.translate(v);
	    });
	  }
	  var distance = arr[1] - arr[0];
	  for (var i = 2; i < count; i++) {
	    var tmp = arr[i] - arr[i - 1];
	    if (distance > tmp) {
	      distance = tmp;
	    }
	  }
	  return distance;
	}

	var SizeMixin = {
	  getDefalutSize: function getDefalutSize() {
	    var defaultSize = this.get('defaultSize');
	    if (!defaultSize) {
	      var coord = this.get('coord');
	      var xScale = this.getXScale();
	      var xValues = xScale.values;
	      var dataArray = this.get('dataArray');
	      var count = void 0;
	      if (xScale.isLinear && xValues.length > 1) {
	        xValues.sort();
	        var interval = findMinDistance(xValues, xScale);
	        count = (xScale.max - xScale.min) / interval;
	        if (xValues.length > count) {
	          count = xValues.length;
	        }
	      } else {
	        count = xValues.length;
	      }
	      var range = xScale.range;
	      var normalizeSize = 1 / count;
	      var widthRatio = 1;

	      if (this.isInCircle()) {
	        if (coord.isTransposed && count > 1) {
	          // 极坐标下多层环图
	          widthRatio = Global.widthRatio.multiplePie;
	        } else {
	          widthRatio = Global.widthRatio.rose;
	        }
	        /* if (dataArray.length > 1) {
	          normalizeSize *= (range[1] - range[0]);
	        } */
	      } else {
	        if (xScale.isLinear) {
	          normalizeSize *= range[1] - range[0];
	        }
	        widthRatio = Global.widthRatio.column; // 柱状图要除以2
	      }
	      normalizeSize *= widthRatio;
	      if (this.hasAdjust('dodge')) {
	        var dodgeCount = this._getDodgeCount(dataArray);
	        normalizeSize = normalizeSize / dodgeCount;
	      }
	      defaultSize = normalizeSize;
	      this.set('defaultSize', defaultSize);
	    }
	    return defaultSize;
	  },
	  _getDodgeCount: function _getDodgeCount(dataArray) {
	    var adjusts = this.get('adjusts');
	    var dodgeBy = void 0;
	    var count = dataArray.length;
	    Util.each(adjusts, function (adjust) {
	      if (adjust.type === 'dodge') {
	        dodgeBy = adjust.dodgeBy;
	      }
	    });

	    if (dodgeBy) {
	      var mergeData = Util.Array.merge(dataArray);
	      var values = Util.Array.values(mergeData, dodgeBy);
	      count = values.length;
	    }

	    return count;
	  },
	  getDimWidth: function getDimWidth(dimName) {
	    var coord = this.get('coord');
	    var start = coord.convertPoint({
	      x: 0,
	      y: 0
	    });
	    var end = coord.convertPoint({
	      x: dimName === 'x' ? 1 : 0,
	      y: dimName === 'x' ? 0 : 1
	    });
	    var width = 0;
	    if (start && end) {
	      width = Math.sqrt(Math.pow(end.x - start.x, 2) + Math.pow(end.y - start.y, 2));
	    }
	    return width;
	  },
	  _getWidth: function _getWidth() {
	    var coord = this.get('coord');
	    var width = void 0; // x轴的长度
	    if (this.isInCircle() && !coord.isTransposed) {
	      // 极坐标下 width 为弧长
	      width = (coord.endAngle - coord.startAngle) * coord.radius;
	    } else {
	      width = this.getDimWidth('x'); // 不需要判断transpose
	    }
	    return width;
	  },
	  _toNormalizedSize: function _toNormalizedSize(size) {
	    var width = this._getWidth();
	    return size / width;
	  },
	  _toCoordSize: function _toCoordSize(normalizeSize) {
	    var width = this._getWidth();
	    return width * normalizeSize;
	  },
	  getNormalizedSize: function getNormalizedSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      size = this.getDefalutSize();
	    } else {
	      size = this._toNormalizedSize(size);
	    }
	    return size;
	  },
	  getSize: function getSize(obj) {
	    var size = this.getAttrValue('size', obj);
	    if (Util.isNil(size)) {
	      var normalizeSize = this.getDefalutSize();
	      size = this._toCoordSize(normalizeSize);
	    }
	    return size;
	  }
	};

	module.exports = SizeMixin;

	/***/ }),
	/* 335 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 路径图，无序的线图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var SplitMixin = __webpack_require__(333);
	var Util = __webpack_require__(0);

	var Path = function (_GeomBase) {
	  _inherits(Path, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Path.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'path';
	    cfg.shapeType = 'line';
	    return cfg;
	  };

	  function Path(cfg) {
	    _classCallCheck(this, Path);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SplitMixin);
	    return _this;
	  }

	  Path.prototype.getDrawCfg = function getDrawCfg(obj) {
	    var cfg = _GeomBase.prototype.getDrawCfg.call(this, obj);
	    cfg.isStack = this.hasStack();
	    return cfg;
	  };

	  Path.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    var splitArray = this.splitData(data);

	    var cfg = this.getDrawCfg(data[0]);
	    cfg.origin = data; // path,line 等图的origin 是整个序列
	    Util.each(splitArray, function (subData, splitedIndex) {
	      if (!Util.isEmpty(subData)) {
	        cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	        cfg.points = subData;
	        var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
	        self.appendShapeInfo(geomShape, index + splitedIndex);
	      }
	    });
	  };

	  return Path;
	}(GeomBase);

	GeomBase.Path = Path;

	module.exports = Path;

	/***/ }),
	/* 336 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(348);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__namespaces__ = __webpack_require__(349);



	function creatorInherit(name) {
	  return function () {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] && document.documentElement.namespaceURI === __WEBPACK_IMPORTED_MODULE_1__namespaces__["b" /* xhtml */] ? document.createElement(name) : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function () {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);
	  return (fullname.local ? creatorFixed : creatorInherit)(fullname);
	});

	/***/ }),
	/* 337 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	});

	/***/ }),
	/* 338 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  return a = +a, b -= a, function (t) {
	    return a + b * t;
	  };
	});

	/***/ }),
	/* 339 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = tweenValue;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = { name: name, value: value }, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	});

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function () {
	    var schedule = Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function (node) {
	    return Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(node, id).value[name];
	  };
	}

	/***/ }),
	/* 340 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	/**
	 * @fileOverview facets of chart
	 * @author dxq613@gmail.com
	 */

	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	var assign = Util.assign;
	var isNil = Util.isNil;
	var isArray = Util.isArray;
	var cloneDeep = Util.cloneDeep;

	// 绑定事件
	var wrapBehavior = Util.wrapBehavior;

	// 获取绑定的事件
	var getWrapBehavior = Util.getWrapBehavior;

	var Base = function () {
	  Base.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      chart: null,
	      group: null,

	      /**
	       * 是否默认显示每个分面的title
	       * @type {Boolean}
	       */
	      showTitle: true,

	      /**
	       * 是否自动修改坐标轴的信息
	       * @type {Boolean}
	       */
	      autoSetAxis: true,

	      /**
	       * View 的内边框
	       * @type {Number|Array}
	       */
	      padding: 10,

	      /**
	       * 遍历每个view 的回调函数
	       * @type {Function}
	       */
	      eachView: null,

	      /**
	       * 分面的字段名列表
	       * @type {Array}
	       */
	      fields: [],

	      /**
	       * 列值的的标题
	       * @type {Object}
	       */
	      colTitle: {
	        offsetY: -15,
	        style: {
	          fontSize: 14,
	          textAlign: 'center',
	          fill: '#666',
	          fontFamily: Global.fontFamily
	        }
	      },
	      rowTitle: {
	        offsetX: 15,
	        style: {
	          fontSize: 14,
	          textAlign: 'center',
	          rotate: 90,
	          fill: '#666',
	          fontFamily: Global.fontFamily
	        }
	      }
	    };
	  };

	  function Base(cfg) {
	    _classCallCheck(this, Base);

	    var defaultCfg = this.getDefaultCfg();
	    assign(this, defaultCfg, cfg);
	    this.init();
	  }

	  Base.prototype.init = function init() {
	    if (!this.chart) {
	      throw new Error('Facets Error: please specify the chart!');
	    }
	    this._bindEvent();
	    this.initContainer();
	    if (this.chart.get('data')) {
	      this.initViews();
	    }
	  };

	  Base.prototype.initContainer = function initContainer() {
	    var chart = this.chart;
	    var frontPlot = chart.get('frontPlot');
	    var group = frontPlot.addGroup();
	    this.group = group;
	  };

	  Base.prototype.initViews = function initViews() {
	    var chart = this.chart;
	    var data = chart.get('data');
	    var eachView = this.eachView;
	    var facets = this.generateFacets(data);
	    for (var i = 0; i < facets.length; i++) {
	      var facet = facets[i];
	      var region = facet.region;
	      var view = chart.view({
	        start: region.start,
	        end: region.end,
	        padding: this.padding
	      });
	      view.source(facet.data);
	      this.beforeProcessView(view, facet);
	      if (eachView) {
	        eachView(view, facet);
	      }
	      this.afterProcessView(view, facet);
	      facet.view = view;
	    }
	    this.facets = facets;
	  };

	  /**
	   * 处理 view 前
	   * @protected
	   */


	  Base.prototype.beforeProcessView = function beforeProcessView() /* view, facet */{};

	  /**
	   * 处理view
	   * @param {Object} view 视图
	   * @param {Object} facet 分面信息
	   * @protected
	   */


	  Base.prototype.afterProcessView = function afterProcessView(view, facet) {
	    if (this.autoSetAxis) {
	      this.processAxis(view, facet);
	    }
	  };

	  Base.prototype.processAxis = function processAxis(view, facet) {
	    var viewOptions = view.get('options');
	    var geoms = view.get('geoms');
	    if ((!viewOptions.coord.type || viewOptions.coord.type === 'rect') && geoms.length) {
	      var field = geoms[0].get('attrOptions').position.field;
	      var fields = isArray(field) ? field : field.split('*').map(function (str) {
	        return str.trim();
	      });
	      var xField = fields[0];
	      var yField = fields[1];
	      if (isNil(viewOptions.axes)) {
	        viewOptions.axes = {};
	      }
	      var axes = viewOptions.axes;
	      if (axes !== false) {
	        if (xField && axes[xField] !== false) {
	          axes[xField] = axes[xField] || {};
	          this.setXAxis(xField, axes, facet);
	        }
	        if (yField && axes[yField] !== false) {
	          axes[yField] = axes[yField] || {};
	          this.setYAxis(yField, axes, facet);
	        }
	      }
	    }
	  };

	  Base.prototype.setXAxis = function setXAxis() /* xField, axes, facet */{};

	  Base.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

	  // 默认显示各列的标题


	  Base.prototype.renderTitle = function renderTitle(view, facet) {
	    this.drawColTitle(view, facet);
	  };

	  Base.prototype.getScaleText = function getScaleText(field, value, view) {
	    var rst = void 0;
	    if (field) {
	      var scales = view.get('scales');
	      var scale = scales[field];
	      if (!scale) {
	        scale = view.createScale(field);
	      }
	      rst = scale.getText(value);
	    } else {
	      rst = value;
	    }
	    return rst;
	  };

	  Base.prototype.drawColTitle = function drawColTitle(view, facet) {
	    var text = this.getScaleText(facet.colField, facet.colValue, view);
	    var colTextCfg = assign({
	      position: ['50%', '0%'],
	      content: text
	    }, this.colTitle);
	    view.guide().text(colTextCfg);
	  };

	  Base.prototype.drawRowTitle = function drawRowTitle(view, facet) {
	    var text = this.getScaleText(facet.rowField, facet.rowValue, view);
	    var rowTextCfg = assign({
	      position: ['100%', '50%'],
	      content: text
	    }, cloneDeep(this.rowTitle));

	    view.guide().text(rowTextCfg);
	  };

	  /**
	   * 数据过滤器
	   * @protected
	   * @param {Array} conditions 过滤条件
	   * @return {Function} 过滤函数
	   */


	  Base.prototype.getFilter = function getFilter(conditions) {
	    var filter = function filter(obj) {
	      var filtered = true;
	      conditions.forEach(function (cond) {
	        var field = cond.field;
	        var value = cond.value;
	        // const values = cond.values;
	        var tmp = true;
	        if (!isNil(value) && field) {
	          tmp = obj[field] === value;
	        }
	        filtered = filtered && tmp;
	      });
	      return filtered;
	    };
	    return filter;
	  };

	  /**
	   * 获取字段对应的值
	   * @protected
	   * @param  {String} field 字段名
	   * @param  {Array} data 数据
	   * @return {Array} 字段对应的值
	   */


	  Base.prototype.getFieldValues = function getFieldValues(field, data) {
	    var rst = [];
	    var tmpMap = {};
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var value = obj[field];
	      if (!isNil(value) && !tmpMap[value]) {
	        rst.push(value);
	        tmpMap[value] = true;
	      }
	    }
	    return rst;
	  };

	  Base.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
	    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
	    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

	    var start = {
	      x: xWidth * xIndex,
	      y: yWidth * yIndex
	    };

	    var end = {
	      x: start.x + xWidth,
	      y: start.y + yWidth
	    };

	    return {
	      start: start,
	      end: end
	    };
	  };

	  /**
	   * 生成分面
	   * @protected
	   * @return {Array} 多个分面集合
	   */


	  Base.prototype.generateFacets = function generateFacets() /* data */{
	    return [];
	  };

	  Base.prototype._bindEvent = function _bindEvent() {
	    var chart = this.chart;
	    chart.on('afterchangedata', wrapBehavior(this, 'onDataChange'));
	    chart.on('beforeclear', wrapBehavior(this, 'onClear'));
	    chart.on('beforedestroy', wrapBehavior(this, 'destroy'));
	    chart.on('beforepaint', wrapBehavior(this, 'onPaint'));
	    chart.on('setdata', wrapBehavior(this, 'onDataChange'));
	  };

	  Base.prototype._clearEvent = function _clearEvent() {
	    var chart = this.chart;
	    if (chart) {
	      chart.off('afterchangedata', getWrapBehavior(this, 'onDataChange'));
	      chart.off('beforeclear', getWrapBehavior(this, 'onClear'));
	      chart.off('beforedestroy', getWrapBehavior(this, 'destroy'));
	      chart.off('beforepaint', getWrapBehavior(this, 'onPaint'));
	      chart.off('setdata', getWrapBehavior(this, 'onDataChange'));
	    }
	  };

	  Base.prototype._clearFacets = function _clearFacets() {
	    var facets = this.facets;
	    var chart = this.chart;
	    if (facets) {
	      for (var i = 0; i < facets.length; i++) {
	        var facet = facets[i];
	        chart.removeView(facet.view);
	      }
	    }
	    this.facets = null;
	  };

	  Base.prototype.onClear = function onClear() {
	    this.onRemove();
	  };

	  Base.prototype.onPaint = function onPaint() {
	    if (this.showTitle) {
	      var facets = this.facets;
	      for (var i = 0; i < facets.length; i++) {
	        var facet = facets[i];
	        var view = facet.view;
	        this.renderTitle(view, facet);
	      }
	    }
	  };

	  Base.prototype.onDataChange = function onDataChange() {
	    this._clearFacets();
	    this.initViews();
	  };

	  Base.prototype.onRemove = function onRemove() {
	    this._clearFacets();
	    this._clearEvent();
	    this.group && this.group.remove();
	    this.chart = null;
	    this.facets = null;
	    this.group = null;
	  };

	  Base.prototype.destroy = function destroy() {
	    this.onRemove();
	    this.destroyed = true;
	  };

	  return Base;
	}();

	module.exports = Base;

	/***/ }),
	/* 341 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	// const Global = require('../global');
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(1),
	    DomUtil = _require.DomUtil;

	var View = __webpack_require__(116);
	var G2 = __webpack_require__(62);

	var assign = Util.assign;

	var Interaction = function () {
	  Interaction.prototype.getDefaultCfg = function getDefaultCfg() {
	    return {
	      startEvent: 'mousedown',
	      processingEvent: 'mousemove',
	      endEvent: 'mouseup',
	      resetEvent: 'dblclick'
	    };
	  };

	  Interaction.prototype._start = function _start(ev) {
	    var me = this;
	    me.preStart && me.preStart(ev);
	    me.start(ev);
	    me.onStart && me.onStart(ev);
	  };

	  Interaction.prototype._process = function _process(ev) {
	    var me = this;
	    me.preProcess && me.preProcess(ev);
	    me.process(ev);
	    me.onProcess && me.onProcess(ev);
	  };

	  Interaction.prototype._end = function _end(ev) {
	    var me = this;
	    me.preEnd && me.preEnd(ev);
	    me.end(ev);
	    me.onEnd && me.onEnd(ev);
	  };

	  Interaction.prototype._reset = function _reset(ev) {
	    var me = this;
	    me.preReset && me.preReset(ev);
	    me.reset(ev);
	    me.onReset && me.onReset(ev);
	  };

	  Interaction.prototype.start = function start() {
	    // TODO override
	  };

	  Interaction.prototype.process = function process() {
	    // TODO override
	  };

	  Interaction.prototype.end = function end() {
	    // TODO override
	  };

	  Interaction.prototype.reset = function reset() {
	    // TODO override
	  };

	  function Interaction(cfg, view) {
	    _classCallCheck(this, Interaction);

	    var me = this;
	    var defaultCfg = me.getDefaultCfg();
	    assign(me, defaultCfg, cfg);
	    me.view = view;
	    me.canvas = view.get('canvas');
	    me._bindEvents();
	  }

	  Interaction.prototype._bindEvents = function _bindEvents() {
	    var me = this;
	    var canvas = me.canvas;
	    var canvasDOM = canvas.get('canvasDOM');
	    me._clearEvents();
	    me._onStartListener = DomUtil.addEventListener(canvasDOM, me.startEvent, Util.wrapBehavior(me, '_start'));
	    me._onProcessingListener = DomUtil.addEventListener(canvasDOM, me.processingEvent, Util.wrapBehavior(me, '_process'));
	    me._onEndListener = DomUtil.addEventListener(canvasDOM, me.endEvent, Util.wrapBehavior(me, '_end'));
	    me._onResetListener = DomUtil.addEventListener(canvasDOM, me.resetEvent, Util.wrapBehavior(me, '_reset'));
	  };

	  Interaction.prototype._clearEvents = function _clearEvents() {
	    var me = this;
	    me._onStartListener && me._onStartListener.remove();
	    me._onProcessingListener && me._onProcessingListener.remove();
	    me._onEndListener && me._onEndListener.remove();
	    me._onResetListener && me._onResetListener.remove();
	  };

	  Interaction.prototype.destroy = function destroy() {
	    this._clearEvents();
	  };

	  return Interaction;
	}();

	G2._Interactions = {};
	G2.registerInteraction = function (type, constructor) {
	  G2._Interactions[type] = constructor;
	};
	G2.getInteraction = function (type) {
	  return G2._Interactions[type];
	};

	View.prototype.getInteractions = function () {
	  var me = this;
	  if (!me._interactions) {
	    me._interactions = {};
	  }
	  return me._interactions;
	};

	View.prototype.setInteraction = function (type, interact) {
	  var me = this;
	  var interactions = me.getInteractions();
	  interactions[type] = interactions[type] || [];
	  interactions[type].push(interact);
	};

	View.prototype.clearInteraction = function (type) {
	  var me = this;
	  var interactions = me.getInteractions();
	  if (type) {
	    (interactions[type] || []).forEach(function (interact) {
	      interact.destroy();
	    });
	    delete interactions[type];
	  } else {
	    Util.each(interactions, function (collection, key) {
	      (collection || []).forEach(function (interact) {
	        interact.destroy();
	      });
	      delete interactions[key];
	    });
	  }
	};
	View.prototype.interact = function (type, cfg) {
	  var me = this;
	  var Ctor = G2.getInteraction(type);
	  var interact = new Ctor(cfg, me);
	  me.setInteraction(type, interact);
	  return me;
	};

	module.exports = Interaction;

	/***/ }),
	/* 342 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview interval geometry
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(334);
	__webpack_require__(343);

	var Interval = function (_GeomBase) {
	  _inherits(Interval, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Interval.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'interval';
	    cfg.shapeType = 'interval';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Interval(cfg) {
	    _classCallCheck(this, Interval);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SizeMixin);
	    return _this;
	  }

	  Interval.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  Interval.prototype.clearInner = function clearInner() {
	    _GeomBase.prototype.clearInner.call(this);
	    this.set('defaultSize', null);
	  };

	  return Interval;
	}(GeomBase);

	var IntervalStack = function (_Interval) {
	  _inherits(IntervalStack, _Interval);

	  function IntervalStack() {
	    _classCallCheck(this, IntervalStack);

	    return _possibleConstructorReturn(this, _Interval.apply(this, arguments));
	  }

	  IntervalStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return IntervalStack;
	}(Interval);

	var IntervalDodge = function (_Interval2) {
	  _inherits(IntervalDodge, _Interval2);

	  function IntervalDodge() {
	    _classCallCheck(this, IntervalDodge);

	    return _possibleConstructorReturn(this, _Interval2.apply(this, arguments));
	  }

	  IntervalDodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval2.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'dodge' }];
	    return cfg;
	  };

	  return IntervalDodge;
	}(Interval);

	var IntervalSymmetric = function (_Interval3) {
	  _inherits(IntervalSymmetric, _Interval3);

	  function IntervalSymmetric() {
	    _classCallCheck(this, IntervalSymmetric);

	    return _possibleConstructorReturn(this, _Interval3.apply(this, arguments));
	  }

	  IntervalSymmetric.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interval3.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'symmetric' }];
	    return cfg;
	  };

	  return IntervalSymmetric;
	}(Interval);

	Interval.Stack = IntervalStack;
	Interval.Dodge = IntervalDodge;
	Interval.Symmetric = IntervalSymmetric;

	GeomBase.Interval = Interval;
	GeomBase.IntervalStack = IntervalStack;
	GeomBase.IntervalDodge = IntervalDodge;
	GeomBase.IntervalSymmetric = IntervalSymmetric;

	module.exports = Interval;

	/***/ }),
	/* 343 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview interval shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var PathUtil = __webpack_require__(22);
	var GPathUtil = __webpack_require__(1).PathUtil;
	var Global = __webpack_require__(2);

	// 获取柱状图的几个点
	function getRectPoints(cfg, isPyramid) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var width = cfg.size;
	  // 有3种情况，
	  // 1. y，x都不是数组
	  // 2. y是数组，x不是
	  // 3. x是数组，y不是
	  var ymin = y0;
	  var ymax = y;
	  if (Util.isArray(y)) {
	    ymax = y[1];
	    ymin = y[0];
	  }

	  var xmin = void 0;
	  var xmax = void 0;
	  if (Util.isArray(x)) {
	    xmin = x[0];
	    xmax = x[1];
	  } else {
	    xmin = x - width / 2;
	    xmax = x + width / 2;
	  }

	  var points = [];
	  points.push({
	    x: xmin,
	    y: ymin
	  }, {
	    x: xmin,
	    y: ymax
	  });

	  if (isPyramid) {
	    points.push({
	      x: xmax,
	      y: (ymax + ymin) / 2
	    });
	  } else {
	    points.push({
	      x: xmax,
	      y: ymax
	    }, {
	      x: xmax,
	      y: ymin
	    });
	  }

	  return points;
	}

	function getRectPath(points) {
	  var path = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    if (point) {
	      var action = i === 0 ? 'M' : 'L';
	      path.push([action, point.x, point.y]);
	    }
	  }
	  var first = points[0];
	  path.push(['L', first.x, first.y]);
	  path.push(['z']);
	  return path;
	}

	function getLinePoints(cfg) {
	  var x = cfg.x;
	  var y = cfg.y;
	  var y0 = cfg.y0; // 0 点的位置
	  var points = [];

	  if (Util.isArray(y)) {
	    Util.each(y, function (yItem, idx) {
	      points.push({
	        x: Util.isArray(x) ? x[idx] : x,
	        y: yItem
	      });
	    });
	  } else {
	    points.push({
	      x: x,
	      y: y
	    }, {
	      x: x,
	      y: y0
	    });
	  }

	  return points;
	}

	function getTickPoints(cfg) {
	  var x = cfg.x;
	  var y = Util.isArray(cfg.y) ? cfg.y[1] : cfg.y;
	  var y0 = Util.isArray(cfg.y) ? cfg.y[0] : cfg.y0;

	  var barWidth = cfg.size;
	  var points = [];

	  points.push({
	    x: x - barWidth / 2,
	    y: y
	  }, {
	    x: x + barWidth / 2,
	    y: y
	  }, {
	    x: x,
	    y: y
	  }, {
	    x: x,
	    y: y0
	  }, {
	    x: x - barWidth / 2,
	    y: y0
	  }, {
	    x: x + barWidth / 2,
	    y: y0
	  });

	  return points;
	}

	function getTickPath(points) {
	  var path = [];
	  path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y]);
	  return path;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.interval;
	  var attrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowInterval;
	  var attrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getFunnelPath(cfg, isFunnel) {
	  var path = [];
	  var points = cfg.points;
	  var nextPoints = cfg.nextPoints;
	  if (!Util.isNil(nextPoints)) {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', nextPoints[1].x, nextPoints[1].y], ['L', nextPoints[0].x, nextPoints[0].y], ['Z']);
	  } else if (isFunnel) {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['Z']);
	  } else {
	    path.push(['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['L', points[2].x, points[2].y], ['L', points[2].x, points[2].y], ['Z']);
	  }

	  return path;
	}

	function getThetaCfg(point, coord) {
	  var r = coord.getRadius();
	  var inner = coord.innerRadius;
	  var startAngle = void 0;
	  var endAngle = void 0;
	  var ir = r * inner;
	  var startPoint = void 0;
	  var endPoint = void 0;

	  if (!Util.isArray(point.x) && Util.isArray(point.y)) {
	    point.x = [point.x, point.x]; // 如果x是一个值，y是数组，将x转成数组
	  }
	  if (Util.isArray(point.x)) {
	    startPoint = {
	      x: point.x[0],
	      y: point.y[0]
	    };
	    endPoint = {
	      x: point.x[1],
	      y: point.y[1]
	    };
	    startAngle = PathUtil.getPointAngle(coord, startPoint);
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	    if (endAngle <= startAngle) {
	      // 考虑占比百分百的情形
	      endAngle = endAngle + Math.PI * 2;
	    }
	  } else {
	    endPoint = point;
	    startAngle = coord.startAngle;
	    endAngle = PathUtil.getPointAngle(coord, endPoint);
	  }
	  return {
	    r: r,
	    ir: ir,
	    startAngle: startAngle,
	    endAngle: endAngle
	  };
	}

	// 获取选中时的样式，当前仅支持饼图
	function _getSelectedCfg(type, cfg) {
	  var geom = cfg.geom;
	  var coord = geom.get('coord');
	  var point = cfg.point;
	  var r = 7.5;
	  var selectedCfg = void 0;
	  if (coord && coord.type === 'theta') {
	    var thetaCfg = getThetaCfg(point, coord);
	    var middleAngle = (thetaCfg.endAngle - thetaCfg.startAngle) / 2 + thetaCfg.startAngle;
	    var x = r * Math.cos(middleAngle);
	    var y = r * Math.sin(middleAngle);
	    selectedCfg = {
	      transform: [['t', x, y]]
	    };
	  }
	  return Util.mix({}, selectedCfg);
	}

	var Interval = Shape.registerFactory('interval', {
	  defaultShapeType: 'rect',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    if (!type || Util.inArray(['rect', 'funnel', 'pyramid'], type)) {
	      // 透明度降低 0.15
	      var fillOpacity = cfg.fillOpacity || cfg.opacity || 1;
	      return {
	        fillOpacity: fillOpacity - 0.15
	      };
	    }
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  },
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return getRectPoints(pointInfo);
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    return _getSelectedCfg(type, cfg);
	  }
	});

	// 默认柱状图
	Shape.registerShape('interval', 'rect', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getFillAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	// 空心柱状图
	Shape.registerShape('interval', 'hollowRect', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getLineAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	// 线形柱状图
	Shape.registerShape('interval', 'line', {
	  getPoints: function getPoints(pointInfo) {
	    return getLinePoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    attrs.lineWidth = cfg.size || 1; // size 就是线的宽度
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'line',
	      radius: 5
	    }, lineCfg);
	  }
	});

	// 钉子形的柱状图
	Shape.registerShape('interval', 'tick', {
	  getPoints: function getPoints(pointInfo) {
	    return getTickPoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getTickPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var lineCfg = getLineAttrs(cfg);
	    return Util.mix({
	      symbol: 'tick',
	      radius: 5
	    }, lineCfg);
	  }
	});

	// 漏斗图
	Shape.registerShape('interval', 'funnel', {
	  getPoints: function getPoints(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, true);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, funnelCfg);
	  }
	});

	// 金字塔图
	Shape.registerShape('interval', 'pyramid', {
	  getPoints: function getPoints(pointInfo) {
	    pointInfo.size = pointInfo.size * 2; // 漏斗图的 size 是柱状图的两倍
	    return getRectPoints(pointInfo, true);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getFunnelPath(cfg, false);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var funnelCfg = getFillAttrs(cfg);
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, funnelCfg);
	  }
	});

	// 水波图
	/**
	 * 用贝塞尔曲线模拟正弦波
	 * Using Bezier curves to fit sine wave.
	 * There is 4 control points for each curve of wave,
	 * which is at 1/4 wave length of the sine wave.
	 *
	 * The control points for a wave from (a) to (d) are a-b-c-d:
	 *          c *----* d
	 *     b *
	 *       |
	 * ... a * ..................
	 *
	 * whose positions are a: (0, 0), b: (0.5, 0.5), c: (1, 1), d: (PI / 2, 1)
	 *
	 * @param {number} x          x position of the left-most point (a)
	 * @param {number} stage      0-3, stating which part of the wave it is
	 * @param {number} waveLength wave length of the sine wave
	 * @param {number} amplitude  wave amplitude
	 * @return {Array} 正弦片段曲线
	 */
	function getWaterWavePositions(x, stage, waveLength, amplitude) {
	  if (stage === 0) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2, amplitude / 2], [x + 1 / 2 * waveLength / Math.PI, amplitude], [x + waveLength / 4, amplitude]];
	  } else if (stage === 1) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2), amplitude], [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1), amplitude / 2], [x + waveLength / 4, 0]];
	  } else if (stage === 2) {
	    return [[x + 1 / 2 * waveLength / Math.PI / 2, -amplitude / 2], [x + 1 / 2 * waveLength / Math.PI, -amplitude], [x + waveLength / 4, -amplitude]];
	  }
	  return [[x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 2), -amplitude], [x + 1 / 2 * waveLength / Math.PI / 2 * (Math.PI - 1), -amplitude / 2], [x + waveLength / 4, 0]];
	}
	/**
	 * 获取水波路径
	 * @param  {number} radius          半径
	 * @param  {number} waterLevel      水位
	 * @param  {number} waveLength      波长
	 * @param  {number} phase           相位
	 * @param  {number} amplitude       震幅
	 * @param  {number} cx              圆心x
	 * @param  {number} cy              圆心y
	 * @return {Array}  path            路径
	 * @reference http://gitlab.alipay-inc.com/datavis/g6/blob/1.2.0/src/graph/utils/path.js#L135
	 */
	function getWaterWavePath(radius, waterLevel, waveLength, phase, amplitude, cx, cy) {
	  var curves = Math.ceil(2 * radius / waveLength * 4) * 2;
	  var path = [];

	  // map phase to [-Math.PI * 2, 0]
	  while (phase < -Math.PI * 2) {
	    phase += Math.PI * 2;
	  }
	  while (phase > 0) {
	    phase -= Math.PI * 2;
	  }
	  phase = phase / Math.PI / 2 * waveLength;

	  var left = cx - radius + phase - radius * 2;
	  /**
	   * top-left corner as start point
	   *
	   * draws this point
	   *  |
	   * \|/
	   *  ~~~~~~~~
	   *  |      |
	   *  +------+
	   */
	  path.push(['M', left, waterLevel]);

	  /**
	   * top wave
	   *
	   * ~~~~~~~~ <- draws this sine wave
	   * |      |
	   * +------+
	   */
	  var waveRight = 0;
	  for (var c = 0; c < curves; ++c) {
	    var stage = c % 4;
	    var pos = getWaterWavePositions(c * waveLength / 4, stage, waveLength, amplitude);
	    path.push(['C', pos[0][0] + left, -pos[0][1] + waterLevel, pos[1][0] + left, -pos[1][1] + waterLevel, pos[2][0] + left, -pos[2][1] + waterLevel]);

	    if (c === curves - 1) {
	      waveRight = pos[2][0];
	    }
	  }

	  /**
	   * top-right corner
	   *
	   *                       ~~~~~~~~
	   * 3. draws this line -> |      | <- 1. draws this line
	   *                       +------+
	   *                          ^
	   *                          |
	   *                  2. draws this line
	   */
	  path.push(['L', waveRight + left, cy + radius]);
	  path.push(['L', left, cy + radius]);
	  path.push(['L', left, waterLevel]);
	  return path;
	}

	/**
	 * 添加水波
	 * @param {number} x           中心x
	 * @param {number} y           中心y
	 * @param {number} level       水位等级 0～1
	 * @param {number} waveCount   水波数
	 * @param {number} colors      色值
	 * @param {number} group       图组
	 * @param {number} clip        用于剪切的图形
	 * @param {number} radius      绘制图形的高度
	 */
	function addWaterWave(x, y, level, waveCount, colors, group, clip, radius) {
	  var bbox = clip.getBBox();
	  var width = bbox.maxX - bbox.minX;
	  var height = bbox.maxY - bbox.minY;
	  var duration = 5000;
	  var delayDiff = 300;
	  for (var i = 0; i < waveCount; i++) {
	    var wave = group.addShape('path', {
	      attrs: {
	        path: getWaterWavePath(radius, bbox.minY + height * level, width / 4, 0, width / 64, x, y),
	        fill: colors[i],
	        clip: clip
	      }
	    });
	    wave.animate({
	      transform: [['t', width / 2, 0]],
	      repeat: true
	    }, duration - i * delayDiff);
	  }
	}

	Shape.registerShape('interval', 'liquid-fill-gauge', {
	  draw: function draw(cfg, container) {
	    var self = this;
	    var cy = 0.5;
	    var sumX = 0;
	    var minX = Infinity;
	    Util.each(cfg.points, function (p) {
	      if (p.x < minX) {
	        minX = p.x;
	      }
	      sumX += p.x;
	    });
	    var cx = sumX / cfg.points.length;
	    var cp = self.parsePoint({ x: cx, y: cy });
	    var minP = self.parsePoint({ x: minX, y: 0.5 });
	    var xWidth = cp.x - minP.x;
	    var radius = Math.min(xWidth, minP.y);
	    var attrs = getFillAttrs(cfg);
	    var clipCircle = container.addShape('circle', {
	      attrs: {
	        x: cp.x,
	        y: cp.y,
	        r: radius
	      }
	    });
	    addWaterWave(cp.x, cp.y, cfg.y / (2 * cp.y), 1, [attrs.fill], container, clipCircle, radius * 4);
	    return container.addShape('circle', {
	      attrs: Util.mix(getLineAttrs(cfg), {
	        x: cp.x,
	        y: cp.y,
	        r: radius + radius / 8
	      })
	    });
	  }
	});

	var pathMetaCache = {};
	Shape.registerShape('interval', 'liquid-fill-path', {
	  draw: function draw(cfg, container) {
	    var self = this;
	    var attrs = Util.mix({}, getFillAttrs(cfg));
	    var path = cfg.shape[1];

	    var cy = 0.5;
	    var sumX = 0;
	    var minX = Infinity;
	    Util.each(cfg.points, function (p) {
	      if (p.x < minX) {
	        minX = p.x;
	      }
	      sumX += p.x;
	    });
	    var cx = sumX / cfg.points.length;
	    var cp = self.parsePoint({ x: cx, y: cy });
	    var minP = self.parsePoint({ x: minX, y: 0.5 });
	    var xWidth = cp.x - minP.x;
	    var radius = Math.min(xWidth, minP.y);

	    var pathMeta = void 0;
	    if (pathMetaCache[path]) {
	      pathMeta = pathMetaCache[path];
	    } else {
	      var segments = GPathUtil.parsePathString(path);
	      pathMetaCache[path] = pathMeta = {
	        segments: segments
	      };
	    }
	    var transform = [];
	    if (attrs.rotate) {
	      transform.push(['r', attrs.rotate / 180 * Math.PI]);
	      delete attrs.rotate;
	    }
	    var shape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        fillOpacity: 0,
	        path: pathMeta.segments
	      })
	    });
	    var bbox = Util.cloneDeep(shape.getBBox());
	    var rangeX = bbox.maxX - bbox.minX;
	    var rangeY = bbox.maxY - bbox.minY;
	    var range = Math.max(rangeX, rangeY);
	    var scale = radius * 2 / range;
	    shape.transform(transform.concat([['s', scale, scale]]));
	    var dw = scale * rangeX / 2; // (bbox.maxX - bbox.minX) / 2;
	    var dh = scale * rangeY / 2; // (bbox.maxY - bbox.minY) / 2;
	    shape.transform([['t', cp.x - dw, cp.y - dh]]);
	    addWaterWave(cp.x, cp.y, cfg.y / (2 * cp.y), 1, [attrs.fill], container, shape, minP.y * 4);

	    var keyShape = container.addShape('path', {
	      attrs: Util.mix(getLineAttrs(cfg), {
	        path: pathMeta.segments
	      })
	    });
	    keyShape.transform(transform.concat([['s', scale, scale], ['t', cp.x - dw, cp.y - dh]]));
	    return keyShape;
	  }
	});

	Shape.registerShape('interval', 'top-line', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var style = cfg.style || {};
	    var linePath = [['M', cfg.points[1].x, cfg.points[1].y], ['L', cfg.points[2].x, cfg.points[2].y]];
	    var lineAttrs = {
	      stroke: style.stroke || 'white',
	      lineWidth: style.lineWidth || 1,
	      path: this.parsePath(linePath)
	    };
	    var path = getRectPath(cfg.points);
	    path = this.parsePath(path);
	    delete attrs.stroke; // 不在柱子上绘制线
	    var rectShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        zIndex: 0,
	        path: path
	      })
	    });
	    container.addShape('path', {
	      zIndex: 1,
	      attrs: lineAttrs
	    });
	    return rectShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var rectCfg = getFillAttrs(cfg);
	    var isInCircle = cfg.isInCircle;
	    return Util.mix({
	      symbol: isInCircle ? 'circle' : 'square',
	      radius: isInCircle ? 4.5 : 4
	    }, rectCfg);
	  }
	});

	module.exports = Interval;

	/***/ }),
	/* 344 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 线图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Path = __webpack_require__(335);
	__webpack_require__(345);

	var Line = function (_Path) {
	  _inherits(Line, _Path);

	  function Line() {
	    _classCallCheck(this, Line);

	    return _possibleConstructorReturn(this, _Path.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Line.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Path.prototype.getDefaultCfg.call(this);
	    cfg.type = 'line';
	    cfg.sortable = true;
	    return cfg;
	  };

	  return Line;
	}(Path);

	var LineStack = function (_Line) {
	  _inherits(LineStack, _Line);

	  function LineStack() {
	    _classCallCheck(this, LineStack);

	    return _possibleConstructorReturn(this, _Line.apply(this, arguments));
	  }

	  LineStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Line.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return LineStack;
	}(Line);

	Line.Stack = LineStack;

	GeomBase.Line = Line;
	GeomBase.LineStack = LineStack;

	module.exports = Line;

	/***/ }),
	/* 345 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var PathUtil = __webpack_require__(22);
	var ShapeUtil = __webpack_require__(118);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);
	var DOT_ARR = [1, 1];
	var DASH_ARR = [5.5, 1];

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getMarkerAttrs(cfg) {
	  var defaultCfg = Global.shape.line;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: 2,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity,
	    radius: 6
	  }, cfg.style);
	  return shapeCfg;
	}

	// 获取带有上下区间的 path
	function getRangePath(points, smooth, isInCircle, cfg) {
	  var topPoints = [];
	  var isStack = cfg.isStack;
	  var bottomPoints = [];
	  for (var i = 0; i < points.length; i++) {
	    var point = points[i];
	    var tmp = ShapeUtil.splitPoints(point);
	    bottomPoints.push(tmp[0]);
	    topPoints.push(tmp[1]);
	  }
	  var topPath = getSinglePath(topPoints, smooth, isInCircle, cfg);
	  var bottomPath = getSinglePath(bottomPoints, smooth, isInCircle, cfg);
	  if (isStack) {
	    return topPath;
	  }
	  return topPath.concat(bottomPath);
	}

	// 单条 path
	function getSinglePath(points, smooth, isInCircle, cfg) {
	  var path = void 0;
	  if (!smooth) {
	    path = PathUtil.getLinePath(points, false);
	    if (isInCircle) {
	      path.push(['Z']);
	    }
	  } else {
	    // 直角坐标系下绘制曲线时限制最大值、最小值
	    var constraint = cfg.constraint;
	    if (isInCircle && points.length) {
	      points.push({ x: points[0].x, y: points[0].y });
	    }
	    path = PathUtil.getSplinePath(points, false, constraint);
	  }

	  return path;
	}
	// get line path
	function getPath(cfg, smooth) {
	  var path = void 0;
	  var points = cfg.points;
	  var isInCircle = cfg.isInCircle;
	  var first = points[0];
	  if (Util.isArray(first.y)) {
	    path = getRangePath(points, smooth, isInCircle, cfg);
	  } else {
	    path = getSinglePath(points, smooth, isInCircle, cfg);
	  }
	  return path;
	}

	function _interpPoints(points, fn) {
	  var tmpPoints = [];
	  Util.each(points, function (point, index) {
	    var nextPoint = points[index + 1];
	    tmpPoints.push(point);
	    if (nextPoint) {
	      tmpPoints = tmpPoints.concat(fn(point, nextPoint));
	    }
	  });
	  return tmpPoints;
	}
	// 插值的图形path，不考虑null
	function _getInterPath(points) {
	  var path = [];
	  Util.each(points, function (point, index) {
	    var subPath = index === 0 ? ['M', point.x, point.y] : ['L', point.x, point.y];
	    path.push(subPath);
	  });
	  return path;
	}
	// 插值的图形
	function _getInterPointShapeCfg(cfg, fn) {
	  var points = _interpPoints(cfg.points, fn);
	  return _getInterPath(points);
	}

	function _markerFn(x, y, r, ctx) {
	  ctx.moveTo(x - r, y);
	  ctx.lineTo(x + r, y);
	}

	function _smoothMarkerFn(x, y, r, ctx) {
	  ctx.moveTo(x - r, y);
	  ctx.arcTo(x - r / 2, y - r / 2, x, y, r / 2);
	  ctx.lineTo(x, y);
	  ctx.arcTo(x + r / 2, y + r / 2, x + r, y - r / 2, r / 2);
	}
	// get marker cfg
	function _getMarkerCfg(cfg, smooth) {
	  return Util.mix({
	    symbol: smooth ? _smoothMarkerFn : _markerFn
	  }, getMarkerAttrs(cfg));
	}

	function _getInterMarkerCfg(cfg, fn) {
	  return Util.mix({
	    symbol: fn
	  }, getMarkerAttrs(cfg));
	}

	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var point = cfg.points[0];
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}

	// regist line geom
	var Line = Shape.registerFactory('line', {
	  // 默认的shape
	  defaultShapeType: 'line',
	  /* getMarkerCfg(type, cfg) {
	    const lineObj = Line[type] || Line.line;
	    return lineObj.getMarkerCfg(cfg);
	  }, */
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  },

	  // 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = void 0;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.draw(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  }
	});

	// draw line shape
	Shape.registerShape('line', 'line', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 点线 ···
	Shape.registerShape('line', 'dot', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path,
	        lineDash: DOT_ARR
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = DOT_ARR;
	    return tmp;
	  }
	});

	// 断线 - - -
	Shape.registerShape('line', 'dash', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getPath(cfg, false);
	    return container.addShape('path', {
	      attrs: Util.mix({
	        path: path,
	        lineDash: DASH_ARR
	      }, attrs)
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var tmp = _getMarkerCfg(cfg, false);
	    tmp.lineDash = tmp.lineDash || DASH_ARR;
	    return tmp;
	  }
	});

	// draw smooth line shape
	Shape.registerShape('line', 'smooth', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var coord = this._coord;
	    // 曲线的限制
	    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
	    var path = getPath(cfg, true);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg, true);
	  }
	});

	Shape.registerShape('line', 'hv', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: nextPoint.x,
	        y: point.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - r - 1, y - 2.5);
	      ctx.lineTo(x, y - 2.5);
	      ctx.lineTo(x, y + 2.5);
	      ctx.lineTo(x + r + 1, y + 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'vh', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      tmp.push({
	        x: point.x,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - r - 1, y + 2.5);
	      ctx.lineTo(x, y + 2.5);
	      ctx.lineTo(x, y - 2.5);
	      ctx.lineTo(x + r + 1, y - 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'hvh', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      var middlex = (nextPoint.x - point.x) / 2 + point.x;
	      tmp.push({
	        x: middlex,
	        y: point.y
	      });
	      tmp.push({
	        x: middlex,
	        y: nextPoint.y
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      ctx.moveTo(x - (r + 1), y + 2.5);
	      ctx.lineTo(x - r / 2, y + 2.5);
	      ctx.lineTo(x - r / 2, y - 2.5);
	      ctx.lineTo(x + r / 2, y - 2.5);
	      ctx.lineTo(x + r / 2, y + 2.5);
	      ctx.lineTo(x + r + 1, y + 2.5);
	    });
	  }
	});

	Shape.registerShape('line', 'vhv', {
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = _getInterPointShapeCfg(cfg, function (point, nextPoint) {
	      var tmp = [];
	      var middley = (nextPoint.y - point.y) / 2 + point.y;
	      tmp.push({
	        x: point.x,
	        y: middley
	      });
	      tmp.push({
	        x: nextPoint.x,
	        y: middley
	      });
	      return tmp;
	    });
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getInterMarkerCfg(cfg, function (x, y, r, ctx) {
	      // 宽 13px，高 8px
	      ctx.moveTo(x - 5, y + 2.5);
	      ctx.lineTo(x - 5, y);
	      ctx.lineTo(x, y);
	      ctx.lineTo(x, y - 3);
	      ctx.lineTo(x, y + 3);
	      ctx.lineTo(x + 6.5, y + 3);
	    });
	  }
	});

	Line.spline = Line.smooth;

	module.exports = Line;

	/***/ }),
	/* 346 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 点图
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	__webpack_require__(347);

	var Point = function (_GeomBase) {
	  _inherits(Point, _GeomBase);

	  function Point() {
	    _classCallCheck(this, Point);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Point.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'point';
	    cfg.shapeType = 'point';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Point.prototype.drawPoint = function drawPoint(obj, container, shapeFactory, index) {
	    var self = this;
	    var shape = obj.shape;
	    var cfg = self.getDrawCfg(obj);
	    var geomShape = void 0;
	    if (Util.isArray(obj.y)) {
	      var hasAdjust = self.hasStack();
	      Util.each(obj.y, function (y, idx) {
	        cfg.y = y;
	        cfg.yIndex = idx;
	        if (!hasAdjust || idx !== 0) {
	          geomShape = shapeFactory.drawShape(shape, cfg, container);
	          self.appendShapeInfo(geomShape, index + idx);
	        }
	      });
	    } else if (!Util.isNil(obj.y)) {
	      geomShape = shapeFactory.drawShape(shape, cfg, container);
	      self.appendShapeInfo(geomShape, index);
	    }
	  };

	  return Point;
	}(GeomBase);

	var PointJitter = function (_Point) {
	  _inherits(PointJitter, _Point);

	  function PointJitter() {
	    _classCallCheck(this, PointJitter);

	    return _possibleConstructorReturn(this, _Point.apply(this, arguments));
	  }

	  PointJitter.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Point.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'jitter' }];
	    return cfg;
	  };

	  return PointJitter;
	}(Point);

	var PointStack = function (_Point2) {
	  _inherits(PointStack, _Point2);

	  function PointStack() {
	    _classCallCheck(this, PointStack);

	    return _possibleConstructorReturn(this, _Point2.apply(this, arguments));
	  }

	  PointStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Point2.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return PointStack;
	}(Point);

	Point.Jitter = PointJitter;
	Point.Stack = PointStack;

	GeomBase.Point = Point;
	GeomBase.PointJitter = PointJitter;
	GeomBase.PointStack = PointStack;

	module.exports = Point;

	/***/ }),
	/* 347 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview point shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 */

	var Util = __webpack_require__(0);
	var ShapeUtil = __webpack_require__(118);
	var Global = __webpack_require__(2);
	var Shape = __webpack_require__(10);
	// const svgpath = require('svgpath');

	var _require = __webpack_require__(1),
	    Marker = _require.Marker,
	    PathUtil = _require.PathUtil;

	var SHAPES = ['circle', 'square', 'bowtie', 'diamond', 'hexagon', 'triangle', 'triangle-down'];
	var HOLLOW_SHAPES = ['cross', 'tick', 'plus', 'hyphen', 'line', 'pointerLine', 'pointerArrow'];
	var SQRT_3 = Math.sqrt(3);

	// 增加marker
	Util.mix(Marker.Symbols, {
	  hexagon: function hexagon(x, y, r, ctx) {
	    var diffX = r / 2 * SQRT_3;
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x + diffX, y - r / 2);
	    ctx.lineTo(x + diffX, y + r / 2);
	    ctx.lineTo(x, y + r);
	    ctx.lineTo(x - diffX, y + r / 2);
	    ctx.lineTo(x - diffX, y - r / 2);
	    ctx.closePath();
	  },
	  bowtie: function bowtie(x, y, r, ctx) {
	    var diffY = r - 1.5;
	    ctx.moveTo(x - r, y - diffY);
	    ctx.lineTo(x + r, y + diffY);
	    ctx.lineTo(x + r, y - diffY);
	    ctx.lineTo(x - r, y + diffY);
	    ctx.closePath();
	  },
	  cross: function cross(x, y, r, ctx) {
	    ctx.moveTo(x - r, y - r);
	    ctx.lineTo(x + r, y + r);
	    ctx.moveTo(x + r, y - r);
	    ctx.lineTo(x - r, y + r);
	  },
	  tick: function tick(x, y, r, ctx) {
	    ctx.moveTo(x - r / 2, y - r);
	    ctx.lineTo(x + r / 2, y - r);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	    ctx.moveTo(x - r / 2, y + r);
	    ctx.lineTo(x + r / 2, y + r);
	  },
	  plus: function plus(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  },
	  hyphen: function hyphen(x, y, r, ctx) {
	    ctx.moveTo(x - r, y);
	    ctx.lineTo(x + r, y);
	  },
	  line: function line(x, y, r, ctx) {
	    ctx.moveTo(x, y - r);
	    ctx.lineTo(x, y + r);
	  }
	});

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.point;
	  var pointAttrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    fillOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowPoint;
	  var pointAttrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity,
	    radius: cfg.size
	  }, cfg.style);
	  return pointAttrs;
	}

	var Point = Shape.registerFactory('point', {
	  defaultShapeType: 'hollowCircle',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    // 点放大 + 颜色加亮
	    var radius = cfg.radius;
	    var color = void 0;
	    if (type && (type.indexOf('hollow') === 0 || Util.indexOf(HOLLOW_SHAPES, type) !== -1) || !type) {
	      color = cfg.stroke || cfg.strokeStyle;
	    } else {
	      color = cfg.fill || cfg.fillStyle;
	    }

	    return {
	      radius: radius + 1,
	      shadowBlur: radius,
	      shadowColor: color,
	      stroke: color,
	      strokeOpacity: 1,
	      lineWidth: 1
	    };
	  },
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  }
	});

	function getRectPath(cfg) {
	  var x = cfg.points[0].x;
	  var y = cfg.points[0].y;
	  var w = cfg.size[0];
	  var h = cfg.size[1];
	  var path = [['M', x - 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y - 0.5 * h], ['L', x + 0.5 * w, y + 0.5 * h], ['L', x - 0.5 * w, y + 0.5 * h], ['z']];
	  return path;
	}

	// 用于桑基图的节点
	Shape.registerShape('point', 'rect', {
	  draw: function draw(cfg, container) {
	    var rectAttrs = getFillAttrs(cfg);
	    var path = getRectPath(cfg);
	    path = this.parsePath(path);
	    var gShape = container.addShape('path', {
	      attrs: Util.mix(rectAttrs, {
	        path: path
	      })
	    });
	    return gShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    var attrs = getFillAttrs(cfg);
	    attrs.symbol = 'rect';
	    attrs.radius = 4.5;
	    return attrs;
	  }
	});

	// 添加shapes
	Util.each(SHAPES, function (shape) {
	  Shape.registerShape('point', shape, {
	    draw: function draw(cfg, container) {
	      // cfg.points = this.parsePoints(cfg.points);
	      var attrs = getFillAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getFillAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	  // 添加该 shape 对应的 hollowShape
	  Shape.registerShape('point', 'hollow' + Util.upperFirst(shape), {
	    draw: function draw(cfg, container) {
	      // cfg.points = this.parsePoints(cfg.points);
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	});

	// 添加 hollowShapes
	Util.each(HOLLOW_SHAPES, function (shape) {
	  Shape.registerShape('point', shape, {
	    draw: function draw(cfg, container) {
	      var attrs = getLineAttrs(cfg);
	      return container.addShape('Marker', {
	        attrs: Util.mix(attrs, {
	          symbol: shape,
	          x: cfg.x,
	          y: cfg.y
	        })
	      });
	    },
	    getMarkerCfg: function getMarkerCfg(cfg) {
	      var attrs = getLineAttrs(cfg);
	      attrs.symbol = shape;
	      attrs.radius = 4.5;
	      return attrs;
	    }
	  });
	});

	// image
	Shape.registerShape('point', 'image', {
	  draw: function draw(cfg, container) {
	    cfg.points = this.parsePoints(cfg.points);
	    return container.addShape('image', {
	      attrs: {
	        x: cfg.points[0].x - cfg.size / 2,
	        y: cfg.points[0].y - cfg.size,
	        width: cfg.size,
	        height: cfg.size,
	        img: cfg.shape[1]
	      }
	    });
	  }
	});

	// const pathRangeCache = {};
	// function getUnifiedPath(path, cfg) {
	//   let pathRange;
	//   if (pathRangeCache[path]) {
	//     pathRange = pathRangeCache[path];
	//   } else {
	//     const segments = PathUtil.parsePathString(path);
	//     const nums = Util.flatten(segments).filter(num => Util.isNumber(num));
	//     pathRangeCache[path] = pathRange = Math.max.apply(null, nums) - Math.min.apply(null, nums);
	//   }
	//
	//   const size = cfg.size || 10;
	//   const scale = size / pathRange;
	//   const transformed = svgpath(path)
	//     .scale(scale)
	//     .translate(cfg.x, cfg.y);
	//   if (cfg.style && cfg.style.rotate) {
	//     transformed.rotate(cfg.style.rotate, cfg.x, cfg.y);
	//   }
	//   return PathUtil.parsePathString(transformed.toString());
	// }

	// path
	var pathMetaCache = {};
	Shape.registerShape('point', 'path', {
	  draw: function draw(cfg, container) {
	    var attrs = Util.mix({}, getLineAttrs(cfg), getFillAttrs(cfg));
	    var path = cfg.shape[1];
	    var size = cfg.size || 10;
	    var pathMeta = void 0;
	    if (pathMetaCache[path]) {
	      pathMeta = pathMetaCache[path];
	    } else {
	      var segments = PathUtil.parsePathString(path);
	      var nums = Util.flatten(segments).filter(function (num) {
	        return Util.isNumber(num);
	      });
	      pathMetaCache[path] = pathMeta = {
	        range: Math.max.apply(null, nums) - Math.min.apply(null, nums),
	        segments: segments
	      };
	    }
	    var scale = size / pathMeta.range;
	    var transform = [];

	    if (attrs.rotate) {
	      transform.push(['r', attrs.rotate / 180 * Math.PI]);
	      delete attrs.rotate;
	    }
	    var shape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: pathMeta.segments
	      })
	    });
	    transform.push(['s', scale, scale], ['t', cfg.x, cfg.y]);
	    shape.transform(transform);
	    return shape;
	  }
	});

	module.exports = Point;

	/***/ }),
	/* 348 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespaces__ = __webpack_require__(349);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var prefix = name += "",
	      i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */].hasOwnProperty(prefix) ? { space: __WEBPACK_IMPORTED_MODULE_0__namespaces__["a" /* default */][prefix], local: name } : name;
	});

	/***/ }),
	/* 349 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return xhtml; });
	var xhtml = "http://www.w3.org/1999/xhtml";

	/* harmony default export */ __webpack_exports__["a"] = ({
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	});

	/***/ }),
	/* 350 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function none() {}

	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	  return selector == null ? none : function () {
	    return this.querySelector(selector);
	  };
	});

	/***/ }),
	/* 351 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (node) {
	    return node.ownerDocument && node.ownerDocument.defaultView || // node is a Node
	    node.document && node // node is a Window
	    || node.defaultView; // node is a Document
	});

	/***/ }),
	/* 352 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return event; });
	/* harmony export (immutable) */ __webpack_exports__["a"] = customEvent;
	var filterEvents = {};

	var event = null;

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!("onmouseenter" in element)) {
	    filterEvents = { mouseenter: "mouseover", mouseleave: "mouseout" };
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function (event) {
	    var related = event.relatedTarget;
	    if (!related || related !== this && !(related.compareDocumentPosition(this) & 8)) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function (event1) {
	    var event0 = event; // Events can be reentrant (e.g., focus).
	    event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      event = event0;
	    }
	  };
	}

	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return { type: t, name: name };
	  });
	}

	function onRemove(typename) {
	  return function () {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function (d, i, group) {
	    var on = this.__on,
	        o,
	        listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = { type: typename.type, name: typename.name, value: value, listener: listener, capture: capture };
	    if (!on) this.__on = [o];else on.push(o);
	  };
	}

	/* harmony default export */ __webpack_exports__["b"] = (function (typename, value, capture) {
	  var typenames = parseTypenames(typename + ""),
	      i,
	      n = typenames.length,
	      t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) {
	    this.each(on(typenames[i], value, capture));
	  }return this;
	});

	function customEvent(event1, listener, that, args) {
	  var event0 = event;
	  event1.sourceEvent = event;
	  event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    event = event0;
	  }
	}

	/***/ }),
	/* 353 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_on__ = __webpack_require__(352);


	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var current = __WEBPACK_IMPORTED_MODULE_0__selection_on__["c" /* event */],
	      source;
	  while (source = current.sourceEvent) {
	    current = source;
	  }return current;
	});

	/***/ }),
	/* 354 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = now;
	/* harmony export (immutable) */ __webpack_exports__["a"] = Timer;
	/* harmony export (immutable) */ __webpack_exports__["c"] = timer;
	/* unused harmony export timerFlush */
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	var frame = 0,
	    // is an animation frame pending?
	timeout = 0,
	    // is a timeout pending?
	interval = 0,
	    // are any timers active?
	pokeDelay = 1000,
	    // how frequently we check for clock skew
	taskHead,
	    taskTail,
	    clockLast = 0,
	    clockNow = 0,
	    clockSkew = 0,
	    clock = (typeof performance === "undefined" ? "undefined" : _typeof(performance)) === "object" && performance.now ? performance : Date,
	    setFrame = (typeof window === "undefined" ? "undefined" : _typeof(window)) === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function (f) {
	  setTimeout(f, 17);
	};

	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call = this._time = this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function restart(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function stop() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer();
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead,
	      e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(),
	      delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0,
	      t1 = taskHead,
	      t2,
	      time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	/***/ }),
	/* 355 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_value__ = __webpack_require__(356);
	/* unused harmony reexport interpolate */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_array__ = __webpack_require__(373);
	/* unused harmony reexport interpolateArray */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_basis__ = __webpack_require__(359);
	/* unused harmony reexport interpolateBasis */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_basisClosed__ = __webpack_require__(371);
	/* unused harmony reexport interpolateBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_date__ = __webpack_require__(374);
	/* unused harmony reexport interpolateDate */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_number__ = __webpack_require__(338);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_5__src_number__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_object__ = __webpack_require__(375);
	/* unused harmony reexport interpolateObject */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_round__ = __webpack_require__(436);
	/* unused harmony reexport interpolateRound */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_string__ = __webpack_require__(376);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_8__src_string__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_transform_index__ = __webpack_require__(437);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["a"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_9__src_transform_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__src_zoom__ = __webpack_require__(440);
	/* unused harmony reexport interpolateZoom */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__src_rgb__ = __webpack_require__(370);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_11__src_rgb__["a"]; });
	/* unused harmony reexport interpolateRgbBasis */
	/* unused harmony reexport interpolateRgbBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__src_hsl__ = __webpack_require__(441);
	/* unused harmony reexport interpolateHsl */
	/* unused harmony reexport interpolateHslLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__src_lab__ = __webpack_require__(442);
	/* unused harmony reexport interpolateLab */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__src_hcl__ = __webpack_require__(443);
	/* unused harmony reexport interpolateHcl */
	/* unused harmony reexport interpolateHclLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__src_cubehelix__ = __webpack_require__(444);
	/* unused harmony reexport interpolateCubehelix */
	/* unused harmony reexport interpolateCubehelixLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16__src_quantize__ = __webpack_require__(445);
	/* unused harmony reexport quantize */


















	/***/ }),
	/* 356 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__rgb__ = __webpack_require__(370);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__array__ = __webpack_require__(373);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__date__ = __webpack_require__(374);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__number__ = __webpack_require__(338);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__object__ = __webpack_require__(375);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__string__ = __webpack_require__(376);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__constant__ = __webpack_require__(372);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };










	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	    var t = typeof b === "undefined" ? "undefined" : _typeof(b),
	        c;
	    return b == null || t === "boolean" ? Object(__WEBPACK_IMPORTED_MODULE_7__constant__["a" /* default */])(b) : (t === "number" ? __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */] : t === "string" ? (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */]) : __WEBPACK_IMPORTED_MODULE_6__string__["a" /* default */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1__rgb__["a" /* default */] : b instanceof Date ? __WEBPACK_IMPORTED_MODULE_3__date__["a" /* default */] : Array.isArray(b) ? __WEBPACK_IMPORTED_MODULE_2__array__["a" /* default */] : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? __WEBPACK_IMPORTED_MODULE_5__object__["a" /* default */] : __WEBPACK_IMPORTED_MODULE_4__number__["a" /* default */])(a, b);
	});

	/***/ }),
	/* 357 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = Color;
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return _darker; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return _brighter; });
	/* harmony export (immutable) */ __webpack_exports__["e"] = color;
	/* harmony export (immutable) */ __webpack_exports__["h"] = rgbConvert;
	/* harmony export (immutable) */ __webpack_exports__["g"] = rgb;
	/* harmony export (immutable) */ __webpack_exports__["b"] = Rgb;
	/* unused harmony export hslConvert */
	/* harmony export (immutable) */ __webpack_exports__["f"] = hsl;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);


	function Color() {}

	var _darker = 0.7;

	var _brighter = 1 / _darker;


	var reI = "\\s*([+-]?\\d+)\\s*",
	    reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",
	    reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",
	    reHex3 = /^#([0-9a-f]{3})$/,
	    reHex6 = /^#([0-9a-f]{6})$/,
	    reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$"),
	    reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$"),
	    reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$"),
	    reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$"),
	    reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$"),
	    reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Color, color, {
	  displayable: function displayable() {
	    return this.rgb().displayable();
	  },
	  toString: function toString() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb(m >> 8 & 0xf | m >> 4 & 0x0f0, m >> 4 & 0xf | m & 0xf0, (m & 0xf) << 4 | m & 0xf, 1) // #f00
	  ) : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	  : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	  : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	  : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	  : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	  : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	  : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	  : named.hasOwnProperty(format) ? rgbn(named[format]) : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0) : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb();
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Rgb, rgb, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function rgb() {
	    return this;
	  },
	  displayable: function displayable() {
	    return 0 <= this.r && this.r <= 255 && 0 <= this.g && this.g <= 255 && 0 <= this.b && this.b <= 255 && 0 <= this.opacity && this.opacity <= 1;
	  },
	  toString: function toString() {
	    var a = this.opacity;a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(") + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", " + Math.max(0, Math.min(255, Math.round(this.b) || 0)) + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;else if (l <= 0 || l >= 1) h = s = NaN;else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl();
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;else if (g === max) h = (b - r) / s + 2;else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hsl, hsl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(Color, {
	  brighter: function brighter(k) {
	    k = k == null ? _brighter : Math.pow(_brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? _darker : Math.pow(_darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2), hsl2rgb(h, m1, m2), hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2), this.opacity);
	  },
	  displayable: function displayable() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s)) && 0 <= this.l && this.l <= 1 && 0 <= this.opacity && this.opacity <= 1;
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60 : h < 180 ? m2 : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60 : m1) * 255;
	}

	/***/ }),
	/* 358 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = extend;
	/* harmony default export */ __webpack_exports__["a"] = (function (constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	});

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) {
	    prototype[key] = definition[key];
	  }return prototype;
	}

	/***/ }),
	/* 359 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = basis;
	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1,
	      t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0 + (4 - 6 * t2 + 3 * t3) * v1 + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2 + t3 * v3) / 6;
	}

	/* harmony default export */ __webpack_exports__["b"] = (function (values) {
	  var n = values.length - 1;
	  return function (t) {
	    var i = t <= 0 ? t = 0 : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	});

	/***/ }),
	/* 360 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	    return typeof selector === "string" ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[document.querySelector(selector)]], [document.documentElement]) : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([[selector]], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
	});

	/***/ }),
	/* 361 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function empty() {
	  return [];
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	  return selector == null ? empty : function () {
	    return this.querySelectorAll(selector);
	  };
	});

	/***/ }),
	/* 362 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var matcher = function matcher(selector) {
	  return function () {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector || element.msMatchesSelector || element.mozMatchesSelector || element.oMatchesSelector;
	    matcher = function matcher(selector) {
	      return function () {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	/* harmony default export */ __webpack_exports__["a"] = (matcher);

	/***/ }),
	/* 363 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = EnterNode;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(364);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(60);



	/* harmony default export */ __webpack_exports__["b"] = (function () {
	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._enter || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
	});

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function appendChild(child) {
	    return this._parent.insertBefore(child, this._next);
	  },
	  insertBefore: function insertBefore(child, next) {
	    return this._parent.insertBefore(child, next);
	  },
	  querySelector: function querySelector(selector) {
	    return this._parent.querySelector(selector);
	  },
	  querySelectorAll: function querySelectorAll(selector) {
	    return this._parent.querySelectorAll(selector);
	  }
	};

	/***/ }),
	/* 364 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (update) {
	  return new Array(update.length);
	});

	/***/ }),
	/* 365 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["b"] = styleValue;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(351);


	function styleRemove(name) {
	  return function () {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function () {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);else this.style.setProperty(name, v, priority);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	  return arguments.length > 1 ? this.each((value == null ? styleRemove : typeof value === "function" ? styleFunction : styleConstant)(name, value, priority == null ? "" : priority)) : styleValue(this.node(), name);
	});

	function styleValue(node, name) {
	  return node.style.getPropertyValue(name) || Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	/***/ }),
	/* 366 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_selection_index__ = __webpack_require__(426);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_transition_index__ = __webpack_require__(113);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "transition", function() { return __WEBPACK_IMPORTED_MODULE_1__src_transition_index__["b"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_active__ = __webpack_require__(472);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "active", function() { return __WEBPACK_IMPORTED_MODULE_2__src_active__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_interrupt__ = __webpack_require__(367);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "interrupt", function() { return __WEBPACK_IMPORTED_MODULE_3__src_interrupt__["a"]; });





	/***/ }),
	/* 367 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_schedule__ = __webpack_require__(61);


	/* harmony default export */ __webpack_exports__["a"] = (function (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) {
	      empty = false;continue;
	    }
	    active = schedule.state > __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["d" /* STARTING */] && schedule.state < __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["b" /* ENDING */];
	    schedule.state = __WEBPACK_IMPORTED_MODULE_0__transition_schedule__["a" /* ENDED */];
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	});

	/***/ }),
	/* 368 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_timer__ = __webpack_require__(354);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["b"]; });
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_0__src_timer__["c"]; });
	/* unused harmony reexport timerFlush */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_timeout__ = __webpack_require__(430);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__src_timeout__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_interval__ = __webpack_require__(431);
	/* unused harmony reexport interval */






	/***/ }),
	/* 369 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return deg2rad; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return rad2deg; });
	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	/***/ }),
	/* 370 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export rgbBasis */
	/* unused harmony export rgbBasisClosed */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__basis__ = __webpack_require__(359);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__basisClosed__ = __webpack_require__(371);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__color__ = __webpack_require__(332);





	/* harmony default export */ __webpack_exports__["a"] = ((function rgbGamma(y) {
	  var color = Object(__WEBPACK_IMPORTED_MODULE_3__color__["b" /* gamma */])(y);

	  function rgb(start, end) {
	    var r = color((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(start)).r, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(end)).r),
	        g = color(start.g, end.g),
	        b = color(start.b, end.b),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_3__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb.gamma = rgbGamma;

	  return rgb;
	})(1));

	function rgbSpline(spline) {
	  return function (colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i,
	        color;
	    for (i = 0; i < n; ++i) {
	      color = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["f" /* rgb */])(colors[i]);
	      r[i] = color.r || 0;
	      g[i] = color.g || 0;
	      b[i] = color.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color.opacity = 1;
	    return function (t) {
	      color.r = r(t);
	      color.g = g(t);
	      color.b = b(t);
	      return color + "";
	    };
	  };
	}

	var rgbBasis = rgbSpline(__WEBPACK_IMPORTED_MODULE_1__basis__["b" /* default */]);
	var rgbBasisClosed = rgbSpline(__WEBPACK_IMPORTED_MODULE_2__basisClosed__["a" /* default */]);

	/***/ }),
	/* 371 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__basis__ = __webpack_require__(359);


	/* harmony default export */ __webpack_exports__["a"] = (function (values) {
	  var n = values.length;
	  return function (t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return Object(__WEBPACK_IMPORTED_MODULE_0__basis__["a" /* basis */])((t - i / n) * n, v0, v1, v2, v3);
	  };
	});

	/***/ }),
	/* 372 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (x) {
	  return function () {
	    return x;
	  };
	});

	/***/ }),
	/* 373 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(356);


	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) {
	    x[i] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[i], b[i]);
	  }for (; i < nb; ++i) {
	    c[i] = b[i];
	  }return function (t) {
	    for (i = 0; i < na; ++i) {
	      c[i] = x[i](t);
	    }return c;
	  };
	});

	/***/ }),
	/* 374 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var d = new Date();
	  return a = +a, b -= a, function (t) {
	    return d.setTime(a + b * t), d;
	  };
	});

	/***/ }),
	/* 375 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__value__ = __webpack_require__(356);
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };



	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || (typeof a === "undefined" ? "undefined" : _typeof(a)) !== "object") a = {};
	  if (b === null || (typeof b === "undefined" ? "undefined" : _typeof(b)) !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = Object(__WEBPACK_IMPORTED_MODULE_0__value__["a" /* default */])(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function (t) {
	    for (k in i) {
	      c[k] = i[k](t);
	    }return c;
	  };
	});

	/***/ }),
	/* 376 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(338);


	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,
	    reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function () {
	    return b;
	  };
	}

	function one(b) {
	  return function (t) {
	    return b(t) + "";
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0,
	      // scan index for next number in b
	  am,
	      // current match in a
	  bm,
	      // current match in b
	  bs,
	      // string preceding current number in b, if any
	  i = -1,
	      // index in s
	  s = [],
	      // string constants and placeholders
	  q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a)) && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) {
	      // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) {
	      // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else {
	      // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({ i: i, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(am, bm) });
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? q[0] ? one(q[0].x) : zero(b) : (b = q.length, function (t) {
	    for (var i = 0, o; i < b; ++i) {
	      s[(o = q[i]).i] = o.x(t);
	    }return s.join("");
	  });
	});

	/***/ }),
	/* 377 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__ = __webpack_require__(355);



	/* harmony default export */ __webpack_exports__["a"] = (function (a, b) {
	    var c;
	    return (typeof b === "number" ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["a" /* interpolateNumber */] : b instanceof __WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */] ? __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */] : (c = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["a" /* color */])(b)) ? (b = c, __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["b" /* interpolateRgb */]) : __WEBPACK_IMPORTED_MODULE_1_d3_interpolate__["c" /* interpolateString */])(a, b);
	});

	/***/ }),
	/* 378 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 分面的基类
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);

	/**
	 * 矩形的 facet 有以下属性：
	 * - colField 列的字段
	 * - rowField 行的字段
	 * - colValue 列字段的值
	 * - rowValue 行字段的值
	 * - cols 列数
	 * - rows 行数
	 * - colIndex 列的序号
	 * - rowIndex 行的序号
	 */

	/**
	 * 用于生成分面的类
	 * @class Facets.Rect
	 */

	var Rect = function (_Base) {
	  _inherits(Rect, _Base);

	  function Rect() {
	    _classCallCheck(this, Rect);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Rect.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'rect';
	    return cfg;
	  };

	  Rect.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    // var defs = self.defs;
	    var rst = [];
	    var rows = 1;
	    var cols = 1;
	    var colField = fields[0];
	    var rowField = fields[1];
	    var colValues = [''];
	    var rowValues = [''];
	    if (colField) {
	      colValues = self.getFieldValues(colField, data);
	      cols = colValues.length;
	    }
	    if (rowField) {
	      rowValues = self.getFieldValues(rowField, data);
	      rows = rowValues.length;
	    }

	    // 获取每个维度对应的frame
	    colValues.forEach(function (xVal, xIndex) {
	      rowValues.forEach(function (yVal, yIndex) {
	        var conditions = [{ field: colField, value: xVal, values: colValues }, { field: rowField, value: yVal, values: rowValues }];
	        var filter = self.getFilter(conditions);
	        var subData = data.filter(filter);
	        var facet = {
	          type: self.type,
	          colValue: xVal,
	          rowValue: yVal,
	          colField: colField,
	          rowField: rowField,
	          colIndex: xIndex,
	          rowIndex: yIndex,
	          cols: cols,
	          rows: rows,
	          data: subData,
	          region: self.getRegion(rows, cols, xIndex, yIndex)
	        };
	        rst.push(facet);
	      });
	    });

	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  Rect.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].title = null;
	      axes[xField].label = null;
	    } else if (facet.colIndex !== parseInt((facet.cols - 1) / 2)) {
	      axes[xField].title = null;
	    }
	  };
	  // 设置 y 坐标轴的文本、title 是否显示


	  Rect.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    } else if (facet.rowIndex !== parseInt((facet.rows - 1) / 2)) {
	      axes[yField].title = null;
	    }
	  };

	  Rect.prototype.renderTitle = function renderTitle(view, facet) {
	    if (facet.rowIndex === 0) {
	      this.drawColTitle(view, facet);
	    }
	    if (facet.colIndex === facet.cols - 1) {
	      this.drawRowTitle(view, facet);
	    }
	  };

	  return Rect;
	}(Base);

	module.exports = Rect;

	/***/ }),
	/* 379 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview list facets, support cols
	 */

	var Base = __webpack_require__(340);

	/**
	 * 用于生成分面的类
	 * @class Facets.List
	 */

	var List = function (_Base) {
	  _inherits(List, _Base);

	  function List() {
	    _classCallCheck(this, List);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  List.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'list';
	    cfg.cols = null; // 用户不设置时就显示一行
	    return cfg;
	  };

	  List.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var colField = fields[0];
	    if (!colField) {
	      throw 'Please specify for the field for facet!';
	    }
	    var colValues = self.getFieldValues(colField, data);
	    var count = colValues.length;
	    var cols = self.cols || count;
	    var rows = parseInt((count + cols - 1) / cols);
	    var rst = [];
	    colValues.forEach(function (xVal, index) {
	      var row = parseInt(index / cols);
	      var col = index % cols;
	      var conditions = [{ field: colField, value: xVal, values: colValues }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      var facet = {
	        type: self.type,
	        count: count,
	        colValue: xVal,
	        colField: colField,
	        rowField: null,
	        rowValue: xVal,
	        colIndex: col,
	        rowIndex: row,
	        cols: cols,
	        rows: rows,
	        data: subData,
	        region: self.getRegion(rows, cols, col, row)
	      };
	      rst.push(facet);
	    });
	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  List.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.rowIndex !== facet.rows - 1 && facet.cols * facet.rowIndex + facet.colIndex + 1 + facet.cols <= facet.count) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  List.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  return List;
	}(Base);

	module.exports = List;

	/***/ }),
	/* 380 */
	/***/ (function(module, exports, __webpack_require__) {

	var G2 = __webpack_require__(62);

	// geoms
	__webpack_require__(381);
	__webpack_require__(383);
	__webpack_require__(385);
	__webpack_require__(342);
	__webpack_require__(344);
	__webpack_require__(335);
	__webpack_require__(346);
	__webpack_require__(386);
	__webpack_require__(388);
	__webpack_require__(390);

	// facets
	__webpack_require__(474);

	// interaction
	__webpack_require__(479);

	module.exports = G2;

	/***/ }),
	/* 381 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 面积图
	 * @author dxq613@gmail.com
	 */

	var GeomBase = __webpack_require__(16);
	var SplitMixin = __webpack_require__(333);
	var Util = __webpack_require__(0);
	__webpack_require__(382);

	var Area = function (_GeomBase) {
	  _inherits(Area, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Area.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'area';
	    cfg.shapeType = 'area';
	    cfg.generatePoints = true;
	    cfg.sortable = true;
	    return cfg;
	  };

	  function Area(cfg) {
	    _classCallCheck(this, Area);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SplitMixin);
	    return _this;
	  }

	  Area.prototype.draw = function draw(data, container, shapeFactory, index) {
	    var self = this;
	    var cfg = this.getDrawCfg(data[0]);
	    var splitArray = this.splitData(data);

	    cfg.origin = data; // path,line,area 等图的origin 是整个序列
	    Util.each(splitArray, function (subData, splitedIndex) {
	      cfg.splitedIndex = splitedIndex; // 传入分割片段索引 用于生成id
	      var points = subData.map(function (obj) {
	        return obj.points;
	      });
	      cfg.points = points;
	      var geomShape = shapeFactory.drawShape(cfg.shape, cfg, container);
	      self.appendShapeInfo(geomShape, index + splitedIndex);
	    });
	  };

	  return Area;
	}(GeomBase);

	var AreaStack = function (_Area) {
	  _inherits(AreaStack, _Area);

	  function AreaStack() {
	    _classCallCheck(this, AreaStack);

	    return _possibleConstructorReturn(this, _Area.apply(this, arguments));
	  }

	  AreaStack.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Area.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'stack' }];
	    return cfg;
	  };

	  return AreaStack;
	}(Area);

	Area.Stack = AreaStack;

	GeomBase.Area = Area;
	GeomBase.AreaStack = AreaStack;

	module.exports = Area;

	/***/ }),
	/* 382 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview area shape
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var PathUtil = __webpack_require__(22);
	var Global = __webpack_require__(2);

	function getLineAttrs(cfg) {
	  var defaultAttrs = Global.shape.hollowArea;
	  var lineAttrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return lineAttrs;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.area;
	  var areaAttrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return areaAttrs;
	}

	function getPath(cfg, smooth, shape) {
	  var path = [];
	  var pointsArr = [];
	  var topLinePoints = []; // area 区域上部分
	  var bottomLinePoints = []; // area 区域下部分
	  var isInCircle = cfg.isInCircle;
	  Util.each(cfg.points, function (point) {
	    topLinePoints.push(point[1]);
	    bottomLinePoints.push(point[0]);
	  });
	  // if (!isInCircle) {
	  bottomLinePoints = bottomLinePoints.reverse();
	  // }
	  pointsArr.push(topLinePoints, bottomLinePoints);
	  Util.each(pointsArr, function (points, index) {
	    var subPath = [];
	    points = shape.parsePoints(points);
	    var p1 = points[0];
	    if (isInCircle) {
	      points.push({ x: p1.x, y: p1.y });
	    }
	    if (smooth) {
	      subPath = PathUtil.getSplinePath(points, false, cfg.constraint);
	    } else {
	      subPath = PathUtil.getLinePath(points, false);
	    }

	    if (index > 0) {
	      subPath[0][0] = 'L';
	    }
	    path = path.concat(subPath);
	  });
	  path.push(['Z']);
	  return path;
	}

	// get marker cfg
	function _getMarkerCfg(cfg) {
	  return {
	    symbol: function symbol(x, y, r, ctx) {
	      // 11px * 9px
	      ctx.save();
	      ctx.lineWidth = 2;
	      ctx.strokeStyle = ctx.fillStyle;
	      ctx.moveTo(x - 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y - 4);
	      ctx.stroke();
	      ctx.restore();
	      ctx.moveTo(x - 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y - 4);
	      ctx.lineTo(x + 5.5, y + 4);
	      ctx.lineTo(x - 5.5, y + 4);
	      ctx.closePath();
	    },

	    radius: 5,
	    fill: cfg.color,
	    fillOpacity: 0.3
	  };
	}

	// 鼠标悬浮触发active状态
	function _getActiveCfg(type, cfg) {
	  if (type === 'line' || type === 'smoothLine') {
	    // 线加粗
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  }
	  var opacity = cfg.fillOpacity || cfg.opacity || 1;
	  return {
	    fillOpacity: opacity - 0.15,
	    strokeOpacity: opacity - 0.15
	  };
	}

	// 当只有一个数据时绘制点
	function drawPointShape(shapeObj, cfg, container) {
	  var coord = shapeObj._coord;
	  var point = coord.convertPoint(cfg.points[0][1]);
	  return container.addShape('circle', {
	    attrs: Util.mix({
	      x: point.x,
	      y: point.y,
	      r: 2,
	      fill: cfg.color
	    }, cfg.style)
	  });
	}

	var Area = Shape.registerFactory('area', {
	  defaultShapeType: 'area',
	  /**
	   * @override
	   * @protected
	   * 计算点 如果存在多个点，分割成单个的点, 不考虑多个x对应一个y的情况
	   * 单点则补上y0点
	   */
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    var x = pointInfo.x;
	    var y = pointInfo.y;
	    var y0 = pointInfo.y0;
	    y = Util.isArray(y) ? y : [y0, y];

	    Util.each(y, function (yItem) {
	      points.push({
	        x: x,
	        y: yItem
	      });
	    });
	    return points;
	  },

	  // 获取激活的图形属性
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    return _getActiveCfg(type, cfg);
	  },
	  drawShape: function drawShape(type, cfg, container) {
	    var shape = this.getShape(type);
	    var gShape = void 0;
	    if (cfg.points.length === 1 && Global.showSinglePoint) {
	      gShape = drawPointShape(this, cfg, container);
	    } else {
	      gShape = shape.draw(cfg, container);
	    }
	    if (gShape) {
	      gShape.set('origin', cfg.origin);
	      gShape._id = cfg.splitedIndex ? cfg._id + cfg.splitedIndex : cfg._id;
	      gShape.name = this.name;
	    }
	    return gShape;
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	// 默认：填充区域图
	Shape.registerShape('area', 'area', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getPath(cfg, false, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 填充平滑区域图
	Shape.registerShape('area', 'smooth', {
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var coord = this._coord;
	    // 曲线的限制
	    cfg.constraint = [[coord.start.x, coord.end.y], [coord.end.x, coord.start.y]];
	    var path = getPath(cfg, true, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 封闭的折线
	Shape.registerShape('area', 'line', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, false, this);
	    // path = this.parsePath(path, false);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	// 封闭的平滑线
	Shape.registerShape('area', 'smoothLine', {
	  draw: function draw(cfg, container) {
	    var attrs = getLineAttrs(cfg);
	    var path = getPath(cfg, true, this);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return _getMarkerCfg(cfg);
	  }
	});

	Area.spline = Area.smooth;

	module.exports = Area;

	/***/ }),
	/* 383 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 边，用于关系图的边
	 * @author dxq613@gmail.com
	 */

	var GeomBase = __webpack_require__(16);
	__webpack_require__(384);

	var Edge = function (_GeomBase) {
	  _inherits(Edge, _GeomBase);

	  function Edge() {
	    _classCallCheck(this, Edge);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Edge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'edge';
	    cfg.shapeType = 'edge';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  return Edge;
	}(GeomBase);

	GeomBase.Edge = Edge;

	module.exports = Edge;

	/***/ }),
	/* 384 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 边的 shape
	 * @author dxq613@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var ShapeUtil = __webpack_require__(118);
	var Global = __webpack_require__(2);
	var PathUtil = __webpack_require__(22);
	var CORNER_PERCENT = 1 / 3;

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.edge;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    lineWidth: cfg.size,
	    strokeOpacity: cfg.opacity,
	    opacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	var Edge = Shape.registerFactory('edge', {
	  defaultShapeType: 'line',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    return ShapeUtil.splitPoints(pointInfo);
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 0;
	    return {
	      lineWidth: lineWidth + 1
	    };
	  }
	});

	function getCPath(from, to) {
	  var points = [];
	  points.push({
	    x: from.x,
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2
	  });

	  points.push({
	    y: from.y * (1 - 1 / 2) + to.y * 1 / 2,
	    x: to.x
	  });
	  points.push(to);
	  var sub = ['C'];

	  Util.each(points, function (point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}

	function getQPath(to, center) {
	  var points = [];
	  points.push({
	    x: center.x,
	    y: center.y
	  });
	  points.push(to);

	  var sub = ['Q'];
	  Util.each(points, function (point) {
	    sub.push(point.x, point.y);
	  });
	  return sub;
	}

	function createSmoothPath(from, to) {
	  var sub = getCPath(from, to);
	  var path = [['M', from.x, from.y]];

	  path.push(sub);
	  return path;
	}

	function createArcPath(from, to, center) {
	  var sub = getQPath(to, center);
	  var path = [['M', from.x, from.y]];
	  path.push(sub);
	  return path;
	}

	function createArcWeightPath(points, center) {
	  var arc1 = getQPath(points[1], center);
	  var arc2 = getQPath(points[3], center);
	  var path = [['M', points[0].x, points[0].y]];
	  path.push(arc2);
	  path.push(['L', points[3].x, points[3].y]);
	  path.push(['L', points[2].x, points[2].y]);
	  path.push(arc1);
	  path.push(['L', points[1].x, points[1].y]);
	  path.push(['L', points[0].x, points[0].y]);
	  path.push(['Z']);
	  return path;
	}

	function createRectPath(from, to) {
	  var points = [];
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: from.x
	  });
	  points.push({
	    y: from.y * (1 - CORNER_PERCENT) + to.y * CORNER_PERCENT,
	    x: to.x
	  });
	  points.push(to);
	  var path = [['M', from.x, from.y]];
	  Util.each(points, function (point) {
	    path.push(['L', point.x, point.y]);
	  });
	  return path;
	}

	Shape.registerShape('edge', 'line', {
	  draw: function draw(cfg, container) {
	    var points = this.parsePoints(cfg.points);
	    var attrCfg = getAttrs(cfg);
	    var path = PathUtil.getLinePath(points);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('edge', 'vhv', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createRectPath(points[0], points[1]);
	    path = this.parsePath(path);
	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('edge', 'smooth', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var attrCfg = getAttrs(cfg);
	    var path = createSmoothPath(points[0], points[1]);
	    path = this.parsePath(path);

	    var line = container.addShape('path', {
	      attrs: Util.mix(attrCfg, {
	        path: path
	      })
	    });
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	//  弧线包括笛卡尔坐标系下的半圆弧线、极坐标系下以圆心为控制点的二阶曲线、笛卡尔坐标系下带权重的三阶曲线、极坐标系下带权重的以圆心为控制点的二阶曲线
	Shape.registerShape('edge', 'arc', {
	  draw: function draw(cfg, container) {
	    var points = cfg.points;
	    var type = points.length > 2 ? 'weight' : 'normal';
	    var attrCfg = getAttrs(cfg);
	    var line = void 0;
	    var path = void 0;
	    if (cfg.isInCircle) {
	      var center = {
	        x: 0,
	        y: 1
	      };
	      if (type === 'normal') {
	        path = createArcPath(points[0], points[1], center);
	      } else {
	        attrCfg.fill = attrCfg.stroke;
	        path = createArcWeightPath(points, center);
	      }
	      path = this.parsePath(path);
	      line = container.addShape('path', {
	        attrs: Util.mix(attrCfg, {
	          path: path
	        })
	      });
	    } else {
	      if (type === 'normal') {
	        points = this.parsePoints(points);
	        line = container.addShape('arc', {
	          attrs: Util.mix(attrCfg, {
	            x: (points[1].x + points[0].x) / 2,
	            y: points[0].y,
	            r: Math.abs(points[1].x - points[0].x) / 2,
	            startAngle: Math.PI,
	            endAngle: Math.PI * 2
	          })
	        });
	      } else {
	        path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y]];
	        var c1 = getCPath(points[1], points[3]);
	        var c2 = getCPath(points[2], points[0]);
	        path.push(c1);
	        path.push(['L', points[3].x, points[3].y]);
	        path.push(['L', points[2].x, points[2].y]);
	        path.push(c2);
	        path.push(['Z']);
	        path = this.parsePath(path);
	        attrCfg.fill = attrCfg.stroke;
	        line = container.addShape('path', {
	          attrs: Util.mix(attrCfg, {
	            path: path
	          })
	        });
	      }
	    }
	    return line;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4.5
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Edge;

	/***/ }),
	/* 385 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview heatmap
	 * @author leungwensen@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var colorUtil = __webpack_require__(63);
	var Util = __webpack_require__(0);

	var ORIGIN_FIELD = '_origin';
	var SHADOW_CANVAS = 'shadowCanvas';
	var VALUE_RANGE = 'valueRange';
	var IMAGE_SHAPE = 'imageShape';
	var MAPPED_DATA = 'mappedData';
	var GRAY_SCALE_BLURRED_CANVAS = 'grayScaleBlurredCanvas';
	var HEATMAP_SIZE = 'heatmapSize';

	var paletteCache = {};

	var Heatmap = function (_GeomBase) {
	  _inherits(Heatmap, _GeomBase);

	  function Heatmap() {
	    _classCallCheck(this, Heatmap);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * get default configuration
	   * @protected
	   * @return {Object} configuration
	   */
	  Heatmap.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'heatmap';
	    // cfg.shapeType = 'heatmap';
	    return cfg;
	  };

	  Heatmap.prototype._prepareRange = function _prepareRange() {
	    var self = this;

	    var data = self.get(MAPPED_DATA);
	    var colorAttr = self.getAttr('color');
	    var colorField = colorAttr.field;

	    var min = Infinity;
	    var max = -Infinity;
	    data.forEach(function (row) {
	      var value = row[ORIGIN_FIELD][colorField];
	      if (value > max) {
	        max = value;
	      }
	      if (value < min) {
	        min = value;
	      }
	    });
	    if (min === max) {
	      min = max - 1;
	    }

	    var range = [min, max];
	    self.set(VALUE_RANGE, range);
	  };

	  Heatmap.prototype._prepareSize = function _prepareSize() {
	    var self = this;
	    var radius = self.getDefaultValue('size');
	    if (!Util.isNumber(radius)) {
	      radius = self._getDefaultSize();
	    }
	    var styleOptions = self.get('styleOptions');
	    var blur = styleOptions && Util.isObject(styleOptions.style) ? styleOptions.style.blur : null;
	    if (!Util.isFinite(blur)) {
	      blur = radius / 2;
	    }
	    self.set(HEATMAP_SIZE, {
	      blur: blur,
	      radius: radius
	    });
	  };

	  Heatmap.prototype._getDefaultSize = function _getDefaultSize() {
	    var self = this;
	    var position = self.getAttr('position');
	    var coord = self.get('coord');
	    var radius = Math.min(coord.width / (position.scales[0].ticks.length * 4), coord.height / (position.scales[1].ticks.length * 4));
	    return radius;
	  };

	  Heatmap.prototype._colorize = function _colorize(img) {
	    var self = this;
	    var colorAttr = self.getAttr('color');
	    var pixels = img.data;
	    for (var i = 3; i < pixels.length; i += 4) {
	      var alpha = pixels[i]; // get gradient color from opacity value
	      if (alpha) {
	        var palette = void 0;
	        if (paletteCache[alpha]) {
	          palette = paletteCache[alpha];
	        } else {
	          palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
	          paletteCache[alpha] = palette;
	        }
	        // const palette = colorUtil.rgb2arr(colorAttr.gradient(alpha / 256));
	        pixels[i - 3] = palette[0];
	        pixels[i - 2] = palette[1];
	        pixels[i - 1] = palette[2];
	        pixels[i] = alpha;
	      }
	    }
	  };

	  Heatmap.prototype._prepareGreyScaleBlurredCircle = function _prepareGreyScaleBlurredCircle(r, blur) {
	    var self = this;
	    var circleCanvas = self.get(GRAY_SCALE_BLURRED_CANVAS);
	    if (!circleCanvas) {
	      circleCanvas = document.createElement('canvas');
	      self.set(GRAY_SCALE_BLURRED_CANVAS, circleCanvas);
	    }
	    var r2 = r + blur;
	    var ctx = circleCanvas.getContext('2d');
	    circleCanvas.width = circleCanvas.height = r2 * 2;
	    ctx.clearRect(0, 0, circleCanvas.width, circleCanvas.height);
	    // ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
	    ctx.shadowOffsetX = ctx.shadowOffsetY = r2 * 2;
	    ctx.shadowBlur = blur;
	    ctx.shadowColor = 'black';

	    ctx.beginPath();
	    ctx.arc(-r2, -r2, r, 0, Math.PI * 2, true);
	    ctx.closePath();
	    ctx.fill();
	  };

	  Heatmap.prototype._drawGrayScaleBlurredCircle = function _drawGrayScaleBlurredCircle(x, y, r, alpha, ctx) {
	    var self = this;
	    var circleCanvas = self.get(GRAY_SCALE_BLURRED_CANVAS);
	    ctx.globalAlpha = alpha;
	    ctx.drawImage(circleCanvas, x - r, y - r);
	  };

	  Heatmap.prototype._getShadowCanvasCtx = function _getShadowCanvasCtx() {
	    var self = this;
	    var canvas = self.get(SHADOW_CANVAS);
	    if (!canvas) {
	      canvas = document.createElement('canvas');
	      self.set(SHADOW_CANVAS, canvas);
	    }

	    var _self$get = self.get('coord'),
	        width = _self$get.width,
	        height = _self$get.height;

	    canvas.width = width;
	    canvas.height = height;
	    return canvas.getContext('2d');
	  };

	  Heatmap.prototype._clearShadowCanvasCtx = function _clearShadowCanvasCtx() {
	    var ctx = this._getShadowCanvasCtx();
	    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height);
	  };

	  Heatmap.prototype._getImageShape = function _getImageShape() {
	    var self = this;
	    var imageShape = self.get(IMAGE_SHAPE);
	    if (imageShape) {
	      return imageShape;
	    }
	    var container = self.get('container');
	    imageShape = container.addShape('Image', {});
	    self.set(IMAGE_SHAPE, imageShape);
	    return imageShape;
	  };

	  Heatmap.prototype.drawWithRange = function drawWithRange(range) {
	    var self = this;

	    // canvas size

	    var _self$get2 = self.get('coord'),
	        start = _self$get2.start,
	        end = _self$get2.end,
	        width = _self$get2.width,
	        height = _self$get2.height;

	    // value, range, etc


	    var valueField = self.getAttr('color').field;
	    var size = self.get(HEATMAP_SIZE);

	    // prepare shadow canvas context
	    self._clearShadowCanvasCtx();
	    var ctx = self._getShadowCanvasCtx();

	    // filter data
	    var data = self.get(MAPPED_DATA);
	    if (range) {
	      data = data.filter(function (row) {
	        return row[ORIGIN_FIELD][valueField] <= range[1] && row[ORIGIN_FIELD][valueField] >= range[0];
	      });
	    }

	    // step1. draw points with shadow
	    var scale = self._getScale(valueField);
	    for (var i = 0; i < data.length; i++) {
	      var obj = data[i];
	      var cfg = self.getDrawCfg(obj);
	      var alpha = scale.scale(obj[ORIGIN_FIELD][valueField]);
	      self._drawGrayScaleBlurredCircle(cfg.x - start.x, cfg.y - end.y, size.radius + size.blur, alpha, ctx);
	    }

	    // step2. convert pixels
	    var colored = ctx.getImageData(0, 0, width, height);
	    self._clearShadowCanvasCtx();
	    self._colorize(colored);
	    ctx.putImageData(colored, 0, 0);
	    var imageShape = self._getImageShape();
	    imageShape.attr('x', start.x);
	    imageShape.attr('y', end.y);
	    imageShape.attr('width', width);
	    imageShape.attr('height', height);
	    imageShape.attr('img', ctx.canvas);
	  };

	  Heatmap.prototype.draw = function draw(data /* , container, shapeFactory, index */) {
	    var self = this;
	    self.set(MAPPED_DATA, data);

	    self._prepareRange();
	    self._prepareSize();

	    var size = self.get(HEATMAP_SIZE);
	    self._prepareGreyScaleBlurredCircle(size.radius, size.blur);

	    var range = self.get(VALUE_RANGE);
	    self.drawWithRange(range);
	    // super.draw(data, container, shapeFactory, index);
	  };

	  return Heatmap;
	}(GeomBase);

	GeomBase.Heatmap = Heatmap;

	module.exports = Heatmap;

	/***/ }),
	/* 386 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 多边形
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	__webpack_require__(387);

	var Polygon = function (_GeomBase) {
	  _inherits(Polygon, _GeomBase);

	  function Polygon() {
	    _classCallCheck(this, Polygon);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Polygon.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'polygon';
	    cfg.shapeType = 'polygon';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  Polygon.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    var self = this;
	    var x = cfg.x;
	    var y = cfg.y;
	    var temp = void 0;
	    if (!(Util.isArray(x) && Util.isArray(y))) {
	      // x y 都是数组时，不做处理
	      var xScale = self.getXScale();
	      var yScale = self.getYScale();
	      var xCount = xScale.values ? xScale.values.length : xScale.ticks.length;
	      var yCount = yScale.values ? yScale.values.length : yScale.ticks.length;
	      var xOffset = 0.5 * 1 / xCount;
	      var yOffset = 0.5 * 1 / yCount;
	      if (xScale.isCategory && yScale.isCategory) {
	        // 如果x,y都是分类
	        x = [x - xOffset, x - xOffset, x + xOffset, x + xOffset];
	        y = [y - yOffset, y + yOffset, y + yOffset, y - yOffset];
	      } else if (Util.isArray(x)) {
	        // x 是数组
	        temp = x;
	        x = [temp[0], temp[0], temp[1], temp[1]];
	        y = [y - yOffset / 2, y + yOffset / 2, y + yOffset / 2, y - yOffset / 2];
	      } else if (Util.isArray(y)) {
	        // y 是数组
	        temp = y;
	        y = [temp[0], temp[1], temp[1], temp[0]];
	        x = [x - xOffset / 2, x - xOffset / 2, x + xOffset / 2, x + xOffset / 2];
	      }
	      cfg.x = x;
	      cfg.y = y;
	    }
	    return cfg;
	  };

	  return Polygon;
	}(GeomBase);

	GeomBase.Polygon = Polygon;

	module.exports = Polygon;

	/***/ }),
	/* 387 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview line shapes
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 * @author huangtonger@aliyun.com
	 # @author liuye10@yahoo.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.polygon;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getHollowAttrs(cfg) {
	  var defaultCfg = Global.shape.hollowPolygon;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getPath(points) {
	  var flag = points[0];
	  var i = 1;

	  var path = [['M', flag.x, flag.y]];

	  while (i < points.length) {
	    var c = points[i];
	    if (c.x !== points[i - 1].x || c.y !== points[i - 1].y) {
	      path.push(['L', c.x, c.y]);
	      if (c.x === flag.x && c.y === flag.y && i < points.length - 1) {
	        flag = points[i + 1];
	        path.push(['Z']);
	        path.push(['M', flag.x, flag.y]);
	        i++;
	      }
	    }
	    i++;
	  }

	  if (!Util.isEqual(path[path.length - 1], flag)) {
	    path.push(['L', flag.x, flag.y]);
	  }

	  path.push(['Z']);

	  return path;
	}

	// regist line geom
	var Polygon = Shape.registerFactory('polygon', {
	  defaultShapeType: 'polygon',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    Util.each(pointInfo.x, function (subX, index) {
	      var subY = pointInfo.y[index];
	      points.push({
	        x: subX,
	        y: subY
	      });
	    });
	    return points;
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 1;
	    if (type === 'hollow') {
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }

	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      // lineWidth,
	      fillOpacity: opacity - 0.08
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	Shape.registerShape('polygon', 'polygon', {
	  draw: function draw(cfg, container) {
	    if (!Util.isEmpty(cfg.points)) {
	      var attrs = getAttrs(cfg);
	      var path = getPath(cfg.points);
	      path = this.parsePath(path);
	      return container.addShape('path', {
	        attrs: Util.mix(attrs, {
	          path: path
	        })
	      });
	    }
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('polygon', 'hollow', {
	  draw: function draw(cfg, container) {
	    if (!Util.isEmpty(cfg.points)) {
	      var attrs = getHollowAttrs(cfg);
	      var path = getPath(cfg.points);
	      path = this.parsePath(path);

	      return container.addShape('path', {
	        attrs: Util.mix(attrs, {
	          path: path
	        })
	      });
	    }
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'square',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Polygon;

	/***/ }),
	/* 388 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview 自定义图形
	 * @author dxq613@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Util = __webpack_require__(0);
	var SizeMixin = __webpack_require__(334);
	__webpack_require__(389);

	var Schema = function (_GeomBase) {
	  _inherits(Schema, _GeomBase);

	  /**
	   * 获取默认的配置属性
	   * @protected
	   * @return {Object} 默认属性
	   */
	  Schema.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'schema';
	    cfg.shapeType = 'schema';
	    cfg.generatePoints = true;
	    return cfg;
	  };

	  function Schema(cfg) {
	    _classCallCheck(this, Schema);

	    var _this = _possibleConstructorReturn(this, _GeomBase.call(this, cfg));

	    Util.assign(_this, SizeMixin);
	    return _this;
	  }

	  Schema.prototype.createShapePointsCfg = function createShapePointsCfg(obj) {
	    var cfg = _GeomBase.prototype.createShapePointsCfg.call(this, obj);
	    cfg.size = this.getNormalizedSize(obj);
	    return cfg;
	  };

	  return Schema;
	}(GeomBase);

	var SchemaDodge = function (_Schema) {
	  _inherits(SchemaDodge, _Schema);

	  function SchemaDodge() {
	    _classCallCheck(this, SchemaDodge);

	    return _possibleConstructorReturn(this, _Schema.apply(this, arguments));
	  }

	  SchemaDodge.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Schema.prototype.getDefaultCfg.call(this);
	    cfg.hasDefaultAdjust = true;
	    cfg.adjusts = [{ type: 'dodge' }];
	    return cfg;
	  };

	  return SchemaDodge;
	}(Schema);

	Schema.Dodge = SchemaDodge;

	GeomBase.Schema = Schema;
	GeomBase.SchemaDodge = SchemaDodge;

	module.exports = Schema;

	/***/ }),
	/* 389 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview 自定义的 shape
	 * @author dxq613@gmail.com
	 * @author sima.zhang1990@gmail.com
	 */

	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	function _parseValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  var min = value[0]; // 最小值
	  var max = value[value.length - 1]; // 最大值
	  var min1 = value.length > 1 ? value[1] : min;
	  var max1 = value.length > 3 ? value[3] : max;
	  var median = value.length > 2 ? value[2] : min1;

	  return {
	    min: min, // 最小值
	    max: max, // 最大值
	    min1: min1,
	    max1: max1,
	    median: median
	  };
	}

	function addPoints(from, to) {
	  Util.each(from, function (subArr) {
	    to.push({
	      x: subArr[0],
	      y: subArr[1]
	    });
	  });
	}

	function getAttrs(cfg) {
	  var defaultAttrs = Global.shape.schema;
	  var attrs = Util.mix({}, defaultAttrs, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getFillAttrs(cfg) {
	  var defaultAttrs = Global.shape.schema;
	  var attrs = Util.mix({}, defaultAttrs, {
	    fill: cfg.color,
	    stroke: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return attrs;
	}

	function getBoxPoints(x, y, width) {
	  var points = [];
	  var pointsArray = void 0;
	  var obj = void 0;
	  if (Util.isArray(y)) {
	    // 2维
	    obj = _parseValue(y);
	    pointsArray = [[x - width / 2, obj.max], [x + width / 2, obj.max], [x, obj.max], [x, obj.max1], [x - width / 2, obj.min1], [x - width / 2, obj.max1], [x + width / 2, obj.max1], [x + width / 2, obj.min1], [x, obj.min1], [x, obj.min], [x - width / 2, obj.min], [x + width / 2, obj.min], [x - width / 2, obj.median], [x + width / 2, obj.median]];
	  } else {
	    // 只有一个维度
	    y = y || 0.5;
	    obj = _parseValue(x);
	    pointsArray = [[obj.min, y - width / 2], [obj.min, y + width / 2], [obj.min, y], [obj.min1, y], [obj.min1, y - width / 2], [obj.min1, y + width / 2], [obj.max1, y + width / 2], [obj.max1, y - width / 2], [obj.max1, y], [obj.max, y], [obj.max, y - width / 2], [obj.max, y + width / 2], [obj.median, y - width / 2], [obj.median, y + width / 2]];
	  }
	  addPoints(pointsArray, points);
	  return points;
	}

	function _sortValue(value) {
	  if (!Util.isArray(value)) {
	    value = [value];
	  }
	  // 从大到小排序
	  var sorted = value.sort(function (a, b) {
	    return a < b ? 1 : -1;
	  });

	  var length = sorted.length;
	  if (length < 4) {
	    var min = sorted[length - 1];
	    for (var i = 0; i < 4 - length; i++) {
	      sorted.push(min);
	    }
	  }

	  return sorted;
	}

	// 获取K线图的points
	function getCandlePoints(x, y, width) {
	  var yValues = _sortValue(y);
	  var points = [{
	    x: x,
	    y: yValues[0]
	  }, {
	    x: x,
	    y: yValues[1]
	  }, {
	    x: x - width / 2,
	    y: yValues[2]
	  }, {
	    x: x - width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[1]
	  }, {
	    x: x + width / 2,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[2]
	  }, {
	    x: x,
	    y: yValues[3]
	  }]; // 按照顺时针连接
	  return points;
	}

	function getBoxPath(points) {
	  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['M', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['L', points[6].x, points[6].y], ['L', points[7].x, points[7].y], ['L', points[4].x, points[4].y], // 封闭 z
	  ['Z'], ['M', points[8].x, points[8].y], ['L', points[9].x, points[9].y], ['M', points[10].x, points[10].y], ['L', points[11].x, points[11].y], ['M', points[12].x, points[12].y], ['L', points[13].x, points[13].y]];
	  return path;
	}

	function getCandlePath(points) {
	  var path = [['M', points[0].x, points[0].y], ['L', points[1].x, points[1].y], ['M', points[2].x, points[2].y], ['L', points[3].x, points[3].y], ['L', points[4].x, points[4].y], ['L', points[5].x, points[5].y], ['Z'], ['M', points[6].x, points[6].y], ['L', points[7].x, points[7].y]];
	  return path;
	}

	var Schema = Shape.registerFactory('schema', {
	  defaultShapeType: '',
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    if (type === 'box') {
	      var lineWidth = cfg.lineWidth || 1;
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }
	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      fillOpacity: opacity - 0.15,
	      strokeOpacity: opacity - 0.15
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	// 箱线图
	Shape.registerShape('schema', 'box', {
	  getPoints: function getPoints(pointInfo) {
	    return getBoxPoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getAttrs(cfg);
	    var path = getBoxPath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return {
	      symbol: function symbol(x, y, r, ctx) {
	        var yValues = [y - 6, y - 3, y, y + 3, y + 6];
	        var points = getBoxPoints(x, yValues, r);
	        ctx.moveTo(points[0].x + 1, points[0].y);
	        ctx.lineTo(points[1].x - 1, points[1].y);
	        ctx.moveTo(points[2].x, points[2].y);
	        ctx.lineTo(points[3].x, points[3].y);
	        ctx.moveTo(points[4].x, points[4].y);
	        ctx.lineTo(points[5].x, points[5].y);
	        ctx.lineTo(points[6].x, points[6].y);
	        ctx.lineTo(points[7].x, points[7].y);
	        ctx.lineTo(points[4].x, points[4].y);
	        ctx.closePath();
	        ctx.moveTo(points[8].x, points[8].y);
	        ctx.lineTo(points[9].x, points[9].y);
	        ctx.moveTo(points[10].x + 1, points[10].y);
	        ctx.lineTo(points[11].x - 1, points[11].y);
	        ctx.moveTo(points[12].x, points[12].y);
	        ctx.lineTo(points[13].x, points[13].y);
	      },

	      radius: 6,
	      lineWidth: 1,
	      stroke: cfg.color
	    };
	  }
	});

	// K线
	Shape.registerShape('schema', 'candle', {
	  getPoints: function getPoints(pointInfo) {
	    return getCandlePoints(pointInfo.x, pointInfo.y, pointInfo.size);
	  },
	  draw: function draw(cfg, container) {
	    var attrs = getFillAttrs(cfg);
	    var path = getCandlePath(cfg.points);
	    path = this.parsePath(path);
	    return container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: path
	      })
	    });
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return {
	      symbol: function symbol(x, y, r, ctx) {
	        y = [y + 7.5, y + 3, y - 3, y - 7.5];
	        var points = getCandlePoints(x, y, r);
	        ctx.moveTo(points[0].x, points[0].y);
	        ctx.lineTo(points[1].x, points[1].y);
	        ctx.moveTo(points[2].x, points[2].y);
	        ctx.lineTo(points[3].x, points[3].y);
	        ctx.lineTo(points[4].x, points[4].y);
	        ctx.lineTo(points[5].x, points[5].y);
	        ctx.closePath();
	        ctx.moveTo(points[6].x, points[6].y);
	        ctx.lineTo(points[7].x, points[7].y);
	      },

	      lineWidth: 1,
	      stroke: cfg.color,
	      fill: cfg.color,
	      radius: 6
	    };
	  }
	});

	module.exports = Schema;

	/***/ }),
	/* 390 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Venn Diagram
	 * @author leungwensen@gmail.com
	 */
	var GeomBase = __webpack_require__(16);
	var Attr = __webpack_require__(117);
	var Global = __webpack_require__(2);
	var Util = __webpack_require__(0);

	var _require = __webpack_require__(391),
	    venn = _require.venn,
	    scaleSolution = _require.scaleSolution,
	    circlePath = _require.circlePath,
	    intersectionAreaPath = _require.intersectionAreaPath,
	    computeTextCentres = _require.computeTextCentres;

	__webpack_require__(473);

	function parseFields(field) {
	  if (Util.isArray(field)) {
	    return field;
	  }
	  if (Util.isString(field)) {
	    return field.split('*');
	  }
	  return [field];
	}

	var Venn = function (_GeomBase) {
	  _inherits(Venn, _GeomBase);

	  function Venn() {
	    _classCallCheck(this, Venn);

	    return _possibleConstructorReturn(this, _GeomBase.apply(this, arguments));
	  }

	  /**
	   * get default configuration
	   * @protected
	   * @return {Object} configuration
	   */
	  Venn.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _GeomBase.prototype.getDefaultCfg.call(this);
	    cfg.type = 'venn';
	    cfg.shapeType = 'venn';
	    cfg.generatePoints = true;
	    // super.draw(data, container, shapeFactory, index);
	    return cfg;
	  };

	  Venn.prototype._initAttrs = function _initAttrs() {
	    var self = this;
	    var view = self.get('view');
	    var attrs = this.get('attrs');
	    var attrOptions = self.get('attrOptions');
	    var labelCfg = self.get('labelCfg');
	    var data = self.get('data');
	    var sizeField = attrOptions.size ? attrOptions.size.field : 'size';
	    var labelField = labelCfg ? labelCfg.fields[0] : 'sets';
	    self.set('labelCfg', null);
	    // prepare data
	    data.forEach(function (row) {
	      row.sets = row[labelField];
	      row.size = row[sizeField];
	    });
	    var solution = venn(data);
	    // scaling
	    var coord = self.get('coord');
	    var xRange = [Math.min(coord.x.end, coord.x.start), Math.max(coord.x.end, coord.x.start)];
	    var yRange = [Math.min(coord.y.end, coord.y.start), Math.max(coord.y.end, coord.y.start)];
	    var width = xRange[1] - xRange[0];
	    var height = yRange[1] - yRange[0];
	    var styleOptions = self.get('styleOptions');
	    var padding = styleOptions && Util.isObject(styleOptions.style) ? styleOptions.style.padding : 0;
	    if (!Util.isFinite(padding)) {
	      padding = 0;
	    }
	    var circles = scaleSolution(solution, width, height, padding);
	    var textCenters = computeTextCentres(circles, data);
	    data.forEach(function (row) {
	      var sets = row.sets;
	      var id = sets.join(',');
	      row.id = id;
	      if (sets.length === 1) {
	        var circle = circles[id];
	        row.path = circlePath(circle.x, circle.y, circle.radius);
	        Util.assign(row, circle);
	      } else {
	        var setCircles = sets.map(function (set) {
	          return circles[set];
	        });
	        var path = intersectionAreaPath(setCircles);
	        if (!/[zZ]$/.test(path)) {
	          path += 'Z';
	        }
	        row.path = path;
	        var center = textCenters[id] || { x: 0, y: 0 };
	        Util.assign(row, center);
	      }
	    });
	    // x, y scales
	    view.set('data', data);
	    self.set('data', data);
	    self.set('dataArray', data);
	    self.position('x*y');

	    // init attrs
	    for (var type in attrOptions) {
	      if (attrOptions.hasOwnProperty(type)) {
	        var option = attrOptions[type];
	        var className = Util.upperFirst(type);
	        var fields = parseFields(option.field);
	        if (type === 'position') {
	          option.coord = coord;
	        }
	        var scales = [];
	        for (var i = 0; i < fields.length; i++) {
	          var field = fields[i];
	          var scale = self._createScale(field, data);
	          if (type === 'color' && Util.isNil(option.values)) {
	            // 设置 color 的默认色值
	            if (scale.values.length <= 8) {
	              option.values = Global.colors;
	            } else if (scale.values.length <= 16) {
	              option.values = Global.colors_16;
	            } else {
	              option.values = Global.colors_24;
	            }

	            if (Util.isNil(option.values)) {
	              option.values = Global.colors; // 防止主题没有声明诸如 colors_pie 的属性
	            }
	          }
	          scales.push(scale);
	        }
	        if (type === 'position') {
	          scales[0].change({
	            nice: false,
	            min: xRange[0],
	            max: xRange[1]
	          });
	          scales[1].change({
	            nice: false,
	            min: yRange[0],
	            max: yRange[1]
	          });
	        }
	        option.scales = scales;
	        var attr = new Attr[className](option);
	        attrs[type] = attr;
	      }
	    }
	  };

	  Venn.prototype.paint = function paint() {
	    _GeomBase.prototype.paint.call(this);
	    var self = this;
	    var dataArray = self.get('dataArray');
	    var shapeContainer = self.get('shapeContainer');
	    // add labels
	    dataArray.forEach(function (row) {
	      var cfg = self.getDrawCfg(row[0]);
	      var origin = cfg.origin._origin;
	      shapeContainer.addShape('text', {
	        attrs: Util.mix({}, {
	          x: origin.x,
	          y: origin.y,
	          text: origin.label || '',
	          fontSize: 18,
	          fill: cfg.shape === 'hollow' ? cfg.color : '#666',
	          textAlign: 'center',
	          textBaseline: 'middle'
	        }, cfg.style ? cfg.style.textStyle : {})
	      });
	    });
	  };

	  return Venn;
	}(GeomBase);

	GeomBase.Venn = Venn;

	module.exports = Venn;

	/***/ }),
	/* 391 */
	/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

	(function (global, factory) {
	    ( false ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined' ? factory(exports, __webpack_require__(59), __webpack_require__(366)) :  true ? !(__WEBPACK_AMD_DEFINE_ARRAY__ = [exports, __webpack_require__(59), __webpack_require__(366)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
					__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
					(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
					__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : factory(global.venn = {}, global.d3, global.d3);
	})(this, function (exports, d3Selection, d3Transition) {
	    'use strict';

	    var SMALL = 1e-10;

	    /** Returns the intersection area of a bunch of circles (where each circle
	     is an object having an x,y and radius property) */
	    function intersectionArea(circles, stats) {
	        // get all the intersection points of the circles
	        var intersectionPoints = getIntersectionPoints(circles);

	        // filter out points that aren't included in all the circles
	        var innerPoints = intersectionPoints.filter(function (p) {
	            return containedInCircles(p, circles);
	        });

	        var arcArea = 0,
	            polygonArea = 0,
	            arcs = [],
	            i;

	        // if we have intersection points that are within all the circles,
	        // then figure out the area contained by them
	        if (innerPoints.length > 1) {
	            // sort the points by angle from the center of the polygon, which lets
	            // us just iterate over points to get the edges
	            var center = getCenter(innerPoints);
	            for (i = 0; i < innerPoints.length; ++i) {
	                var p = innerPoints[i];
	                p.angle = Math.atan2(p.x - center.x, p.y - center.y);
	            }
	            innerPoints.sort(function (a, b) {
	                return b.angle - a.angle;
	            });

	            // iterate over all points, get arc between the points
	            // and update the areas
	            var p2 = innerPoints[innerPoints.length - 1];
	            for (i = 0; i < innerPoints.length; ++i) {
	                var p1 = innerPoints[i];

	                // polygon area updates easily ...
	                polygonArea += (p2.x + p1.x) * (p1.y - p2.y);

	                // updating the arc area is a little more involved
	                var midPoint = { x: (p1.x + p2.x) / 2,
	                    y: (p1.y + p2.y) / 2 },
	                    arc = null;

	                for (var j = 0; j < p1.parentIndex.length; ++j) {
	                    if (p2.parentIndex.indexOf(p1.parentIndex[j]) > -1) {
	                        // figure out the angle halfway between the two points
	                        // on the current circle
	                        var circle = circles[p1.parentIndex[j]],
	                            a1 = Math.atan2(p1.x - circle.x, p1.y - circle.y),
	                            a2 = Math.atan2(p2.x - circle.x, p2.y - circle.y);

	                        var angleDiff = a2 - a1;
	                        if (angleDiff < 0) {
	                            angleDiff += 2 * Math.PI;
	                        }

	                        // and use that angle to figure out the width of the
	                        // arc
	                        var a = a2 - angleDiff / 2,
	                            width = distance(midPoint, {
	                            x: circle.x + circle.radius * Math.sin(a),
	                            y: circle.y + circle.radius * Math.cos(a)
	                        });

	                        // clamp the width to the largest is can actually be
	                        // (sometimes slightly overflows because of FP errors)
	                        if (width > circle.radius * 2) {
	                            width = circle.radius * 2;
	                        }

	                        // pick the circle whose arc has the smallest width
	                        if (arc === null || arc.width > width) {
	                            arc = { circle: circle,
	                                width: width,
	                                p1: p1,
	                                p2: p2 };
	                        }
	                    }
	                }

	                if (arc !== null) {
	                    arcs.push(arc);
	                    arcArea += circleArea(arc.circle.radius, arc.width);
	                    p2 = p1;
	                }
	            }
	        } else {
	            // no intersection points, is either disjoint - or is completely
	            // overlapped. figure out which by examining the smallest circle
	            var smallest = circles[0];
	            for (i = 1; i < circles.length; ++i) {
	                if (circles[i].radius < smallest.radius) {
	                    smallest = circles[i];
	                }
	            }

	            // make sure the smallest circle is completely contained in all
	            // the other circles
	            var disjoint = false;
	            for (i = 0; i < circles.length; ++i) {
	                if (distance(circles[i], smallest) > Math.abs(smallest.radius - circles[i].radius)) {
	                    disjoint = true;
	                    break;
	                }
	            }

	            if (disjoint) {
	                arcArea = polygonArea = 0;
	            } else {
	                arcArea = smallest.radius * smallest.radius * Math.PI;
	                arcs.push({ circle: smallest,
	                    p1: { x: smallest.x, y: smallest.y + smallest.radius },
	                    p2: { x: smallest.x - SMALL, y: smallest.y + smallest.radius },
	                    width: smallest.radius * 2 });
	            }
	        }

	        polygonArea /= 2;
	        if (stats) {
	            stats.area = arcArea + polygonArea;
	            stats.arcArea = arcArea;
	            stats.polygonArea = polygonArea;
	            stats.arcs = arcs;
	            stats.innerPoints = innerPoints;
	            stats.intersectionPoints = intersectionPoints;
	        }

	        return arcArea + polygonArea;
	    }

	    /** returns whether a point is contained by all of a list of circles */
	    function containedInCircles(point, circles) {
	        for (var i = 0; i < circles.length; ++i) {
	            if (distance(point, circles[i]) > circles[i].radius + SMALL) {
	                return false;
	            }
	        }
	        return true;
	    }

	    /** Gets all intersection points between a bunch of circles */
	    function getIntersectionPoints(circles) {
	        var ret = [];
	        for (var i = 0; i < circles.length; ++i) {
	            for (var j = i + 1; j < circles.length; ++j) {
	                var intersect = circleCircleIntersection(circles[i], circles[j]);
	                for (var k = 0; k < intersect.length; ++k) {
	                    var p = intersect[k];
	                    p.parentIndex = [i, j];
	                    ret.push(p);
	                }
	            }
	        }
	        return ret;
	    }

	    /** Circular segment area calculation. See http://mathworld.wolfram.com/CircularSegment.html */
	    function circleArea(r, width) {
	        return r * r * Math.acos(1 - width / r) - (r - width) * Math.sqrt(width * (2 * r - width));
	    }

	    /** euclidean distance between two points */
	    function distance(p1, p2) {
	        return Math.sqrt((p1.x - p2.x) * (p1.x - p2.x) + (p1.y - p2.y) * (p1.y - p2.y));
	    }

	    /** Returns the overlap area of two circles of radius r1 and r2 - that
	    have their centers separated by distance d. Simpler faster
	    circle intersection for only two circles */
	    function circleOverlap(r1, r2, d) {
	        // no overlap
	        if (d >= r1 + r2) {
	            return 0;
	        }

	        // completely overlapped
	        if (d <= Math.abs(r1 - r2)) {
	            return Math.PI * Math.min(r1, r2) * Math.min(r1, r2);
	        }

	        var w1 = r1 - (d * d - r2 * r2 + r1 * r1) / (2 * d),
	            w2 = r2 - (d * d - r1 * r1 + r2 * r2) / (2 * d);
	        return circleArea(r1, w1) + circleArea(r2, w2);
	    }

	    /** Given two circles (containing a x/y/radius attributes),
	    returns the intersecting points if possible.
	    note: doesn't handle cases where there are infinitely many
	    intersection points (circles are equivalent):, or only one intersection point*/
	    function circleCircleIntersection(p1, p2) {
	        var d = distance(p1, p2),
	            r1 = p1.radius,
	            r2 = p2.radius;

	        // if to far away, or self contained - can't be done
	        if (d >= r1 + r2 || d <= Math.abs(r1 - r2)) {
	            return [];
	        }

	        var a = (r1 * r1 - r2 * r2 + d * d) / (2 * d),
	            h = Math.sqrt(r1 * r1 - a * a),
	            x0 = p1.x + a * (p2.x - p1.x) / d,
	            y0 = p1.y + a * (p2.y - p1.y) / d,
	            rx = -(p2.y - p1.y) * (h / d),
	            ry = -(p2.x - p1.x) * (h / d);

	        return [{ x: x0 + rx, y: y0 - ry }, { x: x0 - rx, y: y0 + ry }];
	    }

	    /** Returns the center of a bunch of points */
	    function getCenter(points) {
	        var center = { x: 0, y: 0 };
	        for (var i = 0; i < points.length; ++i) {
	            center.x += points[i].x;
	            center.y += points[i].y;
	        }
	        center.x /= points.length;
	        center.y /= points.length;
	        return center;
	    }

	    /** finds the zeros of a function, given two starting points (which must
	     * have opposite signs */
	    function bisect(f, a, b, parameters) {
	        parameters = parameters || {};
	        var maxIterations = parameters.maxIterations || 100,
	            tolerance = parameters.tolerance || 1e-10,
	            fA = f(a),
	            fB = f(b),
	            delta = b - a;

	        if (fA * fB > 0) {
	            throw "Initial bisect points must have opposite signs";
	        }

	        if (fA === 0) return a;
	        if (fB === 0) return b;

	        for (var i = 0; i < maxIterations; ++i) {
	            delta /= 2;
	            var mid = a + delta,
	                fMid = f(mid);

	            if (fMid * fA >= 0) {
	                a = mid;
	            }

	            if (Math.abs(delta) < tolerance || fMid === 0) {
	                return mid;
	            }
	        }
	        return a + delta;
	    }

	    // need some basic operations on vectors, rather than adding a dependency,
	    // just define here
	    function zeros(x) {
	        var r = new Array(x);for (var i = 0; i < x; ++i) {
	            r[i] = 0;
	        }return r;
	    }
	    function zerosM(x, y) {
	        return zeros(x).map(function () {
	            return zeros(y);
	        });
	    }

	    function dot(a, b) {
	        var ret = 0;
	        for (var i = 0; i < a.length; ++i) {
	            ret += a[i] * b[i];
	        }
	        return ret;
	    }

	    function norm2(a) {
	        return Math.sqrt(dot(a, a));
	    }

	    function scale(ret, value, c) {
	        for (var i = 0; i < value.length; ++i) {
	            ret[i] = value[i] * c;
	        }
	    }

	    function weightedSum(ret, w1, v1, w2, v2) {
	        for (var j = 0; j < ret.length; ++j) {
	            ret[j] = w1 * v1[j] + w2 * v2[j];
	        }
	    }

	    /** minimizes a function using the downhill simplex method */
	    function nelderMead(f, x0, parameters) {
	        parameters = parameters || {};

	        var maxIterations = parameters.maxIterations || x0.length * 200,
	            nonZeroDelta = parameters.nonZeroDelta || 1.05,
	            zeroDelta = parameters.zeroDelta || 0.001,
	            minErrorDelta = parameters.minErrorDelta || 1e-6,
	            minTolerance = parameters.minErrorDelta || 1e-5,
	            rho = parameters.rho !== undefined ? parameters.rho : 1,
	            chi = parameters.chi !== undefined ? parameters.chi : 2,
	            psi = parameters.psi !== undefined ? parameters.psi : -0.5,
	            sigma = parameters.sigma !== undefined ? parameters.sigma : 0.5,
	            maxDiff;

	        // initialize simplex.
	        var N = x0.length,
	            simplex = new Array(N + 1);
	        simplex[0] = x0;
	        simplex[0].fx = f(x0);
	        simplex[0].id = 0;
	        for (var i = 0; i < N; ++i) {
	            var point = x0.slice();
	            point[i] = point[i] ? point[i] * nonZeroDelta : zeroDelta;
	            simplex[i + 1] = point;
	            simplex[i + 1].fx = f(point);
	            simplex[i + 1].id = i + 1;
	        }

	        function updateSimplex(value) {
	            for (var i = 0; i < value.length; i++) {
	                simplex[N][i] = value[i];
	            }
	            simplex[N].fx = value.fx;
	        }

	        var sortOrder = function sortOrder(a, b) {
	            return a.fx - b.fx;
	        };

	        var centroid = x0.slice(),
	            reflected = x0.slice(),
	            contracted = x0.slice(),
	            expanded = x0.slice();

	        for (var iteration = 0; iteration < maxIterations; ++iteration) {
	            simplex.sort(sortOrder);

	            if (parameters.history) {
	                // copy the simplex (since later iterations will mutate) and
	                // sort it to have a consistent order between iterations
	                var sortedSimplex = simplex.map(function (x) {
	                    var state = x.slice();
	                    state.fx = x.fx;
	                    state.id = x.id;
	                    return state;
	                });
	                sortedSimplex.sort(function (a, b) {
	                    return a.id - b.id;
	                });

	                parameters.history.push({ x: simplex[0].slice(),
	                    fx: simplex[0].fx,
	                    simplex: sortedSimplex });
	            }

	            maxDiff = 0;
	            for (i = 0; i < N; ++i) {
	                maxDiff = Math.max(maxDiff, Math.abs(simplex[0][i] - simplex[1][i]));
	            }

	            if (Math.abs(simplex[0].fx - simplex[N].fx) < minErrorDelta && maxDiff < minTolerance) {
	                break;
	            }

	            // compute the centroid of all but the worst point in the simplex
	            for (i = 0; i < N; ++i) {
	                centroid[i] = 0;
	                for (var j = 0; j < N; ++j) {
	                    centroid[i] += simplex[j][i];
	                }
	                centroid[i] /= N;
	            }

	            // reflect the worst point past the centroid  and compute loss at reflected
	            // point
	            var worst = simplex[N];
	            weightedSum(reflected, 1 + rho, centroid, -rho, worst);
	            reflected.fx = f(reflected);

	            // if the reflected point is the best seen, then possibly expand
	            if (reflected.fx < simplex[0].fx) {
	                weightedSum(expanded, 1 + chi, centroid, -chi, worst);
	                expanded.fx = f(expanded);
	                if (expanded.fx < reflected.fx) {
	                    updateSimplex(expanded);
	                } else {
	                    updateSimplex(reflected);
	                }
	            }

	            // if the reflected point is worse than the second worst, we need to
	            // contract
	            else if (reflected.fx >= simplex[N - 1].fx) {
	                    var shouldReduce = false;

	                    if (reflected.fx > worst.fx) {
	                        // do an inside contraction
	                        weightedSum(contracted, 1 + psi, centroid, -psi, worst);
	                        contracted.fx = f(contracted);
	                        if (contracted.fx < worst.fx) {
	                            updateSimplex(contracted);
	                        } else {
	                            shouldReduce = true;
	                        }
	                    } else {
	                        // do an outside contraction
	                        weightedSum(contracted, 1 - psi * rho, centroid, psi * rho, worst);
	                        contracted.fx = f(contracted);
	                        if (contracted.fx < reflected.fx) {
	                            updateSimplex(contracted);
	                        } else {
	                            shouldReduce = true;
	                        }
	                    }

	                    if (shouldReduce) {
	                        // if we don't contract here, we're done
	                        if (sigma >= 1) break;

	                        // do a reduction
	                        for (i = 1; i < simplex.length; ++i) {
	                            weightedSum(simplex[i], 1 - sigma, simplex[0], sigma, simplex[i]);
	                            simplex[i].fx = f(simplex[i]);
	                        }
	                    }
	                } else {
	                    updateSimplex(reflected);
	                }
	        }

	        simplex.sort(sortOrder);
	        return { fx: simplex[0].fx,
	            x: simplex[0] };
	    }

	    /// searches along line 'pk' for a point that satifies the wolfe conditions
	    /// See 'Numerical Optimization' by Nocedal and Wright p59-60
	    /// f : objective function
	    /// pk : search direction
	    /// current: object containing current gradient/loss
	    /// next: output: contains next gradient/loss
	    /// returns a: step size taken
	    function wolfeLineSearch(f, pk, current, next, a, c1, c2) {
	        var phi0 = current.fx,
	            phiPrime0 = dot(current.fxprime, pk),
	            phi = phi0,
	            phi_old = phi0,
	            phiPrime = phiPrime0,
	            a0 = 0;

	        a = a || 1;
	        c1 = c1 || 1e-6;
	        c2 = c2 || 0.1;

	        function zoom(a_lo, a_high, phi_lo) {
	            for (var iteration = 0; iteration < 16; ++iteration) {
	                a = (a_lo + a_high) / 2;
	                weightedSum(next.x, 1.0, current.x, a, pk);
	                phi = next.fx = f(next.x, next.fxprime);
	                phiPrime = dot(next.fxprime, pk);

	                if (phi > phi0 + c1 * a * phiPrime0 || phi >= phi_lo) {
	                    a_high = a;
	                } else {
	                    if (Math.abs(phiPrime) <= -c2 * phiPrime0) {
	                        return a;
	                    }

	                    if (phiPrime * (a_high - a_lo) >= 0) {
	                        a_high = a_lo;
	                    }

	                    a_lo = a;
	                    phi_lo = phi;
	                }
	            }

	            return 0;
	        }

	        for (var iteration = 0; iteration < 10; ++iteration) {
	            weightedSum(next.x, 1.0, current.x, a, pk);
	            phi = next.fx = f(next.x, next.fxprime);
	            phiPrime = dot(next.fxprime, pk);
	            if (phi > phi0 + c1 * a * phiPrime0 || iteration && phi >= phi_old) {
	                return zoom(a0, a, phi_old);
	            }

	            if (Math.abs(phiPrime) <= -c2 * phiPrime0) {
	                return a;
	            }

	            if (phiPrime >= 0) {
	                return zoom(a, a0, phi);
	            }

	            phi_old = phi;
	            a0 = a;
	            a *= 2;
	        }

	        return a;
	    }

	    function conjugateGradient(f, initial, params) {
	        // allocate all memory up front here, keep out of the loop for perfomance
	        // reasons
	        var current = { x: initial.slice(), fx: 0, fxprime: initial.slice() },
	            next = { x: initial.slice(), fx: 0, fxprime: initial.slice() },
	            yk = initial.slice(),
	            pk,
	            temp,
	            a = 1,
	            maxIterations;

	        params = params || {};
	        maxIterations = params.maxIterations || initial.length * 20;

	        current.fx = f(current.x, current.fxprime);
	        pk = current.fxprime.slice();
	        scale(pk, current.fxprime, -1);

	        for (var i = 0; i < maxIterations; ++i) {
	            a = wolfeLineSearch(f, pk, current, next, a);

	            // todo: history in wrong spot?
	            if (params.history) {
	                params.history.push({ x: current.x.slice(),
	                    fx: current.fx,
	                    fxprime: current.fxprime.slice(),
	                    alpha: a });
	            }

	            if (!a) {
	                // faiiled to find point that satifies wolfe conditions.
	                // reset direction for next iteration
	                scale(pk, current.fxprime, -1);
	            } else {
	                // update direction using Polak–Ribiere CG method
	                weightedSum(yk, 1, next.fxprime, -1, current.fxprime);

	                var delta_k = dot(current.fxprime, current.fxprime),
	                    beta_k = Math.max(0, dot(yk, next.fxprime) / delta_k);

	                weightedSum(pk, beta_k, pk, -1, next.fxprime);

	                temp = current;
	                current = next;
	                next = temp;
	            }

	            if (norm2(current.fxprime) <= 1e-5) {
	                break;
	            }
	        }

	        if (params.history) {
	            params.history.push({ x: current.x.slice(),
	                fx: current.fx,
	                fxprime: current.fxprime.slice(),
	                alpha: a });
	        }

	        return current;
	    }

	    /** given a list of set objects, and their corresponding overlaps.
	    updates the (x, y, radius) attribute on each set such that their positions
	    roughly correspond to the desired overlaps */
	    function venn(areas, parameters) {
	        parameters = parameters || {};
	        parameters.maxIterations = parameters.maxIterations || 500;
	        var initialLayout = parameters.initialLayout || bestInitialLayout;
	        var loss = parameters.lossFunction || lossFunction;

	        // add in missing pairwise areas as having 0 size
	        areas = addMissingAreas(areas);

	        // initial layout is done greedily
	        var circles = initialLayout(areas, parameters);

	        // transform x/y coordinates to a vector to optimize
	        var initial = [],
	            setids = [],
	            setid;
	        for (setid in circles) {
	            if (circles.hasOwnProperty(setid)) {
	                initial.push(circles[setid].x);
	                initial.push(circles[setid].y);
	                setids.push(setid);
	            }
	        }

	        // optimize initial layout from our loss function
	        var solution = nelderMead(function (values) {
	            var current = {};
	            for (var i = 0; i < setids.length; ++i) {
	                var setid = setids[i];
	                current[setid] = { x: values[2 * i],
	                    y: values[2 * i + 1],
	                    radius: circles[setid].radius
	                    // size : circles[setid].size
	                };
	            }
	            return loss(current, areas);
	        }, initial, parameters);

	        // transform solution vector back to x/y points
	        var positions = solution.x;
	        for (var i = 0; i < setids.length; ++i) {
	            setid = setids[i];
	            circles[setid].x = positions[2 * i];
	            circles[setid].y = positions[2 * i + 1];
	        }

	        return circles;
	    }

	    var SMALL$1 = 1e-10;

	    /** Returns the distance necessary for two circles of radius r1 + r2 to
	    have the overlap area 'overlap' */
	    function distanceFromIntersectArea(r1, r2, overlap) {
	        // handle complete overlapped circles
	        if (Math.min(r1, r2) * Math.min(r1, r2) * Math.PI <= overlap + SMALL$1) {
	            return Math.abs(r1 - r2);
	        }

	        return bisect(function (distance$$1) {
	            return circleOverlap(r1, r2, distance$$1) - overlap;
	        }, 0, r1 + r2);
	    }

	    /** Missing pair-wise intersection area data can cause problems:
	     treating as an unknown means that sets will be laid out overlapping,
	     which isn't what people expect. To reflect that we want disjoint sets
	     here, set the overlap to 0 for all missing pairwise set intersections */
	    function addMissingAreas(areas) {
	        areas = areas.slice();

	        // two circle intersections that aren't defined
	        var ids = [],
	            pairs = {},
	            i,
	            j,
	            a,
	            b;
	        for (i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                ids.push(area.sets[0]);
	            } else if (area.sets.length == 2) {
	                a = area.sets[0];
	                b = area.sets[1];
	                pairs[[a, b]] = true;
	                pairs[[b, a]] = true;
	            }
	        }
	        ids.sort(function (a, b) {
	            return a > b;
	        });

	        for (i = 0; i < ids.length; ++i) {
	            a = ids[i];
	            for (j = i + 1; j < ids.length; ++j) {
	                b = ids[j];
	                if (!([a, b] in pairs)) {
	                    areas.push({ 'sets': [a, b],
	                        'size': 0 });
	                }
	            }
	        }
	        return areas;
	    }

	    /// Returns two matrices, one of the euclidean distances between the sets
	    /// and the other indicating if there are subset or disjoint set relationships
	    function getDistanceMatrices(areas, sets, setids) {
	        // initialize an empty distance matrix between all the points
	        var distances = zerosM(sets.length, sets.length),
	            constraints = zerosM(sets.length, sets.length);

	        // compute required distances between all the sets such that
	        // the areas match
	        areas.filter(function (x) {
	            return x.sets.length == 2;
	        }).map(function (current) {
	            var left = setids[current.sets[0]],
	                right = setids[current.sets[1]],
	                r1 = Math.sqrt(sets[left].size / Math.PI),
	                r2 = Math.sqrt(sets[right].size / Math.PI),
	                distance$$1 = distanceFromIntersectArea(r1, r2, current.size);

	            distances[left][right] = distances[right][left] = distance$$1;

	            // also update constraints to indicate if its a subset or disjoint
	            // relationship
	            var c = 0;
	            if (current.size + 1e-10 >= Math.min(sets[left].size, sets[right].size)) {
	                c = 1;
	            } else if (current.size <= 1e-10) {
	                c = -1;
	            }
	            constraints[left][right] = constraints[right][left] = c;
	        });

	        return { distances: distances, constraints: constraints };
	    }

	    /// computes the gradient and loss simulatenously for our constrained MDS optimizer
	    function constrainedMDSGradient(x, fxprime, distances, constraints) {
	        var loss = 0,
	            i;
	        for (i = 0; i < fxprime.length; ++i) {
	            fxprime[i] = 0;
	        }

	        for (i = 0; i < distances.length; ++i) {
	            var xi = x[2 * i],
	                yi = x[2 * i + 1];
	            for (var j = i + 1; j < distances.length; ++j) {
	                var xj = x[2 * j],
	                    yj = x[2 * j + 1],
	                    dij = distances[i][j],
	                    constraint = constraints[i][j];

	                var squaredDistance = (xj - xi) * (xj - xi) + (yj - yi) * (yj - yi),
	                    distance$$1 = Math.sqrt(squaredDistance),
	                    delta = squaredDistance - dij * dij;

	                if (constraint > 0 && distance$$1 <= dij || constraint < 0 && distance$$1 >= dij) {
	                    continue;
	                }

	                loss += 2 * delta * delta;

	                fxprime[2 * i] += 4 * delta * (xi - xj);
	                fxprime[2 * i + 1] += 4 * delta * (yi - yj);

	                fxprime[2 * j] += 4 * delta * (xj - xi);
	                fxprime[2 * j + 1] += 4 * delta * (yj - yi);
	            }
	        }
	        return loss;
	    }

	    /// takes the best working variant of either constrained MDS or greedy
	    function bestInitialLayout(areas, params) {
	        var initial = greedyLayout(areas, params);
	        var loss = params.lossFunction || lossFunction;

	        // greedylayout is sufficient for all 2/3 circle cases. try out
	        // constrained MDS for higher order problems, take its output
	        // if it outperforms. (greedy is aesthetically better on 2/3 circles
	        // since it axis aligns)
	        if (areas.length >= 8) {
	            var constrained = constrainedMDSLayout(areas, params),
	                constrainedLoss = loss(constrained, areas),
	                greedyLoss = loss(initial, areas);

	            if (constrainedLoss + 1e-8 < greedyLoss) {
	                initial = constrained;
	            }
	        }
	        return initial;
	    }

	    /// use the constrained MDS variant to generate an initial layout
	    function constrainedMDSLayout(areas, params) {
	        params = params || {};
	        var restarts = params.restarts || 10;

	        // bidirectionally map sets to a rowid  (so we can create a matrix)
	        var sets = [],
	            setids = {},
	            i;
	        for (i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                setids[area.sets[0]] = sets.length;
	                sets.push(area);
	            }
	        }

	        var matrices = getDistanceMatrices(areas, sets, setids),
	            distances = matrices.distances,
	            constraints = matrices.constraints;

	        // keep distances bounded, things get messed up otherwise.
	        // TODO: proper preconditioner?
	        var norm = norm2(distances.map(norm2)) / distances.length;
	        distances = distances.map(function (row) {
	            return row.map(function (value) {
	                return value / norm;
	            });
	        });

	        var obj = function obj(x, fxprime) {
	            return constrainedMDSGradient(x, fxprime, distances, constraints);
	        };

	        var best, current;
	        for (i = 0; i < restarts; ++i) {
	            var initial = zeros(distances.length * 2).map(Math.random);

	            current = conjugateGradient(obj, initial, params);
	            if (!best || current.fx < best.fx) {
	                best = current;
	            }
	        }
	        var positions = best.x;

	        // translate rows back to (x,y,radius) coordinates
	        var circles = {};
	        for (i = 0; i < sets.length; ++i) {
	            var set = sets[i];
	            circles[set.sets[0]] = {
	                x: positions[2 * i] * norm,
	                y: positions[2 * i + 1] * norm,
	                radius: Math.sqrt(set.size / Math.PI)
	            };
	        }

	        if (params.history) {
	            for (i = 0; i < params.history.length; ++i) {
	                scale(params.history[i].x, norm);
	            }
	        }
	        return circles;
	    }

	    /** Lays out a Venn diagram greedily, going from most overlapped sets to
	    least overlapped, attempting to position each new set such that the
	    overlapping areas to already positioned sets are basically right */
	    function greedyLayout(areas, params) {
	        var loss = params && params.lossFunction ? params.lossFunction : lossFunction;
	        // define a circle for each set
	        var circles = {},
	            setOverlaps = {},
	            set;
	        for (var i = 0; i < areas.length; ++i) {
	            var area = areas[i];
	            if (area.sets.length == 1) {
	                set = area.sets[0];
	                circles[set] = { x: 1e10, y: 1e10,
	                    rowid: circles.length,
	                    size: area.size,
	                    radius: Math.sqrt(area.size / Math.PI) };
	                setOverlaps[set] = [];
	            }
	        }
	        areas = areas.filter(function (a) {
	            return a.sets.length == 2;
	        });

	        // map each set to a list of all the other sets that overlap it
	        for (i = 0; i < areas.length; ++i) {
	            var current = areas[i];
	            var weight = current.hasOwnProperty('weight') ? current.weight : 1.0;
	            var left = current.sets[0],
	                right = current.sets[1];

	            // completely overlapped circles shouldn't be positioned early here
	            if (current.size + SMALL$1 >= Math.min(circles[left].size, circles[right].size)) {
	                weight = 0;
	            }

	            setOverlaps[left].push({ set: right, size: current.size, weight: weight });
	            setOverlaps[right].push({ set: left, size: current.size, weight: weight });
	        }

	        // get list of most overlapped sets
	        var mostOverlapped = [];
	        for (set in setOverlaps) {
	            if (setOverlaps.hasOwnProperty(set)) {
	                var size = 0;
	                for (i = 0; i < setOverlaps[set].length; ++i) {
	                    size += setOverlaps[set][i].size * setOverlaps[set][i].weight;
	                }

	                mostOverlapped.push({ set: set, size: size });
	            }
	        }

	        // sort by size desc
	        function sortOrder(a, b) {
	            return b.size - a.size;
	        }
	        mostOverlapped.sort(sortOrder);

	        // keep track of what sets have been laid out
	        var positioned = {};
	        function isPositioned(element) {
	            return element.set in positioned;
	        }

	        // adds a point to the output
	        function positionSet(point, index) {
	            circles[index].x = point.x;
	            circles[index].y = point.y;
	            positioned[index] = true;
	        }

	        // add most overlapped set at (0,0)
	        positionSet({ x: 0, y: 0 }, mostOverlapped[0].set);

	        // get distances between all points. TODO, necessary?
	        // answer: probably not
	        // var distances = venn.getDistanceMatrices(circles, areas).distances;
	        for (i = 1; i < mostOverlapped.length; ++i) {
	            var setIndex = mostOverlapped[i].set,
	                overlap = setOverlaps[setIndex].filter(isPositioned);
	            set = circles[setIndex];
	            overlap.sort(sortOrder);

	            if (overlap.length === 0) {
	                // this shouldn't happen anymore with addMissingAreas
	                throw "ERROR: missing pairwise overlap information";
	            }

	            var points = [];
	            for (var j = 0; j < overlap.length; ++j) {
	                // get appropriate distance from most overlapped already added set
	                var p1 = circles[overlap[j].set],
	                    d1 = distanceFromIntersectArea(set.radius, p1.radius, overlap[j].size);

	                // sample positions at 90 degrees for maximum aesthetics
	                points.push({ x: p1.x + d1, y: p1.y });
	                points.push({ x: p1.x - d1, y: p1.y });
	                points.push({ y: p1.y + d1, x: p1.x });
	                points.push({ y: p1.y - d1, x: p1.x });

	                // if we have at least 2 overlaps, then figure out where the
	                // set should be positioned analytically and try those too
	                for (var k = j + 1; k < overlap.length; ++k) {
	                    var p2 = circles[overlap[k].set],
	                        d2 = distanceFromIntersectArea(set.radius, p2.radius, overlap[k].size);

	                    var extraPoints = circleCircleIntersection({ x: p1.x, y: p1.y, radius: d1 }, { x: p2.x, y: p2.y, radius: d2 });

	                    for (var l = 0; l < extraPoints.length; ++l) {
	                        points.push(extraPoints[l]);
	                    }
	                }
	            }

	            // we have some candidate positions for the set, examine loss
	            // at each position to figure out where to put it at
	            var bestLoss = 1e50,
	                bestPoint = points[0];
	            for (j = 0; j < points.length; ++j) {
	                circles[setIndex].x = points[j].x;
	                circles[setIndex].y = points[j].y;
	                var localLoss = loss(circles, areas);
	                if (localLoss < bestLoss) {
	                    bestLoss = localLoss;
	                    bestPoint = points[j];
	                }
	            }

	            positionSet(bestPoint, setIndex);
	        }

	        return circles;
	    }

	    /** Given a bunch of sets, and the desired overlaps between these sets - computes
	    the distance from the actual overlaps to the desired overlaps. Note that
	    this method ignores overlaps of more than 2 circles */
	    function lossFunction(sets, overlaps) {
	        var output = 0;

	        function getCircles(indices) {
	            return indices.map(function (i) {
	                return sets[i];
	            });
	        }

	        for (var i = 0; i < overlaps.length; ++i) {
	            var area = overlaps[i],
	                overlap;
	            if (area.sets.length == 1) {
	                continue;
	            } else if (area.sets.length == 2) {
	                var left = sets[area.sets[0]],
	                    right = sets[area.sets[1]];
	                overlap = circleOverlap(left.radius, right.radius, distance(left, right));
	            } else {
	                overlap = intersectionArea(getCircles(area.sets));
	            }

	            var weight = area.hasOwnProperty('weight') ? area.weight : 1.0;
	            output += weight * (overlap - area.size) * (overlap - area.size);
	        }

	        return output;
	    }

	    // orientates a bunch of circles to point in orientation
	    function orientateCircles(circles, orientation, orientationOrder) {
	        if (orientationOrder === null) {
	            circles.sort(function (a, b) {
	                return b.radius - a.radius;
	            });
	        } else {
	            circles.sort(orientationOrder);
	        }

	        var i;
	        // shift circles so largest circle is at (0, 0)
	        if (circles.length > 0) {
	            var largestX = circles[0].x,
	                largestY = circles[0].y;

	            for (i = 0; i < circles.length; ++i) {
	                circles[i].x -= largestX;
	                circles[i].y -= largestY;
	            }
	        }

	        if (circles.length == 2) {
	            // if the second circle is a subset of the first, arrange so that
	            // it is off to one side. hack for https://github.com/benfred/venn.js/issues/120
	            var dist = distance(circles[0], circles[1]);
	            if (dist < Math.abs(circles[1].radius - circles[0].radius)) {
	                circles[1].x = circles[0].x + circles[0].radius - circles[1].radius - 1e-10;
	                circles[1].y = circles[0].y;
	            }
	        }

	        // rotate circles so that second largest is at an angle of 'orientation'
	        // from largest
	        if (circles.length > 1) {
	            var rotation = Math.atan2(circles[1].x, circles[1].y) - orientation,
	                c = Math.cos(rotation),
	                s = Math.sin(rotation),
	                x,
	                y;

	            for (i = 0; i < circles.length; ++i) {
	                x = circles[i].x;
	                y = circles[i].y;
	                circles[i].x = c * x - s * y;
	                circles[i].y = s * x + c * y;
	            }
	        }

	        // mirror solution if third solution is above plane specified by
	        // first two circles
	        if (circles.length > 2) {
	            var angle = Math.atan2(circles[2].x, circles[2].y) - orientation;
	            while (angle < 0) {
	                angle += 2 * Math.PI;
	            }
	            while (angle > 2 * Math.PI) {
	                angle -= 2 * Math.PI;
	            }
	            if (angle > Math.PI) {
	                var slope = circles[1].y / (1e-10 + circles[1].x);
	                for (i = 0; i < circles.length; ++i) {
	                    var d = (circles[i].x + slope * circles[i].y) / (1 + slope * slope);
	                    circles[i].x = 2 * d - circles[i].x;
	                    circles[i].y = 2 * d * slope - circles[i].y;
	                }
	            }
	        }
	    }

	    function disjointCluster(circles) {
	        // union-find clustering to get disjoint sets
	        circles.map(function (circle) {
	            circle.parent = circle;
	        });

	        // path compression step in union find
	        function find(circle) {
	            if (circle.parent !== circle) {
	                circle.parent = find(circle.parent);
	            }
	            return circle.parent;
	        }

	        function union(x, y) {
	            var xRoot = find(x),
	                yRoot = find(y);
	            xRoot.parent = yRoot;
	        }

	        // get the union of all overlapping sets
	        for (var i = 0; i < circles.length; ++i) {
	            for (var j = i + 1; j < circles.length; ++j) {
	                var maxDistance = circles[i].radius + circles[j].radius;
	                if (distance(circles[i], circles[j]) + 1e-10 < maxDistance) {
	                    union(circles[j], circles[i]);
	                }
	            }
	        }

	        // find all the disjoint clusters and group them together
	        var disjointClusters = {},
	            setid;
	        for (i = 0; i < circles.length; ++i) {
	            setid = find(circles[i]).parent.setid;
	            if (!(setid in disjointClusters)) {
	                disjointClusters[setid] = [];
	            }
	            disjointClusters[setid].push(circles[i]);
	        }

	        // cleanup bookkeeping
	        circles.map(function (circle) {
	            delete circle.parent;
	        });

	        // return in more usable form
	        var ret = [];
	        for (setid in disjointClusters) {
	            if (disjointClusters.hasOwnProperty(setid)) {
	                ret.push(disjointClusters[setid]);
	            }
	        }
	        return ret;
	    }

	    function getBoundingBox(circles) {
	        var minMax = function minMax(d) {
	            var hi = Math.max.apply(null, circles.map(function (c) {
	                return c[d] + c.radius;
	            })),
	                lo = Math.min.apply(null, circles.map(function (c) {
	                return c[d] - c.radius;
	            }));
	            return { max: hi, min: lo };
	        };

	        return { xRange: minMax('x'), yRange: minMax('y') };
	    }

	    function normalizeSolution(solution, orientation, orientationOrder) {
	        if (orientation === null) {
	            orientation = Math.PI / 2;
	        }

	        // work with a list instead of a dictionary, and take a copy so we
	        // don't mutate input
	        var circles = [],
	            i,
	            setid;
	        for (setid in solution) {
	            if (solution.hasOwnProperty(setid)) {
	                var previous = solution[setid];
	                circles.push({ x: previous.x,
	                    y: previous.y,
	                    radius: previous.radius,
	                    setid: setid });
	            }
	        }

	        // get all the disjoint clusters
	        var clusters = disjointCluster(circles);

	        // orientate all disjoint sets, get sizes
	        for (i = 0; i < clusters.length; ++i) {
	            orientateCircles(clusters[i], orientation, orientationOrder);
	            var bounds = getBoundingBox(clusters[i]);
	            clusters[i].size = (bounds.xRange.max - bounds.xRange.min) * (bounds.yRange.max - bounds.yRange.min);
	            clusters[i].bounds = bounds;
	        }
	        clusters.sort(function (a, b) {
	            return b.size - a.size;
	        });

	        // orientate the largest at 0,0, and get the bounds
	        circles = clusters[0];
	        var returnBounds = circles.bounds;

	        var spacing = (returnBounds.xRange.max - returnBounds.xRange.min) / 50;

	        function addCluster(cluster, right, bottom) {
	            if (!cluster) return;

	            var bounds = cluster.bounds,
	                xOffset,
	                yOffset,
	                centreing;

	            if (right) {
	                xOffset = returnBounds.xRange.max - bounds.xRange.min + spacing;
	            } else {
	                xOffset = returnBounds.xRange.max - bounds.xRange.max;
	                centreing = (bounds.xRange.max - bounds.xRange.min) / 2 - (returnBounds.xRange.max - returnBounds.xRange.min) / 2;
	                if (centreing < 0) xOffset += centreing;
	            }

	            if (bottom) {
	                yOffset = returnBounds.yRange.max - bounds.yRange.min + spacing;
	            } else {
	                yOffset = returnBounds.yRange.max - bounds.yRange.max;
	                centreing = (bounds.yRange.max - bounds.yRange.min) / 2 - (returnBounds.yRange.max - returnBounds.yRange.min) / 2;
	                if (centreing < 0) yOffset += centreing;
	            }

	            for (var j = 0; j < cluster.length; ++j) {
	                cluster[j].x += xOffset;
	                cluster[j].y += yOffset;
	                circles.push(cluster[j]);
	            }
	        }

	        var index = 1;
	        while (index < clusters.length) {
	            addCluster(clusters[index], true, false);
	            addCluster(clusters[index + 1], false, true);
	            addCluster(clusters[index + 2], true, true);
	            index += 3;

	            // have one cluster (in top left). lay out next three relative
	            // to it in a grid
	            returnBounds = getBoundingBox(circles);
	        }

	        // convert back to solution form
	        var ret = {};
	        for (i = 0; i < circles.length; ++i) {
	            ret[circles[i].setid] = circles[i];
	        }
	        return ret;
	    }

	    /** Scales a solution from venn.venn or venn.greedyLayout such that it fits in
	    a rectangle of width/height - with padding around the borders. also
	    centers the diagram in the available space at the same time */
	    function scaleSolution(solution, width, height, padding) {
	        var circles = [],
	            setids = [];
	        for (var setid in solution) {
	            if (solution.hasOwnProperty(setid)) {
	                setids.push(setid);
	                circles.push(solution[setid]);
	            }
	        }

	        width -= 2 * padding;
	        height -= 2 * padding;

	        var bounds = getBoundingBox(circles),
	            xRange = bounds.xRange,
	            yRange = bounds.yRange;

	        if (xRange.max == xRange.min || yRange.max == yRange.min) {
	            console.log("not scaling solution: zero size detected");
	            return solution;
	        }

	        var xScaling = width / (xRange.max - xRange.min),
	            yScaling = height / (yRange.max - yRange.min),
	            scaling = Math.min(yScaling, xScaling),


	        // while we're at it, center the diagram too
	        xOffset = (width - (xRange.max - xRange.min) * scaling) / 2,
	            yOffset = (height - (yRange.max - yRange.min) * scaling) / 2;

	        var scaled = {};
	        for (var i = 0; i < circles.length; ++i) {
	            var circle = circles[i];
	            scaled[setids[i]] = {
	                radius: scaling * circle.radius,
	                x: padding + xOffset + (circle.x - xRange.min) * scaling,
	                y: padding + yOffset + (circle.y - yRange.min) * scaling
	            };
	        }

	        return scaled;
	    }

	    /*global console:true*/

	    function VennDiagram() {
	        var width = 600,
	            height = 350,
	            padding = 15,
	            duration = 1000,
	            orientation = Math.PI / 2,
	            normalize = true,
	            wrap = true,
	            styled = true,
	            fontSize = null,
	            orientationOrder = null,


	        // mimic the behaviour of d3.scale.category10 from the previous
	        // version of d3
	        colourMap = {},


	        // so this is the same as d3.schemeCategory10, which is only defined in d3 4.0
	        // since we can support older versions of d3 as long as we don't force this,
	        // I'm hackily redefining below. TODO: remove this and change to d3.schemeCategory10
	        colourScheme = ["#1f77b4", "#ff7f0e", "#2ca02c", "#d62728", "#9467bd", "#8c564b", "#e377c2", "#7f7f7f", "#bcbd22", "#17becf"],
	            colourIndex = 0,
	            colours = function colours(key) {
	            if (key in colourMap) {
	                return colourMap[key];
	            }
	            var ret = colourMap[key] = colourScheme[colourIndex];
	            colourIndex += 1;
	            if (colourIndex >= colourScheme.length) {
	                colourIndex = 0;
	            }
	            return ret;
	        },
	            layoutFunction = venn,
	            loss = lossFunction;

	        function chart(selection) {
	            var data = selection.datum();

	            // handle 0-sized sets by removing from input
	            var toremove = {};
	            data.forEach(function (datum) {
	                if (datum.size == 0 && datum.sets.length == 1) {
	                    toremove[datum.sets[0]] = 1;
	                }
	            });
	            data = data.filter(function (datum) {
	                return !datum.sets.some(function (set) {
	                    return set in toremove;
	                });
	            });

	            var circles = {};
	            var textCentres = {};

	            if (data.length > 0) {
	                var solution = layoutFunction(data, { lossFunction: loss });

	                if (normalize) {
	                    solution = normalizeSolution(solution, orientation, orientationOrder);
	                }

	                circles = scaleSolution(solution, width, height, padding);
	                textCentres = computeTextCentres(circles, data);
	            }

	            // Figure out the current label for each set. These can change
	            // and D3 won't necessarily update (fixes https://github.com/benfred/venn.js/issues/103)
	            var labels = {};
	            data.forEach(function (datum) {
	                if (datum.label) {
	                    labels[datum.sets] = datum.label;
	                }
	            });

	            function label(d) {
	                if (d.sets in labels) {
	                    return labels[d.sets];
	                }
	                if (d.sets.length == 1) {
	                    return '' + d.sets[0];
	                }
	            }

	            // create svg if not already existing
	            selection.selectAll("svg").data([circles]).enter().append("svg");

	            var svg = selection.select("svg").attr("width", width).attr("height", height);

	            // to properly transition intersection areas, we need the
	            // previous circles locations. load from elements
	            var previous = {},
	                hasPrevious = false;
	            svg.selectAll(".venn-area path").each(function (d) {
	                var path = d3Selection.select(this).attr("d");
	                if (d.sets.length == 1 && path) {
	                    hasPrevious = true;
	                    previous[d.sets[0]] = circleFromPath(path);
	                }
	            });

	            // interpolate intersection area paths between previous and
	            // current paths
	            var pathTween = function pathTween(d) {
	                return function (t) {
	                    var c = d.sets.map(function (set) {
	                        var start = previous[set],
	                            end = circles[set];
	                        if (!start) {
	                            start = { x: width / 2, y: height / 2, radius: 1 };
	                        }
	                        if (!end) {
	                            end = { x: width / 2, y: height / 2, radius: 1 };
	                        }
	                        return { 'x': start.x * (1 - t) + end.x * t,
	                            'y': start.y * (1 - t) + end.y * t,
	                            'radius': start.radius * (1 - t) + end.radius * t };
	                    });
	                    return intersectionAreaPath(c);
	                };
	            };

	            // update data, joining on the set ids
	            var nodes = svg.selectAll(".venn-area").data(data, function (d) {
	                return d.sets;
	            });

	            // create new nodes
	            var enter = nodes.enter().append('g').attr("class", function (d) {
	                return "venn-area venn-" + (d.sets.length == 1 ? "circle" : "intersection");
	            }).attr("data-venn-sets", function (d) {
	                return d.sets.join("_");
	            });

	            var enterPath = enter.append("path"),
	                enterText = enter.append("text").attr("class", "label").text(function (d) {
	                return label(d);
	            }).attr("text-anchor", "middle").attr("dy", ".35em").attr("x", width / 2).attr("y", height / 2);

	            // apply minimal style if wanted
	            if (styled) {
	                enterPath.style("fill-opacity", "0").filter(function (d) {
	                    return d.sets.length == 1;
	                }).style("fill", function (d) {
	                    return colours(d.sets);
	                }).style("fill-opacity", ".25");

	                enterText.style("fill", function (d) {
	                    return d.sets.length == 1 ? colours(d.sets) : "#444";
	                });
	            }

	            // update existing, using pathTween if necessary
	            var update = selection;
	            if (hasPrevious) {
	                update = selection.transition("venn").duration(duration);
	                update.selectAll("path").attrTween("d", pathTween);
	            } else {
	                update.selectAll("path").attr("d", function (d) {
	                    return intersectionAreaPath(d.sets.map(function (set) {
	                        return circles[set];
	                    }));
	                });
	            }

	            var updateText = update.selectAll("text").filter(function (d) {
	                return d.sets in textCentres;
	            }).text(function (d) {
	                return label(d);
	            }).attr("x", function (d) {
	                return Math.floor(textCentres[d.sets].x);
	            }).attr("y", function (d) {
	                return Math.floor(textCentres[d.sets].y);
	            });

	            if (wrap) {
	                if (hasPrevious) {
	                    // d3 4.0 uses 'on' for events on transitions,
	                    // but d3 3.0 used 'each' instead. switch appropiately
	                    if ('on' in updateText) {
	                        updateText.on("end", wrapText(circles, label));
	                    } else {
	                        updateText.each("end", wrapText(circles, label));
	                    }
	                } else {
	                    updateText.each(wrapText(circles, label));
	                }
	            }

	            // remove old
	            var exit = nodes.exit().transition('venn').duration(duration).remove();
	            exit.selectAll("path").attrTween("d", pathTween);

	            var exitText = exit.selectAll("text").attr("x", width / 2).attr("y", height / 2);

	            // if we've been passed a fontSize explicitly, use it to
	            // transition
	            if (fontSize !== null) {
	                enterText.style("font-size", "0px");
	                updateText.style("font-size", fontSize);
	                exitText.style("font-size", "0px");
	            }

	            return { 'circles': circles,
	                'textCentres': textCentres,
	                'nodes': nodes,
	                'enter': enter,
	                'update': update,
	                'exit': exit };
	        }

	        chart.wrap = function (_) {
	            if (!arguments.length) return wrap;
	            wrap = _;
	            return chart;
	        };

	        chart.width = function (_) {
	            if (!arguments.length) return width;
	            width = _;
	            return chart;
	        };

	        chart.height = function (_) {
	            if (!arguments.length) return height;
	            height = _;
	            return chart;
	        };

	        chart.padding = function (_) {
	            if (!arguments.length) return padding;
	            padding = _;
	            return chart;
	        };

	        chart.colours = function (_) {
	            if (!arguments.length) return colours;
	            colours = _;
	            return chart;
	        };

	        chart.fontSize = function (_) {
	            if (!arguments.length) return fontSize;
	            fontSize = _;
	            return chart;
	        };

	        chart.duration = function (_) {
	            if (!arguments.length) return duration;
	            duration = _;
	            return chart;
	        };

	        chart.layoutFunction = function (_) {
	            if (!arguments.length) return layoutFunction;
	            layoutFunction = _;
	            return chart;
	        };

	        chart.normalize = function (_) {
	            if (!arguments.length) return normalize;
	            normalize = _;
	            return chart;
	        };

	        chart.styled = function (_) {
	            if (!arguments.length) return styled;
	            styled = _;
	            return chart;
	        };

	        chart.orientation = function (_) {
	            if (!arguments.length) return orientation;
	            orientation = _;
	            return chart;
	        };

	        chart.orientationOrder = function (_) {
	            if (!arguments.length) return orientationOrder;
	            orientationOrder = _;
	            return chart;
	        };

	        chart.lossFunction = function (_) {
	            if (!arguments.length) return loss;
	            loss = _;
	            return chart;
	        };

	        return chart;
	    }
	    // sometimes text doesn't fit inside the circle, if thats the case lets wrap
	    // the text here such that it fits
	    // todo: looks like this might be merged into d3 (
	    // https://github.com/mbostock/d3/issues/1642),
	    // also worth checking out is
	    // http://engineering.findthebest.com/wrapping-axis-labels-in-d3-js/
	    // this seems to be one of those things that should be easy but isn't
	    function wrapText(circles, labeller) {
	        return function () {
	            var text = d3Selection.select(this),
	                data = text.datum(),
	                width = circles[data.sets[0]].radius || 50,
	                label = labeller(data) || '';

	            var words = label.split(/\s+/).reverse(),
	                maxLines = 3,
	                minChars = (label.length + words.length) / maxLines,
	                word = words.pop(),
	                line = [word],
	                joined,
	                lineNumber = 0,
	                lineHeight = 1.1,
	                // ems
	            tspan = text.text(null).append("tspan").text(word);

	            while (true) {
	                word = words.pop();
	                if (!word) break;
	                line.push(word);
	                joined = line.join(" ");
	                tspan.text(joined);
	                if (joined.length > minChars && tspan.node().getComputedTextLength() > width) {
	                    line.pop();
	                    tspan.text(line.join(" "));
	                    line = [word];
	                    tspan = text.append("tspan").text(word);
	                    lineNumber++;
	                }
	            }

	            var initial = 0.35 - lineNumber * lineHeight / 2,
	                x = text.attr("x"),
	                y = text.attr("y");

	            text.selectAll("tspan").attr("x", x).attr("y", y).attr("dy", function (d, i) {
	                return initial + i * lineHeight + "em";
	            });
	        };
	    }

	    function circleMargin(current, interior, exterior) {
	        var margin = interior[0].radius - distance(interior[0], current),
	            i,
	            m;
	        for (i = 1; i < interior.length; ++i) {
	            m = interior[i].radius - distance(interior[i], current);
	            if (m <= margin) {
	                margin = m;
	            }
	        }

	        for (i = 0; i < exterior.length; ++i) {
	            m = distance(exterior[i], current) - exterior[i].radius;
	            if (m <= margin) {
	                margin = m;
	            }
	        }
	        return margin;
	    }

	    // compute the center of some circles by maximizing the margin of
	    // the center point relative to the circles (interior) after subtracting
	    // nearby circles (exterior)
	    function computeTextCentre(interior, exterior) {
	        // get an initial estimate by sampling around the interior circles
	        // and taking the point with the biggest margin
	        var points = [],
	            i;
	        for (i = 0; i < interior.length; ++i) {
	            var c = interior[i];
	            points.push({ x: c.x, y: c.y });
	            points.push({ x: c.x + c.radius / 2, y: c.y });
	            points.push({ x: c.x - c.radius / 2, y: c.y });
	            points.push({ x: c.x, y: c.y + c.radius / 2 });
	            points.push({ x: c.x, y: c.y - c.radius / 2 });
	        }
	        var initial = points[0],
	            margin = circleMargin(points[0], interior, exterior);
	        for (i = 1; i < points.length; ++i) {
	            var m = circleMargin(points[i], interior, exterior);
	            if (m >= margin) {
	                initial = points[i];
	                margin = m;
	            }
	        }

	        // maximize the margin numerically
	        var solution = nelderMead(function (p) {
	            return -1 * circleMargin({ x: p[0], y: p[1] }, interior, exterior);
	        }, [initial.x, initial.y], { maxIterations: 500, minErrorDelta: 1e-10 }).x;
	        var ret = { x: solution[0], y: solution[1] };

	        // check solution, fallback as needed (happens if fully overlapped
	        // etc)
	        var valid = true;
	        for (i = 0; i < interior.length; ++i) {
	            if (distance(ret, interior[i]) > interior[i].radius) {
	                valid = false;
	                break;
	            }
	        }

	        for (i = 0; i < exterior.length; ++i) {
	            if (distance(ret, exterior[i]) < exterior[i].radius) {
	                valid = false;
	                break;
	            }
	        }

	        if (!valid) {
	            if (interior.length == 1) {
	                ret = { x: interior[0].x, y: interior[0].y };
	            } else {
	                var areaStats = {};
	                intersectionArea(interior, areaStats);

	                if (areaStats.arcs.length === 0) {
	                    ret = { 'x': 0, 'y': -1000, disjoint: true };
	                } else if (areaStats.arcs.length == 1) {
	                    ret = { 'x': areaStats.arcs[0].circle.x,
	                        'y': areaStats.arcs[0].circle.y };
	                } else if (exterior.length) {
	                    // try again without other circles
	                    ret = computeTextCentre(interior, []);
	                } else {
	                    // take average of all the points in the intersection
	                    // polygon. this should basically never happen
	                    // and has some issues:
	                    // https://github.com/benfred/venn.js/issues/48#issuecomment-146069777
	                    ret = getCenter(areaStats.arcs.map(function (a) {
	                        return a.p1;
	                    }));
	                }
	            }
	        }

	        return ret;
	    }

	    // given a dictionary of {setid : circle}, returns
	    // a dictionary of setid to list of circles that completely overlap it
	    function getOverlappingCircles(circles) {
	        var ret = {},
	            circleids = [];
	        for (var circleid in circles) {
	            circleids.push(circleid);
	            ret[circleid] = [];
	        }
	        for (var i = 0; i < circleids.length; i++) {
	            var a = circles[circleids[i]];
	            for (var j = i + 1; j < circleids.length; ++j) {
	                var b = circles[circleids[j]],
	                    d = distance(a, b);

	                if (d + b.radius <= a.radius + 1e-10) {
	                    ret[circleids[j]].push(circleids[i]);
	                } else if (d + a.radius <= b.radius + 1e-10) {
	                    ret[circleids[i]].push(circleids[j]);
	                }
	            }
	        }
	        return ret;
	    }

	    function computeTextCentres(circles, areas) {
	        var ret = {},
	            overlapped = getOverlappingCircles(circles);
	        for (var i = 0; i < areas.length; ++i) {
	            var area = areas[i].sets,
	                areaids = {},
	                exclude = {};
	            for (var j = 0; j < area.length; ++j) {
	                areaids[area[j]] = true;
	                var overlaps = overlapped[area[j]];
	                // keep track of any circles that overlap this area,
	                // and don't consider for purposes of computing the text
	                // centre
	                for (var k = 0; k < overlaps.length; ++k) {
	                    exclude[overlaps[k]] = true;
	                }
	            }

	            var interior = [],
	                exterior = [];
	            for (var setid in circles) {
	                if (setid in areaids) {
	                    interior.push(circles[setid]);
	                } else if (!(setid in exclude)) {
	                    exterior.push(circles[setid]);
	                }
	            }
	            var centre = computeTextCentre(interior, exterior);
	            ret[area] = centre;
	            if (centre.disjoint && areas[i].size > 0) {
	                console.log("WARNING: area " + area + " not represented on screen");
	            }
	        }
	        return ret;
	    }

	    // sorts all areas in the venn diagram, so that
	    // a particular area is on top (relativeTo) - and
	    // all other areas are so that the smallest areas are on top
	    function sortAreas(div, relativeTo) {

	        // figure out sets that are completly overlapped by relativeTo
	        var overlaps = getOverlappingCircles(div.selectAll("svg").datum());
	        var exclude = {};
	        for (var i = 0; i < relativeTo.sets.length; ++i) {
	            var check = relativeTo.sets[i];
	            for (var setid in overlaps) {
	                var overlap = overlaps[setid];
	                for (var j = 0; j < overlap.length; ++j) {
	                    if (overlap[j] == check) {
	                        exclude[setid] = true;
	                        break;
	                    }
	                }
	            }
	        }

	        // checks that all sets are in exclude;
	        function shouldExclude(sets) {
	            for (var i = 0; i < sets.length; ++i) {
	                if (!(sets[i] in exclude)) {
	                    return false;
	                }
	            }
	            return true;
	        }

	        // need to sort div's so that Z order is correct
	        div.selectAll("g").sort(function (a, b) {
	            // highest order set intersections first
	            if (a.sets.length != b.sets.length) {
	                return a.sets.length - b.sets.length;
	            }

	            if (a == relativeTo) {
	                return shouldExclude(b.sets) ? -1 : 1;
	            }
	            if (b == relativeTo) {
	                return shouldExclude(a.sets) ? 1 : -1;
	            }

	            // finally by size
	            return b.size - a.size;
	        });
	    }

	    function circlePath(x, y, r) {
	        var ret = [];
	        ret.push("\nM", x, y);
	        ret.push("\nm", -r, 0);
	        ret.push("\na", r, r, 0, 1, 0, r * 2, 0);
	        ret.push("\na", r, r, 0, 1, 0, -r * 2, 0);
	        return ret.join(" ");
	    }

	    // inverse of the circlePath function, returns a circle object from an svg path
	    function circleFromPath(path) {
	        var tokens = path.split(' ');
	        return { 'x': parseFloat(tokens[1]),
	            'y': parseFloat(tokens[2]),
	            'radius': -parseFloat(tokens[4])
	        };
	    }

	    /** returns a svg path of the intersection area of a bunch of circles */
	    function intersectionAreaPath(circles) {
	        var stats = {};
	        intersectionArea(circles, stats);
	        var arcs = stats.arcs;

	        if (arcs.length === 0) {
	            return "M 0 0";
	        } else if (arcs.length == 1) {
	            var circle = arcs[0].circle;
	            return circlePath(circle.x, circle.y, circle.radius);
	        } else {
	            // draw path around arcs
	            var ret = ["\nM", arcs[0].p2.x, arcs[0].p2.y];
	            for (var i = 0; i < arcs.length; ++i) {
	                var arc = arcs[i],
	                    r = arc.circle.radius,
	                    wide = arc.width > r;
	                ret.push("\nA", r, r, 0, wide ? 1 : 0, 1, arc.p1.x, arc.p1.y);
	            }
	            return ret.join(" ");
	        }
	    }

	    exports.intersectionArea = intersectionArea;
	    exports.circleCircleIntersection = circleCircleIntersection;
	    exports.circleOverlap = circleOverlap;
	    exports.circleArea = circleArea;
	    exports.distance = distance;
	    exports.venn = venn;
	    exports.greedyLayout = greedyLayout;
	    exports.scaleSolution = scaleSolution;
	    exports.normalizeSolution = normalizeSolution;
	    exports.bestInitialLayout = bestInitialLayout;
	    exports.lossFunction = lossFunction;
	    exports.disjointCluster = disjointCluster;
	    exports.distanceFromIntersectArea = distanceFromIntersectArea;
	    exports.VennDiagram = VennDiagram;
	    exports.wrapText = wrapText;
	    exports.computeTextCentres = computeTextCentres;
	    exports.computeTextCentre = computeTextCentre;
	    exports.sortAreas = sortAreas;
	    exports.circlePath = circlePath;
	    exports.circleFromPath = circleFromPath;
	    exports.intersectionAreaPath = intersectionAreaPath;

	    Object.defineProperty(exports, '__esModule', { value: true });
	});

	/***/ }),
	/* 392 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__select__ = __webpack_require__(360);



	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  return Object(__WEBPACK_IMPORTED_MODULE_1__select__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name).call(document.documentElement));
	});

	/***/ }),
	/* 393 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(350);



	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
	});

	/***/ }),
	/* 394 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selectorAll__ = __webpack_require__(361);



	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_1__selectorAll__["a" /* default */])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, parents);
	});

	/***/ }),
	/* 395 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__matcher__ = __webpack_require__(362);



	/* harmony default export */ __webpack_exports__["a"] = (function (match) {
	  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_1__matcher__["a" /* default */])(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](subgroups, this._parents);
	});

	/***/ }),
	/* 396 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__enter__ = __webpack_require__(363);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__constant__ = __webpack_require__(397);




	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new __WEBPACK_IMPORTED_MODULE_1__enter__["a" /* EnterNode */](parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && nodeByKeyValue[keyValues[i]] === node) {
	      exit[i] = node;
	    }
	  }
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function (d) {
	      data[++j] = d;
	    });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = Object(__WEBPACK_IMPORTED_MODULE_2__constant__["a" /* default */])(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength) {}
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	});

	/***/ }),
	/* 397 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (x) {
	  return function () {
	    return x;
	  };
	});

	/***/ }),
	/* 398 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sparse__ = __webpack_require__(364);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(60);



	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Selection */](this._exit || this._groups.map(__WEBPACK_IMPORTED_MODULE_0__sparse__["a" /* default */]), this._parents);
	});

	/***/ }),
	/* 399 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selection) {

	  for (var groups0 = this._groups, groups1 = selection._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](merges, this._parents);
	});

	/***/ }),
	/* 400 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	});

	/***/ }),
	/* 401 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (compare) {
	  if (!compare) compare = ascending;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Selection */](sortgroups, this._parents).order();
	});

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	/***/ }),
	/* 402 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	});

	/***/ }),
	/* 403 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var nodes = new Array(this.size()),
	      i = -1;
	  this.each(function () {
	    nodes[++i] = this;
	  });
	  return nodes;
	});

	/***/ }),
	/* 404 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 405 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var size = 0;
	  this.each(function () {
	    ++size;
	  });
	  return size;
	});

	/***/ }),
	/* 406 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return !this.node();
	});

	/***/ }),
	/* 407 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	});

	/***/ }),
	/* 408 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__namespace__ = __webpack_require__(348);


	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function () {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function () {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0__namespace__["a" /* default */])(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local ? node.getAttributeNS(fullname.space, fullname.local) : node.getAttribute(fullname);
	  }

	  return this.each((value == null ? fullname.local ? attrRemoveNS : attrRemove : typeof value === "function" ? fullname.local ? attrFunctionNS : attrFunction : fullname.local ? attrConstantNS : attrConstant)(fullname, value));
	});

	/***/ }),
	/* 409 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function propertyRemove(name) {
	  return function () {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function () {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];else this[name] = v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  return arguments.length > 1 ? this.each((value == null ? propertyRemove : typeof value === "function" ? propertyFunction : propertyConstant)(name, value)) : this.node()[name];
	});

	/***/ }),
	/* 410 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function add(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function remove(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function contains(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;
	  while (++i < n) {
	    list.add(names[i]);
	  }
	}

	function classedRemove(node, names) {
	  var list = classList(node),
	      i = -1,
	      n = names.length;
	  while (++i < n) {
	    list.remove(names[i]);
	  }
	}

	function classedTrue(names) {
	  return function () {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function () {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function () {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()),
	        i = -1,
	        n = names.length;
	    while (++i < n) {
	      if (!list.contains(names[i])) return false;
	    }return true;
	  }

	  return this.each((typeof value === "function" ? classedFunction : value ? classedTrue : classedFalse)(names, value));
	});

	/***/ }),
	/* 411 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return arguments.length ? this.each(value == null ? textRemove : (typeof value === "function" ? textFunction : textConstant)(value)) : this.node().textContent;
	});

	/***/ }),
	/* 412 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function () {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function () {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return arguments.length ? this.each(value == null ? htmlRemove : (typeof value === "function" ? htmlFunction : htmlConstant)(value)) : this.node().innerHTML;
	});

	/***/ }),
	/* 413 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(raise);
	});

	/***/ }),
	/* 414 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(lower);
	});

	/***/ }),
	/* 415 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name);
	  return this.select(function () {
	    return this.appendChild(create.apply(this, arguments));
	  });
	});

	/***/ }),
	/* 416 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__creator__ = __webpack_require__(336);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__selector__ = __webpack_require__(350);



	function constantNull() {
	  return null;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, before) {
	  var create = typeof name === "function" ? name : Object(__WEBPACK_IMPORTED_MODULE_0__creator__["a" /* default */])(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : Object(__WEBPACK_IMPORTED_MODULE_1__selector__["a" /* default */])(before);
	  return this.select(function () {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	});

	/***/ }),
	/* 417 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.each(remove);
	});

	/***/ }),
	/* 418 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function selection_cloneShallow() {
	  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
	}

	function selection_cloneDeep() {
	  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	});

	/***/ }),
	/* 419 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	    return arguments.length ? this.property("__data__", value) : this.node().__data__;
	});

	/***/ }),
	/* 420 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__window__ = __webpack_require__(351);


	function dispatchEvent(node, type, params) {
	  var window = Object(__WEBPACK_IMPORTED_MODULE_0__window__["a" /* default */])(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function () {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (type, params) {
	  return this.each((typeof params === "function" ? dispatchFunction : dispatchConstant)(type, params));
	});

	/***/ }),
	/* 421 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = local;
	var nextId = 0;

	function local() {
	  return new Local();
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local.prototype = {
	  constructor: Local,
	  get: function get(node) {
	    var id = this._;
	    while (!(id in node)) {
	      if (!(node = node.parentNode)) return;
	    }return node[id];
	  },
	  set: function set(node, value) {
	    return node[this._] = value;
	  },
	  remove: function remove(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function toString() {
	    return this._;
	  }
	};

	/***/ }),
	/* 422 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node) {
	  var event = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, event);
	});

	/***/ }),
	/* 423 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__selection_index__ = __webpack_require__(60);


	/* harmony default export */ __webpack_exports__["a"] = (function (selector) {
	    return typeof selector === "string" ? new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([document.querySelectorAll(selector)], [document.documentElement]) : new __WEBPACK_IMPORTED_MODULE_0__selection_index__["a" /* Selection */]([selector == null ? [] : selector], __WEBPACK_IMPORTED_MODULE_0__selection_index__["c" /* root */]);
	});

	/***/ }),
	/* 424 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touch);
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 425 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__sourceEvent__ = __webpack_require__(353);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__point__ = __webpack_require__(337);



	/* harmony default export */ __webpack_exports__["a"] = (function (node, touches) {
	  if (touches == null) touches = Object(__WEBPACK_IMPORTED_MODULE_0__sourceEvent__["a" /* default */])().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = Object(__WEBPACK_IMPORTED_MODULE_1__point__["a" /* default */])(node, touches[i]);
	  }

	  return points;
	});

	/***/ }),
	/* 426 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__interrupt__ = __webpack_require__(427);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__transition__ = __webpack_require__(432);




	__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.interrupt = __WEBPACK_IMPORTED_MODULE_1__interrupt__["a" /* default */];
	__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.transition = __WEBPACK_IMPORTED_MODULE_2__transition__["a" /* default */];

	/***/ }),
	/* 427 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__interrupt__ = __webpack_require__(367);


	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  return this.each(function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__interrupt__["a" /* default */])(this, name);
	  });
	});

	/***/ }),
	/* 428 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_dispatch__ = __webpack_require__(429);
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__src_dispatch__["a"]; });


	/***/ }),
	/* 429 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var noop = { value: function value() {} };

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || t in _) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function (t) {
	    var name = "",
	        i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return { type: t, name: name };
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function on(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) {
	        if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      }return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);else if (callback == null) for (t in _) {
	        _[t] = set(_[t], typename.name, null);
	      }
	    }

	    return this;
	  },
	  copy: function copy() {
	    var copy = {},
	        _ = this._;
	    for (var t in _) {
	      copy[t] = _[t].slice();
	    }return new Dispatch(copy);
	  },
	  call: function call(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) {
	      args[i] = arguments[i + 2];
	    }if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  },
	  apply: function apply(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) {
	      t[i].value.apply(that, args);
	    }
	  }
	};

	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({ name: name, value: callback });
	  return type;
	}

	/* harmony default export */ __webpack_exports__["a"] = (dispatch);

	/***/ }),
	/* 430 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(354);


	/* harmony default export */ __webpack_exports__["a"] = (function (callback, delay, time) {
	  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */]();
	  delay = delay == null ? 0 : +delay;
	  t.restart(function (elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	});

	/***/ }),
	/* 431 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__timer__ = __webpack_require__(354);


	/* unused harmony default export */ var _unused_webpack_default_export = (function (callback, delay, time) {
	  var t = new __WEBPACK_IMPORTED_MODULE_0__timer__["a" /* Timer */](),
	      total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? Object(__WEBPACK_IMPORTED_MODULE_0__timer__["b" /* now */])() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	});

	/***/ }),
	/* 432 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(61);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_d3_ease__ = __webpack_require__(461);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_d3_timer__ = __webpack_require__(368);





	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: __WEBPACK_IMPORTED_MODULE_2_d3_ease__["a" /* easeCubicInOut */]
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), defaultTiming;
	    }
	  }
	  return timing;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name) {
	  var id, timing;

	  if (name instanceof __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]) {
	    id = name._id, name = name._name;
	  } else {
	    id = Object(__WEBPACK_IMPORTED_MODULE_0__transition_index__["c" /* newId */])(), (timing = defaultTiming).time = Object(__WEBPACK_IMPORTED_MODULE_3_d3_timer__["a" /* now */])(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        Object(__WEBPACK_IMPORTED_MODULE_1__transition_schedule__["e" /* default */])(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */](groups, this._parents, name, id);
	});

	/***/ }),
	/* 433 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(355);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(339);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(377);





	function attrRemove(name) {
	  return function () {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function () {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, interpolate, value1) {
	  var value00, interpolate0;
	  return function () {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	  };
	}

	function attrConstantNS(fullname, interpolate, value1) {
	  var value00, interpolate0;
	  return function () {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	  };
	}

	function attrFunction(name, interpolate, value) {
	  var value00, value10, interpolate0;
	  return function () {
	    var value0,
	        value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS(fullname, interpolate, value) {
	  var value00, value10, interpolate0;
	  return function () {
	    var value0,
	        value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["namespace"])(name),
	      i = fullname === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["e" /* interpolateTransformSvg */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
	  return this.attrTween(name, typeof value === "function" ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "attr." + name, value)) : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname) : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
	});

	/***/ }),
	/* 434 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = lab;
	/* unused harmony export Lab */
	/* harmony export (immutable) */ __webpack_exports__["b"] = hcl;
	/* unused harmony export Hcl */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(357);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(369);




	var Kn = 18,
	    Xn = 0.950470,
	    // D65 standard referent
	Yn = 1,
	    Zn = 1.088830,
	    t0 = 4 / 29,
	    t1 = 6 / 29,
	    t2 = 3 * t1 * t1,
	    t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    var h = o.h * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */];
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	  var b = rgb2xyz(o.r),
	      a = rgb2xyz(o.g),
	      l = rgb2xyz(o.b),
	      x = xyz2lab((0.4124564 * b + 0.3575761 * a + 0.1804375 * l) / Xn),
	      y = xyz2lab((0.2126729 * b + 0.7151522 * a + 0.0721750 * l) / Yn),
	      z = xyz2lab((0.0193339 * b + 0.1191920 * a + 0.9503041 * l) / Zn);
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Lab, lab, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    return new Lab(this.l + Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function darker(k) {
	    return new Lab(this.l - Kn * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function rgb() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    y = Yn * lab2xyz(y);
	    x = Xn * lab2xyz(x);
	    z = Zn * lab2xyz(z);
	    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](xyz2rgb(3.2404542 * x - 1.5371385 * y - 0.4985314 * z), // D65 -> sRGB
	    xyz2rgb(-0.9692660 * x + 1.8760108 * y + 0.0415560 * z), xyz2rgb(0.0556434 * x - 0.2040259 * y + 1.0572252 * z), this.opacity);
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function xyz2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2xyz(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  var h = Math.atan2(o.b, o.a) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */];
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Hcl, hcl, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    return new Hcl(this.h, this.c, this.l + Kn * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function darker(k) {
	    return new Hcl(this.h, this.c, this.l - Kn * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function rgb() {
	    return labConvert(this).rgb();
	  }
	}));

	/***/ }),
	/* 435 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = cubehelix;
	/* unused harmony export Cubehelix */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__define__ = __webpack_require__(358);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(357);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__math__ = __webpack_require__(369);




	var A = -0.14861,
	    B = +1.78277,
	    C = -0.29227,
	    D = -0.90649,
	    E = +1.97294,
	    ED = E * D,
	    EB = E * B,
	    BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */])) o = Object(__WEBPACK_IMPORTED_MODULE_1__color__["h" /* rgbConvert */])(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)),
	      // NaN if l=0 or l=1
	  h = s ? Math.atan2(k, bl) * __WEBPACK_IMPORTED_MODULE_2__math__["b" /* rad2deg */] - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	Object(__WEBPACK_IMPORTED_MODULE_0__define__["a" /* default */])(Cubehelix, cubehelix, Object(__WEBPACK_IMPORTED_MODULE_0__define__["b" /* extend */])(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* Color */], {
	  brighter: function brighter(k) {
	    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* brighter */], k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function darker(k) {
	    k = k == null ? __WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */] : Math.pow(__WEBPACK_IMPORTED_MODULE_1__color__["d" /* darker */], k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function rgb() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * __WEBPACK_IMPORTED_MODULE_2__math__["a" /* deg2rad */],
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new __WEBPACK_IMPORTED_MODULE_1__color__["b" /* Rgb */](255 * (l + a * (A * cosh + B * sinh)), 255 * (l + a * (C * cosh + D * sinh)), 255 * (l + a * (E * cosh)), this.opacity);
	  }
	}));

	/***/ }),
	/* 436 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony default export */ var _unused_webpack_default_export = (function (a, b) {
	  return a = +a, b -= a, function (t) {
	    return Math.round(a + b * t);
	  };
	});

	/***/ }),
	/* 437 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return interpolateTransformCss; });
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return interpolateTransformSvg; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__number__ = __webpack_require__(338);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__parse__ = __webpack_require__(438);



	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360;else if (b - a > 180) a += 360; // shortest path
	      q.push({ i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({ i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(a, b) });
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({ i: i - 4, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(xa, xb) }, { i: i - 2, x: Object(__WEBPACK_IMPORTED_MODULE_0__number__["a" /* default */])(ya, yb) });
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function (a, b) {
	    var s = [],
	        // string constants and placeholders
	    q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function (t) {
	      var i = -1,
	          n = q.length,
	          o;
	      while (++i < n) {
	        s[(o = q[i]).i] = o.x(t);
	      }return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["a" /* parseCss */], "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(__WEBPACK_IMPORTED_MODULE_1__parse__["b" /* parseSvg */], ", ", ")", ")");

	/***/ }),
	/* 438 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (immutable) */ __webpack_exports__["a"] = parseCss;
	/* harmony export (immutable) */ __webpack_exports__["b"] = parseSvg;
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__decompose__ = __webpack_require__(439);


	var cssNode, cssRoot, cssView, svgNode;

	function parseCss(value) {
	  if (value === "none") return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return __WEBPACK_IMPORTED_MODULE_0__decompose__["b" /* identity */];
	  value = value.matrix;
	  return Object(__WEBPACK_IMPORTED_MODULE_0__decompose__["a" /* default */])(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	/***/ }),
	/* 439 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return identity; });
	var degrees = 180 / Math.PI;

	var identity = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	/* harmony default export */ __webpack_exports__["a"] = (function (a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	});

	/***/ }),
	/* 440 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	var rho = Math.SQRT2,
	    rho2 = 2,
	    rho4 = 4,
	    epsilon2 = 1e-12;

	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}

	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}

	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}

	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	/* unused harmony default export */ var _unused_webpack_default_export = (function (p0, p1) {
	  var ux0 = p0[0],
	      uy0 = p0[1],
	      w0 = p0[2],
	      ux1 = p1[0],
	      uy1 = p1[1],
	      w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;

	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function i(t) {
	      return [ux0 + t * dx, uy0 + t * dy, w0 * Math.exp(rho * t * S)];
	    };
	  }

	  // General case.
	  else {
	      var d1 = Math.sqrt(d2),
	          b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	          b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	          r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	          r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	      S = (r1 - r0) / rho;
	      i = function i(t) {
	        var s = t * S,
	            coshr0 = cosh(r0),
	            u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	        return [ux0 + u * dx, uy0 + u * dy, w0 * coshr0 / cosh(rho * s + r0)];
	      };
	    }

	  i.duration = S * 1000;

	  return i;
	});

	/***/ }),
	/* 441 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export hslLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function hsl(hue) {
	  return function (start, end) {
	    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["d" /* hsl */])(end)).h),
	        s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  };
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (hsl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var hslLong = hsl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 442 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export default */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function lab(start, end) {
	  var l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(start)).l, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["e" /* lab */])(end)).l),
	      a = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.a, end.a),
	      b = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.b, end.b),
	      opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	  return function (t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}

	/***/ }),
	/* 443 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export hclLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function hcl(hue) {
	  return function (start, end) {
	    var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["c" /* hcl */])(end)).h),
	        c = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.c, end.c),
	        l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	        opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	    return function (t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  };
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (hcl(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var hclLong = hcl(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 444 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export cubehelixLong */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_color__ = __webpack_require__(114);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__color__ = __webpack_require__(332);



	function cubehelix(hue) {
	  return function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix(start, end) {
	      var h = hue((start = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(start)).h, (end = Object(__WEBPACK_IMPORTED_MODULE_0_d3_color__["b" /* cubehelix */])(end)).h),
	          s = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.s, end.s),
	          l = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.l, end.l),
	          opacity = Object(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */])(start.opacity, end.opacity);
	      return function (t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix.gamma = cubehelixGamma;

	    return cubehelix;
	  }(1);
	}

	/* unused harmony default export */ var _unused_webpack_default_export = (cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["c" /* hue */]));
	var cubehelixLong = cubehelix(__WEBPACK_IMPORTED_MODULE_1__color__["a" /* default */]);

	/***/ }),
	/* 445 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony default export */ var _unused_webpack_default_export = (function (interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) {
	    samples[i] = interpolator(i / (n - 1));
	  }return samples;
	});

	/***/ }),
	/* 446 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);


	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  var fullname = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["namespace"])(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	});

	/***/ }),
	/* 447 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function delayFunction(id, value) {
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */])(this, id).delay = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each((typeof value === "function" ? delayFunction : delayConstant)(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).delay;
	});

	/***/ }),
	/* 448 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function durationFunction(id, value) {
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).duration = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each((typeof value === "function" ? durationFunction : durationConstant)(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).duration;
	});

	/***/ }),
	/* 449 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error();
	  return function () {
	    Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */])(this, id).ease = value;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  var id = this._id;

	  return arguments.length ? this.each(easeConstant(id, value)) : Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).ease;
	});

	/***/ }),
	/* 450 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);



	/* harmony default export */ __webpack_exports__["a"] = (function (match) {
	  if (typeof match !== "function") match = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["matcher"])(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, this._name, this._id);
	});

	/***/ }),
	/* 451 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(113);


	/* harmony default export */ __webpack_exports__["a"] = (function (transition) {
	  if (transition._id !== this._id) throw new Error();

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](merges, this._parents, this._name, this._id);
	});

	/***/ }),
	/* 452 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__schedule__ = __webpack_require__(61);


	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function (t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0,
	      on1,
	      sit = start(name) ? __WEBPACK_IMPORTED_MODULE_0__schedule__["g" /* init */] : __WEBPACK_IMPORTED_MODULE_0__schedule__["h" /* set */];
	  return function () {
	    var schedule = sit(this, id),
	        on = schedule.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule.on = on1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, listener) {
	  var id = this._id;

	  return arguments.length < 2 ? Object(__WEBPACK_IMPORTED_MODULE_0__schedule__["f" /* get */])(this.node(), id).on.on(name) : this.each(onFunction(id, name, listener));
	});

	/***/ }),
	/* 453 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function removeFunction(id) {
	  return function () {
	    var parent = this.parentNode;
	    for (var i in this.__transition) {
	      if (+i !== id) return;
	    }if (parent) parent.removeChild(this);
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return this.on("end.remove", removeFunction(this._id));
	});

	/***/ }),
	/* 454 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(61);




	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selector"])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(subgroup[i], name, id, i, subgroup, Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id));
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, this._parents, name, id);
	});

	/***/ }),
	/* 455 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__schedule__ = __webpack_require__(61);




	/* harmony default export */ __webpack_exports__["a"] = (function (select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = Object(__WEBPACK_IMPORTED_MODULE_0_d3_selection__["selectorAll"])(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select.call(node, node.__data__, i, group), child, inherit = Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["f" /* get */])(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            Object(__WEBPACK_IMPORTED_MODULE_2__schedule__["e" /* default */])(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_1__index__["a" /* Transition */](subgroups, parents, name, id);
	});

	/***/ }),
	/* 456 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_selection__ = __webpack_require__(59);


	var Selection = __WEBPACK_IMPORTED_MODULE_0_d3_selection__["selection"].prototype.constructor;

	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  return new Selection(this._groups, this._parents);
	});

	/***/ }),
	/* 457 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__ = __webpack_require__(355);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_d3_selection__ = __webpack_require__(59);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__tween__ = __webpack_require__(339);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__interpolate__ = __webpack_require__(377);





	function styleRemove(name, interpolate) {
	    var value00, value10, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name),
	            value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name));
	        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	    };
	}

	function styleRemoveEnd(name) {
	    return function () {
	        this.style.removeProperty(name);
	    };
	}

	function styleConstant(name, interpolate, value1) {
	    var value00, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name);
	        return value0 === value1 ? null : value0 === value00 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value1);
	    };
	}

	function styleFunction(name, interpolate, value) {
	    var value00, value10, interpolate0;
	    return function () {
	        var value0 = Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name),
	            value1 = value(this);
	        if (value1 == null) value1 = (this.style.removeProperty(name), Object(__WEBPACK_IMPORTED_MODULE_1_d3_selection__["style"])(this, name));
	        return value0 === value1 ? null : value0 === value00 && value1 === value10 ? interpolate0 : interpolate0 = interpolate(value00 = value0, value10 = value1);
	    };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	    var i = (name += "") === "transform" ? __WEBPACK_IMPORTED_MODULE_0_d3_interpolate__["d" /* interpolateTransformCss */] : __WEBPACK_IMPORTED_MODULE_3__interpolate__["a" /* default */];
	    return value == null ? this.styleTween(name, styleRemove(name, i)).on("end.style." + name, styleRemoveEnd(name)) : this.styleTween(name, typeof value === "function" ? styleFunction(name, i, Object(__WEBPACK_IMPORTED_MODULE_2__tween__["b" /* tweenValue */])(this, "style." + name, value)) : styleConstant(name, i, value + ""), priority);
	});

	/***/ }),
	/* 458 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this,
	        i = value.apply(node, arguments);
	    return i && function (t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error();
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	});

	/***/ }),
	/* 459 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__tween__ = __webpack_require__(339);


	function textConstant(value) {
	  return function () {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function () {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	/* harmony default export */ __webpack_exports__["a"] = (function (value) {
	  return this.tween("text", typeof value === "function" ? textFunction(Object(__WEBPACK_IMPORTED_MODULE_0__tween__["b" /* tweenValue */])(this, "text", value)) : textConstant(value == null ? "" : value + ""));
	});

	/***/ }),
	/* 460 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__schedule__ = __webpack_require__(61);



	/* harmony default export */ __webpack_exports__["a"] = (function () {
	  var name = this._name,
	      id0 = this._id,
	      id1 = Object(__WEBPACK_IMPORTED_MODULE_0__index__["c" /* newId */])();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["f" /* get */])(node, id0);
	        Object(__WEBPACK_IMPORTED_MODULE_1__schedule__["e" /* default */])(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new __WEBPACK_IMPORTED_MODULE_0__index__["a" /* Transition */](groups, this._parents, name, id1);
	});

	/***/ }),
	/* 461 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__src_linear__ = __webpack_require__(462);
	/* unused harmony reexport easeLinear */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__src_quad__ = __webpack_require__(463);
	/* unused harmony reexport easeQuad */
	/* unused harmony reexport easeQuadIn */
	/* unused harmony reexport easeQuadOut */
	/* unused harmony reexport easeQuadInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__src_cubic__ = __webpack_require__(464);
	/* unused harmony reexport easeCubic */
	/* unused harmony reexport easeCubicIn */
	/* unused harmony reexport easeCubicOut */
	/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_2__src_cubic__["a"]; });
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__src_poly__ = __webpack_require__(465);
	/* unused harmony reexport easePoly */
	/* unused harmony reexport easePolyIn */
	/* unused harmony reexport easePolyOut */
	/* unused harmony reexport easePolyInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__src_sin__ = __webpack_require__(466);
	/* unused harmony reexport easeSin */
	/* unused harmony reexport easeSinIn */
	/* unused harmony reexport easeSinOut */
	/* unused harmony reexport easeSinInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__src_exp__ = __webpack_require__(467);
	/* unused harmony reexport easeExp */
	/* unused harmony reexport easeExpIn */
	/* unused harmony reexport easeExpOut */
	/* unused harmony reexport easeExpInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__src_circle__ = __webpack_require__(468);
	/* unused harmony reexport easeCircle */
	/* unused harmony reexport easeCircleIn */
	/* unused harmony reexport easeCircleOut */
	/* unused harmony reexport easeCircleInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__src_bounce__ = __webpack_require__(469);
	/* unused harmony reexport easeBounce */
	/* unused harmony reexport easeBounceIn */
	/* unused harmony reexport easeBounceOut */
	/* unused harmony reexport easeBounceInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__src_back__ = __webpack_require__(470);
	/* unused harmony reexport easeBack */
	/* unused harmony reexport easeBackIn */
	/* unused harmony reexport easeBackOut */
	/* unused harmony reexport easeBackInOut */
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__src_elastic__ = __webpack_require__(471);
	/* unused harmony reexport easeElastic */
	/* unused harmony reexport easeElasticIn */
	/* unused harmony reexport easeElasticOut */
	/* unused harmony reexport easeElasticInOut */




















	/***/ }),
	/* 462 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export linear */
	function linear(t) {
	  return +t;
	}

	/***/ }),
	/* 463 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export quadIn */
	/* unused harmony export quadOut */
	/* unused harmony export quadInOut */
	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	/***/ }),
	/* 464 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export cubicIn */
	/* unused harmony export cubicOut */
	/* harmony export (immutable) */ __webpack_exports__["a"] = cubicInOut;
	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	/***/ }),
	/* 465 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export polyIn */
	/* unused harmony export polyOut */
	/* unused harmony export polyInOut */
	var exponent = 3;

	var polyIn = function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	}(exponent);

	var polyOut = function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	}(exponent);

	var polyInOut = function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	}(exponent);

	/***/ }),
	/* 466 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export sinIn */
	/* unused harmony export sinOut */
	/* unused harmony export sinInOut */
	var pi = Math.PI,
	    halfPi = pi / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}

	/***/ }),
	/* 467 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export expIn */
	/* unused harmony export expOut */
	/* unused harmony export expInOut */
	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	/***/ }),
	/* 468 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export circleIn */
	/* unused harmony export circleOut */
	/* unused harmony export circleInOut */
	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	/***/ }),
	/* 469 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export bounceIn */
	/* unused harmony export bounceOut */
	/* unused harmony export bounceInOut */
	var b1 = 4 / 11,
	    b2 = 6 / 11,
	    b3 = 8 / 11,
	    b4 = 3 / 4,
	    b5 = 9 / 11,
	    b6 = 10 / 11,
	    b7 = 15 / 16,
	    b8 = 21 / 22,
	    b9 = 63 / 64,
	    b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	/***/ }),
	/* 470 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export backIn */
	/* unused harmony export backOut */
	/* unused harmony export backInOut */
	var overshoot = 1.70158;

	var backIn = function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	}(overshoot);

	var backOut = function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	}(overshoot);

	var backInOut = function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	}(overshoot);

	/***/ }),
	/* 471 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* unused harmony export elasticIn */
	/* unused harmony export elasticOut */
	/* unused harmony export elasticInOut */
	var tau = 2 * Math.PI,
	    amplitude = 1,
	    period = 0.3;

	var elasticIn = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticIn.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticIn;
	}(amplitude, period);

	var elasticOut = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticOut.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticOut;
	}(amplitude, period);

	var elasticInOut = function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0 ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p) : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function (a) {
	    return custom(a, p * tau);
	  };
	  elasticInOut.period = function (p) {
	    return custom(a, p);
	  };

	  return elasticInOut;
	}(amplitude, period);

	/***/ }),
	/* 472 */
	/***/ (function(module, __webpack_exports__, __webpack_require__) {

	"use strict";
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__transition_index__ = __webpack_require__(113);
	/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__transition_schedule__ = __webpack_require__(61);



	var root = [null];

	/* harmony default export */ __webpack_exports__["a"] = (function (node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;

	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > __WEBPACK_IMPORTED_MODULE_1__transition_schedule__["c" /* SCHEDULED */] && schedule.name === name) {
	        return new __WEBPACK_IMPORTED_MODULE_0__transition_index__["a" /* Transition */]([[node]], root, name, +i);
	      }
	    }
	  }

	  return null;
	});

	/***/ }),
	/* 473 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview venn shapes
	 * @author leungwensen@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Shape = __webpack_require__(10);
	var Global = __webpack_require__(2);

	var _require = __webpack_require__(1),
	    PathUtil = _require.PathUtil;

	function getAttrs(cfg) {
	  var defaultCfg = Global.shape.venn;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    fill: cfg.color,
	    fillOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	function getHollowAttrs(cfg) {
	  var defaultCfg = Global.shape.hollowVenn;
	  var shapeCfg = Util.mix({}, defaultCfg, {
	    stroke: cfg.color,
	    strokeOpacity: cfg.opacity
	  }, cfg.style);
	  return shapeCfg;
	}

	// register venn geom
	var Venn = Shape.registerFactory('venn', {
	  defaultShapeType: 'venn',
	  getDefaultPoints: function getDefaultPoints(pointInfo) {
	    var points = [];
	    Util.each(pointInfo.x, function (subX, index) {
	      var subY = pointInfo.y[index];
	      points.push({
	        x: subX,
	        y: subY
	      });
	    });
	    return points;
	  },
	  getActiveCfg: function getActiveCfg(type, cfg) {
	    var lineWidth = cfg.lineWidth || 1;
	    if (type === 'hollow') {
	      return {
	        lineWidth: lineWidth + 1
	      };
	    }

	    var opacity = cfg.fillOpacity || cfg.opacity || 1;
	    return {
	      // lineWidth,
	      fillOpacity: opacity - 0.08
	    };
	  },
	  getSelectedCfg: function getSelectedCfg(type, cfg) {
	    if (cfg && cfg.style) {
	      return cfg.style;
	    }
	    return this.getActiveCfg(type, cfg);
	  }
	});

	Shape.registerShape('venn', 'venn', {
	  draw: function draw(cfg, container) {
	    var origin = cfg.origin._origin;
	    var path = origin.path;
	    var attrs = getAttrs(cfg);
	    var segments = PathUtil.parsePathString(path);

	    var pathShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: segments
	      })
	    });
	    return pathShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	Shape.registerShape('venn', 'hollow', {
	  draw: function draw(cfg, container) {
	    var origin = cfg.origin._origin;
	    var path = origin.path;
	    var attrs = getHollowAttrs(cfg);
	    var segments = PathUtil.parsePathString(path);

	    var pathShape = container.addShape('path', {
	      attrs: Util.mix(attrs, {
	        path: segments
	      })
	    });
	    return pathShape;
	  },
	  getMarkerCfg: function getMarkerCfg(cfg) {
	    return Util.mix({
	      symbol: 'circle',
	      radius: 4
	    }, getAttrs(cfg));
	  }
	});

	module.exports = Venn;

	/***/ }),
	/* 474 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Facet 的入口
	 * @author dxq613@gmail.com
	 */
	var Util = __webpack_require__(0);
	var Chart = __webpack_require__(115);
	var Facets = {};

	Facets.Rect = __webpack_require__(378);
	Facets.List = __webpack_require__(379);
	Facets.Circle = __webpack_require__(475);
	Facets.Tree = __webpack_require__(476);
	Facets.Mirror = __webpack_require__(477);
	Facets.Matrix = __webpack_require__(478);

	Chart.prototype.facet = function (type, cfg) {
	  var cls = Facets[Util.upperFirst(type)];
	  if (!cls) {
	    throw new Error('Not support such type of facets as: ' + type);
	  }
	  var preFacets = this.get('facets');
	  if (preFacets) {
	    preFacets.destroy();
	  }
	  cfg.chart = this;
	  var facets = new cls(cfg);
	  this.set('facets', facets);
	};

	module.exports = Facets;

	/***/ }),
	/* 475 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview circle facets
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);

	function getPoint(center, r, angle) {
	  return {
	    x: center.x + r * Math.cos(angle),
	    y: center.y + r * Math.sin(angle)
	  };
	}

	var Circle = function (_Base) {
	  _inherits(Circle, _Base);

	  function Circle() {
	    _classCallCheck(this, Circle);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Circle.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'circle';
	    return cfg;
	  };

	  Circle.prototype.getRegion = function getRegion(count, index) {
	    var r = 1 / 2; // 画布半径
	    var avgAngle = Math.PI * 2 / count;
	    var angle = -1 * Math.PI / 2 + avgAngle * index; // 当前分面所在的弧度
	    var facetR = r / (1 + 1 / Math.sin(avgAngle / 2));
	    var center = { x: 0.5, y: 0.5 }; // 画布圆心
	    var middle = getPoint(center, r - facetR, angle); // 分面的中心点
	    var startAngle = Math.PI * 5 / 4; // 右上角
	    var endAngle = Math.PI * 1 / 4; // 左下角

	    return {
	      start: getPoint(middle, facetR, startAngle),
	      end: getPoint(middle, facetR, endAngle)
	    };
	  };

	  Circle.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var field = fields[0];
	    if (!field) {
	      throw 'Please specify for the field for facet!';
	    }
	    var values = self.getFieldValues(field, data);
	    var count = values.length;
	    var rst = [];
	    values.forEach(function (value, index) {
	      var conditions = [{ field: field, value: value, values: values }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      var facet = {
	        type: self.type,
	        colValue: value,
	        colField: field,
	        colIndex: index,
	        cols: count,
	        rows: 1,
	        rowIndex: 0,
	        data: subData,
	        region: self.getRegion(count, index)
	      };
	      rst.push(facet);
	    });
	    return rst;
	  };

	  return Circle;
	}(Base);

	module.exports = Circle;

	/***/ }),
	/* 476 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview tree facets
	 * @author dxq613@gmail.com
	 */

	var Base = __webpack_require__(340);
	var Util = __webpack_require__(0);

	var assign = Util.assign;

	var Tree = function (_Base) {
	  _inherits(Tree, _Base);

	  function Tree() {
	    _classCallCheck(this, Tree);

	    return _possibleConstructorReturn(this, _Base.apply(this, arguments));
	  }

	  Tree.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Base.prototype.getDefaultCfg.call(this);
	    cfg.type = 'tree';
	    cfg.line = {
	      lineWidth: 1,
	      stroke: '#ddd'
	    };
	    cfg.lineSmooth = false;
	    return cfg;
	  };

	  Tree.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    if (!fields.length) {
	      throw 'Please specify for the fields for facet!';
	    }
	    var rst = [];
	    var root = self.getRootFacet(data);
	    // if (self.showRoot) {
	    rst.push(root);
	    // }
	    root.children = self.getChildFacets(data, 1, rst);
	    self.setRegion(rst);
	    return rst;
	  };

	  Tree.prototype.getRootFacet = function getRootFacet(data) {
	    var self = this;
	    var facet = {
	      type: self.type,
	      rows: self.getRows(),
	      rowIndex: 0,
	      colIndex: 0,
	      colValue: self.rootTitle,
	      data: data
	    };
	    return facet;
	  };

	  Tree.prototype.getRows = function getRows() {
	    return this.fields.length + 1;
	  };

	  // get child


	  Tree.prototype.getChildFacets = function getChildFacets(data, level, arr) {
	    var self = this;
	    var fields = self.fields;
	    var length = fields.length;
	    if (length < level) {
	      return;
	    }
	    var rst = [];
	    var field = fields[level - 1];
	    var values = self.getFieldValues(field, data);
	    values.forEach(function (value, index) {
	      var conditions = [{ field: field, value: value, values: values }];
	      var filter = self.getFilter(conditions);
	      var subData = data.filter(filter);
	      if (subData.length) {
	        var facet = {
	          type: self.type,
	          colValue: value,
	          colField: field,
	          colIndex: index,
	          rows: self.getRows(),
	          rowIndex: level,
	          data: subData,
	          children: self.getChildFacets(subData, level + 1, arr)
	        };
	        rst.push(facet);
	        arr.push(facet);
	      }
	    });
	    return rst;
	  };

	  // 设置 region


	  Tree.prototype.setRegion = function setRegion(facets) {
	    var self = this;
	    self.forceColIndex(facets);
	    facets.forEach(function (facet) {
	      facet.region = self.getRegion(facet.rows, facet.cols, facet.colIndex, facet.rowIndex);
	    });
	  };

	  // set column index of facets


	  Tree.prototype.forceColIndex = function forceColIndex(facets) {
	    var self = this;
	    var leafs = [];
	    var index = 0;
	    facets.forEach(function (facet) {
	      if (self.isLeaf(facet)) {
	        leafs.push(facet);
	        facet.colIndex = index;
	        index++;
	      }
	    });

	    leafs.forEach(function (facet) {
	      facet.cols = leafs.length;
	    });
	    var maxLevel = self.fields.length;
	    for (var i = maxLevel - 1; i >= 0; i--) {
	      var levelFacets = self.getFacetsByLevel(facets, i);
	      // var yIndex = maxLevel - i;
	      for (var j = 0; j < levelFacets.length; j++) {
	        var facet = levelFacets[j];
	        if (!self.isLeaf(facet)) {
	          facet.originColIndex = facet.colIndex;
	          facet.colIndex = self.getRegionIndex(facet.children);
	          facet.cols = leafs.length;
	        }
	      }
	    }
	  };

	  // get facet use level


	  Tree.prototype.getFacetsByLevel = function getFacetsByLevel(facets, level) {
	    var rst = [];
	    facets.forEach(function (facet) {
	      if (facet.rowIndex === level) {
	        rst.push(facet);
	      }
	    });
	    return rst;
	  };

	  // set facets region


	  Tree.prototype.getRegion = function getRegion(rows, cols, xIndex, yIndex) {
	    var xWidth = 1 / cols; // x轴方向的每个分面的偏移
	    var yWidth = 1 / rows; // y轴方向的每个分面的偏移

	    var start = {
	      x: xWidth * xIndex,
	      y: yWidth * yIndex
	    };

	    var end = {
	      x: start.x + xWidth,
	      y: start.y + yWidth * 2 / 3 // 预留1/3的空隙，方便添加连接线
	    };
	    return {
	      start: start,
	      end: end
	    };
	  };

	  // if the facet has children , make it's column index in the middle of it's children


	  Tree.prototype.getRegionIndex = function getRegionIndex(children) {
	    var first = children[0];
	    var last = children[children.length - 1];
	    return (last.colIndex - first.colIndex) / 2 + first.colIndex;
	  };

	  // is  a leaf without children


	  Tree.prototype.isLeaf = function isLeaf(facet) {
	    return !facet.children || !facet.children.length;
	  };

	  Tree.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  Tree.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.originColIndex !== 0 && facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  // 绘制完成后


	  Tree.prototype.onPaint = function onPaint() {
	    _Base.prototype.onPaint.call(this);
	    this.group.clear();
	    if (this.facets && this.line) {
	      this.drawLines(this.facets, this.group);
	    }
	  };

	  Tree.prototype.drawLines = function drawLines(facets, group) {
	    var self = this;
	    var lineGroup = group.addGroup();
	    facets.forEach(function (facet) {
	      if (!self.isLeaf(facet)) {
	        var children = facet.children;
	        self._addFacetLines(facet, children, lineGroup);
	      }
	    });
	  };

	  // add lines with it's children


	  Tree.prototype._addFacetLines = function _addFacetLines(facet, children, group) {
	    var self = this;
	    var view = facet.view;
	    var region = view.getViewRegion();
	    var start = {
	      x: region.start.x + (region.end.x - region.start.x) / 2,
	      y: region.start.y
	    };

	    children.forEach(function (subFacet) {
	      var subRegion = subFacet.view.getViewRegion();
	      var end = {
	        x: subRegion.start.x + (subRegion.end.x - subRegion.start.x) / 2,
	        y: subRegion.end.y
	      };
	      var middle1 = {
	        x: start.x,
	        y: start.y + (end.y - start.y) / 2
	      };
	      var middle2 = {
	        x: end.x,
	        y: middle1.y
	      };
	      self._drawLine([start, middle1, middle2, end], group);
	    });
	  };

	  Tree.prototype._getPath = function _getPath(points) {
	    var self = this;
	    var path = [];
	    var smooth = self.lineSmooth;
	    if (smooth) {
	      path.push(['M', points[0].x, points[0].y]);
	      path.push(['C', points[1].x, points[1].y, points[2].x, points[2].y, points[3].x, points[3].y]);
	    } else {
	      points.forEach(function (point, index) {
	        if (index === 0) {
	          path.push(['M', point.x, point.y]);
	        } else {
	          path.push(['L', point.x, point.y]);
	        }
	      });
	    }

	    return path;
	  };

	  // draw line width points


	  Tree.prototype._drawLine = function _drawLine(points, group) {
	    var self = this;
	    var path = self._getPath(points);
	    var line = self.line;
	    group.addShape('path', {
	      attrs: assign({
	        path: path
	      }, line)
	    });
	  };

	  return Tree;
	}(Base);

	module.exports = Tree;

	/***/ }),
	/* 477 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview mirror facets
	 * @author dxq613@gmail.com
	 */

	var List = __webpack_require__(379);

	var Mirror = function (_List) {
	  _inherits(Mirror, _List);

	  function Mirror() {
	    _classCallCheck(this, Mirror);

	    return _possibleConstructorReturn(this, _List.apply(this, arguments));
	  }

	  Mirror.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _List.prototype.getDefaultCfg.call(this);
	    cfg.type = 'mirror';
	    this.transpose = false;
	    return cfg;
	  };

	  Mirror.prototype.init = function init() {
	    var self = this;
	    if (self.transpose) {
	      self.cols = 2;
	      self.rows = 1;
	    } else {
	      self.cols = 1;
	      self.rows = 2;
	    }
	    _List.prototype.init.call(this);
	  };

	  Mirror.prototype.beforeProcessView = function beforeProcessView(view, facet) {
	    if (this.transpose) {
	      if (facet.colIndex % 2 === 0) {
	        view.coord().transpose().scale(-1, 1);
	      } else {
	        view.coord().transpose();
	      }
	    } else {
	      if (facet.rowIndex % 2 !== 0) {
	        view.coord().scale(1, -1);
	      }
	    }
	  };

	  Mirror.prototype.renderTitle = function renderTitle(view, facet) {
	    if (this.transpose) {
	      this.drawColTitle(view, facet);
	    } else {
	      this.drawRowTitle(view, facet);
	    }
	  };

	  Mirror.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    // 当是最后一行或者下面没有 view 时文本不显示
	    if (facet.colIndex === 1 || facet.rowIndex === 1) {
	      axes[xField].label = null;
	      axes[xField].title = null;
	    }
	  };

	  Mirror.prototype.setYAxis = function setYAxis() /* yField, axes, facet */{};

	  return Mirror;
	}(List);

	module.exports = Mirror;

	/***/ }),
	/* 478 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	/**
	 * @fileOverview Use matrices to compare different fields
	 * @author dxq613@gmail.com
	 */

	var Rect = __webpack_require__(378);

	var Matrix = function (_Rect) {
	  _inherits(Matrix, _Rect);

	  function Matrix() {
	    _classCallCheck(this, Matrix);

	    return _possibleConstructorReturn(this, _Rect.apply(this, arguments));
	  }

	  Matrix.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Rect.prototype.getDefaultCfg.call(this);
	    cfg.type = 'matrix';
	    cfg.showTitle = false;
	    return cfg;
	  };

	  Matrix.prototype.generateFacets = function generateFacets(data) {
	    var self = this;
	    var fields = self.fields;
	    var rows = fields.length;
	    var cols = rows; // 矩阵中行列相等，等于指定的字段个数
	    var rst = [];
	    for (var i = 0; i < cols; i++) {
	      var colField = fields[i];
	      for (var j = 0; j < rows; j++) {
	        var rowField = fields[j];
	        var facet = {
	          type: self.type,
	          colValue: colField,
	          rowValue: rowField,
	          colField: colField,
	          rowField: rowField,
	          colIndex: i,
	          rowIndex: j,
	          cols: cols,
	          rows: rows,
	          data: data,
	          region: self.getRegion(rows, cols, i, j)
	        };
	        rst.push(facet);
	      }
	    }
	    return rst;
	  };

	  // 设置 x 坐标轴的文本、title 是否显示


	  Matrix.prototype.setXAxis = function setXAxis(xField, axes, facet) {
	    if (facet.rowIndex !== facet.rows - 1) {
	      axes[xField].title = null;
	      axes[xField].label = null;
	    }
	  };

	  // 设置 y 坐标轴的文本、title 是否显示


	  Matrix.prototype.setYAxis = function setYAxis(yField, axes, facet) {
	    if (facet.colIndex !== 0) {
	      axes[yField].title = null;
	      axes[yField].label = null;
	    }
	  };

	  return Matrix;
	}(Rect);

	module.exports = Matrix;

	/***/ }),
	/* 479 */
	/***/ (function(module, exports, __webpack_require__) {

	/**
	 * @fileOverview Interaction
	 * @author leungwensen@gmail.com
	 */

	var Interactions = {
	  Base: __webpack_require__(341),
	  Brush: __webpack_require__(480),
	  Drag: __webpack_require__(481),
	  Zoom: __webpack_require__(482)
	};

	module.exports = Interactions;

	/***/ }),
	/* 480 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var BRUSH_TYPES = ['X', 'Y', 'XY', 'POLYGON'];
	var DEFAULT_TYPE = 'XY';

	var Brush = function (_Interaction) {
	  _inherits(Brush, _Interaction);

	  Brush.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      type: DEFAULT_TYPE,
	      startPoint: null,
	      brushing: false,
	      dragging: false,
	      brushShape: null,
	      container: null,
	      polygonPath: null,
	      style: {
	        fill: '#C5D4EB',
	        opacity: 0.3,
	        lineWidth: 1,
	        stroke: '#82A6DD'
	      },
	      draggable: false,
	      dragOffX: 0,
	      dragOffY: 0,
	      inPlot: true,
	      xField: null,
	      yField: null
	    });
	  };

	  function Brush(cfg, view) {
	    _classCallCheck(this, Brush);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.filter = !me.draggable;
	    me.type = me.type.toUpperCase();
	    me.chart = view;

	    if (BRUSH_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    var canvas = me.canvas;
	    if (canvas) {
	      var plotRange = void 0;
	      canvas.get('children').map(function (child) {
	        if (child.get('type') === 'plotBack') {
	          plotRange = child.get('plotRange');
	          return false;
	        }
	        return child;
	      });
	      me.plot = {
	        start: plotRange.bl,
	        end: plotRange.tr
	      };
	    }
	    if (view) {
	      var coord = view.get('coord');
	      me.plot = {
	        start: coord.start,
	        end: coord.end
	      };
	      var xScales = view._getScales('x');
	      var yScales = view._getScales('y');
	      me.xScale = me.xField ? xScales[me.xField] : view.getXScale();
	      me.yScale = me.yField ? yScales[me.yField] : view.getYScales()[0];
	    }
	    return _this;
	  }

	  // onBurshstart() { }
	  // onBrushmove() { }
	  // onBrushend() {}
	  // onDragstart() {}
	  // onDragmove() {}
	  // onDragend() {}

	  Brush.prototype.start = function start(ev) {
	    var me = this;
	    var canvas = me.canvas,
	        type = me.type,
	        brushShape = me.brushShape;


	    if (!type) return;

	    var startPoint = { x: ev.offsetX, y: ev.offsetY };
	    if (!startPoint.x) return;
	    var isInPlot = me.plot && me.inPlot;
	    var canvasDOM = canvas.get('canvasDOM');
	    var pixelRatio = canvas.get('pixelRatio');

	    if (me.selection) me.selection = null;

	    if (me.draggable && brushShape && !brushShape.get('destroyed')) {
	      // allow drag the brushShape
	      if (brushShape.isHit(startPoint.x * pixelRatio, startPoint.y * pixelRatio)) {
	        canvasDOM.style.cursor = 'move';
	        me.selection = brushShape;
	        me.dragging = true;
	        if (type === 'X') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = 0;
	        } else if (type === 'Y') {
	          me.dragoffX = 0;
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'XY') {
	          me.dragoffX = startPoint.x - brushShape.attr('x');
	          me.dragoffY = startPoint.y - brushShape.attr('y');
	        } else if (type === 'POLYGON') {
	          var box = brushShape.getBBox();
	          me.dragoffX = startPoint.x - box.minX;
	          me.dragoffY = startPoint.y - box.minY;
	        }

	        if (isInPlot) {
	          me.selection.attr('clip', canvas.addShape('rect', {
	            attrs: {
	              x: this.plot.start.x,
	              y: this.plot.end.y,
	              width: this.plot.end.x - this.plot.start.x,
	              height: this.plot.start.y - this.plot.end.y,
	              fill: '#fff',
	              fillOpacity: 0
	            }
	          }));
	        }
	        me.onDragstart && me.onDragstart(ev);
	      }
	      me.prePoint = startPoint;
	    }

	    if (!me.dragging) {
	      // brush start
	      me.onBrushstart && me.onBrushstart(startPoint);
	      var container = me.container;
	      if (isInPlot) {
	        var _me$plot = me.plot,
	            start = _me$plot.start,
	            end = _me$plot.end;

	        if (startPoint.x < start.x || startPoint.x > end.x || startPoint.y < end.y || startPoint.y > start.y) return;
	      }
	      canvasDOM.style.cursor = 'crosshair';
	      me.startPoint = startPoint;
	      me.brushShape = null;
	      me.brushing = true;

	      if (!container) {
	        container = canvas.addGroup({
	          zIndex: 5 // upper
	        });
	        container.initTransform();
	      } else {
	        container.clear();
	      }
	      me.container = container;

	      if (type === 'POLYGON') me.polygonPath = 'M ' + startPoint.x + ' ' + startPoint.y;
	    }
	  };

	  Brush.prototype.process = function process(ev) {
	    var me = this;
	    var brushing = me.brushing,
	        dragging = me.dragging,
	        type = me.type,
	        plot = me.plot,
	        startPoint = me.startPoint,
	        xScale = me.xScale,
	        yScale = me.yScale,
	        canvas = me.canvas;


	    if (!brushing && !dragging) {
	      return;
	    }
	    var currentPoint = {
	      x: ev.offsetX,
	      y: ev.offsetY
	    };
	    var canvasDOM = canvas.get('canvasDOM');

	    if (brushing) {
	      canvasDOM.style.cursor = 'crosshair';
	      var start = plot.start,
	          end = plot.end;

	      var polygonPath = me.polygonPath;
	      var brushShape = me.brushShape;
	      var container = me.container;
	      if (me.plot && me.inPlot) {
	        currentPoint = me._limitCoordScope(currentPoint);
	      }

	      var rectStartX = void 0;
	      var rectStartY = void 0;
	      var rectWidth = void 0;
	      var rectHeight = void 0;

	      if (type === 'Y') {
	        rectStartX = start.x;
	        rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        rectWidth = Math.abs(start.x - end.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'X') {
	        rectStartX = currentPoint.x >= startPoint.x ? startPoint.x : currentPoint.x;
	        rectStartY = end.y;
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(end.y - start.y);
	      } else if (type === 'XY') {
	        if (currentPoint.x >= startPoint.x) {
	          rectStartX = startPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        } else {
	          rectStartX = currentPoint.x;
	          rectStartY = currentPoint.y >= startPoint.y ? startPoint.y : currentPoint.y;
	        }
	        rectWidth = Math.abs(startPoint.x - currentPoint.x);
	        rectHeight = Math.abs(startPoint.y - currentPoint.y);
	      } else if (type === 'POLYGON') {
	        polygonPath += 'L ' + currentPoint.x + ' ' + currentPoint.y;
	        me.polygonPath = polygonPath;
	        if (!brushShape) {
	          brushShape = container.addShape('path', {
	            attrs: Util.mix(me.style, {
	              path: polygonPath
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            path: polygonPath
	          }));
	        }
	      }
	      if (type !== 'POLYGON') {
	        if (!brushShape) {
	          brushShape = container.addShape('rect', {
	            attrs: Util.mix(me.style, {
	              x: rectStartX,
	              y: rectStartY,
	              width: rectWidth,
	              height: rectHeight
	            })
	          });
	        } else {
	          !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	            x: rectStartX,
	            y: rectStartY,
	            width: rectWidth,
	            height: rectHeight
	          }));
	        }
	      }

	      me.brushShape = brushShape;
	    } else if (dragging) {
	      canvasDOM.style.cursor = 'move';
	      var selection = me.selection;
	      if (selection && !selection.get('destroyed')) {
	        if (type === 'POLYGON') {
	          var prePoint = me.prePoint;
	          me.selection.translate(currentPoint.x - prePoint.x, currentPoint.y - prePoint.y);
	        } else {
	          me.dragoffX && selection.attr('x', currentPoint.x - me.dragoffX);
	          me.dragoffY && selection.attr('y', currentPoint.y - me.dragoffY);
	        }
	      }
	    }

	    me.prePoint = currentPoint;
	    canvas.draw();

	    var _me$_getSelected = me._getSelected(),
	        data = _me$_getSelected.data,
	        shapes = _me$_getSelected.shapes,
	        xValues = _me$_getSelected.xValues,
	        yValues = _me$_getSelected.yValues;

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: currentPoint.x,
	      y: currentPoint.y
	    };

	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }
	    me.onDragmove && me.onDragmove(eventObj);
	    me.onBrushmove && me.onBrushmove(eventObj);
	  };

	  Brush.prototype.end = function end(ev) {
	    var me = this;
	    var data = me.data,
	        shapes = me.shapes,
	        xValues = me.xValues,
	        yValues = me.yValues,
	        canvas = me.canvas,
	        type = me.type,
	        startPoint = me.startPoint,
	        chart = me.chart,
	        container = me.container,
	        xScale = me.xScale,
	        yScale = me.yScale;
	    var offsetX = ev.offsetX,
	        offsetY = ev.offsetY;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'default';

	    if (Math.abs(startPoint.x - offsetX) <= 1 && Math.abs(startPoint.y - offsetY) <= 1) {
	      // 防止点击事件
	      me.brushing = false;
	      me.dragging = false;
	      return;
	    }

	    var eventObj = {
	      data: data,
	      shapes: shapes,
	      x: offsetX,
	      y: offsetY
	    };
	    if (xScale) {
	      eventObj[xScale.field] = xValues;
	    }
	    if (yScale) {
	      eventObj[yScale.field] = yValues;
	    }

	    if (me.dragging) {
	      me.dragging = false;
	      me.onDragend && me.onDragend(eventObj);
	    } else if (me.brushing) {
	      me.brushing = false;
	      var brushShape = me.brushShape;
	      var polygonPath = me.polygonPath;

	      if (type === 'POLYGON') {
	        polygonPath += 'z';

	        brushShape && !brushShape.get('destroyed') && brushShape.attr(Util.mix({}, brushShape.__attrs, {
	          path: polygonPath
	        }));
	        me.polygonPath = polygonPath;
	        canvas.draw();
	      }

	      if (me.onBrushend) {
	        me.onBrushend(eventObj);
	      } else if (chart && me.filter) {
	        container.clear(); // clear the brush
	        // filter data
	        if (type === 'X') {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	        } else if (type === 'Y') {
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        } else {
	          xScale && chart.filter(xScale.field, function (val) {
	            return xValues.indexOf(val) > -1;
	          });
	          yScale && chart.filter(yScale.field, function (val) {
	            return yValues.indexOf(val) > -1;
	          });
	        }
	        chart.repaint();
	      }
	    }
	  };

	  Brush.prototype.reset = function reset() {
	    var me = this;
	    var chart = me.chart,
	        filter = me.filter;

	    if (chart && filter) {
	      chart.get('options').filters = {};
	      chart.repaint();
	    }
	  };

	  Brush.prototype._limitCoordScope = function _limitCoordScope(point) {
	    var plot = this.plot;
	    var start = plot.start,
	        end = plot.end;


	    if (point.x < start.x) {
	      point.x = start.x;
	    }
	    if (point.x > end.x) {
	      point.x = end.x;
	    }
	    if (point.y < end.y) {
	      point.y = end.y;
	    }
	    if (point.y > start.y) {
	      point.y = start.y;
	    }
	    return point;
	  };

	  Brush.prototype._getSelected = function _getSelected() {
	    var me = this;
	    var chart = me.chart,
	        xScale = me.xScale,
	        yScale = me.yScale,
	        brushShape = me.brushShape,
	        canvas = me.canvas;

	    var pixelRatio = canvas.get('pixelRatio');
	    var selectedShapes = [];
	    var xValues = [];
	    var yValues = [];
	    var selectedData = [];
	    if (chart) {
	      var geoms = chart.get('geoms');
	      geoms.map(function (geom) {
	        var shapes = geom.getShapes();
	        shapes.map(function (shape) {
	          var shapeData = shape.get('origin');
	          if (!Array.isArray(shapeData)) {
	            // 线图、区域图等
	            shapeData = [shapeData];
	          }

	          shapeData.map(function (each) {
	            if (brushShape.isHit(each.x * pixelRatio, each.y * pixelRatio)) {
	              selectedShapes.push(shape);
	              var origin = each._origin;
	              selectedData.push(origin);
	              xScale && xValues.push(origin[xScale.field]);
	              yScale && yValues.push(origin[yScale.field]);
	            }
	            return each;
	          });

	          return shape;
	        });
	        return geom;
	      });
	    }
	    me.shapes = selectedShapes;
	    me.xValues = xValues;
	    me.yValues = yValues;
	    me.data = selectedData;
	    return {
	      data: selectedData,
	      xValues: xValues,
	      yValues: yValues,
	      shapes: selectedShapes
	    };
	  };

	  return Brush;
	}(Interaction);

	G2.registerInteraction('brush', Brush);
	G2.registerInteraction('Brush', Brush);

	module.exports = Brush;

	/***/ }),
	/* 481 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var DRAGGING_TYPES = ['X', 'Y', 'XY'];
	var DEFAULT_TYPE = 'X';

	var Drag = function (_Interaction) {
	  _inherits(Drag, _Interaction);

	  Drag.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      type: DEFAULT_TYPE,
	      stepRatio: 0.05,
	      stepByField: {},
	      originScaleDefsByField: {},
	      previousPoint: null,
	      isDragging: false
	    });
	  };

	  function Drag(cfg, view) {
	    _classCallCheck(this, Drag);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.type = me.type.toUpperCase();
	    me.chart = view;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    var scaleController = view.get('scaleController');
	    scales.forEach(function (scale) {
	      var field = scale.field;
	      var def = scaleController.defs[field];
	      me.originScaleDefsByField[field] = Util.mix(def, {
	        nice: !!def.nice
	      });
	      if (scale.isLinear) {
	        me.stepByField[field] = (scale.max - scale.min) * me.stepRatio;
	      }
	    });

	    if (DRAGGING_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    return _this;
	  }

	  // onDragstart() { }
	  // onDrag() { }
	  // onDragend() { }

	  Drag.prototype._applyTranslate = function _applyTranslate(scale) {
	    var offset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

	    var me = this;
	    var chart = me.chart;
	    var min = scale.min,
	        max = scale.max,
	        field = scale.field;

	    var range = max - min;
	    chart.scale(field, {
	      nice: false,
	      min: min - offset * range,
	      max: max - offset * range
	    });
	  };

	  Drag.prototype.start = function start(ev) {
	    var me = this;
	    var chart = me.chart,
	        canvas = me.canvas;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'pointer';
	    var coord = chart.get('coord');
	    me.isDragging = true;
	    me.previousPoint = coord.invertPoint(ev);
	  };

	  Drag.prototype.process = function process(ev) {
	    var me = this;
	    if (me.isDragging) {
	      var chart = me.chart,
	          type = me.type,
	          canvas = me.canvas;

	      var canvasDOM = canvas.get('canvasDOM');
	      canvasDOM.style.cursor = 'move';
	      var coord = chart.get('coord');
	      var previousPoint = me.previousPoint;
	      var currentPoint = coord.invertPoint(ev);
	      if (type.indexOf('X') > -1) {
	        me._applyTranslate(chart.getXScale(), currentPoint.x - previousPoint.x);
	      }
	      if (type.indexOf('Y') > -1) {
	        var yScales = chart.getYScales();
	        yScales.forEach(function (yScale) {
	          me._applyTranslate(yScale, currentPoint.y - previousPoint.y);
	        });
	      }
	      me.previousPoint = currentPoint;
	      chart.repaint();
	    }
	  };

	  Drag.prototype.end = function end() {
	    var me = this;
	    me.isDragging = false;
	    var canvas = me.canvas;

	    var canvasDOM = canvas.get('canvasDOM');
	    canvasDOM.style.cursor = 'default';
	  };

	  Drag.prototype.reset = function reset() {
	    var me = this;
	    var view = me.view,
	        originScaleDefsByField = me.originScaleDefsByField;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    scales.forEach(function (scale) {
	      if (scale.isLinear) {
	        var field = scale.field;
	        view.scale(field, originScaleDefsByField[field]);
	      }
	    });
	    view.repaint();
	  };

	  return Drag;
	}(Interaction);

	G2.registerInteraction('drag', Drag);
	G2.registerInteraction('Drag', Drag);

	module.exports = Drag;

	/***/ }),
	/* 482 */
	/***/ (function(module, exports, __webpack_require__) {

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

	var Util = __webpack_require__(0);
	var Interaction = __webpack_require__(341);
	var G2 = __webpack_require__(62);

	var ZOOMING_TYPES = ['X', 'Y', 'XY'];
	var DEFAULT_TYPE = 'X';

	// TODO zoom with center point

	var Zoom = function (_Interaction) {
	  _inherits(Zoom, _Interaction);

	  Zoom.prototype.getDefaultCfg = function getDefaultCfg() {
	    var cfg = _Interaction.prototype.getDefaultCfg.call(this);
	    return Util.mix({}, cfg, {
	      processingEvent: 'mousewheel',
	      type: DEFAULT_TYPE,
	      stepRatio: 0.05,
	      stepByField: {},
	      originScaleDefsByField: {}
	    });
	  };

	  function Zoom(cfg, view) {
	    _classCallCheck(this, Zoom);

	    var _this = _possibleConstructorReturn(this, _Interaction.call(this, cfg, view));

	    var me = _this;
	    me.chart = view;
	    me.type = me.type.toUpperCase();

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    var scaleController = view.get('scaleController');
	    scales.forEach(function (scale) {
	      var field = scale.field;
	      var def = scaleController.defs[field] || {};
	      me.originScaleDefsByField[field] = Util.mix(def, {
	        nice: !!def.nice
	      });
	      if (scale.isLinear) {
	        me.stepByField[field] = (scale.max - scale.min) * me.stepRatio;
	      }
	    });

	    if (ZOOMING_TYPES.indexOf(me.type) === -1) {
	      me.type = DEFAULT_TYPE;
	    }
	    return _this;
	  }

	  // onZoom() { }
	  // onZoomin() { }
	  // onZoomout() { }

	  Zoom.prototype._applyScale = function _applyScale(scale, delta) {
	    var minOffset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;

	    var me = this;
	    var chart = me.chart,
	        stepByField = me.stepByField;

	    if (scale.isLinear) {
	      var min = scale.min,
	          max = scale.max,
	          field = scale.field;

	      var maxOffset = 1 - minOffset;
	      var step = stepByField[field] * delta;
	      var newMin = min + step * minOffset;
	      var newMax = max - step * maxOffset;
	      if (newMax > newMin) {
	        chart.scale(field, {
	          nice: false,
	          min: newMin,
	          max: newMax
	        });
	      }
	    }
	  };

	  Zoom.prototype.process = function process(ev) {
	    var me = this;
	    var chart = me.chart,
	        type = me.type;

	    var coord = chart.get('coord');
	    var deltaY = ev.deltaY;
	    var offsetPoint = coord.invertPoint(ev);
	    if (deltaY) {
	      me.onZoom && me.onZoom(deltaY, offsetPoint, me);
	      if (deltaY > 0) {
	        me.onZoomin && me.onZoomin(deltaY, offsetPoint, me);
	      } else {
	        me.onZoomout && me.onZoomout(deltaY, offsetPoint, me);
	      }
	      var delta = deltaY / Math.abs(deltaY);
	      if (type.indexOf('X') > -1) {
	        me._applyScale(chart.getXScale(), delta, offsetPoint.x);
	      }
	      if (type.indexOf('Y') > -1) {
	        var yScales = chart.getYScales();
	        yScales.forEach(function (yScale) {
	          me._applyScale(yScale, delta, offsetPoint.y);
	        });
	      }
	    }
	    chart.repaint();
	  };

	  Zoom.prototype.reset = function reset() {
	    var me = this;
	    var view = me.view,
	        originScaleDefsByField = me.originScaleDefsByField;

	    var scales = view.getYScales();
	    var xScale = view.getXScale();
	    scales.push(xScale);
	    scales.forEach(function (scale) {
	      if (scale.isLinear) {
	        var field = scale.field;
	        view.scale(field, originScaleDefsByField[field]);
	      }
	    });
	    view.repaint();
	  };

	  return Zoom;
	}(Interaction);

	G2.registerInteraction('zoom', Zoom);
	G2.registerInteraction('Zoom', Zoom);

	module.exports = Zoom;

	/***/ })
	/******/ ]);
	});
	//# sourceMappingURL=g2.js.map

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, '__esModule', { value: true });

	var d3Array = __webpack_require__(8);
	var d3Axis = __webpack_require__(9);
	var d3Brush = __webpack_require__(10);
	var d3Chord = __webpack_require__(19);
	var d3Collection = __webpack_require__(21);
	var d3Color = __webpack_require__(15);
	var d3Contour = __webpack_require__(22);
	var d3Dispatch = __webpack_require__(11);
	var d3Drag = __webpack_require__(12);
	var d3Dsv = __webpack_require__(23);
	var d3Ease = __webpack_require__(18);
	var d3Fetch = __webpack_require__(24);
	var d3Force = __webpack_require__(25);
	var d3Format = __webpack_require__(27);
	var d3Geo = __webpack_require__(28);
	var d3Hierarchy = __webpack_require__(29);
	var d3Interpolate = __webpack_require__(14);
	var d3Path = __webpack_require__(20);
	var d3Polygon = __webpack_require__(30);
	var d3Quadtree = __webpack_require__(26);
	var d3Random = __webpack_require__(31);
	var d3Scale = __webpack_require__(32);
	var d3ScaleChromatic = __webpack_require__(35);
	var d3Selection = __webpack_require__(13);
	var d3Shape = __webpack_require__(36);
	var d3Time = __webpack_require__(33);
	var d3TimeFormat = __webpack_require__(34);
	var d3Timer = __webpack_require__(17);
	var d3Transition = __webpack_require__(16);
	var d3Voronoi = __webpack_require__(37);
	var d3Zoom = __webpack_require__(38);

	var version = "5.5.0";

	Object.keys(d3Array).forEach(function (key) { exports[key] = d3Array[key]; });
	Object.keys(d3Axis).forEach(function (key) { exports[key] = d3Axis[key]; });
	Object.keys(d3Brush).forEach(function (key) { exports[key] = d3Brush[key]; });
	Object.keys(d3Chord).forEach(function (key) { exports[key] = d3Chord[key]; });
	Object.keys(d3Collection).forEach(function (key) { exports[key] = d3Collection[key]; });
	Object.keys(d3Color).forEach(function (key) { exports[key] = d3Color[key]; });
	Object.keys(d3Contour).forEach(function (key) { exports[key] = d3Contour[key]; });
	Object.keys(d3Dispatch).forEach(function (key) { exports[key] = d3Dispatch[key]; });
	Object.keys(d3Drag).forEach(function (key) { exports[key] = d3Drag[key]; });
	Object.keys(d3Dsv).forEach(function (key) { exports[key] = d3Dsv[key]; });
	Object.keys(d3Ease).forEach(function (key) { exports[key] = d3Ease[key]; });
	Object.keys(d3Fetch).forEach(function (key) { exports[key] = d3Fetch[key]; });
	Object.keys(d3Force).forEach(function (key) { exports[key] = d3Force[key]; });
	Object.keys(d3Format).forEach(function (key) { exports[key] = d3Format[key]; });
	Object.keys(d3Geo).forEach(function (key) { exports[key] = d3Geo[key]; });
	Object.keys(d3Hierarchy).forEach(function (key) { exports[key] = d3Hierarchy[key]; });
	Object.keys(d3Interpolate).forEach(function (key) { exports[key] = d3Interpolate[key]; });
	Object.keys(d3Path).forEach(function (key) { exports[key] = d3Path[key]; });
	Object.keys(d3Polygon).forEach(function (key) { exports[key] = d3Polygon[key]; });
	Object.keys(d3Quadtree).forEach(function (key) { exports[key] = d3Quadtree[key]; });
	Object.keys(d3Random).forEach(function (key) { exports[key] = d3Random[key]; });
	Object.keys(d3Scale).forEach(function (key) { exports[key] = d3Scale[key]; });
	Object.keys(d3ScaleChromatic).forEach(function (key) { exports[key] = d3ScaleChromatic[key]; });
	Object.keys(d3Selection).forEach(function (key) { exports[key] = d3Selection[key]; });
	Object.keys(d3Shape).forEach(function (key) { exports[key] = d3Shape[key]; });
	Object.keys(d3Time).forEach(function (key) { exports[key] = d3Time[key]; });
	Object.keys(d3TimeFormat).forEach(function (key) { exports[key] = d3TimeFormat[key]; });
	Object.keys(d3Timer).forEach(function (key) { exports[key] = d3Timer[key]; });
	Object.keys(d3Transition).forEach(function (key) { exports[key] = d3Transition[key]; });
	Object.keys(d3Voronoi).forEach(function (key) { exports[key] = d3Voronoi[key]; });
	Object.keys(d3Zoom).forEach(function (key) { exports[key] = d3Zoom[key]; });
	exports.version = version;
	Object.defineProperty(exports, "event", {get: function() { return d3Selection.event; }});


/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-array/ Version 1.2.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var ascending = function(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	};

	var bisector = function(compare) {
	  if (compare.length === 1) compare = ascendingComparator(compare);
	  return {
	    left: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) < 0) lo = mid + 1;
	        else hi = mid;
	      }
	      return lo;
	    },
	    right: function(a, x, lo, hi) {
	      if (lo == null) lo = 0;
	      if (hi == null) hi = a.length;
	      while (lo < hi) {
	        var mid = lo + hi >>> 1;
	        if (compare(a[mid], x) > 0) hi = mid;
	        else lo = mid + 1;
	      }
	      return lo;
	    }
	  };
	};

	function ascendingComparator(f) {
	  return function(d, x) {
	    return ascending(f(d), x);
	  };
	}

	var ascendingBisect = bisector(ascending);
	var bisectRight = ascendingBisect.right;
	var bisectLeft = ascendingBisect.left;

	var pairs = function(array, f) {
	  if (f == null) f = pair;
	  var i = 0, n = array.length - 1, p = array[0], pairs = new Array(n < 0 ? 0 : n);
	  while (i < n) pairs[i] = f(p, p = array[++i]);
	  return pairs;
	};

	function pair(a, b) {
	  return [a, b];
	}

	var cross = function(values0, values1, reduce) {
	  var n0 = values0.length,
	      n1 = values1.length,
	      values = new Array(n0 * n1),
	      i0,
	      i1,
	      i,
	      value0;

	  if (reduce == null) reduce = pair;

	  for (i0 = i = 0; i0 < n0; ++i0) {
	    for (value0 = values0[i0], i1 = 0; i1 < n1; ++i1, ++i) {
	      values[i] = reduce(value0, values1[i1]);
	    }
	  }

	  return values;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var number = function(x) {
	  return x === null ? NaN : +x;
	};

	var variance = function(values, valueof) {
	  var n = values.length,
	      m = 0,
	      i = -1,
	      mean = 0,
	      value,
	      delta,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        delta = value - mean;
	        mean += delta / ++m;
	        sum += delta * (value - mean);
	      }
	    }
	  }

	  if (m > 1) return sum / (m - 1);
	};

	var deviation = function(array, f) {
	  var v = variance(array, f);
	  return v ? Math.sqrt(v) : v;
	};

	var extent = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null) {
	            if (min > value) min = value;
	            if (max < value) max = value;
	          }
	        }
	      }
	    }
	  }

	  return [min, max];
	};

	var array = Array.prototype;

	var slice = array.slice;
	var map = array.map;

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var identity = function(x) {
	  return x;
	};

	var range = function(start, stop, step) {
	  start = +start, stop = +stop, step = (n = arguments.length) < 2 ? (stop = start, start = 0, 1) : n < 3 ? 1 : +step;

	  var i = -1,
	      n = Math.max(0, Math.ceil((stop - start) / step)) | 0,
	      range = new Array(n);

	  while (++i < n) {
	    range[i] = start + i * step;
	  }

	  return range;
	};

	var e10 = Math.sqrt(50);
	var e5 = Math.sqrt(10);
	var e2 = Math.sqrt(2);

	var ticks = function(start, stop, count) {
	  var reverse,
	      i = -1,
	      n,
	      ticks,
	      step;

	  stop = +stop, start = +start, count = +count;
	  if (start === stop && count > 0) return [start];
	  if (reverse = stop < start) n = start, start = stop, stop = n;
	  if ((step = tickIncrement(start, stop, count)) === 0 || !isFinite(step)) return [];

	  if (step > 0) {
	    start = Math.ceil(start / step);
	    stop = Math.floor(stop / step);
	    ticks = new Array(n = Math.ceil(stop - start + 1));
	    while (++i < n) ticks[i] = (start + i) * step;
	  } else {
	    start = Math.floor(start * step);
	    stop = Math.ceil(stop * step);
	    ticks = new Array(n = Math.ceil(start - stop + 1));
	    while (++i < n) ticks[i] = (start - i) / step;
	  }

	  if (reverse) ticks.reverse();

	  return ticks;
	};

	function tickIncrement(start, stop, count) {
	  var step = (stop - start) / Math.max(0, count),
	      power = Math.floor(Math.log(step) / Math.LN10),
	      error = step / Math.pow(10, power);
	  return power >= 0
	      ? (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1) * Math.pow(10, power)
	      : -Math.pow(10, -power) / (error >= e10 ? 10 : error >= e5 ? 5 : error >= e2 ? 2 : 1);
	}

	function tickStep(start, stop, count) {
	  var step0 = Math.abs(stop - start) / Math.max(0, count),
	      step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10)),
	      error = step0 / step1;
	  if (error >= e10) step1 *= 10;
	  else if (error >= e5) step1 *= 5;
	  else if (error >= e2) step1 *= 2;
	  return stop < start ? -step1 : step1;
	}

	var sturges = function(values) {
	  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;
	};

	var histogram = function() {
	  var value = identity,
	      domain = extent,
	      threshold = sturges;

	  function histogram(data) {
	    var i,
	        n = data.length,
	        x,
	        values = new Array(n);

	    for (i = 0; i < n; ++i) {
	      values[i] = value(data[i], i, data);
	    }

	    var xz = domain(values),
	        x0 = xz[0],
	        x1 = xz[1],
	        tz = threshold(values, x0, x1);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      tz = tickStep(x0, x1, tz);
	      tz = range(Math.ceil(x0 / tz) * tz, Math.floor(x1 / tz) * tz, tz); // exclusive
	    }

	    // Remove any thresholds outside the domain.
	    var m = tz.length;
	    while (tz[0] <= x0) tz.shift(), --m;
	    while (tz[m - 1] > x1) tz.pop(), --m;

	    var bins = new Array(m + 1),
	        bin;

	    // Initialize bins.
	    for (i = 0; i <= m; ++i) {
	      bin = bins[i] = [];
	      bin.x0 = i > 0 ? tz[i - 1] : x0;
	      bin.x1 = i < m ? tz[i] : x1;
	    }

	    // Assign data to bins by value, ignoring any outside the domain.
	    for (i = 0; i < n; ++i) {
	      x = values[i];
	      if (x0 <= x && x <= x1) {
	        bins[bisectRight(tz, x, 0, m)].push(data[i]);
	      }
	    }

	    return bins;
	  }

	  histogram.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(_), histogram) : value;
	  };

	  histogram.domain = function(_) {
	    return arguments.length ? (domain = typeof _ === "function" ? _ : constant([_[0], _[1]]), histogram) : domain;
	  };

	  histogram.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), histogram) : threshold;
	  };

	  return histogram;
	};

	var quantile = function(values, p, valueof) {
	  if (valueof == null) valueof = number;
	  if (!(n = values.length)) return;
	  if ((p = +p) <= 0 || n < 2) return +valueof(values[0], 0, values);
	  if (p >= 1) return +valueof(values[n - 1], n - 1, values);
	  var n,
	      i = (n - 1) * p,
	      i0 = Math.floor(i),
	      value0 = +valueof(values[i0], i0, values),
	      value1 = +valueof(values[i0 + 1], i0 + 1, values);
	  return value0 + (value1 - value0) * (i - i0);
	};

	var freedmanDiaconis = function(values, min, max) {
	  values = map.call(values, number).sort(ascending);
	  return Math.ceil((max - min) / (2 * (quantile(values, 0.75) - quantile(values, 0.25)) * Math.pow(values.length, -1 / 3)));
	};

	var scott = function(values, min, max) {
	  return Math.ceil((max - min) / (3.5 * deviation(values) * Math.pow(values.length, -1 / 3)));
	};

	var max = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      max;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        max = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && value > max) {
	            max = value;
	          }
	        }
	      }
	    }
	  }

	  return max;
	};

	var mean = function(values, valueof) {
	  var n = values.length,
	      m = n,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) sum += value;
	      else --m;
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) sum += value;
	      else --m;
	    }
	  }

	  if (m) return sum / m;
	};

	var median = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      numbers = [];

	  if (valueof == null) {
	    while (++i < n) {
	      if (!isNaN(value = number(values[i]))) {
	        numbers.push(value);
	      }
	    }
	  }

	  else {
	    while (++i < n) {
	      if (!isNaN(value = number(valueof(values[i], i, values)))) {
	        numbers.push(value);
	      }
	    }
	  }

	  return quantile(numbers.sort(ascending), 0.5);
	};

	var merge = function(arrays) {
	  var n = arrays.length,
	      m,
	      i = -1,
	      j = 0,
	      merged,
	      array;

	  while (++i < n) j += arrays[i].length;
	  merged = new Array(j);

	  while (--n >= 0) {
	    array = arrays[n];
	    m = array.length;
	    while (--m >= 0) {
	      merged[--j] = array[m];
	    }
	  }

	  return merged;
	};

	var min = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      min;

	  if (valueof == null) {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = values[i]) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = values[i]) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  else {
	    while (++i < n) { // Find the first comparable value.
	      if ((value = valueof(values[i], i, values)) != null && value >= value) {
	        min = value;
	        while (++i < n) { // Compare the remaining values.
	          if ((value = valueof(values[i], i, values)) != null && min > value) {
	            min = value;
	          }
	        }
	      }
	    }
	  }

	  return min;
	};

	var permute = function(array, indexes) {
	  var i = indexes.length, permutes = new Array(i);
	  while (i--) permutes[i] = array[indexes[i]];
	  return permutes;
	};

	var scan = function(values, compare) {
	  if (!(n = values.length)) return;
	  var n,
	      i = 0,
	      j = 0,
	      xi,
	      xj = values[j];

	  if (compare == null) compare = ascending;

	  while (++i < n) {
	    if (compare(xi = values[i], xj) < 0 || compare(xj, xj) !== 0) {
	      xj = xi, j = i;
	    }
	  }

	  if (compare(xj, xj) === 0) return j;
	};

	var shuffle = function(array, i0, i1) {
	  var m = (i1 == null ? array.length : i1) - (i0 = i0 == null ? 0 : +i0),
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m + i0];
	    array[m + i0] = array[i + i0];
	    array[i + i0] = t;
	  }

	  return array;
	};

	var sum = function(values, valueof) {
	  var n = values.length,
	      i = -1,
	      value,
	      sum = 0;

	  if (valueof == null) {
	    while (++i < n) {
	      if (value = +values[i]) sum += value; // Note: zero and null are equivalent.
	    }
	  }

	  else {
	    while (++i < n) {
	      if (value = +valueof(values[i], i, values)) sum += value;
	    }
	  }

	  return sum;
	};

	var transpose = function(matrix) {
	  if (!(n = matrix.length)) return [];
	  for (var i = -1, m = min(matrix, length), transpose = new Array(m); ++i < m;) {
	    for (var j = -1, n, row = transpose[i] = new Array(n); ++j < n;) {
	      row[j] = matrix[j][i];
	    }
	  }
	  return transpose;
	};

	function length(d) {
	  return d.length;
	}

	var zip = function() {
	  return transpose(arguments);
	};

	exports.bisect = bisectRight;
	exports.bisectRight = bisectRight;
	exports.bisectLeft = bisectLeft;
	exports.ascending = ascending;
	exports.bisector = bisector;
	exports.cross = cross;
	exports.descending = descending;
	exports.deviation = deviation;
	exports.extent = extent;
	exports.histogram = histogram;
	exports.thresholdFreedmanDiaconis = freedmanDiaconis;
	exports.thresholdScott = scott;
	exports.thresholdSturges = sturges;
	exports.max = max;
	exports.mean = mean;
	exports.median = median;
	exports.merge = merge;
	exports.min = min;
	exports.pairs = pairs;
	exports.permute = permute;
	exports.quantile = quantile;
	exports.range = range;
	exports.scan = scan;
	exports.shuffle = shuffle;
	exports.sum = sum;
	exports.ticks = ticks;
	exports.tickIncrement = tickIncrement;
	exports.tickStep = tickStep;
	exports.transpose = transpose;
	exports.variance = variance;
	exports.zip = zip;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-axis/ Version 1.0.8. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var slice = Array.prototype.slice;

	var identity = function(x) {
	  return x;
	};

	var top = 1;
	var right = 2;
	var bottom = 3;
	var left = 4;
	var epsilon = 1e-6;

	function translateX(x) {
	  return "translate(" + (x + 0.5) + ",0)";
	}

	function translateY(y) {
	  return "translate(0," + (y + 0.5) + ")";
	}

	function number(scale) {
	  return function(d) {
	    return +scale(d);
	  };
	}

	function center(scale) {
	  var offset = Math.max(0, scale.bandwidth() - 1) / 2; // Adjust for 0.5px offset.
	  if (scale.round()) offset = Math.round(offset);
	  return function(d) {
	    return +scale(d) + offset;
	  };
	}

	function entering() {
	  return !this.__axis;
	}

	function axis(orient, scale) {
	  var tickArguments = [],
	      tickValues = null,
	      tickFormat = null,
	      tickSizeInner = 6,
	      tickSizeOuter = 6,
	      tickPadding = 3,
	      k = orient === top || orient === left ? -1 : 1,
	      x = orient === left || orient === right ? "x" : "y",
	      transform = orient === top || orient === bottom ? translateX : translateY;

	  function axis(context) {
	    var values = tickValues == null ? (scale.ticks ? scale.ticks.apply(scale, tickArguments) : scale.domain()) : tickValues,
	        format = tickFormat == null ? (scale.tickFormat ? scale.tickFormat.apply(scale, tickArguments) : identity) : tickFormat,
	        spacing = Math.max(tickSizeInner, 0) + tickPadding,
	        range = scale.range(),
	        range0 = +range[0] + 0.5,
	        range1 = +range[range.length - 1] + 0.5,
	        position = (scale.bandwidth ? center : number)(scale.copy()),
	        selection = context.selection ? context.selection() : context,
	        path = selection.selectAll(".domain").data([null]),
	        tick = selection.selectAll(".tick").data(values, scale).order(),
	        tickExit = tick.exit(),
	        tickEnter = tick.enter().append("g").attr("class", "tick"),
	        line = tick.select("line"),
	        text = tick.select("text");

	    path = path.merge(path.enter().insert("path", ".tick")
	        .attr("class", "domain")
	        .attr("stroke", "#000"));

	    tick = tick.merge(tickEnter);

	    line = line.merge(tickEnter.append("line")
	        .attr("stroke", "#000")
	        .attr(x + "2", k * tickSizeInner));

	    text = text.merge(tickEnter.append("text")
	        .attr("fill", "#000")
	        .attr(x, k * spacing)
	        .attr("dy", orient === top ? "0em" : orient === bottom ? "0.71em" : "0.32em"));

	    if (context !== selection) {
	      path = path.transition(context);
	      tick = tick.transition(context);
	      line = line.transition(context);
	      text = text.transition(context);

	      tickExit = tickExit.transition(context)
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { return isFinite(d = position(d)) ? transform(d) : this.getAttribute("transform"); });

	      tickEnter
	          .attr("opacity", epsilon)
	          .attr("transform", function(d) { var p = this.parentNode.__axis; return transform(p && isFinite(p = p(d)) ? p : position(d)); });
	    }

	    tickExit.remove();

	    path
	        .attr("d", orient === left || orient == right
	            ? "M" + k * tickSizeOuter + "," + range0 + "H0.5V" + range1 + "H" + k * tickSizeOuter
	            : "M" + range0 + "," + k * tickSizeOuter + "V0.5H" + range1 + "V" + k * tickSizeOuter);

	    tick
	        .attr("opacity", 1)
	        .attr("transform", function(d) { return transform(position(d)); });

	    line
	        .attr(x + "2", k * tickSizeInner);

	    text
	        .attr(x, k * spacing)
	        .text(format);

	    selection.filter(entering)
	        .attr("fill", "none")
	        .attr("font-size", 10)
	        .attr("font-family", "sans-serif")
	        .attr("text-anchor", orient === right ? "start" : orient === left ? "end" : "middle");

	    selection
	        .each(function() { this.__axis = position; });
	  }

	  axis.scale = function(_) {
	    return arguments.length ? (scale = _, axis) : scale;
	  };

	  axis.ticks = function() {
	    return tickArguments = slice.call(arguments), axis;
	  };

	  axis.tickArguments = function(_) {
	    return arguments.length ? (tickArguments = _ == null ? [] : slice.call(_), axis) : tickArguments.slice();
	  };

	  axis.tickValues = function(_) {
	    return arguments.length ? (tickValues = _ == null ? null : slice.call(_), axis) : tickValues && tickValues.slice();
	  };

	  axis.tickFormat = function(_) {
	    return arguments.length ? (tickFormat = _, axis) : tickFormat;
	  };

	  axis.tickSize = function(_) {
	    return arguments.length ? (tickSizeInner = tickSizeOuter = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeInner = function(_) {
	    return arguments.length ? (tickSizeInner = +_, axis) : tickSizeInner;
	  };

	  axis.tickSizeOuter = function(_) {
	    return arguments.length ? (tickSizeOuter = +_, axis) : tickSizeOuter;
	  };

	  axis.tickPadding = function(_) {
	    return arguments.length ? (tickPadding = +_, axis) : tickPadding;
	  };

	  return axis;
	}

	function axisTop(scale) {
	  return axis(top, scale);
	}

	function axisRight(scale) {
	  return axis(right, scale);
	}

	function axisBottom(scale) {
	  return axis(bottom, scale);
	}

	function axisLeft(scale) {
	  return axis(left, scale);
	}

	exports.axisTop = axisTop;
	exports.axisRight = axisRight;
	exports.axisBottom = axisBottom;
	exports.axisLeft = axisLeft;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-brush/ Version 1.0.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(11), __webpack_require__(12), __webpack_require__(14), __webpack_require__(13), __webpack_require__(16)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Dispatch,d3Drag,d3Interpolate,d3Selection,d3Transition) { 'use strict';

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var BrushEvent = function(target, type, selection) {
	  this.target = target;
	  this.type = type;
	  this.selection = selection;
	};

	function nopropagation() {
	  d3Selection.event.stopImmediatePropagation();
	}

	var noevent = function() {
	  d3Selection.event.preventDefault();
	  d3Selection.event.stopImmediatePropagation();
	};

	var MODE_DRAG = {name: "drag"};
	var MODE_SPACE = {name: "space"};
	var MODE_HANDLE = {name: "handle"};
	var MODE_CENTER = {name: "center"};

	var X = {
	  name: "x",
	  handles: ["e", "w"].map(type),
	  input: function(x, e) { return x && [[x[0], e[0][1]], [x[1], e[1][1]]]; },
	  output: function(xy) { return xy && [xy[0][0], xy[1][0]]; }
	};

	var Y = {
	  name: "y",
	  handles: ["n", "s"].map(type),
	  input: function(y, e) { return y && [[e[0][0], y[0]], [e[1][0], y[1]]]; },
	  output: function(xy) { return xy && [xy[0][1], xy[1][1]]; }
	};

	var XY = {
	  name: "xy",
	  handles: ["n", "e", "s", "w", "nw", "ne", "se", "sw"].map(type),
	  input: function(xy) { return xy; },
	  output: function(xy) { return xy; }
	};

	var cursors = {
	  overlay: "crosshair",
	  selection: "move",
	  n: "ns-resize",
	  e: "ew-resize",
	  s: "ns-resize",
	  w: "ew-resize",
	  nw: "nwse-resize",
	  ne: "nesw-resize",
	  se: "nwse-resize",
	  sw: "nesw-resize"
	};

	var flipX = {
	  e: "w",
	  w: "e",
	  nw: "ne",
	  ne: "nw",
	  se: "sw",
	  sw: "se"
	};

	var flipY = {
	  n: "s",
	  s: "n",
	  nw: "sw",
	  ne: "se",
	  se: "ne",
	  sw: "nw"
	};

	var signsX = {
	  overlay: +1,
	  selection: +1,
	  n: null,
	  e: +1,
	  s: null,
	  w: -1,
	  nw: -1,
	  ne: +1,
	  se: +1,
	  sw: -1
	};

	var signsY = {
	  overlay: +1,
	  selection: +1,
	  n: -1,
	  e: null,
	  s: +1,
	  w: null,
	  nw: -1,
	  ne: -1,
	  se: +1,
	  sw: +1
	};

	function type(t) {
	  return {type: t};
	}

	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !d3Selection.event.button;
	}

	function defaultExtent() {
	  var svg = this.ownerSVGElement || this;
	  return [[0, 0], [svg.width.baseVal.value, svg.height.baseVal.value]];
	}

	// Like d3.local, but with the name “__brush” rather than auto-generated.
	function local(node) {
	  while (!node.__brush) if (!(node = node.parentNode)) return;
	  return node.__brush;
	}

	function empty(extent) {
	  return extent[0][0] === extent[1][0]
	      || extent[0][1] === extent[1][1];
	}

	function brushSelection(node) {
	  var state = node.__brush;
	  return state ? state.dim.output(state.selection) : null;
	}

	function brushX() {
	  return brush$1(X);
	}

	function brushY() {
	  return brush$1(Y);
	}

	var brush = function() {
	  return brush$1(XY);
	};

	function brush$1(dim) {
	  var extent = defaultExtent,
	      filter = defaultFilter,
	      listeners = d3Dispatch.dispatch(brush, "start", "brush", "end"),
	      handleSize = 6,
	      touchending;

	  function brush(group) {
	    var overlay = group
	        .property("__brush", initialize)
	      .selectAll(".overlay")
	      .data([type("overlay")]);

	    overlay.enter().append("rect")
	        .attr("class", "overlay")
	        .attr("pointer-events", "all")
	        .attr("cursor", cursors.overlay)
	      .merge(overlay)
	        .each(function() {
	          var extent = local(this).extent;
	          d3Selection.select(this)
	              .attr("x", extent[0][0])
	              .attr("y", extent[0][1])
	              .attr("width", extent[1][0] - extent[0][0])
	              .attr("height", extent[1][1] - extent[0][1]);
	        });

	    group.selectAll(".selection")
	      .data([type("selection")])
	      .enter().append("rect")
	        .attr("class", "selection")
	        .attr("cursor", cursors.selection)
	        .attr("fill", "#777")
	        .attr("fill-opacity", 0.3)
	        .attr("stroke", "#fff")
	        .attr("shape-rendering", "crispEdges");

	    var handle = group.selectAll(".handle")
	      .data(dim.handles, function(d) { return d.type; });

	    handle.exit().remove();

	    handle.enter().append("rect")
	        .attr("class", function(d) { return "handle handle--" + d.type; })
	        .attr("cursor", function(d) { return cursors[d.type]; });

	    group
	        .each(redraw)
	        .attr("fill", "none")
	        .attr("pointer-events", "all")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)")
	        .on("mousedown.brush touchstart.brush", started);
	  }

	  brush.move = function(group, selection) {
	    if (group.selection) {
	      group
	          .on("start.brush", function() { emitter(this, arguments).beforestart().start(); })
	          .on("interrupt.brush end.brush", function() { emitter(this, arguments).end(); })
	          .tween("brush", function() {
	            var that = this,
	                state = that.__brush,
	                emit = emitter(that, arguments),
	                selection0 = state.selection,
	                selection1 = dim.input(typeof selection === "function" ? selection.apply(this, arguments) : selection, state.extent),
	                i = d3Interpolate.interpolate(selection0, selection1);

	            function tween(t) {
	              state.selection = t === 1 && empty(selection1) ? null : i(t);
	              redraw.call(that);
	              emit.brush();
	            }

	            return selection0 && selection1 ? tween : tween(1);
	          });
	    } else {
	      group
	          .each(function() {
	            var that = this,
	                args = arguments,
	                state = that.__brush,
	                selection1 = dim.input(typeof selection === "function" ? selection.apply(that, args) : selection, state.extent),
	                emit = emitter(that, args).beforestart();

	            d3Transition.interrupt(that);
	            state.selection = selection1 == null || empty(selection1) ? null : selection1;
	            redraw.call(that);
	            emit.start().brush().end();
	          });
	    }
	  };

	  function redraw() {
	    var group = d3Selection.select(this),
	        selection = local(this).selection;

	    if (selection) {
	      group.selectAll(".selection")
	          .style("display", null)
	          .attr("x", selection[0][0])
	          .attr("y", selection[0][1])
	          .attr("width", selection[1][0] - selection[0][0])
	          .attr("height", selection[1][1] - selection[0][1]);

	      group.selectAll(".handle")
	          .style("display", null)
	          .attr("x", function(d) { return d.type[d.type.length - 1] === "e" ? selection[1][0] - handleSize / 2 : selection[0][0] - handleSize / 2; })
	          .attr("y", function(d) { return d.type[0] === "s" ? selection[1][1] - handleSize / 2 : selection[0][1] - handleSize / 2; })
	          .attr("width", function(d) { return d.type === "n" || d.type === "s" ? selection[1][0] - selection[0][0] + handleSize : handleSize; })
	          .attr("height", function(d) { return d.type === "e" || d.type === "w" ? selection[1][1] - selection[0][1] + handleSize : handleSize; });
	    }

	    else {
	      group.selectAll(".selection,.handle")
	          .style("display", "none")
	          .attr("x", null)
	          .attr("y", null)
	          .attr("width", null)
	          .attr("height", null);
	    }
	  }

	  function emitter(that, args) {
	    return that.__brush.emitter || new Emitter(that, args);
	  }

	  function Emitter(that, args) {
	    this.that = that;
	    this.args = args;
	    this.state = that.__brush;
	    this.active = 0;
	  }

	  Emitter.prototype = {
	    beforestart: function() {
	      if (++this.active === 1) this.state.emitter = this, this.starting = true;
	      return this;
	    },
	    start: function() {
	      if (this.starting) this.starting = false, this.emit("start");
	      return this;
	    },
	    brush: function() {
	      this.emit("brush");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) delete this.state.emitter, this.emit("end");
	      return this;
	    },
	    emit: function(type) {
	      d3Selection.customEvent(new BrushEvent(brush, type, dim.output(this.state.selection)), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function started() {
	    if (d3Selection.event.touches) { if (d3Selection.event.changedTouches.length < d3Selection.event.touches.length) return noevent(); }
	    else if (touchending) return;
	    if (!filter.apply(this, arguments)) return;

	    var that = this,
	        type = d3Selection.event.target.__data__.type,
	        mode = (d3Selection.event.metaKey ? type = "overlay" : type) === "selection" ? MODE_DRAG : (d3Selection.event.altKey ? MODE_CENTER : MODE_HANDLE),
	        signX = dim === Y ? null : signsX[type],
	        signY = dim === X ? null : signsY[type],
	        state = local(that),
	        extent = state.extent,
	        selection = state.selection,
	        W = extent[0][0], w0, w1,
	        N = extent[0][1], n0, n1,
	        E = extent[1][0], e0, e1,
	        S = extent[1][1], s0, s1,
	        dx,
	        dy,
	        moving,
	        shifting = signX && signY && d3Selection.event.shiftKey,
	        lockX,
	        lockY,
	        point0 = d3Selection.mouse(that),
	        point = point0,
	        emit = emitter(that, arguments).beforestart();

	    if (type === "overlay") {
	      state.selection = selection = [
	        [w0 = dim === Y ? W : point0[0], n0 = dim === X ? N : point0[1]],
	        [e0 = dim === Y ? E : w0, s0 = dim === X ? S : n0]
	      ];
	    } else {
	      w0 = selection[0][0];
	      n0 = selection[0][1];
	      e0 = selection[1][0];
	      s0 = selection[1][1];
	    }

	    w1 = w0;
	    n1 = n0;
	    e1 = e0;
	    s1 = s0;

	    var group = d3Selection.select(that)
	        .attr("pointer-events", "none");

	    var overlay = group.selectAll(".overlay")
	        .attr("cursor", cursors[type]);

	    if (d3Selection.event.touches) {
	      group
	          .on("touchmove.brush", moved, true)
	          .on("touchend.brush touchcancel.brush", ended, true);
	    } else {
	      var view = d3Selection.select(d3Selection.event.view)
	          .on("keydown.brush", keydowned, true)
	          .on("keyup.brush", keyupped, true)
	          .on("mousemove.brush", moved, true)
	          .on("mouseup.brush", ended, true);

	      d3Drag.dragDisable(d3Selection.event.view);
	    }

	    nopropagation();
	    d3Transition.interrupt(that);
	    redraw.call(that);
	    emit.start();

	    function moved() {
	      var point1 = d3Selection.mouse(that);
	      if (shifting && !lockX && !lockY) {
	        if (Math.abs(point1[0] - point[0]) > Math.abs(point1[1] - point[1])) lockY = true;
	        else lockX = true;
	      }
	      point = point1;
	      moving = true;
	      noevent();
	      move();
	    }

	    function move() {
	      var t;

	      dx = point[0] - point0[0];
	      dy = point[1] - point0[1];

	      switch (mode) {
	        case MODE_SPACE:
	        case MODE_DRAG: {
	          if (signX) dx = Math.max(W - w0, Math.min(E - e0, dx)), w1 = w0 + dx, e1 = e0 + dx;
	          if (signY) dy = Math.max(N - n0, Math.min(S - s0, dy)), n1 = n0 + dy, s1 = s0 + dy;
	          break;
	        }
	        case MODE_HANDLE: {
	          if (signX < 0) dx = Math.max(W - w0, Math.min(E - w0, dx)), w1 = w0 + dx, e1 = e0;
	          else if (signX > 0) dx = Math.max(W - e0, Math.min(E - e0, dx)), w1 = w0, e1 = e0 + dx;
	          if (signY < 0) dy = Math.max(N - n0, Math.min(S - n0, dy)), n1 = n0 + dy, s1 = s0;
	          else if (signY > 0) dy = Math.max(N - s0, Math.min(S - s0, dy)), n1 = n0, s1 = s0 + dy;
	          break;
	        }
	        case MODE_CENTER: {
	          if (signX) w1 = Math.max(W, Math.min(E, w0 - dx * signX)), e1 = Math.max(W, Math.min(E, e0 + dx * signX));
	          if (signY) n1 = Math.max(N, Math.min(S, n0 - dy * signY)), s1 = Math.max(N, Math.min(S, s0 + dy * signY));
	          break;
	        }
	      }

	      if (e1 < w1) {
	        signX *= -1;
	        t = w0, w0 = e0, e0 = t;
	        t = w1, w1 = e1, e1 = t;
	        if (type in flipX) overlay.attr("cursor", cursors[type = flipX[type]]);
	      }

	      if (s1 < n1) {
	        signY *= -1;
	        t = n0, n0 = s0, s0 = t;
	        t = n1, n1 = s1, s1 = t;
	        if (type in flipY) overlay.attr("cursor", cursors[type = flipY[type]]);
	      }

	      if (state.selection) selection = state.selection; // May be set by brush.move!
	      if (lockX) w1 = selection[0][0], e1 = selection[1][0];
	      if (lockY) n1 = selection[0][1], s1 = selection[1][1];

	      if (selection[0][0] !== w1
	          || selection[0][1] !== n1
	          || selection[1][0] !== e1
	          || selection[1][1] !== s1) {
	        state.selection = [[w1, n1], [e1, s1]];
	        redraw.call(that);
	        emit.brush();
	      }
	    }

	    function ended() {
	      nopropagation();
	      if (d3Selection.event.touches) {
	        if (d3Selection.event.touches.length) return;
	        if (touchending) clearTimeout(touchending);
	        touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	        group.on("touchmove.brush touchend.brush touchcancel.brush", null);
	      } else {
	        d3Drag.dragEnable(d3Selection.event.view, moving);
	        view.on("keydown.brush keyup.brush mousemove.brush mouseup.brush", null);
	      }
	      group.attr("pointer-events", "all");
	      overlay.attr("cursor", cursors.overlay);
	      if (state.selection) selection = state.selection; // May be set by brush.move (on start)!
	      if (empty(selection)) state.selection = null, redraw.call(that);
	      emit.end();
	    }

	    function keydowned() {
	      switch (d3Selection.event.keyCode) {
	        case 16: { // SHIFT
	          shifting = signX && signY;
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_HANDLE) {
	            if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	            if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	            mode = MODE_CENTER;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE; takes priority over ALT
	          if (mode === MODE_HANDLE || mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1 - dx; else if (signX > 0) w0 = w1 - dx;
	            if (signY < 0) s0 = s1 - dy; else if (signY > 0) n0 = n1 - dy;
	            mode = MODE_SPACE;
	            overlay.attr("cursor", cursors.selection);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent();
	    }

	    function keyupped() {
	      switch (d3Selection.event.keyCode) {
	        case 16: { // SHIFT
	          if (shifting) {
	            lockX = lockY = shifting = false;
	            move();
	          }
	          break;
	        }
	        case 18: { // ALT
	          if (mode === MODE_CENTER) {
	            if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	            if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	            mode = MODE_HANDLE;
	            move();
	          }
	          break;
	        }
	        case 32: { // SPACE
	          if (mode === MODE_SPACE) {
	            if (d3Selection.event.altKey) {
	              if (signX) e0 = e1 - dx * signX, w0 = w1 + dx * signX;
	              if (signY) s0 = s1 - dy * signY, n0 = n1 + dy * signY;
	              mode = MODE_CENTER;
	            } else {
	              if (signX < 0) e0 = e1; else if (signX > 0) w0 = w1;
	              if (signY < 0) s0 = s1; else if (signY > 0) n0 = n1;
	              mode = MODE_HANDLE;
	            }
	            overlay.attr("cursor", cursors[type]);
	            move();
	          }
	          break;
	        }
	        default: return;
	      }
	      noevent();
	    }
	  }

	  function initialize() {
	    var state = this.__brush || {selection: null};
	    state.extent = extent.apply(this, arguments);
	    state.dim = dim;
	    return state;
	  }

	  brush.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), brush) : extent;
	  };

	  brush.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), brush) : filter;
	  };

	  brush.handleSize = function(_) {
	    return arguments.length ? (handleSize = +_, brush) : handleSize;
	  };

	  brush.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? brush : value;
	  };

	  return brush;
	}

	exports.brush = brush;
	exports.brushX = brushX;
	exports.brushY = brushY;
	exports.brushSelection = brushSelection;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-dispatch/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var noop = {value: function() {}};

	function dispatch() {
	  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {
	    if (!(t = arguments[i] + "") || (t in _)) throw new Error("illegal type: " + t);
	    _[t] = [];
	  }
	  return new Dispatch(_);
	}

	function Dispatch(_) {
	  this._ = _;
	}

	function parseTypenames(typenames, types) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    if (t && !types.hasOwnProperty(t)) throw new Error("unknown type: " + t);
	    return {type: t, name: name};
	  });
	}

	Dispatch.prototype = dispatch.prototype = {
	  constructor: Dispatch,
	  on: function(typename, callback) {
	    var _ = this._,
	        T = parseTypenames(typename + "", _),
	        t,
	        i = -1,
	        n = T.length;

	    // If no callback was specified, return the callback of the given type and name.
	    if (arguments.length < 2) {
	      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;
	      return;
	    }

	    // If a type was specified, set the callback for the given type and name.
	    // Otherwise, if a null callback was specified, remove callbacks of the given name.
	    if (callback != null && typeof callback !== "function") throw new Error("invalid callback: " + callback);
	    while (++i < n) {
	      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);
	      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);
	    }

	    return this;
	  },
	  copy: function() {
	    var copy = {}, _ = this._;
	    for (var t in _) copy[t] = _[t].slice();
	    return new Dispatch(copy);
	  },
	  call: function(type, that) {
	    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  },
	  apply: function(type, that, args) {
	    if (!this._.hasOwnProperty(type)) throw new Error("unknown type: " + type);
	    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);
	  }
	};

	function get(type, name) {
	  for (var i = 0, n = type.length, c; i < n; ++i) {
	    if ((c = type[i]).name === name) {
	      return c.value;
	    }
	  }
	}

	function set(type, name, callback) {
	  for (var i = 0, n = type.length; i < n; ++i) {
	    if (type[i].name === name) {
	      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));
	      break;
	    }
	  }
	  if (callback != null) type.push({name: name, value: callback});
	  return type;
	}

	exports.dispatch = dispatch;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-drag/ Version 1.2.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(11), __webpack_require__(13)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-selection'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3));
	}(this, (function (exports,d3Dispatch,d3Selection) { 'use strict';

	function nopropagation() {
	  d3Selection.event.stopImmediatePropagation();
	}

	var noevent = function() {
	  d3Selection.event.preventDefault();
	  d3Selection.event.stopImmediatePropagation();
	};

	var nodrag = function(view) {
	  var root = view.document.documentElement,
	      selection = d3Selection.select(view).on("dragstart.drag", noevent, true);
	  if ("onselectstart" in root) {
	    selection.on("selectstart.drag", noevent, true);
	  } else {
	    root.__noselect = root.style.MozUserSelect;
	    root.style.MozUserSelect = "none";
	  }
	};

	function yesdrag(view, noclick) {
	  var root = view.document.documentElement,
	      selection = d3Selection.select(view).on("dragstart.drag", null);
	  if (noclick) {
	    selection.on("click.drag", noevent, true);
	    setTimeout(function() { selection.on("click.drag", null); }, 0);
	  }
	  if ("onselectstart" in root) {
	    selection.on("selectstart.drag", null);
	  } else {
	    root.style.MozUserSelect = root.__noselect;
	    delete root.__noselect;
	  }
	}

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function DragEvent(target, type, subject, id, active, x, y, dx, dy, dispatch$$1) {
	  this.target = target;
	  this.type = type;
	  this.subject = subject;
	  this.identifier = id;
	  this.active = active;
	  this.x = x;
	  this.y = y;
	  this.dx = dx;
	  this.dy = dy;
	  this._ = dispatch$$1;
	}

	DragEvent.prototype.on = function() {
	  var value = this._.on.apply(this._, arguments);
	  return value === this._ ? this : value;
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !d3Selection.event.button;
	}

	function defaultContainer() {
	  return this.parentNode;
	}

	function defaultSubject(d) {
	  return d == null ? {x: d3Selection.event.x, y: d3Selection.event.y} : d;
	}

	function defaultTouchable() {
	  return "ontouchstart" in this;
	}

	var drag = function() {
	  var filter = defaultFilter,
	      container = defaultContainer,
	      subject = defaultSubject,
	      touchable = defaultTouchable,
	      gestures = {},
	      listeners = d3Dispatch.dispatch("start", "drag", "end"),
	      active = 0,
	      mousedownx,
	      mousedowny,
	      mousemoving,
	      touchending,
	      clickDistance2 = 0;

	  function drag(selection) {
	    selection
	        .on("mousedown.drag", mousedowned)
	      .filter(touchable)
	        .on("touchstart.drag", touchstarted)
	        .on("touchmove.drag", touchmoved)
	        .on("touchend.drag touchcancel.drag", touchended)
	        .style("touch-action", "none")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var gesture = beforestart("mouse", container.apply(this, arguments), d3Selection.mouse, this, arguments);
	    if (!gesture) return;
	    d3Selection.select(d3Selection.event.view).on("mousemove.drag", mousemoved, true).on("mouseup.drag", mouseupped, true);
	    nodrag(d3Selection.event.view);
	    nopropagation();
	    mousemoving = false;
	    mousedownx = d3Selection.event.clientX;
	    mousedowny = d3Selection.event.clientY;
	    gesture("start");
	  }

	  function mousemoved() {
	    noevent();
	    if (!mousemoving) {
	      var dx = d3Selection.event.clientX - mousedownx, dy = d3Selection.event.clientY - mousedowny;
	      mousemoving = dx * dx + dy * dy > clickDistance2;
	    }
	    gestures.mouse("drag");
	  }

	  function mouseupped() {
	    d3Selection.select(d3Selection.event.view).on("mousemove.drag mouseup.drag", null);
	    yesdrag(d3Selection.event.view, mousemoving);
	    noevent();
	    gestures.mouse("end");
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var touches = d3Selection.event.changedTouches,
	        c = container.apply(this, arguments),
	        n = touches.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = beforestart(touches[i].identifier, c, d3Selection.touch, this, arguments)) {
	        nopropagation();
	        gesture("start");
	      }
	    }
	  }

	  function touchmoved() {
	    var touches = d3Selection.event.changedTouches,
	        n = touches.length, i, gesture;

	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches[i].identifier]) {
	        noevent();
	        gesture("drag");
	      }
	    }
	  }

	  function touchended() {
	    var touches = d3Selection.event.changedTouches,
	        n = touches.length, i, gesture;

	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, 500); // Ghost clicks are delayed!
	    for (i = 0; i < n; ++i) {
	      if (gesture = gestures[touches[i].identifier]) {
	        nopropagation();
	        gesture("end");
	      }
	    }
	  }

	  function beforestart(id, container, point, that, args) {
	    var p = point(container, id), s, dx, dy,
	        sublisteners = listeners.copy();

	    if (!d3Selection.customEvent(new DragEvent(drag, "beforestart", s, id, active, p[0], p[1], 0, 0, sublisteners), function() {
	      if ((d3Selection.event.subject = s = subject.apply(that, args)) == null) return false;
	      dx = s.x - p[0] || 0;
	      dy = s.y - p[1] || 0;
	      return true;
	    })) return;

	    return function gesture(type) {
	      var p0 = p, n;
	      switch (type) {
	        case "start": gestures[id] = gesture, n = active++; break;
	        case "end": delete gestures[id], --active; // nobreak
	        case "drag": p = point(container, id), n = active; break;
	      }
	      d3Selection.customEvent(new DragEvent(drag, type, s, id, n, p[0] + dx, p[1] + dy, p[0] - p0[0], p[1] - p0[1], sublisteners), sublisteners.apply, sublisteners, [type, that, args]);
	    };
	  }

	  drag.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), drag) : filter;
	  };

	  drag.container = function(_) {
	    return arguments.length ? (container = typeof _ === "function" ? _ : constant(_), drag) : container;
	  };

	  drag.subject = function(_) {
	    return arguments.length ? (subject = typeof _ === "function" ? _ : constant(_), drag) : subject;
	  };

	  drag.touchable = function(_) {
	    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), drag) : touchable;
	  };

	  drag.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? drag : value;
	  };

	  drag.clickDistance = function(_) {
	    return arguments.length ? (clickDistance2 = (_ = +_) * _, drag) : Math.sqrt(clickDistance2);
	  };

	  return drag;
	};

	exports.drag = drag;
	exports.dragDisable = nodrag;
	exports.dragEnable = yesdrag;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-selection/ Version 1.3.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var xhtml = "http://www.w3.org/1999/xhtml";

	var namespaces = {
	  svg: "http://www.w3.org/2000/svg",
	  xhtml: xhtml,
	  xlink: "http://www.w3.org/1999/xlink",
	  xml: "http://www.w3.org/XML/1998/namespace",
	  xmlns: "http://www.w3.org/2000/xmlns/"
	};

	function namespace(name) {
	  var prefix = name += "", i = prefix.indexOf(":");
	  if (i >= 0 && (prefix = name.slice(0, i)) !== "xmlns") name = name.slice(i + 1);
	  return namespaces.hasOwnProperty(prefix) ? {space: namespaces[prefix], local: name} : name;
	}

	function creatorInherit(name) {
	  return function() {
	    var document = this.ownerDocument,
	        uri = this.namespaceURI;
	    return uri === xhtml && document.documentElement.namespaceURI === xhtml
	        ? document.createElement(name)
	        : document.createElementNS(uri, name);
	  };
	}

	function creatorFixed(fullname) {
	  return function() {
	    return this.ownerDocument.createElementNS(fullname.space, fullname.local);
	  };
	}

	function creator(name) {
	  var fullname = namespace(name);
	  return (fullname.local
	      ? creatorFixed
	      : creatorInherit)(fullname);
	}

	function none() {}

	function selector(selector) {
	  return selector == null ? none : function() {
	    return this.querySelector(selector);
	  };
	}

	function selection_select(select) {
	  if (typeof select !== "function") select = selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function empty() {
	  return [];
	}

	function selectorAll(selector) {
	  return selector == null ? empty : function() {
	    return this.querySelectorAll(selector);
	  };
	}

	function selection_selectAll(select) {
	  if (typeof select !== "function") select = selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        subgroups.push(select.call(node, node.__data__, i, group));
	        parents.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, parents);
	}

	var matcher = function(selector) {
	  return function() {
	    return this.matches(selector);
	  };
	};

	if (typeof document !== "undefined") {
	  var element = document.documentElement;
	  if (!element.matches) {
	    var vendorMatches = element.webkitMatchesSelector
	        || element.msMatchesSelector
	        || element.mozMatchesSelector
	        || element.oMatchesSelector;
	    matcher = function(selector) {
	      return function() {
	        return vendorMatches.call(this, selector);
	      };
	    };
	  }
	}

	var matcher$1 = matcher;

	function selection_filter(match) {
	  if (typeof match !== "function") match = matcher$1(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Selection(subgroups, this._parents);
	}

	function sparse(update) {
	  return new Array(update.length);
	}

	function selection_enter() {
	  return new Selection(this._enter || this._groups.map(sparse), this._parents);
	}

	function EnterNode(parent, datum) {
	  this.ownerDocument = parent.ownerDocument;
	  this.namespaceURI = parent.namespaceURI;
	  this._next = null;
	  this._parent = parent;
	  this.__data__ = datum;
	}

	EnterNode.prototype = {
	  constructor: EnterNode,
	  appendChild: function(child) { return this._parent.insertBefore(child, this._next); },
	  insertBefore: function(child, next) { return this._parent.insertBefore(child, next); },
	  querySelector: function(selector) { return this._parent.querySelector(selector); },
	  querySelectorAll: function(selector) { return this._parent.querySelectorAll(selector); }
	};

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	var keyPrefix = "$"; // Protect against keys like “__proto__”.

	function bindIndex(parent, group, enter, update, exit, data) {
	  var i = 0,
	      node,
	      groupLength = group.length,
	      dataLength = data.length;

	  // Put any non-null nodes that fit into update.
	  // Put any null nodes into enter.
	  // Put any remaining data into enter.
	  for (; i < dataLength; ++i) {
	    if (node = group[i]) {
	      node.__data__ = data[i];
	      update[i] = node;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Put any non-null nodes that don’t fit into exit.
	  for (; i < groupLength; ++i) {
	    if (node = group[i]) {
	      exit[i] = node;
	    }
	  }
	}

	function bindKey(parent, group, enter, update, exit, data, key) {
	  var i,
	      node,
	      nodeByKeyValue = {},
	      groupLength = group.length,
	      dataLength = data.length,
	      keyValues = new Array(groupLength),
	      keyValue;

	  // Compute the key for each node.
	  // If multiple nodes have the same key, the duplicates are added to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if (node = group[i]) {
	      keyValues[i] = keyValue = keyPrefix + key.call(node, node.__data__, i, group);
	      if (keyValue in nodeByKeyValue) {
	        exit[i] = node;
	      } else {
	        nodeByKeyValue[keyValue] = node;
	      }
	    }
	  }

	  // Compute the key for each datum.
	  // If there a node associated with this key, join and add it to update.
	  // If there is not (or the key is a duplicate), add it to enter.
	  for (i = 0; i < dataLength; ++i) {
	    keyValue = keyPrefix + key.call(parent, data[i], i, data);
	    if (node = nodeByKeyValue[keyValue]) {
	      update[i] = node;
	      node.__data__ = data[i];
	      nodeByKeyValue[keyValue] = null;
	    } else {
	      enter[i] = new EnterNode(parent, data[i]);
	    }
	  }

	  // Add any remaining nodes that were not bound to data to exit.
	  for (i = 0; i < groupLength; ++i) {
	    if ((node = group[i]) && (nodeByKeyValue[keyValues[i]] === node)) {
	      exit[i] = node;
	    }
	  }
	}

	function selection_data(value, key) {
	  if (!value) {
	    data = new Array(this.size()), j = -1;
	    this.each(function(d) { data[++j] = d; });
	    return data;
	  }

	  var bind = key ? bindKey : bindIndex,
	      parents = this._parents,
	      groups = this._groups;

	  if (typeof value !== "function") value = constant(value);

	  for (var m = groups.length, update = new Array(m), enter = new Array(m), exit = new Array(m), j = 0; j < m; ++j) {
	    var parent = parents[j],
	        group = groups[j],
	        groupLength = group.length,
	        data = value.call(parent, parent && parent.__data__, j, parents),
	        dataLength = data.length,
	        enterGroup = enter[j] = new Array(dataLength),
	        updateGroup = update[j] = new Array(dataLength),
	        exitGroup = exit[j] = new Array(groupLength);

	    bind(parent, group, enterGroup, updateGroup, exitGroup, data, key);

	    // Now connect the enter nodes to their following update node, such that
	    // appendChild can insert the materialized enter node before this node,
	    // rather than at the end of the parent node.
	    for (var i0 = 0, i1 = 0, previous, next; i0 < dataLength; ++i0) {
	      if (previous = enterGroup[i0]) {
	        if (i0 >= i1) i1 = i0 + 1;
	        while (!(next = updateGroup[i1]) && ++i1 < dataLength);
	        previous._next = next || null;
	      }
	    }
	  }

	  update = new Selection(update, parents);
	  update._enter = enter;
	  update._exit = exit;
	  return update;
	}

	function selection_exit() {
	  return new Selection(this._exit || this._groups.map(sparse), this._parents);
	}

	function selection_merge(selection$$1) {

	  for (var groups0 = this._groups, groups1 = selection$$1._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Selection(merges, this._parents);
	}

	function selection_order() {

	  for (var groups = this._groups, j = -1, m = groups.length; ++j < m;) {
	    for (var group = groups[j], i = group.length - 1, next = group[i], node; --i >= 0;) {
	      if (node = group[i]) {
	        if (next && next !== node.nextSibling) next.parentNode.insertBefore(node, next);
	        next = node;
	      }
	    }
	  }

	  return this;
	}

	function selection_sort(compare) {
	  if (!compare) compare = ascending;

	  function compareNode(a, b) {
	    return a && b ? compare(a.__data__, b.__data__) : !a - !b;
	  }

	  for (var groups = this._groups, m = groups.length, sortgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, sortgroup = sortgroups[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        sortgroup[i] = node;
	      }
	    }
	    sortgroup.sort(compareNode);
	  }

	  return new Selection(sortgroups, this._parents).order();
	}

	function ascending(a, b) {
	  return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
	}

	function selection_call() {
	  var callback = arguments[0];
	  arguments[0] = this;
	  callback.apply(null, arguments);
	  return this;
	}

	function selection_nodes() {
	  var nodes = new Array(this.size()), i = -1;
	  this.each(function() { nodes[++i] = this; });
	  return nodes;
	}

	function selection_node() {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length; i < n; ++i) {
	      var node = group[i];
	      if (node) return node;
	    }
	  }

	  return null;
	}

	function selection_size() {
	  var size = 0;
	  this.each(function() { ++size; });
	  return size;
	}

	function selection_empty() {
	  return !this.node();
	}

	function selection_each(callback) {

	  for (var groups = this._groups, j = 0, m = groups.length; j < m; ++j) {
	    for (var group = groups[j], i = 0, n = group.length, node; i < n; ++i) {
	      if (node = group[i]) callback.call(node, node.__data__, i, group);
	    }
	  }

	  return this;
	}

	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, value) {
	  return function() {
	    this.setAttribute(name, value);
	  };
	}

	function attrConstantNS(fullname, value) {
	  return function() {
	    this.setAttributeNS(fullname.space, fullname.local, value);
	  };
	}

	function attrFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttribute(name);
	    else this.setAttribute(name, v);
	  };
	}

	function attrFunctionNS(fullname, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.removeAttributeNS(fullname.space, fullname.local);
	    else this.setAttributeNS(fullname.space, fullname.local, v);
	  };
	}

	function selection_attr(name, value) {
	  var fullname = namespace(name);

	  if (arguments.length < 2) {
	    var node = this.node();
	    return fullname.local
	        ? node.getAttributeNS(fullname.space, fullname.local)
	        : node.getAttribute(fullname);
	  }

	  return this.each((value == null
	      ? (fullname.local ? attrRemoveNS : attrRemove) : (typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)
	      : (fullname.local ? attrConstantNS : attrConstant)))(fullname, value));
	}

	function defaultView(node) {
	  return (node.ownerDocument && node.ownerDocument.defaultView) // node is a Node
	      || (node.document && node) // node is a Window
	      || node.defaultView; // node is a Document
	}

	function styleRemove(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, value, priority) {
	  return function() {
	    this.style.setProperty(name, value, priority);
	  };
	}

	function styleFunction(name, value, priority) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) this.style.removeProperty(name);
	    else this.style.setProperty(name, v, priority);
	  };
	}

	function selection_style(name, value, priority) {
	  return arguments.length > 1
	      ? this.each((value == null
	            ? styleRemove : typeof value === "function"
	            ? styleFunction
	            : styleConstant)(name, value, priority == null ? "" : priority))
	      : styleValue(this.node(), name);
	}

	function styleValue(node, name) {
	  return node.style.getPropertyValue(name)
	      || defaultView(node).getComputedStyle(node, null).getPropertyValue(name);
	}

	function propertyRemove(name) {
	  return function() {
	    delete this[name];
	  };
	}

	function propertyConstant(name, value) {
	  return function() {
	    this[name] = value;
	  };
	}

	function propertyFunction(name, value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    if (v == null) delete this[name];
	    else this[name] = v;
	  };
	}

	function selection_property(name, value) {
	  return arguments.length > 1
	      ? this.each((value == null
	          ? propertyRemove : typeof value === "function"
	          ? propertyFunction
	          : propertyConstant)(name, value))
	      : this.node()[name];
	}

	function classArray(string) {
	  return string.trim().split(/^|\s+/);
	}

	function classList(node) {
	  return node.classList || new ClassList(node);
	}

	function ClassList(node) {
	  this._node = node;
	  this._names = classArray(node.getAttribute("class") || "");
	}

	ClassList.prototype = {
	  add: function(name) {
	    var i = this._names.indexOf(name);
	    if (i < 0) {
	      this._names.push(name);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  remove: function(name) {
	    var i = this._names.indexOf(name);
	    if (i >= 0) {
	      this._names.splice(i, 1);
	      this._node.setAttribute("class", this._names.join(" "));
	    }
	  },
	  contains: function(name) {
	    return this._names.indexOf(name) >= 0;
	  }
	};

	function classedAdd(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.add(names[i]);
	}

	function classedRemove(node, names) {
	  var list = classList(node), i = -1, n = names.length;
	  while (++i < n) list.remove(names[i]);
	}

	function classedTrue(names) {
	  return function() {
	    classedAdd(this, names);
	  };
	}

	function classedFalse(names) {
	  return function() {
	    classedRemove(this, names);
	  };
	}

	function classedFunction(names, value) {
	  return function() {
	    (value.apply(this, arguments) ? classedAdd : classedRemove)(this, names);
	  };
	}

	function selection_classed(name, value) {
	  var names = classArray(name + "");

	  if (arguments.length < 2) {
	    var list = classList(this.node()), i = -1, n = names.length;
	    while (++i < n) if (!list.contains(names[i])) return false;
	    return true;
	  }

	  return this.each((typeof value === "function"
	      ? classedFunction : value
	      ? classedTrue
	      : classedFalse)(names, value));
	}

	function textRemove() {
	  this.textContent = "";
	}

	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.textContent = v == null ? "" : v;
	  };
	}

	function selection_text(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? textRemove : (typeof value === "function"
	          ? textFunction
	          : textConstant)(value))
	      : this.node().textContent;
	}

	function htmlRemove() {
	  this.innerHTML = "";
	}

	function htmlConstant(value) {
	  return function() {
	    this.innerHTML = value;
	  };
	}

	function htmlFunction(value) {
	  return function() {
	    var v = value.apply(this, arguments);
	    this.innerHTML = v == null ? "" : v;
	  };
	}

	function selection_html(value) {
	  return arguments.length
	      ? this.each(value == null
	          ? htmlRemove : (typeof value === "function"
	          ? htmlFunction
	          : htmlConstant)(value))
	      : this.node().innerHTML;
	}

	function raise() {
	  if (this.nextSibling) this.parentNode.appendChild(this);
	}

	function selection_raise() {
	  return this.each(raise);
	}

	function lower() {
	  if (this.previousSibling) this.parentNode.insertBefore(this, this.parentNode.firstChild);
	}

	function selection_lower() {
	  return this.each(lower);
	}

	function selection_append(name) {
	  var create = typeof name === "function" ? name : creator(name);
	  return this.select(function() {
	    return this.appendChild(create.apply(this, arguments));
	  });
	}

	function constantNull() {
	  return null;
	}

	function selection_insert(name, before) {
	  var create = typeof name === "function" ? name : creator(name),
	      select = before == null ? constantNull : typeof before === "function" ? before : selector(before);
	  return this.select(function() {
	    return this.insertBefore(create.apply(this, arguments), select.apply(this, arguments) || null);
	  });
	}

	function remove() {
	  var parent = this.parentNode;
	  if (parent) parent.removeChild(this);
	}

	function selection_remove() {
	  return this.each(remove);
	}

	function selection_cloneShallow() {
	  return this.parentNode.insertBefore(this.cloneNode(false), this.nextSibling);
	}

	function selection_cloneDeep() {
	  return this.parentNode.insertBefore(this.cloneNode(true), this.nextSibling);
	}

	function selection_clone(deep) {
	  return this.select(deep ? selection_cloneDeep : selection_cloneShallow);
	}

	function selection_datum(value) {
	  return arguments.length
	      ? this.property("__data__", value)
	      : this.node().__data__;
	}

	var filterEvents = {};

	exports.event = null;

	if (typeof document !== "undefined") {
	  var element$1 = document.documentElement;
	  if (!("onmouseenter" in element$1)) {
	    filterEvents = {mouseenter: "mouseover", mouseleave: "mouseout"};
	  }
	}

	function filterContextListener(listener, index, group) {
	  listener = contextListener(listener, index, group);
	  return function(event) {
	    var related = event.relatedTarget;
	    if (!related || (related !== this && !(related.compareDocumentPosition(this) & 8))) {
	      listener.call(this, event);
	    }
	  };
	}

	function contextListener(listener, index, group) {
	  return function(event1) {
	    var event0 = exports.event; // Events can be reentrant (e.g., focus).
	    exports.event = event1;
	    try {
	      listener.call(this, this.__data__, index, group);
	    } finally {
	      exports.event = event0;
	    }
	  };
	}

	function parseTypenames(typenames) {
	  return typenames.trim().split(/^|\s+/).map(function(t) {
	    var name = "", i = t.indexOf(".");
	    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);
	    return {type: t, name: name};
	  });
	}

	function onRemove(typename) {
	  return function() {
	    var on = this.__on;
	    if (!on) return;
	    for (var j = 0, i = -1, m = on.length, o; j < m; ++j) {
	      if (o = on[j], (!typename.type || o.type === typename.type) && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	      } else {
	        on[++i] = o;
	      }
	    }
	    if (++i) on.length = i;
	    else delete this.__on;
	  };
	}

	function onAdd(typename, value, capture) {
	  var wrap = filterEvents.hasOwnProperty(typename.type) ? filterContextListener : contextListener;
	  return function(d, i, group) {
	    var on = this.__on, o, listener = wrap(value, i, group);
	    if (on) for (var j = 0, m = on.length; j < m; ++j) {
	      if ((o = on[j]).type === typename.type && o.name === typename.name) {
	        this.removeEventListener(o.type, o.listener, o.capture);
	        this.addEventListener(o.type, o.listener = listener, o.capture = capture);
	        o.value = value;
	        return;
	      }
	    }
	    this.addEventListener(typename.type, listener, capture);
	    o = {type: typename.type, name: typename.name, value: value, listener: listener, capture: capture};
	    if (!on) this.__on = [o];
	    else on.push(o);
	  };
	}

	function selection_on(typename, value, capture) {
	  var typenames = parseTypenames(typename + ""), i, n = typenames.length, t;

	  if (arguments.length < 2) {
	    var on = this.node().__on;
	    if (on) for (var j = 0, m = on.length, o; j < m; ++j) {
	      for (i = 0, o = on[j]; i < n; ++i) {
	        if ((t = typenames[i]).type === o.type && t.name === o.name) {
	          return o.value;
	        }
	      }
	    }
	    return;
	  }

	  on = value ? onAdd : onRemove;
	  if (capture == null) capture = false;
	  for (i = 0; i < n; ++i) this.each(on(typenames[i], value, capture));
	  return this;
	}

	function customEvent(event1, listener, that, args) {
	  var event0 = exports.event;
	  event1.sourceEvent = exports.event;
	  exports.event = event1;
	  try {
	    return listener.apply(that, args);
	  } finally {
	    exports.event = event0;
	  }
	}

	function dispatchEvent(node, type, params) {
	  var window = defaultView(node),
	      event = window.CustomEvent;

	  if (typeof event === "function") {
	    event = new event(type, params);
	  } else {
	    event = window.document.createEvent("Event");
	    if (params) event.initEvent(type, params.bubbles, params.cancelable), event.detail = params.detail;
	    else event.initEvent(type, false, false);
	  }

	  node.dispatchEvent(event);
	}

	function dispatchConstant(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params);
	  };
	}

	function dispatchFunction(type, params) {
	  return function() {
	    return dispatchEvent(this, type, params.apply(this, arguments));
	  };
	}

	function selection_dispatch(type, params) {
	  return this.each((typeof params === "function"
	      ? dispatchFunction
	      : dispatchConstant)(type, params));
	}

	var root = [null];

	function Selection(groups, parents) {
	  this._groups = groups;
	  this._parents = parents;
	}

	function selection() {
	  return new Selection([[document.documentElement]], root);
	}

	Selection.prototype = selection.prototype = {
	  constructor: Selection,
	  select: selection_select,
	  selectAll: selection_selectAll,
	  filter: selection_filter,
	  data: selection_data,
	  enter: selection_enter,
	  exit: selection_exit,
	  merge: selection_merge,
	  order: selection_order,
	  sort: selection_sort,
	  call: selection_call,
	  nodes: selection_nodes,
	  node: selection_node,
	  size: selection_size,
	  empty: selection_empty,
	  each: selection_each,
	  attr: selection_attr,
	  style: selection_style,
	  property: selection_property,
	  classed: selection_classed,
	  text: selection_text,
	  html: selection_html,
	  raise: selection_raise,
	  lower: selection_lower,
	  append: selection_append,
	  insert: selection_insert,
	  remove: selection_remove,
	  clone: selection_clone,
	  datum: selection_datum,
	  on: selection_on,
	  dispatch: selection_dispatch
	};

	function select(selector) {
	  return typeof selector === "string"
	      ? new Selection([[document.querySelector(selector)]], [document.documentElement])
	      : new Selection([[selector]], root);
	}

	function create(name) {
	  return select(creator(name).call(document.documentElement));
	}

	var nextId = 0;

	function local() {
	  return new Local;
	}

	function Local() {
	  this._ = "@" + (++nextId).toString(36);
	}

	Local.prototype = local.prototype = {
	  constructor: Local,
	  get: function(node) {
	    var id = this._;
	    while (!(id in node)) if (!(node = node.parentNode)) return;
	    return node[id];
	  },
	  set: function(node, value) {
	    return node[this._] = value;
	  },
	  remove: function(node) {
	    return this._ in node && delete node[this._];
	  },
	  toString: function() {
	    return this._;
	  }
	};

	function sourceEvent() {
	  var current = exports.event, source;
	  while (source = current.sourceEvent) current = source;
	  return current;
	}

	function point(node, event) {
	  var svg = node.ownerSVGElement || node;

	  if (svg.createSVGPoint) {
	    var point = svg.createSVGPoint();
	    point.x = event.clientX, point.y = event.clientY;
	    point = point.matrixTransform(node.getScreenCTM().inverse());
	    return [point.x, point.y];
	  }

	  var rect = node.getBoundingClientRect();
	  return [event.clientX - rect.left - node.clientLeft, event.clientY - rect.top - node.clientTop];
	}

	function mouse(node) {
	  var event = sourceEvent();
	  if (event.changedTouches) event = event.changedTouches[0];
	  return point(node, event);
	}

	function selectAll(selector) {
	  return typeof selector === "string"
	      ? new Selection([document.querySelectorAll(selector)], [document.documentElement])
	      : new Selection([selector == null ? [] : selector], root);
	}

	function touch(node, touches, identifier) {
	  if (arguments.length < 3) identifier = touches, touches = sourceEvent().changedTouches;

	  for (var i = 0, n = touches ? touches.length : 0, touch; i < n; ++i) {
	    if ((touch = touches[i]).identifier === identifier) {
	      return point(node, touch);
	    }
	  }

	  return null;
	}

	function touches(node, touches) {
	  if (touches == null) touches = sourceEvent().touches;

	  for (var i = 0, n = touches ? touches.length : 0, points = new Array(n); i < n; ++i) {
	    points[i] = point(node, touches[i]);
	  }

	  return points;
	}

	exports.create = create;
	exports.creator = creator;
	exports.local = local;
	exports.matcher = matcher$1;
	exports.mouse = mouse;
	exports.namespace = namespace;
	exports.namespaces = namespaces;
	exports.clientPoint = point;
	exports.select = select;
	exports.selectAll = selectAll;
	exports.selection = selection;
	exports.selector = selector;
	exports.selectorAll = selectorAll;
	exports.style = styleValue;
	exports.touch = touch;
	exports.touches = touches;
	exports.window = defaultView;
	exports.customEvent = customEvent;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-interpolate/ Version 1.1.6. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(15)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-color'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Color) { 'use strict';

	function basis(t1, v0, v1, v2, v3) {
	  var t2 = t1 * t1, t3 = t2 * t1;
	  return ((1 - 3 * t1 + 3 * t2 - t3) * v0
	      + (4 - 6 * t2 + 3 * t3) * v1
	      + (1 + 3 * t1 + 3 * t2 - 3 * t3) * v2
	      + t3 * v3) / 6;
	}

	var basis$1 = function(values) {
	  var n = values.length - 1;
	  return function(t) {
	    var i = t <= 0 ? (t = 0) : t >= 1 ? (t = 1, n - 1) : Math.floor(t * n),
	        v1 = values[i],
	        v2 = values[i + 1],
	        v0 = i > 0 ? values[i - 1] : 2 * v1 - v2,
	        v3 = i < n - 1 ? values[i + 2] : 2 * v2 - v1;
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var basisClosed = function(values) {
	  var n = values.length;
	  return function(t) {
	    var i = Math.floor(((t %= 1) < 0 ? ++t : t) * n),
	        v0 = values[(i + n - 1) % n],
	        v1 = values[i % n],
	        v2 = values[(i + 1) % n],
	        v3 = values[(i + 2) % n];
	    return basis((t - i / n) * n, v0, v1, v2, v3);
	  };
	};

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function linear(a, d) {
	  return function(t) {
	    return a + t * d;
	  };
	}

	function exponential(a, b, y) {
	  return a = Math.pow(a, y), b = Math.pow(b, y) - a, y = 1 / y, function(t) {
	    return Math.pow(a + t * b, y);
	  };
	}

	function hue(a, b) {
	  var d = b - a;
	  return d ? linear(a, d > 180 || d < -180 ? d - 360 * Math.round(d / 360) : d) : constant(isNaN(a) ? b : a);
	}

	function gamma(y) {
	  return (y = +y) === 1 ? nogamma : function(a, b) {
	    return b - a ? exponential(a, b, y) : constant(isNaN(a) ? b : a);
	  };
	}

	function nogamma(a, b) {
	  var d = b - a;
	  return d ? linear(a, d) : constant(isNaN(a) ? b : a);
	}

	var rgb$1 = ((function rgbGamma(y) {
	  var color$$1 = gamma(y);

	  function rgb$$1(start, end) {
	    var r = color$$1((start = d3Color.rgb(start)).r, (end = d3Color.rgb(end)).r),
	        g = color$$1(start.g, end.g),
	        b = color$$1(start.b, end.b),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.r = r(t);
	      start.g = g(t);
	      start.b = b(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }

	  rgb$$1.gamma = rgbGamma;

	  return rgb$$1;
	}))(1);

	function rgbSpline(spline) {
	  return function(colors) {
	    var n = colors.length,
	        r = new Array(n),
	        g = new Array(n),
	        b = new Array(n),
	        i, color$$1;
	    for (i = 0; i < n; ++i) {
	      color$$1 = d3Color.rgb(colors[i]);
	      r[i] = color$$1.r || 0;
	      g[i] = color$$1.g || 0;
	      b[i] = color$$1.b || 0;
	    }
	    r = spline(r);
	    g = spline(g);
	    b = spline(b);
	    color$$1.opacity = 1;
	    return function(t) {
	      color$$1.r = r(t);
	      color$$1.g = g(t);
	      color$$1.b = b(t);
	      return color$$1 + "";
	    };
	  };
	}

	var rgbBasis = rgbSpline(basis$1);
	var rgbBasisClosed = rgbSpline(basisClosed);

	var array = function(a, b) {
	  var nb = b ? b.length : 0,
	      na = a ? Math.min(nb, a.length) : 0,
	      x = new Array(na),
	      c = new Array(nb),
	      i;

	  for (i = 0; i < na; ++i) x[i] = value(a[i], b[i]);
	  for (; i < nb; ++i) c[i] = b[i];

	  return function(t) {
	    for (i = 0; i < na; ++i) c[i] = x[i](t);
	    return c;
	  };
	};

	var date = function(a, b) {
	  var d = new Date;
	  return a = +a, b -= a, function(t) {
	    return d.setTime(a + b * t), d;
	  };
	};

	var number = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return a + b * t;
	  };
	};

	var object = function(a, b) {
	  var i = {},
	      c = {},
	      k;

	  if (a === null || typeof a !== "object") a = {};
	  if (b === null || typeof b !== "object") b = {};

	  for (k in b) {
	    if (k in a) {
	      i[k] = value(a[k], b[k]);
	    } else {
	      c[k] = b[k];
	    }
	  }

	  return function(t) {
	    for (k in i) c[k] = i[k](t);
	    return c;
	  };
	};

	var reA = /[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g;
	var reB = new RegExp(reA.source, "g");

	function zero(b) {
	  return function() {
	    return b;
	  };
	}

	function one(b) {
	  return function(t) {
	    return b(t) + "";
	  };
	}

	var string = function(a, b) {
	  var bi = reA.lastIndex = reB.lastIndex = 0, // scan index for next number in b
	      am, // current match in a
	      bm, // current match in b
	      bs, // string preceding current number in b, if any
	      i = -1, // index in s
	      s = [], // string constants and placeholders
	      q = []; // number interpolators

	  // Coerce inputs to strings.
	  a = a + "", b = b + "";

	  // Interpolate pairs of numbers in a & b.
	  while ((am = reA.exec(a))
	      && (bm = reB.exec(b))) {
	    if ((bs = bm.index) > bi) { // a string precedes the next number in b
	      bs = b.slice(bi, bs);
	      if (s[i]) s[i] += bs; // coalesce with previous string
	      else s[++i] = bs;
	    }
	    if ((am = am[0]) === (bm = bm[0])) { // numbers in a & b match
	      if (s[i]) s[i] += bm; // coalesce with previous string
	      else s[++i] = bm;
	    } else { // interpolate non-matching numbers
	      s[++i] = null;
	      q.push({i: i, x: number(am, bm)});
	    }
	    bi = reB.lastIndex;
	  }

	  // Add remains of b.
	  if (bi < b.length) {
	    bs = b.slice(bi);
	    if (s[i]) s[i] += bs; // coalesce with previous string
	    else s[++i] = bs;
	  }

	  // Special optimization for only a single match.
	  // Otherwise, interpolate each of the numbers and rejoin the string.
	  return s.length < 2 ? (q[0]
	      ? one(q[0].x)
	      : zero(b))
	      : (b = q.length, function(t) {
	          for (var i = 0, o; i < b; ++i) s[(o = q[i]).i] = o.x(t);
	          return s.join("");
	        });
	};

	var value = function(a, b) {
	  var t = typeof b, c;
	  return b == null || t === "boolean" ? constant(b)
	      : (t === "number" ? number
	      : t === "string" ? ((c = d3Color.color(b)) ? (b = c, rgb$1) : string)
	      : b instanceof d3Color.color ? rgb$1
	      : b instanceof Date ? date
	      : Array.isArray(b) ? array
	      : typeof b.valueOf !== "function" && typeof b.toString !== "function" || isNaN(b) ? object
	      : number)(a, b);
	};

	var round = function(a, b) {
	  return a = +a, b -= a, function(t) {
	    return Math.round(a + b * t);
	  };
	};

	var degrees = 180 / Math.PI;

	var identity = {
	  translateX: 0,
	  translateY: 0,
	  rotate: 0,
	  skewX: 0,
	  scaleX: 1,
	  scaleY: 1
	};

	var decompose = function(a, b, c, d, e, f) {
	  var scaleX, scaleY, skewX;
	  if (scaleX = Math.sqrt(a * a + b * b)) a /= scaleX, b /= scaleX;
	  if (skewX = a * c + b * d) c -= a * skewX, d -= b * skewX;
	  if (scaleY = Math.sqrt(c * c + d * d)) c /= scaleY, d /= scaleY, skewX /= scaleY;
	  if (a * d < b * c) a = -a, b = -b, skewX = -skewX, scaleX = -scaleX;
	  return {
	    translateX: e,
	    translateY: f,
	    rotate: Math.atan2(b, a) * degrees,
	    skewX: Math.atan(skewX) * degrees,
	    scaleX: scaleX,
	    scaleY: scaleY
	  };
	};

	var cssNode;
	var cssRoot;
	var cssView;
	var svgNode;

	function parseCss(value) {
	  if (value === "none") return identity;
	  if (!cssNode) cssNode = document.createElement("DIV"), cssRoot = document.documentElement, cssView = document.defaultView;
	  cssNode.style.transform = value;
	  value = cssView.getComputedStyle(cssRoot.appendChild(cssNode), null).getPropertyValue("transform");
	  cssRoot.removeChild(cssNode);
	  value = value.slice(7, -1).split(",");
	  return decompose(+value[0], +value[1], +value[2], +value[3], +value[4], +value[5]);
	}

	function parseSvg(value) {
	  if (value == null) return identity;
	  if (!svgNode) svgNode = document.createElementNS("http://www.w3.org/2000/svg", "g");
	  svgNode.setAttribute("transform", value);
	  if (!(value = svgNode.transform.baseVal.consolidate())) return identity;
	  value = value.matrix;
	  return decompose(value.a, value.b, value.c, value.d, value.e, value.f);
	}

	function interpolateTransform(parse, pxComma, pxParen, degParen) {

	  function pop(s) {
	    return s.length ? s.pop() + " " : "";
	  }

	  function translate(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push("translate(", null, pxComma, null, pxParen);
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb || yb) {
	      s.push("translate(" + xb + pxComma + yb + pxParen);
	    }
	  }

	  function rotate(a, b, s, q) {
	    if (a !== b) {
	      if (a - b > 180) b += 360; else if (b - a > 180) a += 360; // shortest path
	      q.push({i: s.push(pop(s) + "rotate(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "rotate(" + b + degParen);
	    }
	  }

	  function skewX(a, b, s, q) {
	    if (a !== b) {
	      q.push({i: s.push(pop(s) + "skewX(", null, degParen) - 2, x: number(a, b)});
	    } else if (b) {
	      s.push(pop(s) + "skewX(" + b + degParen);
	    }
	  }

	  function scale(xa, ya, xb, yb, s, q) {
	    if (xa !== xb || ya !== yb) {
	      var i = s.push(pop(s) + "scale(", null, ",", null, ")");
	      q.push({i: i - 4, x: number(xa, xb)}, {i: i - 2, x: number(ya, yb)});
	    } else if (xb !== 1 || yb !== 1) {
	      s.push(pop(s) + "scale(" + xb + "," + yb + ")");
	    }
	  }

	  return function(a, b) {
	    var s = [], // string constants and placeholders
	        q = []; // number interpolators
	    a = parse(a), b = parse(b);
	    translate(a.translateX, a.translateY, b.translateX, b.translateY, s, q);
	    rotate(a.rotate, b.rotate, s, q);
	    skewX(a.skewX, b.skewX, s, q);
	    scale(a.scaleX, a.scaleY, b.scaleX, b.scaleY, s, q);
	    a = b = null; // gc
	    return function(t) {
	      var i = -1, n = q.length, o;
	      while (++i < n) s[(o = q[i]).i] = o.x(t);
	      return s.join("");
	    };
	  };
	}

	var interpolateTransformCss = interpolateTransform(parseCss, "px, ", "px)", "deg)");
	var interpolateTransformSvg = interpolateTransform(parseSvg, ", ", ")", ")");

	var rho = Math.SQRT2;
	var rho2 = 2;
	var rho4 = 4;
	var epsilon2 = 1e-12;

	function cosh(x) {
	  return ((x = Math.exp(x)) + 1 / x) / 2;
	}

	function sinh(x) {
	  return ((x = Math.exp(x)) - 1 / x) / 2;
	}

	function tanh(x) {
	  return ((x = Math.exp(2 * x)) - 1) / (x + 1);
	}

	// p0 = [ux0, uy0, w0]
	// p1 = [ux1, uy1, w1]
	var zoom = function(p0, p1) {
	  var ux0 = p0[0], uy0 = p0[1], w0 = p0[2],
	      ux1 = p1[0], uy1 = p1[1], w1 = p1[2],
	      dx = ux1 - ux0,
	      dy = uy1 - uy0,
	      d2 = dx * dx + dy * dy,
	      i,
	      S;

	  // Special case for u0 ≅ u1.
	  if (d2 < epsilon2) {
	    S = Math.log(w1 / w0) / rho;
	    i = function(t) {
	      return [
	        ux0 + t * dx,
	        uy0 + t * dy,
	        w0 * Math.exp(rho * t * S)
	      ];
	    };
	  }

	  // General case.
	  else {
	    var d1 = Math.sqrt(d2),
	        b0 = (w1 * w1 - w0 * w0 + rho4 * d2) / (2 * w0 * rho2 * d1),
	        b1 = (w1 * w1 - w0 * w0 - rho4 * d2) / (2 * w1 * rho2 * d1),
	        r0 = Math.log(Math.sqrt(b0 * b0 + 1) - b0),
	        r1 = Math.log(Math.sqrt(b1 * b1 + 1) - b1);
	    S = (r1 - r0) / rho;
	    i = function(t) {
	      var s = t * S,
	          coshr0 = cosh(r0),
	          u = w0 / (rho2 * d1) * (coshr0 * tanh(rho * s + r0) - sinh(r0));
	      return [
	        ux0 + u * dx,
	        uy0 + u * dy,
	        w0 * coshr0 / cosh(rho * s + r0)
	      ];
	    };
	  }

	  i.duration = S * 1000;

	  return i;
	};

	function hsl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = d3Color.hsl(start)).h, (end = d3Color.hsl(end)).h),
	        s = nogamma(start.s, end.s),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.s = s(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hsl$2 = hsl$1(hue);
	var hslLong = hsl$1(nogamma);

	function lab$1(start, end) {
	  var l = nogamma((start = d3Color.lab(start)).l, (end = d3Color.lab(end)).l),
	      a = nogamma(start.a, end.a),
	      b = nogamma(start.b, end.b),
	      opacity = nogamma(start.opacity, end.opacity);
	  return function(t) {
	    start.l = l(t);
	    start.a = a(t);
	    start.b = b(t);
	    start.opacity = opacity(t);
	    return start + "";
	  };
	}

	function hcl$1(hue$$1) {
	  return function(start, end) {
	    var h = hue$$1((start = d3Color.hcl(start)).h, (end = d3Color.hcl(end)).h),
	        c = nogamma(start.c, end.c),
	        l = nogamma(start.l, end.l),
	        opacity = nogamma(start.opacity, end.opacity);
	    return function(t) {
	      start.h = h(t);
	      start.c = c(t);
	      start.l = l(t);
	      start.opacity = opacity(t);
	      return start + "";
	    };
	  }
	}

	var hcl$2 = hcl$1(hue);
	var hclLong = hcl$1(nogamma);

	function cubehelix$1(hue$$1) {
	  return (function cubehelixGamma(y) {
	    y = +y;

	    function cubehelix$$1(start, end) {
	      var h = hue$$1((start = d3Color.cubehelix(start)).h, (end = d3Color.cubehelix(end)).h),
	          s = nogamma(start.s, end.s),
	          l = nogamma(start.l, end.l),
	          opacity = nogamma(start.opacity, end.opacity);
	      return function(t) {
	        start.h = h(t);
	        start.s = s(t);
	        start.l = l(Math.pow(t, y));
	        start.opacity = opacity(t);
	        return start + "";
	      };
	    }

	    cubehelix$$1.gamma = cubehelixGamma;

	    return cubehelix$$1;
	  })(1);
	}

	var cubehelix$2 = cubehelix$1(hue);
	var cubehelixLong = cubehelix$1(nogamma);

	var quantize = function(interpolator, n) {
	  var samples = new Array(n);
	  for (var i = 0; i < n; ++i) samples[i] = interpolator(i / (n - 1));
	  return samples;
	};

	exports.interpolate = value;
	exports.interpolateArray = array;
	exports.interpolateBasis = basis$1;
	exports.interpolateBasisClosed = basisClosed;
	exports.interpolateDate = date;
	exports.interpolateNumber = number;
	exports.interpolateObject = object;
	exports.interpolateRound = round;
	exports.interpolateString = string;
	exports.interpolateTransformCss = interpolateTransformCss;
	exports.interpolateTransformSvg = interpolateTransformSvg;
	exports.interpolateZoom = zoom;
	exports.interpolateRgb = rgb$1;
	exports.interpolateRgbBasis = rgbBasis;
	exports.interpolateRgbBasisClosed = rgbBasisClosed;
	exports.interpolateHsl = hsl$2;
	exports.interpolateHslLong = hslLong;
	exports.interpolateLab = lab$1;
	exports.interpolateHcl = hcl$2;
	exports.interpolateHclLong = hclLong;
	exports.interpolateCubehelix = cubehelix$2;
	exports.interpolateCubehelixLong = cubehelixLong;
	exports.quantize = quantize;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-color/ Version 1.2.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var define = function(constructor, factory, prototype) {
	  constructor.prototype = factory.prototype = prototype;
	  prototype.constructor = constructor;
	};

	function extend(parent, definition) {
	  var prototype = Object.create(parent.prototype);
	  for (var key in definition) prototype[key] = definition[key];
	  return prototype;
	}

	function Color() {}

	var darker = 0.7;
	var brighter = 1 / darker;

	var reI = "\\s*([+-]?\\d+)\\s*";
	var reN = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*";
	var reP = "\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*";
	var reHex3 = /^#([0-9a-f]{3})$/;
	var reHex6 = /^#([0-9a-f]{6})$/;
	var reRgbInteger = new RegExp("^rgb\\(" + [reI, reI, reI] + "\\)$");
	var reRgbPercent = new RegExp("^rgb\\(" + [reP, reP, reP] + "\\)$");
	var reRgbaInteger = new RegExp("^rgba\\(" + [reI, reI, reI, reN] + "\\)$");
	var reRgbaPercent = new RegExp("^rgba\\(" + [reP, reP, reP, reN] + "\\)$");
	var reHslPercent = new RegExp("^hsl\\(" + [reN, reP, reP] + "\\)$");
	var reHslaPercent = new RegExp("^hsla\\(" + [reN, reP, reP, reN] + "\\)$");

	var named = {
	  aliceblue: 0xf0f8ff,
	  antiquewhite: 0xfaebd7,
	  aqua: 0x00ffff,
	  aquamarine: 0x7fffd4,
	  azure: 0xf0ffff,
	  beige: 0xf5f5dc,
	  bisque: 0xffe4c4,
	  black: 0x000000,
	  blanchedalmond: 0xffebcd,
	  blue: 0x0000ff,
	  blueviolet: 0x8a2be2,
	  brown: 0xa52a2a,
	  burlywood: 0xdeb887,
	  cadetblue: 0x5f9ea0,
	  chartreuse: 0x7fff00,
	  chocolate: 0xd2691e,
	  coral: 0xff7f50,
	  cornflowerblue: 0x6495ed,
	  cornsilk: 0xfff8dc,
	  crimson: 0xdc143c,
	  cyan: 0x00ffff,
	  darkblue: 0x00008b,
	  darkcyan: 0x008b8b,
	  darkgoldenrod: 0xb8860b,
	  darkgray: 0xa9a9a9,
	  darkgreen: 0x006400,
	  darkgrey: 0xa9a9a9,
	  darkkhaki: 0xbdb76b,
	  darkmagenta: 0x8b008b,
	  darkolivegreen: 0x556b2f,
	  darkorange: 0xff8c00,
	  darkorchid: 0x9932cc,
	  darkred: 0x8b0000,
	  darksalmon: 0xe9967a,
	  darkseagreen: 0x8fbc8f,
	  darkslateblue: 0x483d8b,
	  darkslategray: 0x2f4f4f,
	  darkslategrey: 0x2f4f4f,
	  darkturquoise: 0x00ced1,
	  darkviolet: 0x9400d3,
	  deeppink: 0xff1493,
	  deepskyblue: 0x00bfff,
	  dimgray: 0x696969,
	  dimgrey: 0x696969,
	  dodgerblue: 0x1e90ff,
	  firebrick: 0xb22222,
	  floralwhite: 0xfffaf0,
	  forestgreen: 0x228b22,
	  fuchsia: 0xff00ff,
	  gainsboro: 0xdcdcdc,
	  ghostwhite: 0xf8f8ff,
	  gold: 0xffd700,
	  goldenrod: 0xdaa520,
	  gray: 0x808080,
	  green: 0x008000,
	  greenyellow: 0xadff2f,
	  grey: 0x808080,
	  honeydew: 0xf0fff0,
	  hotpink: 0xff69b4,
	  indianred: 0xcd5c5c,
	  indigo: 0x4b0082,
	  ivory: 0xfffff0,
	  khaki: 0xf0e68c,
	  lavender: 0xe6e6fa,
	  lavenderblush: 0xfff0f5,
	  lawngreen: 0x7cfc00,
	  lemonchiffon: 0xfffacd,
	  lightblue: 0xadd8e6,
	  lightcoral: 0xf08080,
	  lightcyan: 0xe0ffff,
	  lightgoldenrodyellow: 0xfafad2,
	  lightgray: 0xd3d3d3,
	  lightgreen: 0x90ee90,
	  lightgrey: 0xd3d3d3,
	  lightpink: 0xffb6c1,
	  lightsalmon: 0xffa07a,
	  lightseagreen: 0x20b2aa,
	  lightskyblue: 0x87cefa,
	  lightslategray: 0x778899,
	  lightslategrey: 0x778899,
	  lightsteelblue: 0xb0c4de,
	  lightyellow: 0xffffe0,
	  lime: 0x00ff00,
	  limegreen: 0x32cd32,
	  linen: 0xfaf0e6,
	  magenta: 0xff00ff,
	  maroon: 0x800000,
	  mediumaquamarine: 0x66cdaa,
	  mediumblue: 0x0000cd,
	  mediumorchid: 0xba55d3,
	  mediumpurple: 0x9370db,
	  mediumseagreen: 0x3cb371,
	  mediumslateblue: 0x7b68ee,
	  mediumspringgreen: 0x00fa9a,
	  mediumturquoise: 0x48d1cc,
	  mediumvioletred: 0xc71585,
	  midnightblue: 0x191970,
	  mintcream: 0xf5fffa,
	  mistyrose: 0xffe4e1,
	  moccasin: 0xffe4b5,
	  navajowhite: 0xffdead,
	  navy: 0x000080,
	  oldlace: 0xfdf5e6,
	  olive: 0x808000,
	  olivedrab: 0x6b8e23,
	  orange: 0xffa500,
	  orangered: 0xff4500,
	  orchid: 0xda70d6,
	  palegoldenrod: 0xeee8aa,
	  palegreen: 0x98fb98,
	  paleturquoise: 0xafeeee,
	  palevioletred: 0xdb7093,
	  papayawhip: 0xffefd5,
	  peachpuff: 0xffdab9,
	  peru: 0xcd853f,
	  pink: 0xffc0cb,
	  plum: 0xdda0dd,
	  powderblue: 0xb0e0e6,
	  purple: 0x800080,
	  rebeccapurple: 0x663399,
	  red: 0xff0000,
	  rosybrown: 0xbc8f8f,
	  royalblue: 0x4169e1,
	  saddlebrown: 0x8b4513,
	  salmon: 0xfa8072,
	  sandybrown: 0xf4a460,
	  seagreen: 0x2e8b57,
	  seashell: 0xfff5ee,
	  sienna: 0xa0522d,
	  silver: 0xc0c0c0,
	  skyblue: 0x87ceeb,
	  slateblue: 0x6a5acd,
	  slategray: 0x708090,
	  slategrey: 0x708090,
	  snow: 0xfffafa,
	  springgreen: 0x00ff7f,
	  steelblue: 0x4682b4,
	  tan: 0xd2b48c,
	  teal: 0x008080,
	  thistle: 0xd8bfd8,
	  tomato: 0xff6347,
	  turquoise: 0x40e0d0,
	  violet: 0xee82ee,
	  wheat: 0xf5deb3,
	  white: 0xffffff,
	  whitesmoke: 0xf5f5f5,
	  yellow: 0xffff00,
	  yellowgreen: 0x9acd32
	};

	define(Color, color, {
	  displayable: function() {
	    return this.rgb().displayable();
	  },
	  hex: function() {
	    return this.rgb().hex();
	  },
	  toString: function() {
	    return this.rgb() + "";
	  }
	});

	function color(format) {
	  var m;
	  format = (format + "").trim().toLowerCase();
	  return (m = reHex3.exec(format)) ? (m = parseInt(m[1], 16), new Rgb((m >> 8 & 0xf) | (m >> 4 & 0x0f0), (m >> 4 & 0xf) | (m & 0xf0), ((m & 0xf) << 4) | (m & 0xf), 1)) // #f00
	      : (m = reHex6.exec(format)) ? rgbn(parseInt(m[1], 16)) // #ff0000
	      : (m = reRgbInteger.exec(format)) ? new Rgb(m[1], m[2], m[3], 1) // rgb(255, 0, 0)
	      : (m = reRgbPercent.exec(format)) ? new Rgb(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, 1) // rgb(100%, 0%, 0%)
	      : (m = reRgbaInteger.exec(format)) ? rgba(m[1], m[2], m[3], m[4]) // rgba(255, 0, 0, 1)
	      : (m = reRgbaPercent.exec(format)) ? rgba(m[1] * 255 / 100, m[2] * 255 / 100, m[3] * 255 / 100, m[4]) // rgb(100%, 0%, 0%, 1)
	      : (m = reHslPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, 1) // hsl(120, 50%, 50%)
	      : (m = reHslaPercent.exec(format)) ? hsla(m[1], m[2] / 100, m[3] / 100, m[4]) // hsla(120, 50%, 50%, 1)
	      : named.hasOwnProperty(format) ? rgbn(named[format])
	      : format === "transparent" ? new Rgb(NaN, NaN, NaN, 0)
	      : null;
	}

	function rgbn(n) {
	  return new Rgb(n >> 16 & 0xff, n >> 8 & 0xff, n & 0xff, 1);
	}

	function rgba(r, g, b, a) {
	  if (a <= 0) r = g = b = NaN;
	  return new Rgb(r, g, b, a);
	}

	function rgbConvert(o) {
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Rgb;
	  o = o.rgb();
	  return new Rgb(o.r, o.g, o.b, o.opacity);
	}

	function rgb(r, g, b, opacity) {
	  return arguments.length === 1 ? rgbConvert(r) : new Rgb(r, g, b, opacity == null ? 1 : opacity);
	}

	function Rgb(r, g, b, opacity) {
	  this.r = +r;
	  this.g = +g;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Rgb, rgb, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Rgb(this.r * k, this.g * k, this.b * k, this.opacity);
	  },
	  rgb: function() {
	    return this;
	  },
	  displayable: function() {
	    return (0 <= this.r && this.r <= 255)
	        && (0 <= this.g && this.g <= 255)
	        && (0 <= this.b && this.b <= 255)
	        && (0 <= this.opacity && this.opacity <= 1);
	  },
	  hex: function() {
	    return "#" + hex(this.r) + hex(this.g) + hex(this.b);
	  },
	  toString: function() {
	    var a = this.opacity; a = isNaN(a) ? 1 : Math.max(0, Math.min(1, a));
	    return (a === 1 ? "rgb(" : "rgba(")
	        + Math.max(0, Math.min(255, Math.round(this.r) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.g) || 0)) + ", "
	        + Math.max(0, Math.min(255, Math.round(this.b) || 0))
	        + (a === 1 ? ")" : ", " + a + ")");
	  }
	}));

	function hex(value) {
	  value = Math.max(0, Math.min(255, Math.round(value) || 0));
	  return (value < 16 ? "0" : "") + value.toString(16);
	}

	function hsla(h, s, l, a) {
	  if (a <= 0) h = s = l = NaN;
	  else if (l <= 0 || l >= 1) h = s = NaN;
	  else if (s <= 0) h = NaN;
	  return new Hsl(h, s, l, a);
	}

	function hslConvert(o) {
	  if (o instanceof Hsl) return new Hsl(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Color)) o = color(o);
	  if (!o) return new Hsl;
	  if (o instanceof Hsl) return o;
	  o = o.rgb();
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      min = Math.min(r, g, b),
	      max = Math.max(r, g, b),
	      h = NaN,
	      s = max - min,
	      l = (max + min) / 2;
	  if (s) {
	    if (r === max) h = (g - b) / s + (g < b) * 6;
	    else if (g === max) h = (b - r) / s + 2;
	    else h = (r - g) / s + 4;
	    s /= l < 0.5 ? max + min : 2 - max - min;
	    h *= 60;
	  } else {
	    s = l > 0 && l < 1 ? 0 : h;
	  }
	  return new Hsl(h, s, l, o.opacity);
	}

	function hsl(h, s, l, opacity) {
	  return arguments.length === 1 ? hslConvert(h) : new Hsl(h, s, l, opacity == null ? 1 : opacity);
	}

	function Hsl(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hsl, hsl, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Hsl(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = this.h % 360 + (this.h < 0) * 360,
	        s = isNaN(h) || isNaN(this.s) ? 0 : this.s,
	        l = this.l,
	        m2 = l + (l < 0.5 ? l : 1 - l) * s,
	        m1 = 2 * l - m2;
	    return new Rgb(
	      hsl2rgb(h >= 240 ? h - 240 : h + 120, m1, m2),
	      hsl2rgb(h, m1, m2),
	      hsl2rgb(h < 120 ? h + 240 : h - 120, m1, m2),
	      this.opacity
	    );
	  },
	  displayable: function() {
	    return (0 <= this.s && this.s <= 1 || isNaN(this.s))
	        && (0 <= this.l && this.l <= 1)
	        && (0 <= this.opacity && this.opacity <= 1);
	  }
	}));

	/* From FvD 13.37, CSS Color Module Level 3 */
	function hsl2rgb(h, m1, m2) {
	  return (h < 60 ? m1 + (m2 - m1) * h / 60
	      : h < 180 ? m2
	      : h < 240 ? m1 + (m2 - m1) * (240 - h) / 60
	      : m1) * 255;
	}

	var deg2rad = Math.PI / 180;
	var rad2deg = 180 / Math.PI;

	// https://beta.observablehq.com/@mbostock/lab-and-rgb
	var K = 18;
	var Xn = 0.96422;
	var Yn = 1;
	var Zn = 0.82521;
	var t0 = 4 / 29;
	var t1 = 6 / 29;
	var t2 = 3 * t1 * t1;
	var t3 = t1 * t1 * t1;

	function labConvert(o) {
	  if (o instanceof Lab) return new Lab(o.l, o.a, o.b, o.opacity);
	  if (o instanceof Hcl) {
	    if (isNaN(o.h)) return new Lab(o.l, 0, 0, o.opacity);
	    var h = o.h * deg2rad;
	    return new Lab(o.l, Math.cos(h) * o.c, Math.sin(h) * o.c, o.opacity);
	  }
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = rgb2lrgb(o.r),
	      g = rgb2lrgb(o.g),
	      b = rgb2lrgb(o.b),
	      y = xyz2lab((0.2225045 * r + 0.7168786 * g + 0.0606169 * b) / Yn), x, z;
	  if (r === g && g === b) x = z = y; else {
	    x = xyz2lab((0.4360747 * r + 0.3850649 * g + 0.1430804 * b) / Xn);
	    z = xyz2lab((0.0139322 * r + 0.0971045 * g + 0.7141733 * b) / Zn);
	  }
	  return new Lab(116 * y - 16, 500 * (x - y), 200 * (y - z), o.opacity);
	}

	function gray(l, opacity) {
	  return new Lab(l, 0, 0, opacity == null ? 1 : opacity);
	}

	function lab(l, a, b, opacity) {
	  return arguments.length === 1 ? labConvert(l) : new Lab(l, a, b, opacity == null ? 1 : opacity);
	}

	function Lab(l, a, b, opacity) {
	  this.l = +l;
	  this.a = +a;
	  this.b = +b;
	  this.opacity = +opacity;
	}

	define(Lab, lab, extend(Color, {
	  brighter: function(k) {
	    return new Lab(this.l + K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  darker: function(k) {
	    return new Lab(this.l - K * (k == null ? 1 : k), this.a, this.b, this.opacity);
	  },
	  rgb: function() {
	    var y = (this.l + 16) / 116,
	        x = isNaN(this.a) ? y : y + this.a / 500,
	        z = isNaN(this.b) ? y : y - this.b / 200;
	    x = Xn * lab2xyz(x);
	    y = Yn * lab2xyz(y);
	    z = Zn * lab2xyz(z);
	    return new Rgb(
	      lrgb2rgb( 3.1338561 * x - 1.6168667 * y - 0.4906146 * z),
	      lrgb2rgb(-0.9787684 * x + 1.9161415 * y + 0.0334540 * z),
	      lrgb2rgb( 0.0719453 * x - 0.2289914 * y + 1.4052427 * z),
	      this.opacity
	    );
	  }
	}));

	function xyz2lab(t) {
	  return t > t3 ? Math.pow(t, 1 / 3) : t / t2 + t0;
	}

	function lab2xyz(t) {
	  return t > t1 ? t * t * t : t2 * (t - t0);
	}

	function lrgb2rgb(x) {
	  return 255 * (x <= 0.0031308 ? 12.92 * x : 1.055 * Math.pow(x, 1 / 2.4) - 0.055);
	}

	function rgb2lrgb(x) {
	  return (x /= 255) <= 0.04045 ? x / 12.92 : Math.pow((x + 0.055) / 1.055, 2.4);
	}

	function hclConvert(o) {
	  if (o instanceof Hcl) return new Hcl(o.h, o.c, o.l, o.opacity);
	  if (!(o instanceof Lab)) o = labConvert(o);
	  if (o.a === 0 && o.b === 0) return new Hcl(NaN, 0, o.l, o.opacity);
	  var h = Math.atan2(o.b, o.a) * rad2deg;
	  return new Hcl(h < 0 ? h + 360 : h, Math.sqrt(o.a * o.a + o.b * o.b), o.l, o.opacity);
	}

	function lch(l, c, h, opacity) {
	  return arguments.length === 1 ? hclConvert(l) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function hcl(h, c, l, opacity) {
	  return arguments.length === 1 ? hclConvert(h) : new Hcl(h, c, l, opacity == null ? 1 : opacity);
	}

	function Hcl(h, c, l, opacity) {
	  this.h = +h;
	  this.c = +c;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Hcl, hcl, extend(Color, {
	  brighter: function(k) {
	    return new Hcl(this.h, this.c, this.l + K * (k == null ? 1 : k), this.opacity);
	  },
	  darker: function(k) {
	    return new Hcl(this.h, this.c, this.l - K * (k == null ? 1 : k), this.opacity);
	  },
	  rgb: function() {
	    return labConvert(this).rgb();
	  }
	}));

	var A = -0.14861;
	var B = +1.78277;
	var C = -0.29227;
	var D = -0.90649;
	var E = +1.97294;
	var ED = E * D;
	var EB = E * B;
	var BC_DA = B * C - D * A;

	function cubehelixConvert(o) {
	  if (o instanceof Cubehelix) return new Cubehelix(o.h, o.s, o.l, o.opacity);
	  if (!(o instanceof Rgb)) o = rgbConvert(o);
	  var r = o.r / 255,
	      g = o.g / 255,
	      b = o.b / 255,
	      l = (BC_DA * b + ED * r - EB * g) / (BC_DA + ED - EB),
	      bl = b - l,
	      k = (E * (g - l) - C * bl) / D,
	      s = Math.sqrt(k * k + bl * bl) / (E * l * (1 - l)), // NaN if l=0 or l=1
	      h = s ? Math.atan2(k, bl) * rad2deg - 120 : NaN;
	  return new Cubehelix(h < 0 ? h + 360 : h, s, l, o.opacity);
	}

	function cubehelix(h, s, l, opacity) {
	  return arguments.length === 1 ? cubehelixConvert(h) : new Cubehelix(h, s, l, opacity == null ? 1 : opacity);
	}

	function Cubehelix(h, s, l, opacity) {
	  this.h = +h;
	  this.s = +s;
	  this.l = +l;
	  this.opacity = +opacity;
	}

	define(Cubehelix, cubehelix, extend(Color, {
	  brighter: function(k) {
	    k = k == null ? brighter : Math.pow(brighter, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  darker: function(k) {
	    k = k == null ? darker : Math.pow(darker, k);
	    return new Cubehelix(this.h, this.s, this.l * k, this.opacity);
	  },
	  rgb: function() {
	    var h = isNaN(this.h) ? 0 : (this.h + 120) * deg2rad,
	        l = +this.l,
	        a = isNaN(this.s) ? 0 : this.s * l * (1 - l),
	        cosh = Math.cos(h),
	        sinh = Math.sin(h);
	    return new Rgb(
	      255 * (l + a * (A * cosh + B * sinh)),
	      255 * (l + a * (C * cosh + D * sinh)),
	      255 * (l + a * (E * cosh)),
	      this.opacity
	    );
	  }
	}));

	exports.color = color;
	exports.rgb = rgb;
	exports.hsl = hsl;
	exports.lab = lab;
	exports.hcl = hcl;
	exports.lch = lch;
	exports.gray = gray;
	exports.cubehelix = cubehelix;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-transition/ Version 1.1.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(13), __webpack_require__(11), __webpack_require__(17), __webpack_require__(14), __webpack_require__(15), __webpack_require__(18)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-selection', 'd3-dispatch', 'd3-timer', 'd3-interpolate', 'd3-color', 'd3-ease'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Selection,d3Dispatch,d3Timer,d3Interpolate,d3Color,d3Ease) { 'use strict';

	var emptyOn = d3Dispatch.dispatch("start", "end", "interrupt");
	var emptyTween = [];

	var CREATED = 0;
	var SCHEDULED = 1;
	var STARTING = 2;
	var STARTED = 3;
	var RUNNING = 4;
	var ENDING = 5;
	var ENDED = 6;

	var schedule = function(node, name, id, index, group, timing) {
	  var schedules = node.__transition;
	  if (!schedules) node.__transition = {};
	  else if (id in schedules) return;
	  create(node, id, {
	    name: name,
	    index: index, // For context during callback.
	    group: group, // For context during callback.
	    on: emptyOn,
	    tween: emptyTween,
	    time: timing.time,
	    delay: timing.delay,
	    duration: timing.duration,
	    ease: timing.ease,
	    timer: null,
	    state: CREATED
	  });
	};

	function init(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > CREATED) throw new Error("too late; already scheduled");
	  return schedule;
	}

	function set(node, id) {
	  var schedule = get(node, id);
	  if (schedule.state > STARTING) throw new Error("too late; already started");
	  return schedule;
	}

	function get(node, id) {
	  var schedule = node.__transition;
	  if (!schedule || !(schedule = schedule[id])) throw new Error("transition not found");
	  return schedule;
	}

	function create(node, id, self) {
	  var schedules = node.__transition,
	      tween;

	  // Initialize the self timer when the transition is created.
	  // Note the actual delay is not known until the first callback!
	  schedules[id] = self;
	  self.timer = d3Timer.timer(schedule, 0, self.time);

	  function schedule(elapsed) {
	    self.state = SCHEDULED;
	    self.timer.restart(start, self.delay, self.time);

	    // If the elapsed delay is less than our first sleep, start immediately.
	    if (self.delay <= elapsed) start(elapsed - self.delay);
	  }

	  function start(elapsed) {
	    var i, j, n, o;

	    // If the state is not SCHEDULED, then we previously errored on start.
	    if (self.state !== SCHEDULED) return stop();

	    for (i in schedules) {
	      o = schedules[i];
	      if (o.name !== self.name) continue;

	      // While this element already has a starting transition during this frame,
	      // defer starting an interrupting transition until that transition has a
	      // chance to tick (and possibly end); see d3/d3-transition#54!
	      if (o.state === STARTED) return d3Timer.timeout(start);

	      // Interrupt the active transition, if any.
	      // Dispatch the interrupt event.
	      if (o.state === RUNNING) {
	        o.state = ENDED;
	        o.timer.stop();
	        o.on.call("interrupt", node, node.__data__, o.index, o.group);
	        delete schedules[i];
	      }

	      // Cancel any pre-empted transitions. No interrupt event is dispatched
	      // because the cancelled transitions never started. Note that this also
	      // removes this transition from the pending list!
	      else if (+i < id) {
	        o.state = ENDED;
	        o.timer.stop();
	        delete schedules[i];
	      }
	    }

	    // Defer the first tick to end of the current frame; see d3/d3#1576.
	    // Note the transition may be canceled after start and before the first tick!
	    // Note this must be scheduled before the start event; see d3/d3-transition#16!
	    // Assuming this is successful, subsequent callbacks go straight to tick.
	    d3Timer.timeout(function() {
	      if (self.state === STARTED) {
	        self.state = RUNNING;
	        self.timer.restart(tick, self.delay, self.time);
	        tick(elapsed);
	      }
	    });

	    // Dispatch the start event.
	    // Note this must be done before the tween are initialized.
	    self.state = STARTING;
	    self.on.call("start", node, node.__data__, self.index, self.group);
	    if (self.state !== STARTING) return; // interrupted
	    self.state = STARTED;

	    // Initialize the tween, deleting null tween.
	    tween = new Array(n = self.tween.length);
	    for (i = 0, j = -1; i < n; ++i) {
	      if (o = self.tween[i].value.call(node, node.__data__, self.index, self.group)) {
	        tween[++j] = o;
	      }
	    }
	    tween.length = j + 1;
	  }

	  function tick(elapsed) {
	    var t = elapsed < self.duration ? self.ease.call(null, elapsed / self.duration) : (self.timer.restart(stop), self.state = ENDING, 1),
	        i = -1,
	        n = tween.length;

	    while (++i < n) {
	      tween[i].call(null, t);
	    }

	    // Dispatch the end event.
	    if (self.state === ENDING) {
	      self.on.call("end", node, node.__data__, self.index, self.group);
	      stop();
	    }
	  }

	  function stop() {
	    self.state = ENDED;
	    self.timer.stop();
	    delete schedules[id];
	    for (var i in schedules) return; // eslint-disable-line no-unused-vars
	    delete node.__transition;
	  }
	}

	var interrupt = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      active,
	      empty = true,
	      i;

	  if (!schedules) return;

	  name = name == null ? null : name + "";

	  for (i in schedules) {
	    if ((schedule = schedules[i]).name !== name) { empty = false; continue; }
	    active = schedule.state > STARTING && schedule.state < ENDING;
	    schedule.state = ENDED;
	    schedule.timer.stop();
	    if (active) schedule.on.call("interrupt", node, node.__data__, schedule.index, schedule.group);
	    delete schedules[i];
	  }

	  if (empty) delete node.__transition;
	};

	var selection_interrupt = function(name) {
	  return this.each(function() {
	    interrupt(this, name);
	  });
	};

	function tweenRemove(id, name) {
	  var tween0, tween1;
	  return function() {
	    var schedule = set(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = tween0 = tween;
	      for (var i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1 = tween1.slice();
	          tween1.splice(i, 1);
	          break;
	        }
	      }
	    }

	    schedule.tween = tween1;
	  };
	}

	function tweenFunction(id, name, value) {
	  var tween0, tween1;
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    var schedule = set(this, id),
	        tween = schedule.tween;

	    // If this node shared tween with the previous node,
	    // just assign the updated shared tween and we’re done!
	    // Otherwise, copy-on-write.
	    if (tween !== tween0) {
	      tween1 = (tween0 = tween).slice();
	      for (var t = {name: name, value: value}, i = 0, n = tween1.length; i < n; ++i) {
	        if (tween1[i].name === name) {
	          tween1[i] = t;
	          break;
	        }
	      }
	      if (i === n) tween1.push(t);
	    }

	    schedule.tween = tween1;
	  };
	}

	var transition_tween = function(name, value) {
	  var id = this._id;

	  name += "";

	  if (arguments.length < 2) {
	    var tween = get(this.node(), id).tween;
	    for (var i = 0, n = tween.length, t; i < n; ++i) {
	      if ((t = tween[i]).name === name) {
	        return t.value;
	      }
	    }
	    return null;
	  }

	  return this.each((value == null ? tweenRemove : tweenFunction)(id, name, value));
	};

	function tweenValue(transition, name, value) {
	  var id = transition._id;

	  transition.each(function() {
	    var schedule = set(this, id);
	    (schedule.value || (schedule.value = {}))[name] = value.apply(this, arguments);
	  });

	  return function(node) {
	    return get(node, id).value[name];
	  };
	}

	var interpolate = function(a, b) {
	  var c;
	  return (typeof b === "number" ? d3Interpolate.interpolateNumber
	      : b instanceof d3Color.color ? d3Interpolate.interpolateRgb
	      : (c = d3Color.color(b)) ? (b = c, d3Interpolate.interpolateRgb)
	      : d3Interpolate.interpolateString)(a, b);
	};

	function attrRemove(name) {
	  return function() {
	    this.removeAttribute(name);
	  };
	}

	function attrRemoveNS(fullname) {
	  return function() {
	    this.removeAttributeNS(fullname.space, fullname.local);
	  };
	}

	function attrConstant(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrConstantNS(fullname, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function attrFunction(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttribute(name);
	    value0 = this.getAttribute(name);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function attrFunctionNS(fullname, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0, value1 = value(this);
	    if (value1 == null) return void this.removeAttributeNS(fullname.space, fullname.local);
	    value0 = this.getAttributeNS(fullname.space, fullname.local);
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	var transition_attr = function(name, value) {
	  var fullname = d3Selection.namespace(name), i = fullname === "transform" ? d3Interpolate.interpolateTransformSvg : interpolate;
	  return this.attrTween(name, typeof value === "function"
	      ? (fullname.local ? attrFunctionNS : attrFunction)(fullname, i, tweenValue(this, "attr." + name, value))
	      : value == null ? (fullname.local ? attrRemoveNS : attrRemove)(fullname)
	      : (fullname.local ? attrConstantNS : attrConstant)(fullname, i, value + ""));
	};

	function attrTweenNS(fullname, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttributeNS(fullname.space, fullname.local, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	function attrTween(name, value) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.setAttribute(name, i(t));
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_attrTween = function(name, value) {
	  var key = "attr." + name;
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  var fullname = d3Selection.namespace(name);
	  return this.tween(key, (fullname.local ? attrTweenNS : attrTween)(fullname, value));
	};

	function delayFunction(id, value) {
	  return function() {
	    init(this, id).delay = +value.apply(this, arguments);
	  };
	}

	function delayConstant(id, value) {
	  return value = +value, function() {
	    init(this, id).delay = value;
	  };
	}

	var transition_delay = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? delayFunction
	          : delayConstant)(id, value))
	      : get(this.node(), id).delay;
	};

	function durationFunction(id, value) {
	  return function() {
	    set(this, id).duration = +value.apply(this, arguments);
	  };
	}

	function durationConstant(id, value) {
	  return value = +value, function() {
	    set(this, id).duration = value;
	  };
	}

	var transition_duration = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each((typeof value === "function"
	          ? durationFunction
	          : durationConstant)(id, value))
	      : get(this.node(), id).duration;
	};

	function easeConstant(id, value) {
	  if (typeof value !== "function") throw new Error;
	  return function() {
	    set(this, id).ease = value;
	  };
	}

	var transition_ease = function(value) {
	  var id = this._id;

	  return arguments.length
	      ? this.each(easeConstant(id, value))
	      : get(this.node(), id).ease;
	};

	var transition_filter = function(match) {
	  if (typeof match !== "function") match = d3Selection.matcher(match);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = [], node, i = 0; i < n; ++i) {
	      if ((node = group[i]) && match.call(node, node.__data__, i, group)) {
	        subgroup.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, this._name, this._id);
	};

	var transition_merge = function(transition) {
	  if (transition._id !== this._id) throw new Error;

	  for (var groups0 = this._groups, groups1 = transition._groups, m0 = groups0.length, m1 = groups1.length, m = Math.min(m0, m1), merges = new Array(m0), j = 0; j < m; ++j) {
	    for (var group0 = groups0[j], group1 = groups1[j], n = group0.length, merge = merges[j] = new Array(n), node, i = 0; i < n; ++i) {
	      if (node = group0[i] || group1[i]) {
	        merge[i] = node;
	      }
	    }
	  }

	  for (; j < m0; ++j) {
	    merges[j] = groups0[j];
	  }

	  return new Transition(merges, this._parents, this._name, this._id);
	};

	function start(name) {
	  return (name + "").trim().split(/^|\s+/).every(function(t) {
	    var i = t.indexOf(".");
	    if (i >= 0) t = t.slice(0, i);
	    return !t || t === "start";
	  });
	}

	function onFunction(id, name, listener) {
	  var on0, on1, sit = start(name) ? init : set;
	  return function() {
	    var schedule = sit(this, id),
	        on = schedule.on;

	    // If this node shared a dispatch with the previous node,
	    // just assign the updated shared dispatch and we’re done!
	    // Otherwise, copy-on-write.
	    if (on !== on0) (on1 = (on0 = on).copy()).on(name, listener);

	    schedule.on = on1;
	  };
	}

	var transition_on = function(name, listener) {
	  var id = this._id;

	  return arguments.length < 2
	      ? get(this.node(), id).on.on(name)
	      : this.each(onFunction(id, name, listener));
	};

	function removeFunction(id) {
	  return function() {
	    var parent = this.parentNode;
	    for (var i in this.__transition) if (+i !== id) return;
	    if (parent) parent.removeChild(this);
	  };
	}

	var transition_remove = function() {
	  return this.on("end.remove", removeFunction(this._id));
	};

	var transition_select = function(select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = d3Selection.selector(select);

	  for (var groups = this._groups, m = groups.length, subgroups = new Array(m), j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, subgroup = subgroups[j] = new Array(n), node, subnode, i = 0; i < n; ++i) {
	      if ((node = group[i]) && (subnode = select.call(node, node.__data__, i, group))) {
	        if ("__data__" in node) subnode.__data__ = node.__data__;
	        subgroup[i] = subnode;
	        schedule(subgroup[i], name, id, i, subgroup, get(node, id));
	      }
	    }
	  }

	  return new Transition(subgroups, this._parents, name, id);
	};

	var transition_selectAll = function(select) {
	  var name = this._name,
	      id = this._id;

	  if (typeof select !== "function") select = d3Selection.selectorAll(select);

	  for (var groups = this._groups, m = groups.length, subgroups = [], parents = [], j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        for (var children = select.call(node, node.__data__, i, group), child, inherit = get(node, id), k = 0, l = children.length; k < l; ++k) {
	          if (child = children[k]) {
	            schedule(child, name, id, k, children, inherit);
	          }
	        }
	        subgroups.push(children);
	        parents.push(node);
	      }
	    }
	  }

	  return new Transition(subgroups, parents, name, id);
	};

	var Selection = d3Selection.selection.prototype.constructor;

	var transition_selection = function() {
	  return new Selection(this._groups, this._parents);
	};

	function styleRemove(name, interpolate$$1) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = d3Selection.style(this, name),
	        value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	function styleRemoveEnd(name) {
	  return function() {
	    this.style.removeProperty(name);
	  };
	}

	function styleConstant(name, interpolate$$1, value1) {
	  var value00,
	      interpolate0;
	  return function() {
	    var value0 = d3Selection.style(this, name);
	    return value0 === value1 ? null
	        : value0 === value00 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value1);
	  };
	}

	function styleFunction(name, interpolate$$1, value) {
	  var value00,
	      value10,
	      interpolate0;
	  return function() {
	    var value0 = d3Selection.style(this, name),
	        value1 = value(this);
	    if (value1 == null) value1 = (this.style.removeProperty(name), d3Selection.style(this, name));
	    return value0 === value1 ? null
	        : value0 === value00 && value1 === value10 ? interpolate0
	        : interpolate0 = interpolate$$1(value00 = value0, value10 = value1);
	  };
	}

	var transition_style = function(name, value, priority) {
	  var i = (name += "") === "transform" ? d3Interpolate.interpolateTransformCss : interpolate;
	  return value == null ? this
	          .styleTween(name, styleRemove(name, i))
	          .on("end.style." + name, styleRemoveEnd(name))
	      : this.styleTween(name, typeof value === "function"
	          ? styleFunction(name, i, tweenValue(this, "style." + name, value))
	          : styleConstant(name, i, value + ""), priority);
	};

	function styleTween(name, value, priority) {
	  function tween() {
	    var node = this, i = value.apply(node, arguments);
	    return i && function(t) {
	      node.style.setProperty(name, i(t), priority);
	    };
	  }
	  tween._value = value;
	  return tween;
	}

	var transition_styleTween = function(name, value, priority) {
	  var key = "style." + (name += "");
	  if (arguments.length < 2) return (key = this.tween(key)) && key._value;
	  if (value == null) return this.tween(key, null);
	  if (typeof value !== "function") throw new Error;
	  return this.tween(key, styleTween(name, value, priority == null ? "" : priority));
	};

	function textConstant(value) {
	  return function() {
	    this.textContent = value;
	  };
	}

	function textFunction(value) {
	  return function() {
	    var value1 = value(this);
	    this.textContent = value1 == null ? "" : value1;
	  };
	}

	var transition_text = function(value) {
	  return this.tween("text", typeof value === "function"
	      ? textFunction(tweenValue(this, "text", value))
	      : textConstant(value == null ? "" : value + ""));
	};

	var transition_transition = function() {
	  var name = this._name,
	      id0 = this._id,
	      id1 = newId();

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        var inherit = get(node, id0);
	        schedule(node, name, id1, i, group, {
	          time: inherit.time + inherit.delay + inherit.duration,
	          delay: 0,
	          duration: inherit.duration,
	          ease: inherit.ease
	        });
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id1);
	};

	var id = 0;

	function Transition(groups, parents, name, id) {
	  this._groups = groups;
	  this._parents = parents;
	  this._name = name;
	  this._id = id;
	}

	function transition(name) {
	  return d3Selection.selection().transition(name);
	}

	function newId() {
	  return ++id;
	}

	var selection_prototype = d3Selection.selection.prototype;

	Transition.prototype = transition.prototype = {
	  constructor: Transition,
	  select: transition_select,
	  selectAll: transition_selectAll,
	  filter: transition_filter,
	  merge: transition_merge,
	  selection: transition_selection,
	  transition: transition_transition,
	  call: selection_prototype.call,
	  nodes: selection_prototype.nodes,
	  node: selection_prototype.node,
	  size: selection_prototype.size,
	  empty: selection_prototype.empty,
	  each: selection_prototype.each,
	  on: transition_on,
	  attr: transition_attr,
	  attrTween: transition_attrTween,
	  style: transition_style,
	  styleTween: transition_styleTween,
	  text: transition_text,
	  remove: transition_remove,
	  tween: transition_tween,
	  delay: transition_delay,
	  duration: transition_duration,
	  ease: transition_ease
	};

	var defaultTiming = {
	  time: null, // Set on use.
	  delay: 0,
	  duration: 250,
	  ease: d3Ease.easeCubicInOut
	};

	function inherit(node, id) {
	  var timing;
	  while (!(timing = node.__transition) || !(timing = timing[id])) {
	    if (!(node = node.parentNode)) {
	      return defaultTiming.time = d3Timer.now(), defaultTiming;
	    }
	  }
	  return timing;
	}

	var selection_transition = function(name) {
	  var id,
	      timing;

	  if (name instanceof Transition) {
	    id = name._id, name = name._name;
	  } else {
	    id = newId(), (timing = defaultTiming).time = d3Timer.now(), name = name == null ? null : name + "";
	  }

	  for (var groups = this._groups, m = groups.length, j = 0; j < m; ++j) {
	    for (var group = groups[j], n = group.length, node, i = 0; i < n; ++i) {
	      if (node = group[i]) {
	        schedule(node, name, id, i, group, timing || inherit(node, id));
	      }
	    }
	  }

	  return new Transition(groups, this._parents, name, id);
	};

	d3Selection.selection.prototype.interrupt = selection_interrupt;
	d3Selection.selection.prototype.transition = selection_transition;

	var root = [null];

	var active = function(node, name) {
	  var schedules = node.__transition,
	      schedule,
	      i;

	  if (schedules) {
	    name = name == null ? null : name + "";
	    for (i in schedules) {
	      if ((schedule = schedules[i]).state > SCHEDULED && schedule.name === name) {
	        return new Transition([[node]], root, name, +i);
	      }
	    }
	  }

	  return null;
	};

	exports.transition = transition;
	exports.active = active;
	exports.interrupt = interrupt;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-timer/ Version 1.0.7. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var frame = 0;
	var timeout = 0;
	var interval = 0;
	var pokeDelay = 1000;
	var taskHead;
	var taskTail;
	var clockLast = 0;
	var clockNow = 0;
	var clockSkew = 0;
	var clock = typeof performance === "object" && performance.now ? performance : Date;
	var setFrame = typeof window === "object" && window.requestAnimationFrame ? window.requestAnimationFrame.bind(window) : function(f) { setTimeout(f, 17); };

	function now() {
	  return clockNow || (setFrame(clearNow), clockNow = clock.now() + clockSkew);
	}

	function clearNow() {
	  clockNow = 0;
	}

	function Timer() {
	  this._call =
	  this._time =
	  this._next = null;
	}

	Timer.prototype = timer.prototype = {
	  constructor: Timer,
	  restart: function(callback, delay, time) {
	    if (typeof callback !== "function") throw new TypeError("callback is not a function");
	    time = (time == null ? now() : +time) + (delay == null ? 0 : +delay);
	    if (!this._next && taskTail !== this) {
	      if (taskTail) taskTail._next = this;
	      else taskHead = this;
	      taskTail = this;
	    }
	    this._call = callback;
	    this._time = time;
	    sleep();
	  },
	  stop: function() {
	    if (this._call) {
	      this._call = null;
	      this._time = Infinity;
	      sleep();
	    }
	  }
	};

	function timer(callback, delay, time) {
	  var t = new Timer;
	  t.restart(callback, delay, time);
	  return t;
	}

	function timerFlush() {
	  now(); // Get the current time, if not already set.
	  ++frame; // Pretend we’ve set an alarm, if we haven’t already.
	  var t = taskHead, e;
	  while (t) {
	    if ((e = clockNow - t._time) >= 0) t._call.call(null, e);
	    t = t._next;
	  }
	  --frame;
	}

	function wake() {
	  clockNow = (clockLast = clock.now()) + clockSkew;
	  frame = timeout = 0;
	  try {
	    timerFlush();
	  } finally {
	    frame = 0;
	    nap();
	    clockNow = 0;
	  }
	}

	function poke() {
	  var now = clock.now(), delay = now - clockLast;
	  if (delay > pokeDelay) clockSkew -= delay, clockLast = now;
	}

	function nap() {
	  var t0, t1 = taskHead, t2, time = Infinity;
	  while (t1) {
	    if (t1._call) {
	      if (time > t1._time) time = t1._time;
	      t0 = t1, t1 = t1._next;
	    } else {
	      t2 = t1._next, t1._next = null;
	      t1 = t0 ? t0._next = t2 : taskHead = t2;
	    }
	  }
	  taskTail = t0;
	  sleep(time);
	}

	function sleep(time) {
	  if (frame) return; // Soonest alarm already set, or will be.
	  if (timeout) timeout = clearTimeout(timeout);
	  var delay = time - clockNow; // Strictly less than if we recomputed clockNow.
	  if (delay > 24) {
	    if (time < Infinity) timeout = setTimeout(wake, time - clock.now() - clockSkew);
	    if (interval) interval = clearInterval(interval);
	  } else {
	    if (!interval) clockLast = clock.now(), interval = setInterval(poke, pokeDelay);
	    frame = 1, setFrame(wake);
	  }
	}

	var timeout$1 = function(callback, delay, time) {
	  var t = new Timer;
	  delay = delay == null ? 0 : +delay;
	  t.restart(function(elapsed) {
	    t.stop();
	    callback(elapsed + delay);
	  }, delay, time);
	  return t;
	};

	var interval$1 = function(callback, delay, time) {
	  var t = new Timer, total = delay;
	  if (delay == null) return t.restart(callback, delay, time), t;
	  delay = +delay, time = time == null ? now() : +time;
	  t.restart(function tick(elapsed) {
	    elapsed += total;
	    t.restart(tick, total += delay, time);
	    callback(elapsed);
	  }, delay, time);
	  return t;
	};

	exports.now = now;
	exports.timer = timer;
	exports.timerFlush = timerFlush;
	exports.timeout = timeout$1;
	exports.interval = interval$1;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-ease/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	function linear(t) {
	  return +t;
	}

	function quadIn(t) {
	  return t * t;
	}

	function quadOut(t) {
	  return t * (2 - t);
	}

	function quadInOut(t) {
	  return ((t *= 2) <= 1 ? t * t : --t * (2 - t) + 1) / 2;
	}

	function cubicIn(t) {
	  return t * t * t;
	}

	function cubicOut(t) {
	  return --t * t * t + 1;
	}

	function cubicInOut(t) {
	  return ((t *= 2) <= 1 ? t * t * t : (t -= 2) * t * t + 2) / 2;
	}

	var exponent = 3;

	var polyIn = (function custom(e) {
	  e = +e;

	  function polyIn(t) {
	    return Math.pow(t, e);
	  }

	  polyIn.exponent = custom;

	  return polyIn;
	})(exponent);

	var polyOut = (function custom(e) {
	  e = +e;

	  function polyOut(t) {
	    return 1 - Math.pow(1 - t, e);
	  }

	  polyOut.exponent = custom;

	  return polyOut;
	})(exponent);

	var polyInOut = (function custom(e) {
	  e = +e;

	  function polyInOut(t) {
	    return ((t *= 2) <= 1 ? Math.pow(t, e) : 2 - Math.pow(2 - t, e)) / 2;
	  }

	  polyInOut.exponent = custom;

	  return polyInOut;
	})(exponent);

	var pi = Math.PI;
	var halfPi = pi / 2;

	function sinIn(t) {
	  return 1 - Math.cos(t * halfPi);
	}

	function sinOut(t) {
	  return Math.sin(t * halfPi);
	}

	function sinInOut(t) {
	  return (1 - Math.cos(pi * t)) / 2;
	}

	function expIn(t) {
	  return Math.pow(2, 10 * t - 10);
	}

	function expOut(t) {
	  return 1 - Math.pow(2, -10 * t);
	}

	function expInOut(t) {
	  return ((t *= 2) <= 1 ? Math.pow(2, 10 * t - 10) : 2 - Math.pow(2, 10 - 10 * t)) / 2;
	}

	function circleIn(t) {
	  return 1 - Math.sqrt(1 - t * t);
	}

	function circleOut(t) {
	  return Math.sqrt(1 - --t * t);
	}

	function circleInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - Math.sqrt(1 - t * t) : Math.sqrt(1 - (t -= 2) * t) + 1) / 2;
	}

	var b1 = 4 / 11;
	var b2 = 6 / 11;
	var b3 = 8 / 11;
	var b4 = 3 / 4;
	var b5 = 9 / 11;
	var b6 = 10 / 11;
	var b7 = 15 / 16;
	var b8 = 21 / 22;
	var b9 = 63 / 64;
	var b0 = 1 / b1 / b1;

	function bounceIn(t) {
	  return 1 - bounceOut(1 - t);
	}

	function bounceOut(t) {
	  return (t = +t) < b1 ? b0 * t * t : t < b3 ? b0 * (t -= b2) * t + b4 : t < b6 ? b0 * (t -= b5) * t + b7 : b0 * (t -= b8) * t + b9;
	}

	function bounceInOut(t) {
	  return ((t *= 2) <= 1 ? 1 - bounceOut(1 - t) : bounceOut(t - 1) + 1) / 2;
	}

	var overshoot = 1.70158;

	var backIn = (function custom(s) {
	  s = +s;

	  function backIn(t) {
	    return t * t * ((s + 1) * t - s);
	  }

	  backIn.overshoot = custom;

	  return backIn;
	})(overshoot);

	var backOut = (function custom(s) {
	  s = +s;

	  function backOut(t) {
	    return --t * t * ((s + 1) * t + s) + 1;
	  }

	  backOut.overshoot = custom;

	  return backOut;
	})(overshoot);

	var backInOut = (function custom(s) {
	  s = +s;

	  function backInOut(t) {
	    return ((t *= 2) < 1 ? t * t * ((s + 1) * t - s) : (t -= 2) * t * ((s + 1) * t + s) + 2) / 2;
	  }

	  backInOut.overshoot = custom;

	  return backInOut;
	})(overshoot);

	var tau = 2 * Math.PI;
	var amplitude = 1;
	var period = 0.3;

	var elasticIn = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticIn(t) {
	    return a * Math.pow(2, 10 * --t) * Math.sin((s - t) / p);
	  }

	  elasticIn.amplitude = function(a) { return custom(a, p * tau); };
	  elasticIn.period = function(p) { return custom(a, p); };

	  return elasticIn;
	})(amplitude, period);

	var elasticOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticOut(t) {
	    return 1 - a * Math.pow(2, -10 * (t = +t)) * Math.sin((t + s) / p);
	  }

	  elasticOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticOut.period = function(p) { return custom(a, p); };

	  return elasticOut;
	})(amplitude, period);

	var elasticInOut = (function custom(a, p) {
	  var s = Math.asin(1 / (a = Math.max(1, a))) * (p /= tau);

	  function elasticInOut(t) {
	    return ((t = t * 2 - 1) < 0
	        ? a * Math.pow(2, 10 * t) * Math.sin((s - t) / p)
	        : 2 - a * Math.pow(2, -10 * t) * Math.sin((s + t) / p)) / 2;
	  }

	  elasticInOut.amplitude = function(a) { return custom(a, p * tau); };
	  elasticInOut.period = function(p) { return custom(a, p); };

	  return elasticInOut;
	})(amplitude, period);

	exports.easeLinear = linear;
	exports.easeQuad = quadInOut;
	exports.easeQuadIn = quadIn;
	exports.easeQuadOut = quadOut;
	exports.easeQuadInOut = quadInOut;
	exports.easeCubic = cubicInOut;
	exports.easeCubicIn = cubicIn;
	exports.easeCubicOut = cubicOut;
	exports.easeCubicInOut = cubicInOut;
	exports.easePoly = polyInOut;
	exports.easePolyIn = polyIn;
	exports.easePolyOut = polyOut;
	exports.easePolyInOut = polyInOut;
	exports.easeSin = sinInOut;
	exports.easeSinIn = sinIn;
	exports.easeSinOut = sinOut;
	exports.easeSinInOut = sinInOut;
	exports.easeExp = expInOut;
	exports.easeExpIn = expIn;
	exports.easeExpOut = expOut;
	exports.easeExpInOut = expInOut;
	exports.easeCircle = circleInOut;
	exports.easeCircleIn = circleIn;
	exports.easeCircleOut = circleOut;
	exports.easeCircleInOut = circleInOut;
	exports.easeBounce = bounceOut;
	exports.easeBounceIn = bounceIn;
	exports.easeBounceOut = bounceOut;
	exports.easeBounceInOut = bounceInOut;
	exports.easeBack = backInOut;
	exports.easeBackIn = backIn;
	exports.easeBackOut = backOut;
	exports.easeBackInOut = backInOut;
	exports.easeElastic = elasticOut;
	exports.easeElasticIn = elasticIn;
	exports.easeElasticOut = elasticOut;
	exports.easeElasticInOut = elasticInOut;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-chord/ Version 1.0.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
	   true ? factory(exports, __webpack_require__(8), __webpack_require__(20)) :
	  typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-path'], factory) :
	  (factory((global.d3 = global.d3 || {}),global.d3,global.d3));
	}(this, (function (exports,d3Array,d3Path) { 'use strict';

	var cos = Math.cos;
	var sin = Math.sin;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var tau = pi * 2;
	var max = Math.max;

	function compareValue(compare) {
	  return function(a, b) {
	    return compare(
	      a.source.value + a.target.value,
	      b.source.value + b.target.value
	    );
	  };
	}

	var chord = function() {
	  var padAngle = 0,
	      sortGroups = null,
	      sortSubgroups = null,
	      sortChords = null;

	  function chord(matrix) {
	    var n = matrix.length,
	        groupSums = [],
	        groupIndex = d3Array.range(n),
	        subgroupIndex = [],
	        chords = [],
	        groups = chords.groups = new Array(n),
	        subgroups = new Array(n * n),
	        k,
	        x,
	        x0,
	        dx,
	        i,
	        j;

	    // Compute the sum.
	    k = 0, i = -1; while (++i < n) {
	      x = 0, j = -1; while (++j < n) {
	        x += matrix[i][j];
	      }
	      groupSums.push(x);
	      subgroupIndex.push(d3Array.range(n));
	      k += x;
	    }

	    // Sort groups…
	    if (sortGroups) groupIndex.sort(function(a, b) {
	      return sortGroups(groupSums[a], groupSums[b]);
	    });

	    // Sort subgroups…
	    if (sortSubgroups) subgroupIndex.forEach(function(d, i) {
	      d.sort(function(a, b) {
	        return sortSubgroups(matrix[i][a], matrix[i][b]);
	      });
	    });

	    // Convert the sum to scaling factor for [0, 2pi].
	    // TODO Allow start and end angle to be specified?
	    // TODO Allow padding to be specified as percentage?
	    k = max(0, tau - padAngle * n) / k;
	    dx = k ? padAngle : tau / n;

	    // Compute the start and end angle for each group and subgroup.
	    // Note: Opera has a bug reordering object literal properties!
	    x = 0, i = -1; while (++i < n) {
	      x0 = x, j = -1; while (++j < n) {
	        var di = groupIndex[i],
	            dj = subgroupIndex[di][j],
	            v = matrix[di][dj],
	            a0 = x,
	            a1 = x += v * k;
	        subgroups[dj * n + di] = {
	          index: di,
	          subindex: dj,
	          startAngle: a0,
	          endAngle: a1,
	          value: v
	        };
	      }
	      groups[di] = {
	        index: di,
	        startAngle: x0,
	        endAngle: x,
	        value: groupSums[di]
	      };
	      x += dx;
	    }

	    // Generate chords for each (non-empty) subgroup-subgroup link.
	    i = -1; while (++i < n) {
	      j = i - 1; while (++j < n) {
	        var source = subgroups[j * n + i],
	            target = subgroups[i * n + j];
	        if (source.value || target.value) {
	          chords.push(source.value < target.value
	              ? {source: target, target: source}
	              : {source: source, target: target});
	        }
	      }
	    }

	    return sortChords ? chords.sort(sortChords) : chords;
	  }

	  chord.padAngle = function(_) {
	    return arguments.length ? (padAngle = max(0, _), chord) : padAngle;
	  };

	  chord.sortGroups = function(_) {
	    return arguments.length ? (sortGroups = _, chord) : sortGroups;
	  };

	  chord.sortSubgroups = function(_) {
	    return arguments.length ? (sortSubgroups = _, chord) : sortSubgroups;
	  };

	  chord.sortChords = function(_) {
	    return arguments.length ? (_ == null ? sortChords = null : (sortChords = compareValue(_))._ = _, chord) : sortChords && sortChords._;
	  };

	  return chord;
	};

	var slice = Array.prototype.slice;

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function defaultSource(d) {
	  return d.source;
	}

	function defaultTarget(d) {
	  return d.target;
	}

	function defaultRadius(d) {
	  return d.radius;
	}

	function defaultStartAngle(d) {
	  return d.startAngle;
	}

	function defaultEndAngle(d) {
	  return d.endAngle;
	}

	var ribbon = function() {
	  var source = defaultSource,
	      target = defaultTarget,
	      radius = defaultRadius,
	      startAngle = defaultStartAngle,
	      endAngle = defaultEndAngle,
	      context = null;

	  function ribbon() {
	    var buffer,
	        argv = slice.call(arguments),
	        s = source.apply(this, argv),
	        t = target.apply(this, argv),
	        sr = +radius.apply(this, (argv[0] = s, argv)),
	        sa0 = startAngle.apply(this, argv) - halfPi,
	        sa1 = endAngle.apply(this, argv) - halfPi,
	        sx0 = sr * cos(sa0),
	        sy0 = sr * sin(sa0),
	        tr = +radius.apply(this, (argv[0] = t, argv)),
	        ta0 = startAngle.apply(this, argv) - halfPi,
	        ta1 = endAngle.apply(this, argv) - halfPi;

	    if (!context) context = buffer = d3Path.path();

	    context.moveTo(sx0, sy0);
	    context.arc(0, 0, sr, sa0, sa1);
	    if (sa0 !== ta0 || sa1 !== ta1) { // TODO sr !== tr?
	      context.quadraticCurveTo(0, 0, tr * cos(ta0), tr * sin(ta0));
	      context.arc(0, 0, tr, ta0, ta1);
	    }
	    context.quadraticCurveTo(0, 0, sx0, sy0);
	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  ribbon.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), ribbon) : radius;
	  };

	  ribbon.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : startAngle;
	  };

	  ribbon.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), ribbon) : endAngle;
	  };

	  ribbon.source = function(_) {
	    return arguments.length ? (source = _, ribbon) : source;
	  };

	  ribbon.target = function(_) {
	    return arguments.length ? (target = _, ribbon) : target;
	  };

	  ribbon.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), ribbon) : context;
	  };

	  return ribbon;
	};

	exports.chord = chord;
	exports.ribbon = ribbon;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-path/ Version 1.0.5. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var pi = Math.PI;
	var tau = 2 * pi;
	var epsilon = 1e-6;
	var tauEpsilon = tau - epsilon;

	function Path() {
	  this._x0 = this._y0 = // start of current subpath
	  this._x1 = this._y1 = null; // end of current subpath
	  this._ = "";
	}

	function path() {
	  return new Path;
	}

	Path.prototype = path.prototype = {
	  constructor: Path,
	  moveTo: function(x, y) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y);
	  },
	  closePath: function() {
	    if (this._x1 !== null) {
	      this._x1 = this._x0, this._y1 = this._y0;
	      this._ += "Z";
	    }
	  },
	  lineTo: function(x, y) {
	    this._ += "L" + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  quadraticCurveTo: function(x1, y1, x, y) {
	    this._ += "Q" + (+x1) + "," + (+y1) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) {
	    this._ += "C" + (+x1) + "," + (+y1) + "," + (+x2) + "," + (+y2) + "," + (this._x1 = +x) + "," + (this._y1 = +y);
	  },
	  arcTo: function(x1, y1, x2, y2, r) {
	    x1 = +x1, y1 = +y1, x2 = +x2, y2 = +y2, r = +r;
	    var x0 = this._x1,
	        y0 = this._y1,
	        x21 = x2 - x1,
	        y21 = y2 - y1,
	        x01 = x0 - x1,
	        y01 = y0 - y1,
	        l01_2 = x01 * x01 + y01 * y01;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x1,y1).
	    if (this._x1 === null) {
	      this._ += "M" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Or, is (x1,y1) coincident with (x0,y0)? Do nothing.
	    else if (!(l01_2 > epsilon)) {}

	    // Or, are (x0,y0), (x1,y1) and (x2,y2) collinear?
	    // Equivalently, is (x1,y1) coincident with (x2,y2)?
	    // Or, is the radius zero? Line to (x1,y1).
	    else if (!(Math.abs(y01 * x21 - y21 * x01) > epsilon) || !r) {
	      this._ += "L" + (this._x1 = x1) + "," + (this._y1 = y1);
	    }

	    // Otherwise, draw an arc!
	    else {
	      var x20 = x2 - x0,
	          y20 = y2 - y0,
	          l21_2 = x21 * x21 + y21 * y21,
	          l20_2 = x20 * x20 + y20 * y20,
	          l21 = Math.sqrt(l21_2),
	          l01 = Math.sqrt(l01_2),
	          l = r * Math.tan((pi - Math.acos((l21_2 + l01_2 - l20_2) / (2 * l21 * l01))) / 2),
	          t01 = l / l01,
	          t21 = l / l21;

	      // If the start tangent is not coincident with (x0,y0), line to.
	      if (Math.abs(t01 - 1) > epsilon) {
	        this._ += "L" + (x1 + t01 * x01) + "," + (y1 + t01 * y01);
	      }

	      this._ += "A" + r + "," + r + ",0,0," + (+(y01 * x20 > x01 * y20)) + "," + (this._x1 = x1 + t21 * x21) + "," + (this._y1 = y1 + t21 * y21);
	    }
	  },
	  arc: function(x, y, r, a0, a1, ccw) {
	    x = +x, y = +y, r = +r;
	    var dx = r * Math.cos(a0),
	        dy = r * Math.sin(a0),
	        x0 = x + dx,
	        y0 = y + dy,
	        cw = 1 ^ ccw,
	        da = ccw ? a0 - a1 : a1 - a0;

	    // Is the radius negative? Error.
	    if (r < 0) throw new Error("negative radius: " + r);

	    // Is this path empty? Move to (x0,y0).
	    if (this._x1 === null) {
	      this._ += "M" + x0 + "," + y0;
	    }

	    // Or, is (x0,y0) not coincident with the previous point? Line to (x0,y0).
	    else if (Math.abs(this._x1 - x0) > epsilon || Math.abs(this._y1 - y0) > epsilon) {
	      this._ += "L" + x0 + "," + y0;
	    }

	    // Is this arc empty? We’re done.
	    if (!r) return;

	    // Does the angle go the wrong way? Flip the direction.
	    if (da < 0) da = da % tau + tau;

	    // Is this a complete circle? Draw two arcs to complete the circle.
	    if (da > tauEpsilon) {
	      this._ += "A" + r + "," + r + ",0,1," + cw + "," + (x - dx) + "," + (y - dy) + "A" + r + "," + r + ",0,1," + cw + "," + (this._x1 = x0) + "," + (this._y1 = y0);
	    }

	    // Is this arc non-empty? Draw an arc!
	    else if (da > epsilon) {
	      this._ += "A" + r + "," + r + ",0," + (+(da >= pi)) + "," + cw + "," + (this._x1 = x + r * Math.cos(a1)) + "," + (this._y1 = y + r * Math.sin(a1));
	    }
	  },
	  rect: function(x, y, w, h) {
	    this._ += "M" + (this._x0 = this._x1 = +x) + "," + (this._y0 = this._y1 = +y) + "h" + (+w) + "v" + (+h) + "h" + (-w) + "Z";
	  },
	  toString: function() {
	    return this._;
	  }
	};

	exports.path = path;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-collection/ Version 1.0.4. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var prefix = "$";

	function Map() {}

	Map.prototype = map.prototype = {
	  constructor: Map,
	  has: function(key) {
	    return (prefix + key) in this;
	  },
	  get: function(key) {
	    return this[prefix + key];
	  },
	  set: function(key, value) {
	    this[prefix + key] = value;
	    return this;
	  },
	  remove: function(key) {
	    var property = prefix + key;
	    return property in this && delete this[property];
	  },
	  clear: function() {
	    for (var property in this) if (property[0] === prefix) delete this[property];
	  },
	  keys: function() {
	    var keys = [];
	    for (var property in this) if (property[0] === prefix) keys.push(property.slice(1));
	    return keys;
	  },
	  values: function() {
	    var values = [];
	    for (var property in this) if (property[0] === prefix) values.push(this[property]);
	    return values;
	  },
	  entries: function() {
	    var entries = [];
	    for (var property in this) if (property[0] === prefix) entries.push({key: property.slice(1), value: this[property]});
	    return entries;
	  },
	  size: function() {
	    var size = 0;
	    for (var property in this) if (property[0] === prefix) ++size;
	    return size;
	  },
	  empty: function() {
	    for (var property in this) if (property[0] === prefix) return false;
	    return true;
	  },
	  each: function(f) {
	    for (var property in this) if (property[0] === prefix) f(this[property], property.slice(1), this);
	  }
	};

	function map(object, f) {
	  var map = new Map;

	  // Copy constructor.
	  if (object instanceof Map) object.each(function(value, key) { map.set(key, value); });

	  // Index array by numeric index or specified key function.
	  else if (Array.isArray(object)) {
	    var i = -1,
	        n = object.length,
	        o;

	    if (f == null) while (++i < n) map.set(i, object[i]);
	    else while (++i < n) map.set(f(o = object[i], i, object), o);
	  }

	  // Convert object to map.
	  else if (object) for (var key in object) map.set(key, object[key]);

	  return map;
	}

	var nest = function() {
	  var keys = [],
	      sortKeys = [],
	      sortValues,
	      rollup,
	      nest;

	  function apply(array, depth, createResult, setResult) {
	    if (depth >= keys.length) {
	      if (sortValues != null) array.sort(sortValues);
	      return rollup != null ? rollup(array) : array;
	    }

	    var i = -1,
	        n = array.length,
	        key = keys[depth++],
	        keyValue,
	        value,
	        valuesByKey = map(),
	        values,
	        result = createResult();

	    while (++i < n) {
	      if (values = valuesByKey.get(keyValue = key(value = array[i]) + "")) {
	        values.push(value);
	      } else {
	        valuesByKey.set(keyValue, [value]);
	      }
	    }

	    valuesByKey.each(function(values, key) {
	      setResult(result, key, apply(values, depth, createResult, setResult));
	    });

	    return result;
	  }

	  function entries(map$$1, depth) {
	    if (++depth > keys.length) return map$$1;
	    var array, sortKey = sortKeys[depth - 1];
	    if (rollup != null && depth >= keys.length) array = map$$1.entries();
	    else array = [], map$$1.each(function(v, k) { array.push({key: k, values: entries(v, depth)}); });
	    return sortKey != null ? array.sort(function(a, b) { return sortKey(a.key, b.key); }) : array;
	  }

	  return nest = {
	    object: function(array) { return apply(array, 0, createObject, setObject); },
	    map: function(array) { return apply(array, 0, createMap, setMap); },
	    entries: function(array) { return entries(apply(array, 0, createMap, setMap), 0); },
	    key: function(d) { keys.push(d); return nest; },
	    sortKeys: function(order) { sortKeys[keys.length - 1] = order; return nest; },
	    sortValues: function(order) { sortValues = order; return nest; },
	    rollup: function(f) { rollup = f; return nest; }
	  };
	};

	function createObject() {
	  return {};
	}

	function setObject(object, key, value) {
	  object[key] = value;
	}

	function createMap() {
	  return map();
	}

	function setMap(map$$1, key, value) {
	  map$$1.set(key, value);
	}

	function Set() {}

	var proto = map.prototype;

	Set.prototype = set.prototype = {
	  constructor: Set,
	  has: proto.has,
	  add: function(value) {
	    value += "";
	    this[prefix + value] = value;
	    return this;
	  },
	  remove: proto.remove,
	  clear: proto.clear,
	  values: proto.keys,
	  size: proto.size,
	  empty: proto.empty,
	  each: proto.each
	};

	function set(object, f) {
	  var set = new Set;

	  // Copy constructor.
	  if (object instanceof Set) object.each(function(value) { set.add(value); });

	  // Otherwise, assume it’s an array.
	  else if (object) {
	    var i = -1, n = object.length;
	    if (f == null) while (++i < n) set.add(object[i]);
	    else while (++i < n) set.add(f(object[i], i, object));
	  }

	  return set;
	}

	var keys = function(map) {
	  var keys = [];
	  for (var key in map) keys.push(key);
	  return keys;
	};

	var values = function(map) {
	  var values = [];
	  for (var key in map) values.push(map[key]);
	  return values;
	};

	var entries = function(map) {
	  var entries = [];
	  for (var key in map) entries.push({key: key, value: map[key]});
	  return entries;
	};

	exports.nest = nest;
	exports.set = set;
	exports.map = map;
	exports.keys = keys;
	exports.values = values;
	exports.entries = entries;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-contour/ Version 1.3.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(8)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Array) { 'use strict';

	var array = Array.prototype;

	var slice = array.slice;

	var ascending = function(a, b) {
	  return a - b;
	};

	var area = function(ring) {
	  var i = 0, n = ring.length, area = ring[n - 1][1] * ring[0][0] - ring[n - 1][0] * ring[0][1];
	  while (++i < n) area += ring[i - 1][1] * ring[i][0] - ring[i - 1][0] * ring[i][1];
	  return area;
	};

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var contains = function(ring, hole) {
	  var i = -1, n = hole.length, c;
	  while (++i < n) if (c = ringContains(ring, hole[i])) return c;
	  return 0;
	};

	function ringContains(ring, point) {
	  var x = point[0], y = point[1], contains = -1;
	  for (var i = 0, n = ring.length, j = n - 1; i < n; j = i++) {
	    var pi = ring[i], xi = pi[0], yi = pi[1], pj = ring[j], xj = pj[0], yj = pj[1];
	    if (segmentContains(pi, pj, point)) return 0;
	    if (((yi > y) !== (yj > y)) && ((x < (xj - xi) * (y - yi) / (yj - yi) + xi))) contains = -contains;
	  }
	  return contains;
	}

	function segmentContains(a, b, c) {
	  var i; return collinear(a, b, c) && within(a[i = +(a[0] === b[0])], c[i], b[i]);
	}

	function collinear(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) === (c[0] - a[0]) * (b[1] - a[1]);
	}

	function within(p, q, r) {
	  return p <= q && q <= r || r <= q && q <= p;
	}

	var noop = function() {};

	var cases = [
	  [],
	  [[[1.0, 1.5], [0.5, 1.0]]],
	  [[[1.5, 1.0], [1.0, 1.5]]],
	  [[[1.5, 1.0], [0.5, 1.0]]],
	  [[[1.0, 0.5], [1.5, 1.0]]],
	  [[[1.0, 1.5], [0.5, 1.0]], [[1.0, 0.5], [1.5, 1.0]]],
	  [[[1.0, 0.5], [1.0, 1.5]]],
	  [[[1.0, 0.5], [0.5, 1.0]]],
	  [[[0.5, 1.0], [1.0, 0.5]]],
	  [[[1.0, 1.5], [1.0, 0.5]]],
	  [[[0.5, 1.0], [1.0, 0.5]], [[1.5, 1.0], [1.0, 1.5]]],
	  [[[1.5, 1.0], [1.0, 0.5]]],
	  [[[0.5, 1.0], [1.5, 1.0]]],
	  [[[1.0, 1.5], [1.5, 1.0]]],
	  [[[0.5, 1.0], [1.0, 1.5]]],
	  []
	];

	var contours = function() {
	  var dx = 1,
	      dy = 1,
	      threshold = d3Array.thresholdSturges,
	      smooth = smoothLinear;

	  function contours(values) {
	    var tz = threshold(values);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      var domain = d3Array.extent(values), start = domain[0], stop = domain[1];
	      tz = d3Array.tickStep(start, stop, tz);
	      tz = d3Array.range(Math.floor(start / tz) * tz, Math.floor(stop / tz) * tz, tz);
	    } else {
	      tz = tz.slice().sort(ascending);
	    }

	    return tz.map(function(value) {
	      return contour(values, value);
	    });
	  }

	  // Accumulate, smooth contour rings, assign holes to exterior rings.
	  // Based on https://github.com/mbostock/shapefile/blob/v0.6.2/shp/polygon.js
	  function contour(values, value) {
	    var polygons = [],
	        holes = [];

	    isorings(values, value, function(ring) {
	      smooth(ring, values, value);
	      if (area(ring) > 0) polygons.push([ring]);
	      else holes.push(ring);
	    });

	    holes.forEach(function(hole) {
	      for (var i = 0, n = polygons.length, polygon; i < n; ++i) {
	        if (contains((polygon = polygons[i])[0], hole) !== -1) {
	          polygon.push(hole);
	          return;
	        }
	      }
	    });

	    return {
	      type: "MultiPolygon",
	      value: value,
	      coordinates: polygons
	    };
	  }

	  // Marching squares with isolines stitched into rings.
	  // Based on https://github.com/topojson/topojson-client/blob/v3.0.0/src/stitch.js
	  function isorings(values, value, callback) {
	    var fragmentByStart = new Array,
	        fragmentByEnd = new Array,
	        x, y, t0, t1, t2, t3;

	    // Special case for the first row (y = -1, t2 = t3 = 0).
	    x = y = -1;
	    t1 = values[0] >= value;
	    cases[t1 << 1].forEach(stitch);
	    while (++x < dx - 1) {
	      t0 = t1, t1 = values[x + 1] >= value;
	      cases[t0 | t1 << 1].forEach(stitch);
	    }
	    cases[t1 << 0].forEach(stitch);

	    // General case for the intermediate rows.
	    while (++y < dy - 1) {
	      x = -1;
	      t1 = values[y * dx + dx] >= value;
	      t2 = values[y * dx] >= value;
	      cases[t1 << 1 | t2 << 2].forEach(stitch);
	      while (++x < dx - 1) {
	        t0 = t1, t1 = values[y * dx + dx + x + 1] >= value;
	        t3 = t2, t2 = values[y * dx + x + 1] >= value;
	        cases[t0 | t1 << 1 | t2 << 2 | t3 << 3].forEach(stitch);
	      }
	      cases[t1 | t2 << 3].forEach(stitch);
	    }

	    // Special case for the last row (y = dy - 1, t0 = t1 = 0).
	    x = -1;
	    t2 = values[y * dx] >= value;
	    cases[t2 << 2].forEach(stitch);
	    while (++x < dx - 1) {
	      t3 = t2, t2 = values[y * dx + x + 1] >= value;
	      cases[t2 << 2 | t3 << 3].forEach(stitch);
	    }
	    cases[t2 << 3].forEach(stitch);

	    function stitch(line) {
	      var start = [line[0][0] + x, line[0][1] + y],
	          end = [line[1][0] + x, line[1][1] + y],
	          startIndex = index(start),
	          endIndex = index(end),
	          f, g;
	      if (f = fragmentByEnd[startIndex]) {
	        if (g = fragmentByStart[endIndex]) {
	          delete fragmentByEnd[f.end];
	          delete fragmentByStart[g.start];
	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[f.start] = fragmentByEnd[g.end] = {start: f.start, end: g.end, ring: f.ring.concat(g.ring)};
	          }
	        } else {
	          delete fragmentByEnd[f.end];
	          f.ring.push(end);
	          fragmentByEnd[f.end = endIndex] = f;
	        }
	      } else if (f = fragmentByStart[endIndex]) {
	        if (g = fragmentByEnd[startIndex]) {
	          delete fragmentByStart[f.start];
	          delete fragmentByEnd[g.end];
	          if (f === g) {
	            f.ring.push(end);
	            callback(f.ring);
	          } else {
	            fragmentByStart[g.start] = fragmentByEnd[f.end] = {start: g.start, end: f.end, ring: g.ring.concat(f.ring)};
	          }
	        } else {
	          delete fragmentByStart[f.start];
	          f.ring.unshift(start);
	          fragmentByStart[f.start = startIndex] = f;
	        }
	      } else {
	        fragmentByStart[startIndex] = fragmentByEnd[endIndex] = {start: startIndex, end: endIndex, ring: [start, end]};
	      }
	    }
	  }

	  function index(point) {
	    return point[0] * 2 + point[1] * (dx + 1) * 4;
	  }

	  function smoothLinear(ring, values, value) {
	    ring.forEach(function(point) {
	      var x = point[0],
	          y = point[1],
	          xt = x | 0,
	          yt = y | 0,
	          v0,
	          v1 = values[yt * dx + xt];
	      if (x > 0 && x < dx && xt === x) {
	        v0 = values[yt * dx + xt - 1];
	        point[0] = x + (value - v0) / (v1 - v0) - 0.5;
	      }
	      if (y > 0 && y < dy && yt === y) {
	        v0 = values[(yt - 1) * dx + xt];
	        point[1] = y + (value - v0) / (v1 - v0) - 0.5;
	      }
	    });
	  }

	  contours.contour = contour;

	  contours.size = function(_) {
	    if (!arguments.length) return [dx, dy];
	    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
	    if (!(_0 > 0) || !(_1 > 0)) throw new Error("invalid size");
	    return dx = _0, dy = _1, contours;
	  };

	  contours.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), contours) : threshold;
	  };

	  contours.smooth = function(_) {
	    return arguments.length ? (smooth = _ ? smoothLinear : noop, contours) : smooth === smoothLinear;
	  };

	  return contours;
	};

	// TODO Optimize edge cases.
	// TODO Optimize index calculation.
	// TODO Optimize arguments.
	function blurX(source, target, r) {
	  var n = source.width,
	      m = source.height,
	      w = (r << 1) + 1;
	  for (var j = 0; j < m; ++j) {
	    for (var i = 0, sr = 0; i < n + r; ++i) {
	      if (i < n) {
	        sr += source.data[i + j * n];
	      }
	      if (i >= r) {
	        if (i >= w) {
	          sr -= source.data[i - w + j * n];
	        }
	        target.data[i - r + j * n] = sr / Math.min(i + 1, n - 1 + w - i, w);
	      }
	    }
	  }
	}

	// TODO Optimize edge cases.
	// TODO Optimize index calculation.
	// TODO Optimize arguments.
	function blurY(source, target, r) {
	  var n = source.width,
	      m = source.height,
	      w = (r << 1) + 1;
	  for (var i = 0; i < n; ++i) {
	    for (var j = 0, sr = 0; j < m + r; ++j) {
	      if (j < m) {
	        sr += source.data[i + j * n];
	      }
	      if (j >= r) {
	        if (j >= w) {
	          sr -= source.data[i + (j - w) * n];
	        }
	        target.data[i + (j - r) * n] = sr / Math.min(j + 1, m - 1 + w - j, w);
	      }
	    }
	  }
	}

	function defaultX(d) {
	  return d[0];
	}

	function defaultY(d) {
	  return d[1];
	}

	function defaultWeight() {
	  return 1;
	}

	var density = function() {
	  var x = defaultX,
	      y = defaultY,
	      weight = defaultWeight,
	      dx = 960,
	      dy = 500,
	      r = 20, // blur radius
	      k = 2, // log2(grid cell size)
	      o = r * 3, // grid offset, to pad for blur
	      n = (dx + o * 2) >> k, // grid width
	      m = (dy + o * 2) >> k, // grid height
	      threshold = constant(20);

	  function density(data) {
	    var values0 = new Float32Array(n * m),
	        values1 = new Float32Array(n * m);

	    data.forEach(function(d, i, data) {
	      var xi = (+x(d, i, data) + o) >> k,
	          yi = (+y(d, i, data) + o) >> k,
	          wi = +weight(d, i, data);
	      if (xi >= 0 && xi < n && yi >= 0 && yi < m) {
	        values0[xi + yi * n] += wi;
	      }
	    });

	    // TODO Optimize.
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);
	    blurX({width: n, height: m, data: values0}, {width: n, height: m, data: values1}, r >> k);
	    blurY({width: n, height: m, data: values1}, {width: n, height: m, data: values0}, r >> k);

	    var tz = threshold(values0);

	    // Convert number of thresholds into uniform thresholds.
	    if (!Array.isArray(tz)) {
	      var stop = d3Array.max(values0);
	      tz = d3Array.tickStep(0, stop, tz);
	      tz = d3Array.range(0, Math.floor(stop / tz) * tz, tz);
	      tz.shift();
	    }

	    return contours()
	        .thresholds(tz)
	        .size([n, m])
	      (values0)
	        .map(transform);
	  }

	  function transform(geometry) {
	    geometry.value *= Math.pow(2, -2 * k); // Density in points per square pixel.
	    geometry.coordinates.forEach(transformPolygon);
	    return geometry;
	  }

	  function transformPolygon(coordinates) {
	    coordinates.forEach(transformRing);
	  }

	  function transformRing(coordinates) {
	    coordinates.forEach(transformPoint);
	  }

	  // TODO Optimize.
	  function transformPoint(coordinates) {
	    coordinates[0] = coordinates[0] * Math.pow(2, k) - o;
	    coordinates[1] = coordinates[1] * Math.pow(2, k) - o;
	  }

	  function resize() {
	    o = r * 3;
	    n = (dx + o * 2) >> k;
	    m = (dy + o * 2) >> k;
	    return density;
	  }

	  density.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), density) : x;
	  };

	  density.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), density) : y;
	  };

	  density.weight = function(_) {
	    return arguments.length ? (weight = typeof _ === "function" ? _ : constant(+_), density) : weight;
	  };

	  density.size = function(_) {
	    if (!arguments.length) return [dx, dy];
	    var _0 = Math.ceil(_[0]), _1 = Math.ceil(_[1]);
	    if (!(_0 >= 0) && !(_0 >= 0)) throw new Error("invalid size");
	    return dx = _0, dy = _1, resize();
	  };

	  density.cellSize = function(_) {
	    if (!arguments.length) return 1 << k;
	    if (!((_ = +_) >= 1)) throw new Error("invalid cell size");
	    return k = Math.floor(Math.log(_) / Math.LN2), resize();
	  };

	  density.thresholds = function(_) {
	    return arguments.length ? (threshold = typeof _ === "function" ? _ : Array.isArray(_) ? constant(slice.call(_)) : constant(_), density) : threshold;
	  };

	  density.bandwidth = function(_) {
	    if (!arguments.length) return Math.sqrt(r * (r + 1));
	    if (!((_ = +_) >= 0)) throw new Error("invalid bandwidth");
	    return r = Math.round((Math.sqrt(4 * _ * _ + 1) - 1) / 2), resize();
	  };

	  return density;
	};

	exports.contours = contours;
	exports.contourDensity = density;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-dsv/ Version 1.0.8. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var EOL = {};
	var EOF = {};
	var QUOTE = 34;
	var NEWLINE = 10;
	var RETURN = 13;

	function objectConverter(columns) {
	  return new Function("d", "return {" + columns.map(function(name, i) {
	    return JSON.stringify(name) + ": d[" + i + "]";
	  }).join(",") + "}");
	}

	function customConverter(columns, f) {
	  var object = objectConverter(columns);
	  return function(row, i) {
	    return f(object(row), i, columns);
	  };
	}

	// Compute unique columns in order of discovery.
	function inferColumns(rows) {
	  var columnSet = Object.create(null),
	      columns = [];

	  rows.forEach(function(row) {
	    for (var column in row) {
	      if (!(column in columnSet)) {
	        columns.push(columnSet[column] = column);
	      }
	    }
	  });

	  return columns;
	}

	var dsv = function(delimiter) {
	  var reFormat = new RegExp("[\"" + delimiter + "\n\r]"),
	      DELIMITER = delimiter.charCodeAt(0);

	  function parse(text, f) {
	    var convert, columns, rows = parseRows(text, function(row, i) {
	      if (convert) return convert(row, i - 1);
	      columns = row, convert = f ? customConverter(row, f) : objectConverter(row);
	    });
	    rows.columns = columns || [];
	    return rows;
	  }

	  function parseRows(text, f) {
	    var rows = [], // output rows
	        N = text.length,
	        I = 0, // current character index
	        n = 0, // current line number
	        t, // current token
	        eof = N <= 0, // current token followed by EOF?
	        eol = false; // current token followed by EOL?

	    // Strip the trailing newline.
	    if (text.charCodeAt(N - 1) === NEWLINE) --N;
	    if (text.charCodeAt(N - 1) === RETURN) --N;

	    function token() {
	      if (eof) return EOF;
	      if (eol) return eol = false, EOL;

	      // Unescape quotes.
	      var i, j = I, c;
	      if (text.charCodeAt(j) === QUOTE) {
	        while (I++ < N && text.charCodeAt(I) !== QUOTE || text.charCodeAt(++I) === QUOTE);
	        if ((i = I) >= N) eof = true;
	        else if ((c = text.charCodeAt(I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        return text.slice(j + 1, i - 1).replace(/""/g, "\"");
	      }

	      // Find next delimiter or newline.
	      while (I < N) {
	        if ((c = text.charCodeAt(i = I++)) === NEWLINE) eol = true;
	        else if (c === RETURN) { eol = true; if (text.charCodeAt(I) === NEWLINE) ++I; }
	        else if (c !== DELIMITER) continue;
	        return text.slice(j, i);
	      }

	      // Return last token before EOF.
	      return eof = true, text.slice(j, N);
	    }

	    while ((t = token()) !== EOF) {
	      var row = [];
	      while (t !== EOL && t !== EOF) row.push(t), t = token();
	      if (f && (row = f(row, n++)) == null) continue;
	      rows.push(row);
	    }

	    return rows;
	  }

	  function format(rows, columns) {
	    if (columns == null) columns = inferColumns(rows);
	    return [columns.map(formatValue).join(delimiter)].concat(rows.map(function(row) {
	      return columns.map(function(column) {
	        return formatValue(row[column]);
	      }).join(delimiter);
	    })).join("\n");
	  }

	  function formatRows(rows) {
	    return rows.map(formatRow).join("\n");
	  }

	  function formatRow(row) {
	    return row.map(formatValue).join(delimiter);
	  }

	  function formatValue(text) {
	    return text == null ? ""
	        : reFormat.test(text += "") ? "\"" + text.replace(/"/g, "\"\"") + "\""
	        : text;
	  }

	  return {
	    parse: parse,
	    parseRows: parseRows,
	    format: format,
	    formatRows: formatRows
	  };
	};

	var csv = dsv(",");

	var csvParse = csv.parse;
	var csvParseRows = csv.parseRows;
	var csvFormat = csv.format;
	var csvFormatRows = csv.formatRows;

	var tsv = dsv("\t");

	var tsvParse = tsv.parse;
	var tsvParseRows = tsv.parseRows;
	var tsvFormat = tsv.format;
	var tsvFormatRows = tsv.formatRows;

	exports.dsvFormat = dsv;
	exports.csvParse = csvParse;
	exports.csvParseRows = csvParseRows;
	exports.csvFormat = csvFormat;
	exports.csvFormatRows = csvFormatRows;
	exports.tsvParse = tsvParse;
	exports.tsvParseRows = tsvParseRows;
	exports.tsvFormat = tsvFormat;
	exports.tsvFormatRows = tsvFormatRows;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-fetch/ Version 1.1.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(23)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-dsv'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Dsv) { 'use strict';

	function responseBlob(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  return response.blob();
	}

	function blob(input, init) {
	  return fetch(input, init).then(responseBlob);
	}

	function responseArrayBuffer(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  return response.arrayBuffer();
	}

	function buffer(input, init) {
	  return fetch(input, init).then(responseArrayBuffer);
	}

	function responseText(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  return response.text();
	}

	function text(input, init) {
	  return fetch(input, init).then(responseText);
	}

	function dsvParse(parse) {
	  return function(input, init, row) {
	    if (arguments.length === 2 && typeof init === "function") row = init, init = undefined;
	    return text(input, init).then(function(response) {
	      return parse(response, row);
	    });
	  };
	}

	function dsv(delimiter, input, init, row) {
	  if (arguments.length === 3 && typeof init === "function") row = init, init = undefined;
	  var format = d3Dsv.dsvFormat(delimiter);
	  return text(input, init).then(function(response) {
	    return format.parse(response, row);
	  });
	}

	var csv = dsvParse(d3Dsv.csvParse);
	var tsv = dsvParse(d3Dsv.tsvParse);

	function image(input, init) {
	  return new Promise(function(resolve, reject) {
	    var image = new Image;
	    for (var key in init) image[key] = init[key];
	    image.onerror = reject;
	    image.onload = function() { resolve(image); };
	    image.src = input;
	  });
	}

	function responseJson(response) {
	  if (!response.ok) throw new Error(response.status + " " + response.statusText);
	  return response.json();
	}

	function json(input, init) {
	  return fetch(input, init).then(responseJson);
	}

	function parser(type) {
	  return function(input, init)  {
	    return text(input, init).then(function(text$$1) {
	      return (new DOMParser).parseFromString(text$$1, type);
	    });
	  };
	}

	var xml = parser("application/xml");

	var html = parser("text/html");

	var svg = parser("image/svg+xml");

	exports.blob = blob;
	exports.buffer = buffer;
	exports.dsv = dsv;
	exports.csv = csv;
	exports.tsv = tsv;
	exports.image = image;
	exports.json = json;
	exports.text = text;
	exports.xml = xml;
	exports.html = html;
	exports.svg = svg;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 25 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-force/ Version 1.1.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(26), __webpack_require__(21), __webpack_require__(11), __webpack_require__(17)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-quadtree', 'd3-collection', 'd3-dispatch', 'd3-timer'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Quadtree,d3Collection,d3Dispatch,d3Timer) { 'use strict';

	var center = function(x, y) {
	  var nodes;

	  if (x == null) x = 0;
	  if (y == null) y = 0;

	  function force() {
	    var i,
	        n = nodes.length,
	        node,
	        sx = 0,
	        sy = 0;

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], sx += node.x, sy += node.y;
	    }

	    for (sx = sx / n - x, sy = sy / n - y, i = 0; i < n; ++i) {
	      node = nodes[i], node.x -= sx, node.y -= sy;
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };

	  return force;
	};

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	var jiggle = function() {
	  return (Math.random() - 0.5) * 1e-6;
	};

	function x(d) {
	  return d.x + d.vx;
	}

	function y(d) {
	  return d.y + d.vy;
	}

	var collide = function(radius) {
	  var nodes,
	      radii,
	      strength = 1,
	      iterations = 1;

	  if (typeof radius !== "function") radius = constant(radius == null ? 1 : +radius);

	  function force() {
	    var i, n = nodes.length,
	        tree,
	        node,
	        xi,
	        yi,
	        ri,
	        ri2;

	    for (var k = 0; k < iterations; ++k) {
	      tree = d3Quadtree.quadtree(nodes, x, y).visitAfter(prepare);
	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        ri = radii[node.index], ri2 = ri * ri;
	        xi = node.x + node.vx;
	        yi = node.y + node.vy;
	        tree.visit(apply);
	      }
	    }

	    function apply(quad, x0, y0, x1, y1) {
	      var data = quad.data, rj = quad.r, r = ri + rj;
	      if (data) {
	        if (data.index > node.index) {
	          var x = xi - data.x - data.vx,
	              y = yi - data.y - data.vy,
	              l = x * x + y * y;
	          if (l < r * r) {
	            if (x === 0) x = jiggle(), l += x * x;
	            if (y === 0) y = jiggle(), l += y * y;
	            l = (r - (l = Math.sqrt(l))) / l * strength;
	            node.vx += (x *= l) * (r = (rj *= rj) / (ri2 + rj));
	            node.vy += (y *= l) * r;
	            data.vx -= x * (r = 1 - r);
	            data.vy -= y * r;
	          }
	        }
	        return;
	      }
	      return x0 > xi + r || x1 < xi - r || y0 > yi + r || y1 < yi - r;
	    }
	  }

	  function prepare(quad) {
	    if (quad.data) return quad.r = radii[quad.data.index];
	    for (var i = quad.r = 0; i < 4; ++i) {
	      if (quad[i] && quad[i].r > quad.r) {
	        quad.r = quad[i].r;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    radii = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], radii[node.index] = +radius(node, i, nodes);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = +_, force) : strength;
	  };

	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
	  };

	  return force;
	};

	function index(d) {
	  return d.index;
	}

	function find(nodeById, nodeId) {
	  var node = nodeById.get(nodeId);
	  if (!node) throw new Error("missing: " + nodeId);
	  return node;
	}

	var link = function(links) {
	  var id = index,
	      strength = defaultStrength,
	      strengths,
	      distance = constant(30),
	      distances,
	      nodes,
	      count,
	      bias,
	      iterations = 1;

	  if (links == null) links = [];

	  function defaultStrength(link) {
	    return 1 / Math.min(count[link.source.index], count[link.target.index]);
	  }

	  function force(alpha) {
	    for (var k = 0, n = links.length; k < iterations; ++k) {
	      for (var i = 0, link, source, target, x, y, l, b; i < n; ++i) {
	        link = links[i], source = link.source, target = link.target;
	        x = target.x + target.vx - source.x - source.vx || jiggle();
	        y = target.y + target.vy - source.y - source.vy || jiggle();
	        l = Math.sqrt(x * x + y * y);
	        l = (l - distances[i]) / l * alpha * strengths[i];
	        x *= l, y *= l;
	        target.vx -= x * (b = bias[i]);
	        target.vy -= y * b;
	        source.vx += x * (b = 1 - b);
	        source.vy += y * b;
	      }
	    }
	  }

	  function initialize() {
	    if (!nodes) return;

	    var i,
	        n = nodes.length,
	        m = links.length,
	        nodeById = d3Collection.map(nodes, id),
	        link;

	    for (i = 0, count = new Array(n); i < m; ++i) {
	      link = links[i], link.index = i;
	      if (typeof link.source !== "object") link.source = find(nodeById, link.source);
	      if (typeof link.target !== "object") link.target = find(nodeById, link.target);
	      count[link.source.index] = (count[link.source.index] || 0) + 1;
	      count[link.target.index] = (count[link.target.index] || 0) + 1;
	    }

	    for (i = 0, bias = new Array(m); i < m; ++i) {
	      link = links[i], bias[i] = count[link.source.index] / (count[link.source.index] + count[link.target.index]);
	    }

	    strengths = new Array(m), initializeStrength();
	    distances = new Array(m), initializeDistance();
	  }

	  function initializeStrength() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      strengths[i] = +strength(links[i], i, links);
	    }
	  }

	  function initializeDistance() {
	    if (!nodes) return;

	    for (var i = 0, n = links.length; i < n; ++i) {
	      distances[i] = +distance(links[i], i, links);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.links = function(_) {
	    return arguments.length ? (links = _, initialize(), force) : links;
	  };

	  force.id = function(_) {
	    return arguments.length ? (id = _, force) : id;
	  };

	  force.iterations = function(_) {
	    return arguments.length ? (iterations = +_, force) : iterations;
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initializeStrength(), force) : strength;
	  };

	  force.distance = function(_) {
	    return arguments.length ? (distance = typeof _ === "function" ? _ : constant(+_), initializeDistance(), force) : distance;
	  };

	  return force;
	};

	function x$1(d) {
	  return d.x;
	}

	function y$1(d) {
	  return d.y;
	}

	var initialRadius = 10;
	var initialAngle = Math.PI * (3 - Math.sqrt(5));

	var simulation = function(nodes) {
	  var simulation,
	      alpha = 1,
	      alphaMin = 0.001,
	      alphaDecay = 1 - Math.pow(alphaMin, 1 / 300),
	      alphaTarget = 0,
	      velocityDecay = 0.6,
	      forces = d3Collection.map(),
	      stepper = d3Timer.timer(step),
	      event = d3Dispatch.dispatch("tick", "end");

	  if (nodes == null) nodes = [];

	  function step() {
	    tick();
	    event.call("tick", simulation);
	    if (alpha < alphaMin) {
	      stepper.stop();
	      event.call("end", simulation);
	    }
	  }

	  function tick() {
	    var i, n = nodes.length, node;

	    alpha += (alphaTarget - alpha) * alphaDecay;

	    forces.each(function(force) {
	      force(alpha);
	    });

	    for (i = 0; i < n; ++i) {
	      node = nodes[i];
	      if (node.fx == null) node.x += node.vx *= velocityDecay;
	      else node.x = node.fx, node.vx = 0;
	      if (node.fy == null) node.y += node.vy *= velocityDecay;
	      else node.y = node.fy, node.vy = 0;
	    }
	  }

	  function initializeNodes() {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.index = i;
	      if (isNaN(node.x) || isNaN(node.y)) {
	        var radius = initialRadius * Math.sqrt(i), angle = i * initialAngle;
	        node.x = radius * Math.cos(angle);
	        node.y = radius * Math.sin(angle);
	      }
	      if (isNaN(node.vx) || isNaN(node.vy)) {
	        node.vx = node.vy = 0;
	      }
	    }
	  }

	  function initializeForce(force) {
	    if (force.initialize) force.initialize(nodes);
	    return force;
	  }

	  initializeNodes();

	  return simulation = {
	    tick: tick,

	    restart: function() {
	      return stepper.restart(step), simulation;
	    },

	    stop: function() {
	      return stepper.stop(), simulation;
	    },

	    nodes: function(_) {
	      return arguments.length ? (nodes = _, initializeNodes(), forces.each(initializeForce), simulation) : nodes;
	    },

	    alpha: function(_) {
	      return arguments.length ? (alpha = +_, simulation) : alpha;
	    },

	    alphaMin: function(_) {
	      return arguments.length ? (alphaMin = +_, simulation) : alphaMin;
	    },

	    alphaDecay: function(_) {
	      return arguments.length ? (alphaDecay = +_, simulation) : +alphaDecay;
	    },

	    alphaTarget: function(_) {
	      return arguments.length ? (alphaTarget = +_, simulation) : alphaTarget;
	    },

	    velocityDecay: function(_) {
	      return arguments.length ? (velocityDecay = 1 - _, simulation) : 1 - velocityDecay;
	    },

	    force: function(name, _) {
	      return arguments.length > 1 ? ((_ == null ? forces.remove(name) : forces.set(name, initializeForce(_))), simulation) : forces.get(name);
	    },

	    find: function(x, y, radius) {
	      var i = 0,
	          n = nodes.length,
	          dx,
	          dy,
	          d2,
	          node,
	          closest;

	      if (radius == null) radius = Infinity;
	      else radius *= radius;

	      for (i = 0; i < n; ++i) {
	        node = nodes[i];
	        dx = x - node.x;
	        dy = y - node.y;
	        d2 = dx * dx + dy * dy;
	        if (d2 < radius) closest = node, radius = d2;
	      }

	      return closest;
	    },

	    on: function(name, _) {
	      return arguments.length > 1 ? (event.on(name, _), simulation) : event.on(name);
	    }
	  };
	};

	var manyBody = function() {
	  var nodes,
	      node,
	      alpha,
	      strength = constant(-30),
	      strengths,
	      distanceMin2 = 1,
	      distanceMax2 = Infinity,
	      theta2 = 0.81;

	  function force(_) {
	    var i, n = nodes.length, tree = d3Quadtree.quadtree(nodes, x$1, y$1).visitAfter(accumulate);
	    for (alpha = _, i = 0; i < n; ++i) node = nodes[i], tree.visit(apply);
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length, node;
	    strengths = new Array(n);
	    for (i = 0; i < n; ++i) node = nodes[i], strengths[node.index] = +strength(node, i, nodes);
	  }

	  function accumulate(quad) {
	    var strength = 0, q, c, weight = 0, x, y, i;

	    // For internal nodes, accumulate forces from child quadrants.
	    if (quad.length) {
	      for (x = y = i = 0; i < 4; ++i) {
	        if ((q = quad[i]) && (c = Math.abs(q.value))) {
	          strength += q.value, weight += c, x += c * q.x, y += c * q.y;
	        }
	      }
	      quad.x = x / weight;
	      quad.y = y / weight;
	    }

	    // For leaf nodes, accumulate forces from coincident quadrants.
	    else {
	      q = quad;
	      q.x = q.data.x;
	      q.y = q.data.y;
	      do strength += strengths[q.data.index];
	      while (q = q.next);
	    }

	    quad.value = strength;
	  }

	  function apply(quad, x1, _, x2) {
	    if (!quad.value) return true;

	    var x = quad.x - node.x,
	        y = quad.y - node.y,
	        w = x2 - x1,
	        l = x * x + y * y;

	    // Apply the Barnes-Hut approximation if possible.
	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (w * w / theta2 < l) {
	      if (l < distanceMax2) {
	        if (x === 0) x = jiggle(), l += x * x;
	        if (y === 0) y = jiggle(), l += y * y;
	        if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	        node.vx += x * quad.value * alpha / l;
	        node.vy += y * quad.value * alpha / l;
	      }
	      return true;
	    }

	    // Otherwise, process points directly.
	    else if (quad.length || l >= distanceMax2) return;

	    // Limit forces for very close nodes; randomize direction if coincident.
	    if (quad.data !== node || quad.next) {
	      if (x === 0) x = jiggle(), l += x * x;
	      if (y === 0) y = jiggle(), l += y * y;
	      if (l < distanceMin2) l = Math.sqrt(distanceMin2 * l);
	    }

	    do if (quad.data !== node) {
	      w = strengths[quad.data.index] * alpha / l;
	      node.vx += x * w;
	      node.vy += y * w;
	    } while (quad = quad.next);
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
	  };

	  force.distanceMin = function(_) {
	    return arguments.length ? (distanceMin2 = _ * _, force) : Math.sqrt(distanceMin2);
	  };

	  force.distanceMax = function(_) {
	    return arguments.length ? (distanceMax2 = _ * _, force) : Math.sqrt(distanceMax2);
	  };

	  force.theta = function(_) {
	    return arguments.length ? (theta2 = _ * _, force) : Math.sqrt(theta2);
	  };

	  return force;
	};

	var radial = function(radius, x, y) {
	  var nodes,
	      strength = constant(0.1),
	      strengths,
	      radiuses;

	  if (typeof radius !== "function") radius = constant(+radius);
	  if (x == null) x = 0;
	  if (y == null) y = 0;

	  function force(alpha) {
	    for (var i = 0, n = nodes.length; i < n; ++i) {
	      var node = nodes[i],
	          dx = node.x - x || 1e-6,
	          dy = node.y - y || 1e-6,
	          r = Math.sqrt(dx * dx + dy * dy),
	          k = (radiuses[i] - r) * strengths[i] * alpha / r;
	      node.vx += dx * k;
	      node.vy += dy * k;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    radiuses = new Array(n);
	    for (i = 0; i < n; ++i) {
	      radiuses[i] = +radius(nodes[i], i, nodes);
	      strengths[i] = isNaN(radiuses[i]) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _, initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
	  };

	  force.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), initialize(), force) : radius;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = +_, force) : x;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = +_, force) : y;
	  };

	  return force;
	};

	var x$2 = function(x) {
	  var strength = constant(0.1),
	      nodes,
	      strengths,
	      xz;

	  if (typeof x !== "function") x = constant(x == null ? 0 : +x);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vx += (xz[i] - node.x) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    xz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(xz[i] = +x(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
	  };

	  force.x = function(_) {
	    return arguments.length ? (x = typeof _ === "function" ? _ : constant(+_), initialize(), force) : x;
	  };

	  return force;
	};

	var y$2 = function(y) {
	  var strength = constant(0.1),
	      nodes,
	      strengths,
	      yz;

	  if (typeof y !== "function") y = constant(y == null ? 0 : +y);

	  function force(alpha) {
	    for (var i = 0, n = nodes.length, node; i < n; ++i) {
	      node = nodes[i], node.vy += (yz[i] - node.y) * strengths[i] * alpha;
	    }
	  }

	  function initialize() {
	    if (!nodes) return;
	    var i, n = nodes.length;
	    strengths = new Array(n);
	    yz = new Array(n);
	    for (i = 0; i < n; ++i) {
	      strengths[i] = isNaN(yz[i] = +y(nodes[i], i, nodes)) ? 0 : +strength(nodes[i], i, nodes);
	    }
	  }

	  force.initialize = function(_) {
	    nodes = _;
	    initialize();
	  };

	  force.strength = function(_) {
	    return arguments.length ? (strength = typeof _ === "function" ? _ : constant(+_), initialize(), force) : strength;
	  };

	  force.y = function(_) {
	    return arguments.length ? (y = typeof _ === "function" ? _ : constant(+_), initialize(), force) : y;
	  };

	  return force;
	};

	exports.forceCenter = center;
	exports.forceCollide = collide;
	exports.forceLink = link;
	exports.forceManyBody = manyBody;
	exports.forceRadial = radial;
	exports.forceSimulation = simulation;
	exports.forceX = x$2;
	exports.forceY = y$2;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-quadtree/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var tree_add = function(d) {
	  var x = +this._x.call(null, d),
	      y = +this._y.call(null, d);
	  return add(this.cover(x, y), x, y, d);
	};

	function add(tree, x, y, d) {
	  if (isNaN(x) || isNaN(y)) return tree; // ignore invalid points

	  var parent,
	      node = tree._root,
	      leaf = {data: d},
	      x0 = tree._x0,
	      y0 = tree._y0,
	      x1 = tree._x1,
	      y1 = tree._y1,
	      xm,
	      ym,
	      xp,
	      yp,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return tree._root = leaf, tree;

	  // Find the existing leaf for the new point, or add it.
	  while (node.length) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (parent = node, !(node = node[i = bottom << 1 | right])) return parent[i] = leaf, tree;
	  }

	  // Is the new point is exactly coincident with the existing point?
	  xp = +tree._x.call(null, node.data);
	  yp = +tree._y.call(null, node.data);
	  if (x === xp && y === yp) return leaf.next = node, parent ? parent[i] = leaf : tree._root = leaf, tree;

	  // Otherwise, split the leaf node until the old and new point are separated.
	  do {
	    parent = parent ? parent[i] = new Array(4) : tree._root = new Array(4);
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	  } while ((i = bottom << 1 | right) === (j = (yp >= ym) << 1 | (xp >= xm)));
	  return parent[j] = node, parent[i] = leaf, tree;
	}

	function addAll(data) {
	  var d, i, n = data.length,
	      x,
	      y,
	      xz = new Array(n),
	      yz = new Array(n),
	      x0 = Infinity,
	      y0 = Infinity,
	      x1 = -Infinity,
	      y1 = -Infinity;

	  // Compute the points and their extent.
	  for (i = 0; i < n; ++i) {
	    if (isNaN(x = +this._x.call(null, d = data[i])) || isNaN(y = +this._y.call(null, d))) continue;
	    xz[i] = x;
	    yz[i] = y;
	    if (x < x0) x0 = x;
	    if (x > x1) x1 = x;
	    if (y < y0) y0 = y;
	    if (y > y1) y1 = y;
	  }

	  // If there were no (valid) points, inherit the existing extent.
	  if (x1 < x0) x0 = this._x0, x1 = this._x1;
	  if (y1 < y0) y0 = this._y0, y1 = this._y1;

	  // Expand the tree to cover the new points.
	  this.cover(x0, y0).cover(x1, y1);

	  // Add the new points.
	  for (i = 0; i < n; ++i) {
	    add(this, xz[i], yz[i], data[i]);
	  }

	  return this;
	}

	var tree_cover = function(x, y) {
	  if (isNaN(x = +x) || isNaN(y = +y)) return this; // ignore invalid points

	  var x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1;

	  // If the quadtree has no extent, initialize them.
	  // Integer extent are necessary so that if we later double the extent,
	  // the existing quadrant boundaries don’t change due to floating point error!
	  if (isNaN(x0)) {
	    x1 = (x0 = Math.floor(x)) + 1;
	    y1 = (y0 = Math.floor(y)) + 1;
	  }

	  // Otherwise, double repeatedly to cover.
	  else if (x0 > x || x > x1 || y0 > y || y > y1) {
	    var z = x1 - x0,
	        node = this._root,
	        parent,
	        i;

	    switch (i = (y < (y0 + y1) / 2) << 1 | (x < (x0 + x1) / 2)) {
	      case 0: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y1 = y0 + z, x > x1 || y > y1);
	        break;
	      }
	      case 1: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y1 = y0 + z, x0 > x || y > y1);
	        break;
	      }
	      case 2: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x1 = x0 + z, y0 = y1 - z, x > x1 || y0 > y);
	        break;
	      }
	      case 3: {
	        do parent = new Array(4), parent[i] = node, node = parent;
	        while (z *= 2, x0 = x1 - z, y0 = y1 - z, x0 > x || y0 > y);
	        break;
	      }
	    }

	    if (this._root && this._root.length) this._root = node;
	  }

	  // If the quadtree covers the point already, just return.
	  else return this;

	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  return this;
	};

	var tree_data = function() {
	  var data = [];
	  this.visit(function(node) {
	    if (!node.length) do data.push(node.data); while (node = node.next)
	  });
	  return data;
	};

	var tree_extent = function(_) {
	  return arguments.length
	      ? this.cover(+_[0][0], +_[0][1]).cover(+_[1][0], +_[1][1])
	      : isNaN(this._x0) ? undefined : [[this._x0, this._y0], [this._x1, this._y1]];
	};

	var Quad = function(node, x0, y0, x1, y1) {
	  this.node = node;
	  this.x0 = x0;
	  this.y0 = y0;
	  this.x1 = x1;
	  this.y1 = y1;
	};

	var tree_find = function(x, y, radius) {
	  var data,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1,
	      y1,
	      x2,
	      y2,
	      x3 = this._x1,
	      y3 = this._y1,
	      quads = [],
	      node = this._root,
	      q,
	      i;

	  if (node) quads.push(new Quad(node, x0, y0, x3, y3));
	  if (radius == null) radius = Infinity;
	  else {
	    x0 = x - radius, y0 = y - radius;
	    x3 = x + radius, y3 = y + radius;
	    radius *= radius;
	  }

	  while (q = quads.pop()) {

	    // Stop searching if this quadrant can’t contain a closer node.
	    if (!(node = q.node)
	        || (x1 = q.x0) > x3
	        || (y1 = q.y0) > y3
	        || (x2 = q.x1) < x0
	        || (y2 = q.y1) < y0) continue;

	    // Bisect the current quadrant.
	    if (node.length) {
	      var xm = (x1 + x2) / 2,
	          ym = (y1 + y2) / 2;

	      quads.push(
	        new Quad(node[3], xm, ym, x2, y2),
	        new Quad(node[2], x1, ym, xm, y2),
	        new Quad(node[1], xm, y1, x2, ym),
	        new Quad(node[0], x1, y1, xm, ym)
	      );

	      // Visit the closest quadrant first.
	      if (i = (y >= ym) << 1 | (x >= xm)) {
	        q = quads[quads.length - 1];
	        quads[quads.length - 1] = quads[quads.length - 1 - i];
	        quads[quads.length - 1 - i] = q;
	      }
	    }

	    // Visit this point. (Visiting coincident points isn’t necessary!)
	    else {
	      var dx = x - +this._x.call(null, node.data),
	          dy = y - +this._y.call(null, node.data),
	          d2 = dx * dx + dy * dy;
	      if (d2 < radius) {
	        var d = Math.sqrt(radius = d2);
	        x0 = x - d, y0 = y - d;
	        x3 = x + d, y3 = y + d;
	        data = node.data;
	      }
	    }
	  }

	  return data;
	};

	var tree_remove = function(d) {
	  if (isNaN(x = +this._x.call(null, d)) || isNaN(y = +this._y.call(null, d))) return this; // ignore invalid points

	  var parent,
	      node = this._root,
	      retainer,
	      previous,
	      next,
	      x0 = this._x0,
	      y0 = this._y0,
	      x1 = this._x1,
	      y1 = this._y1,
	      x,
	      y,
	      xm,
	      ym,
	      right,
	      bottom,
	      i,
	      j;

	  // If the tree is empty, initialize the root as a leaf.
	  if (!node) return this;

	  // Find the leaf node for the point.
	  // While descending, also retain the deepest parent with a non-removed sibling.
	  if (node.length) while (true) {
	    if (right = x >= (xm = (x0 + x1) / 2)) x0 = xm; else x1 = xm;
	    if (bottom = y >= (ym = (y0 + y1) / 2)) y0 = ym; else y1 = ym;
	    if (!(parent = node, node = node[i = bottom << 1 | right])) return this;
	    if (!node.length) break;
	    if (parent[(i + 1) & 3] || parent[(i + 2) & 3] || parent[(i + 3) & 3]) retainer = parent, j = i;
	  }

	  // Find the point to remove.
	  while (node.data !== d) if (!(previous = node, node = node.next)) return this;
	  if (next = node.next) delete node.next;

	  // If there are multiple coincident points, remove just the point.
	  if (previous) return (next ? previous.next = next : delete previous.next), this;

	  // If this is the root point, remove it.
	  if (!parent) return this._root = next, this;

	  // Remove this leaf.
	  next ? parent[i] = next : delete parent[i];

	  // If the parent now contains exactly one leaf, collapse superfluous parents.
	  if ((node = parent[0] || parent[1] || parent[2] || parent[3])
	      && node === (parent[3] || parent[2] || parent[1] || parent[0])
	      && !node.length) {
	    if (retainer) retainer[j] = node;
	    else this._root = node;
	  }

	  return this;
	};

	function removeAll(data) {
	  for (var i = 0, n = data.length; i < n; ++i) this.remove(data[i]);
	  return this;
	}

	var tree_root = function() {
	  return this._root;
	};

	var tree_size = function() {
	  var size = 0;
	  this.visit(function(node) {
	    if (!node.length) do ++size; while (node = node.next)
	  });
	  return size;
	};

	var tree_visit = function(callback) {
	  var quads = [], q, node = this._root, child, x0, y0, x1, y1;
	  if (node) quads.push(new Quad(node, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    if (!callback(node = q.node, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1) && node.length) {
	      var xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	    }
	  }
	  return this;
	};

	var tree_visitAfter = function(callback) {
	  var quads = [], next = [], q;
	  if (this._root) quads.push(new Quad(this._root, this._x0, this._y0, this._x1, this._y1));
	  while (q = quads.pop()) {
	    var node = q.node;
	    if (node.length) {
	      var child, x0 = q.x0, y0 = q.y0, x1 = q.x1, y1 = q.y1, xm = (x0 + x1) / 2, ym = (y0 + y1) / 2;
	      if (child = node[0]) quads.push(new Quad(child, x0, y0, xm, ym));
	      if (child = node[1]) quads.push(new Quad(child, xm, y0, x1, ym));
	      if (child = node[2]) quads.push(new Quad(child, x0, ym, xm, y1));
	      if (child = node[3]) quads.push(new Quad(child, xm, ym, x1, y1));
	    }
	    next.push(q);
	  }
	  while (q = next.pop()) {
	    callback(q.node, q.x0, q.y0, q.x1, q.y1);
	  }
	  return this;
	};

	function defaultX(d) {
	  return d[0];
	}

	var tree_x = function(_) {
	  return arguments.length ? (this._x = _, this) : this._x;
	};

	function defaultY(d) {
	  return d[1];
	}

	var tree_y = function(_) {
	  return arguments.length ? (this._y = _, this) : this._y;
	};

	function quadtree(nodes, x, y) {
	  var tree = new Quadtree(x == null ? defaultX : x, y == null ? defaultY : y, NaN, NaN, NaN, NaN);
	  return nodes == null ? tree : tree.addAll(nodes);
	}

	function Quadtree(x, y, x0, y0, x1, y1) {
	  this._x = x;
	  this._y = y;
	  this._x0 = x0;
	  this._y0 = y0;
	  this._x1 = x1;
	  this._y1 = y1;
	  this._root = undefined;
	}

	function leaf_copy(leaf) {
	  var copy = {data: leaf.data}, next = copy;
	  while (leaf = leaf.next) next = next.next = {data: leaf.data};
	  return copy;
	}

	var treeProto = quadtree.prototype = Quadtree.prototype;

	treeProto.copy = function() {
	  var copy = new Quadtree(this._x, this._y, this._x0, this._y0, this._x1, this._y1),
	      node = this._root,
	      nodes,
	      child;

	  if (!node) return copy;

	  if (!node.length) return copy._root = leaf_copy(node), copy;

	  nodes = [{source: node, target: copy._root = new Array(4)}];
	  while (node = nodes.pop()) {
	    for (var i = 0; i < 4; ++i) {
	      if (child = node.source[i]) {
	        if (child.length) nodes.push({source: child, target: node.target[i] = new Array(4)});
	        else node.target[i] = leaf_copy(child);
	      }
	    }
	  }

	  return copy;
	};

	treeProto.add = tree_add;
	treeProto.addAll = addAll;
	treeProto.cover = tree_cover;
	treeProto.data = tree_data;
	treeProto.extent = tree_extent;
	treeProto.find = tree_find;
	treeProto.remove = tree_remove;
	treeProto.removeAll = removeAll;
	treeProto.root = tree_root;
	treeProto.size = tree_size;
	treeProto.visit = tree_visit;
	treeProto.visitAfter = tree_visitAfter;
	treeProto.x = tree_x;
	treeProto.y = tree_y;

	exports.quadtree = quadtree;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 27 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-format/ Version 1.3.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	// Computes the decimal coefficient and exponent of the specified number x with
	// significant digits p, where x is positive and p is in [1, 21] or undefined.
	// For example, formatDecimal(1.23) returns ["123", 0].
	var formatDecimal = function(x, p) {
	  if ((i = (x = p ? x.toExponential(p - 1) : x.toExponential()).indexOf("e")) < 0) return null; // NaN, ±Infinity
	  var i, coefficient = x.slice(0, i);

	  // The string returned by toExponential either has the form \d\.\d+e[-+]\d+
	  // (e.g., 1.2e+3) or the form \de[-+]\d+ (e.g., 1e+3).
	  return [
	    coefficient.length > 1 ? coefficient[0] + coefficient.slice(2) : coefficient,
	    +x.slice(i + 1)
	  ];
	};

	var exponent = function(x) {
	  return x = formatDecimal(Math.abs(x)), x ? x[1] : NaN;
	};

	var formatGroup = function(grouping, thousands) {
	  return function(value, width) {
	    var i = value.length,
	        t = [],
	        j = 0,
	        g = grouping[0],
	        length = 0;

	    while (i > 0 && g > 0) {
	      if (length + g + 1 > width) g = Math.max(1, width - length);
	      t.push(value.substring(i -= g, i + g));
	      if ((length += g + 1) > width) break;
	      g = grouping[j = (j + 1) % grouping.length];
	    }

	    return t.reverse().join(thousands);
	  };
	};

	var formatNumerals = function(numerals) {
	  return function(value) {
	    return value.replace(/[0-9]/g, function(i) {
	      return numerals[+i];
	    });
	  };
	};

	// [[fill]align][sign][symbol][0][width][,][.precision][~][type]
	var re = /^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;

	function formatSpecifier(specifier) {
	  return new FormatSpecifier(specifier);
	}

	formatSpecifier.prototype = FormatSpecifier.prototype; // instanceof

	function FormatSpecifier(specifier) {
	  if (!(match = re.exec(specifier))) throw new Error("invalid format: " + specifier);
	  var match;
	  this.fill = match[1] || " ";
	  this.align = match[2] || ">";
	  this.sign = match[3] || "-";
	  this.symbol = match[4] || "";
	  this.zero = !!match[5];
	  this.width = match[6] && +match[6];
	  this.comma = !!match[7];
	  this.precision = match[8] && +match[8].slice(1);
	  this.trim = !!match[9];
	  this.type = match[10] || "";
	}

	FormatSpecifier.prototype.toString = function() {
	  return this.fill
	      + this.align
	      + this.sign
	      + this.symbol
	      + (this.zero ? "0" : "")
	      + (this.width == null ? "" : Math.max(1, this.width | 0))
	      + (this.comma ? "," : "")
	      + (this.precision == null ? "" : "." + Math.max(0, this.precision | 0))
	      + (this.trim ? "~" : "")
	      + this.type;
	};

	// Trims insignificant zeros, e.g., replaces 1.2000k with 1.2k.
	var formatTrim = function(s) {
	  out: for (var n = s.length, i = 1, i0 = -1, i1; i < n; ++i) {
	    switch (s[i]) {
	      case ".": i0 = i1 = i; break;
	      case "0": if (i0 === 0) i0 = i; i1 = i; break;
	      default: if (i0 > 0) { if (!+s[i]) break out; i0 = 0; } break;
	    }
	  }
	  return i0 > 0 ? s.slice(0, i0) + s.slice(i1 + 1) : s;
	};

	var prefixExponent;

	var formatPrefixAuto = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1],
	      i = exponent - (prefixExponent = Math.max(-8, Math.min(8, Math.floor(exponent / 3))) * 3) + 1,
	      n = coefficient.length;
	  return i === n ? coefficient
	      : i > n ? coefficient + new Array(i - n + 1).join("0")
	      : i > 0 ? coefficient.slice(0, i) + "." + coefficient.slice(i)
	      : "0." + new Array(1 - i).join("0") + formatDecimal(x, Math.max(0, p + i - 1))[0]; // less than 1y!
	};

	var formatRounded = function(x, p) {
	  var d = formatDecimal(x, p);
	  if (!d) return x + "";
	  var coefficient = d[0],
	      exponent = d[1];
	  return exponent < 0 ? "0." + new Array(-exponent).join("0") + coefficient
	      : coefficient.length > exponent + 1 ? coefficient.slice(0, exponent + 1) + "." + coefficient.slice(exponent + 1)
	      : coefficient + new Array(exponent - coefficient.length + 2).join("0");
	};

	var formatTypes = {
	  "%": function(x, p) { return (x * 100).toFixed(p); },
	  "b": function(x) { return Math.round(x).toString(2); },
	  "c": function(x) { return x + ""; },
	  "d": function(x) { return Math.round(x).toString(10); },
	  "e": function(x, p) { return x.toExponential(p); },
	  "f": function(x, p) { return x.toFixed(p); },
	  "g": function(x, p) { return x.toPrecision(p); },
	  "o": function(x) { return Math.round(x).toString(8); },
	  "p": function(x, p) { return formatRounded(x * 100, p); },
	  "r": formatRounded,
	  "s": formatPrefixAuto,
	  "X": function(x) { return Math.round(x).toString(16).toUpperCase(); },
	  "x": function(x) { return Math.round(x).toString(16); }
	};

	var identity = function(x) {
	  return x;
	};

	var prefixes = ["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];

	var formatLocale = function(locale) {
	  var group = locale.grouping && locale.thousands ? formatGroup(locale.grouping, locale.thousands) : identity,
	      currency = locale.currency,
	      decimal = locale.decimal,
	      numerals = locale.numerals ? formatNumerals(locale.numerals) : identity,
	      percent = locale.percent || "%";

	  function newFormat(specifier) {
	    specifier = formatSpecifier(specifier);

	    var fill = specifier.fill,
	        align = specifier.align,
	        sign = specifier.sign,
	        symbol = specifier.symbol,
	        zero = specifier.zero,
	        width = specifier.width,
	        comma = specifier.comma,
	        precision = specifier.precision,
	        trim = specifier.trim,
	        type = specifier.type;

	    // The "n" type is an alias for ",g".
	    if (type === "n") comma = true, type = "g";

	    // The "" type, and any invalid type, is an alias for ".12~g".
	    else if (!formatTypes[type]) precision == null && (precision = 12), trim = true, type = "g";

	    // If zero fill is specified, padding goes after sign and before digits.
	    if (zero || (fill === "0" && align === "=")) zero = true, fill = "0", align = "=";

	    // Compute the prefix and suffix.
	    // For SI-prefix, the suffix is lazily computed.
	    var prefix = symbol === "$" ? currency[0] : symbol === "#" && /[boxX]/.test(type) ? "0" + type.toLowerCase() : "",
	        suffix = symbol === "$" ? currency[1] : /[%p]/.test(type) ? percent : "";

	    // What format function should we use?
	    // Is this an integer type?
	    // Can this type generate exponential notation?
	    var formatType = formatTypes[type],
	        maybeSuffix = /[defgprs%]/.test(type);

	    // Set the default precision if not specified,
	    // or clamp the specified precision to the supported range.
	    // For significant precision, it must be in [1, 21].
	    // For fixed precision, it must be in [0, 20].
	    precision = precision == null ? 6
	        : /[gprs]/.test(type) ? Math.max(1, Math.min(21, precision))
	        : Math.max(0, Math.min(20, precision));

	    function format(value) {
	      var valuePrefix = prefix,
	          valueSuffix = suffix,
	          i, n, c;

	      if (type === "c") {
	        valueSuffix = formatType(value) + valueSuffix;
	        value = "";
	      } else {
	        value = +value;

	        // Perform the initial formatting.
	        var valueNegative = value < 0;
	        value = formatType(Math.abs(value), precision);

	        // Trim insignificant zeros.
	        if (trim) value = formatTrim(value);

	        // If a negative value rounds to zero during formatting, treat as positive.
	        if (valueNegative && +value === 0) valueNegative = false;

	        // Compute the prefix and suffix.
	        valuePrefix = (valueNegative ? (sign === "(" ? sign : "-") : sign === "-" || sign === "(" ? "" : sign) + valuePrefix;
	        valueSuffix = (type === "s" ? prefixes[8 + prefixExponent / 3] : "") + valueSuffix + (valueNegative && sign === "(" ? ")" : "");

	        // Break the formatted value into the integer “value” part that can be
	        // grouped, and fractional or exponential “suffix” part that is not.
	        if (maybeSuffix) {
	          i = -1, n = value.length;
	          while (++i < n) {
	            if (c = value.charCodeAt(i), 48 > c || c > 57) {
	              valueSuffix = (c === 46 ? decimal + value.slice(i + 1) : value.slice(i)) + valueSuffix;
	              value = value.slice(0, i);
	              break;
	            }
	          }
	        }
	      }

	      // If the fill character is not "0", grouping is applied before padding.
	      if (comma && !zero) value = group(value, Infinity);

	      // Compute the padding.
	      var length = valuePrefix.length + value.length + valueSuffix.length,
	          padding = length < width ? new Array(width - length + 1).join(fill) : "";

	      // If the fill character is "0", grouping is applied after padding.
	      if (comma && zero) value = group(padding + value, padding.length ? width - valueSuffix.length : Infinity), padding = "";

	      // Reconstruct the final output based on the desired alignment.
	      switch (align) {
	        case "<": value = valuePrefix + value + valueSuffix + padding; break;
	        case "=": value = valuePrefix + padding + value + valueSuffix; break;
	        case "^": value = padding.slice(0, length = padding.length >> 1) + valuePrefix + value + valueSuffix + padding.slice(length); break;
	        default: value = padding + valuePrefix + value + valueSuffix; break;
	      }

	      return numerals(value);
	    }

	    format.toString = function() {
	      return specifier + "";
	    };

	    return format;
	  }

	  function formatPrefix(specifier, value) {
	    var f = newFormat((specifier = formatSpecifier(specifier), specifier.type = "f", specifier)),
	        e = Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3,
	        k = Math.pow(10, -e),
	        prefix = prefixes[8 + e / 3];
	    return function(value) {
	      return f(k * value) + prefix;
	    };
	  }

	  return {
	    format: newFormat,
	    formatPrefix: formatPrefix
	  };
	};

	var locale;



	defaultLocale({
	  decimal: ".",
	  thousands: ",",
	  grouping: [3],
	  currency: ["$", ""]
	});

	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  exports.format = locale.format;
	  exports.formatPrefix = locale.formatPrefix;
	  return locale;
	}

	var precisionFixed = function(step) {
	  return Math.max(0, -exponent(Math.abs(step)));
	};

	var precisionPrefix = function(step, value) {
	  return Math.max(0, Math.max(-8, Math.min(8, Math.floor(exponent(value) / 3))) * 3 - exponent(Math.abs(step)));
	};

	var precisionRound = function(step, max) {
	  step = Math.abs(step), max = Math.abs(max) - step;
	  return Math.max(0, exponent(max) - exponent(step)) + 1;
	};

	exports.formatDefaultLocale = defaultLocale;
	exports.formatLocale = formatLocale;
	exports.formatSpecifier = formatSpecifier;
	exports.precisionFixed = precisionFixed;
	exports.precisionPrefix = precisionPrefix;
	exports.precisionRound = precisionRound;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 28 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-geo/ Version 1.10.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(8)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Array) { 'use strict';

	// Adds floating point numbers with twice the normal precision.
	// Reference: J. R. Shewchuk, Adaptive Precision Floating-Point Arithmetic and
	// Fast Robust Geometric Predicates, Discrete & Computational Geometry 18(3)
	// 305–363 (1997).
	// Code adapted from GeographicLib by Charles F. F. Karney,
	// http://geographiclib.sourceforge.net/

	function adder() {
	  return new Adder;
	}

	function Adder() {
	  this.reset();
	}

	Adder.prototype = {
	  constructor: Adder,
	  reset: function() {
	    this.s = // rounded value
	    this.t = 0; // exact error
	  },
	  add: function(y) {
	    add(temp, y, this.t);
	    add(this, temp.s, this.s);
	    if (this.s) this.t += temp.t;
	    else this.s = temp.t;
	  },
	  valueOf: function() {
	    return this.s;
	  }
	};

	var temp = new Adder;

	function add(adder, a, b) {
	  var x = adder.s = a + b,
	      bv = x - a,
	      av = x - bv;
	  adder.t = (a - av) + (b - bv);
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var quarterPi = pi / 4;
	var tau = pi * 2;

	var degrees = 180 / pi;
	var radians = pi / 180;

	var abs = Math.abs;
	var atan = Math.atan;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var ceil = Math.ceil;
	var exp = Math.exp;

	var log = Math.log;
	var pow = Math.pow;
	var sin = Math.sin;
	var sign = Math.sign || function(x) { return x > 0 ? 1 : x < 0 ? -1 : 0; };
	var sqrt = Math.sqrt;
	var tan = Math.tan;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x > 1 ? halfPi : x < -1 ? -halfPi : Math.asin(x);
	}

	function haversin(x) {
	  return (x = sin(x / 2)) * x;
	}

	function noop() {}

	function streamGeometry(geometry, stream) {
	  if (geometry && streamGeometryType.hasOwnProperty(geometry.type)) {
	    streamGeometryType[geometry.type](geometry, stream);
	  }
	}

	var streamObjectType = {
	  Feature: function(object, stream) {
	    streamGeometry(object.geometry, stream);
	  },
	  FeatureCollection: function(object, stream) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) streamGeometry(features[i].geometry, stream);
	  }
	};

	var streamGeometryType = {
	  Sphere: function(object, stream) {
	    stream.sphere();
	  },
	  Point: function(object, stream) {
	    object = object.coordinates;
	    stream.point(object[0], object[1], object[2]);
	  },
	  MultiPoint: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) object = coordinates[i], stream.point(object[0], object[1], object[2]);
	  },
	  LineString: function(object, stream) {
	    streamLine(object.coordinates, stream, 0);
	  },
	  MultiLineString: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamLine(coordinates[i], stream, 0);
	  },
	  Polygon: function(object, stream) {
	    streamPolygon(object.coordinates, stream);
	  },
	  MultiPolygon: function(object, stream) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) streamPolygon(coordinates[i], stream);
	  },
	  GeometryCollection: function(object, stream) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) streamGeometry(geometries[i], stream);
	  }
	};

	function streamLine(coordinates, stream, closed) {
	  var i = -1, n = coordinates.length - closed, coordinate;
	  stream.lineStart();
	  while (++i < n) coordinate = coordinates[i], stream.point(coordinate[0], coordinate[1], coordinate[2]);
	  stream.lineEnd();
	}

	function streamPolygon(coordinates, stream) {
	  var i = -1, n = coordinates.length;
	  stream.polygonStart();
	  while (++i < n) streamLine(coordinates[i], stream, 1);
	  stream.polygonEnd();
	}

	function geoStream(object, stream) {
	  if (object && streamObjectType.hasOwnProperty(object.type)) {
	    streamObjectType[object.type](object, stream);
	  } else {
	    streamGeometry(object, stream);
	  }
	}

	var areaRingSum = adder();

	var areaSum = adder();
	var lambda00;
	var phi00;
	var lambda0;
	var cosPhi0;
	var sinPhi0;

	var areaStream = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaRingSum.reset();
	    areaStream.lineStart = areaRingStart;
	    areaStream.lineEnd = areaRingEnd;
	  },
	  polygonEnd: function() {
	    var areaRing = +areaRingSum;
	    areaSum.add(areaRing < 0 ? tau + areaRing : areaRing);
	    this.lineStart = this.lineEnd = this.point = noop;
	  },
	  sphere: function() {
	    areaSum.add(tau);
	  }
	};

	function areaRingStart() {
	  areaStream.point = areaPointFirst;
	}

	function areaRingEnd() {
	  areaPoint(lambda00, phi00);
	}

	function areaPointFirst(lambda, phi) {
	  areaStream.point = areaPoint;
	  lambda00 = lambda, phi00 = phi;
	  lambda *= radians, phi *= radians;
	  lambda0 = lambda, cosPhi0 = cos(phi = phi / 2 + quarterPi), sinPhi0 = sin(phi);
	}

	function areaPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  phi = phi / 2 + quarterPi; // half the angular distance from south pole

	  // Spherical excess E for a spherical triangle with vertices: south pole,
	  // previous point, current point.  Uses a formula derived from Cagnoli’s
	  // theorem.  See Todhunter, Spherical Trig. (1871), Sec. 103, Eq. (2).
	  var dLambda = lambda - lambda0,
	      sdLambda = dLambda >= 0 ? 1 : -1,
	      adLambda = sdLambda * dLambda,
	      cosPhi = cos(phi),
	      sinPhi = sin(phi),
	      k = sinPhi0 * sinPhi,
	      u = cosPhi0 * cosPhi + k * cos(adLambda),
	      v = k * sdLambda * sin(adLambda);
	  areaRingSum.add(atan2(v, u));

	  // Advance the previous points.
	  lambda0 = lambda, cosPhi0 = cosPhi, sinPhi0 = sinPhi;
	}

	function area(object) {
	  areaSum.reset();
	  geoStream(object, areaStream);
	  return areaSum * 2;
	}

	function spherical(cartesian) {
	  return [atan2(cartesian[1], cartesian[0]), asin(cartesian[2])];
	}

	function cartesian(spherical) {
	  var lambda = spherical[0], phi = spherical[1], cosPhi = cos(phi);
	  return [cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi)];
	}

	function cartesianDot(a, b) {
	  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	}

	function cartesianCross(a, b) {
	  return [a[1] * b[2] - a[2] * b[1], a[2] * b[0] - a[0] * b[2], a[0] * b[1] - a[1] * b[0]];
	}

	// TODO return a
	function cartesianAddInPlace(a, b) {
	  a[0] += b[0], a[1] += b[1], a[2] += b[2];
	}

	function cartesianScale(vector, k) {
	  return [vector[0] * k, vector[1] * k, vector[2] * k];
	}

	// TODO return d
	function cartesianNormalizeInPlace(d) {
	  var l = sqrt(d[0] * d[0] + d[1] * d[1] + d[2] * d[2]);
	  d[0] /= l, d[1] /= l, d[2] /= l;
	}

	var lambda0$1;
	var phi0;
	var lambda1;
	var phi1;
	var lambda2;
	var lambda00$1;
	var phi00$1;
	var p0;
	var deltaSum = adder();
	var ranges;
	var range$1;

	var boundsStream = {
	  point: boundsPoint,
	  lineStart: boundsLineStart,
	  lineEnd: boundsLineEnd,
	  polygonStart: function() {
	    boundsStream.point = boundsRingPoint;
	    boundsStream.lineStart = boundsRingStart;
	    boundsStream.lineEnd = boundsRingEnd;
	    deltaSum.reset();
	    areaStream.polygonStart();
	  },
	  polygonEnd: function() {
	    areaStream.polygonEnd();
	    boundsStream.point = boundsPoint;
	    boundsStream.lineStart = boundsLineStart;
	    boundsStream.lineEnd = boundsLineEnd;
	    if (areaRingSum < 0) lambda0$1 = -(lambda1 = 180), phi0 = -(phi1 = 90);
	    else if (deltaSum > epsilon) phi1 = 90;
	    else if (deltaSum < -epsilon) phi0 = -90;
	    range$1[0] = lambda0$1, range$1[1] = lambda1;
	  }
	};

	function boundsPoint(lambda, phi) {
	  ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	}

	function linePoint(lambda, phi) {
	  var p = cartesian([lambda * radians, phi * radians]);
	  if (p0) {
	    var normal = cartesianCross(p0, p),
	        equatorial = [normal[1], -normal[0], 0],
	        inflection = cartesianCross(equatorial, normal);
	    cartesianNormalizeInPlace(inflection);
	    inflection = spherical(inflection);
	    var delta = lambda - lambda2,
	        sign$$1 = delta > 0 ? 1 : -1,
	        lambdai = inflection[0] * degrees * sign$$1,
	        phii,
	        antimeridian = abs(delta) > 180;
	    if (antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = inflection[1] * degrees;
	      if (phii > phi1) phi1 = phii;
	    } else if (lambdai = (lambdai + 360) % 360 - 180, antimeridian ^ (sign$$1 * lambda2 < lambdai && lambdai < sign$$1 * lambda)) {
	      phii = -inflection[1] * degrees;
	      if (phii < phi0) phi0 = phii;
	    } else {
	      if (phi < phi0) phi0 = phi;
	      if (phi > phi1) phi1 = phi;
	    }
	    if (antimeridian) {
	      if (lambda < lambda2) {
	        if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	      } else {
	        if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	      }
	    } else {
	      if (lambda1 >= lambda0$1) {
	        if (lambda < lambda0$1) lambda0$1 = lambda;
	        if (lambda > lambda1) lambda1 = lambda;
	      } else {
	        if (lambda > lambda2) {
	          if (angle(lambda0$1, lambda) > angle(lambda0$1, lambda1)) lambda1 = lambda;
	        } else {
	          if (angle(lambda, lambda1) > angle(lambda0$1, lambda1)) lambda0$1 = lambda;
	        }
	      }
	    }
	  } else {
	    ranges.push(range$1 = [lambda0$1 = lambda, lambda1 = lambda]);
	  }
	  if (phi < phi0) phi0 = phi;
	  if (phi > phi1) phi1 = phi;
	  p0 = p, lambda2 = lambda;
	}

	function boundsLineStart() {
	  boundsStream.point = linePoint;
	}

	function boundsLineEnd() {
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  boundsStream.point = boundsPoint;
	  p0 = null;
	}

	function boundsRingPoint(lambda, phi) {
	  if (p0) {
	    var delta = lambda - lambda2;
	    deltaSum.add(abs(delta) > 180 ? delta + (delta > 0 ? 360 : -360) : delta);
	  } else {
	    lambda00$1 = lambda, phi00$1 = phi;
	  }
	  areaStream.point(lambda, phi);
	  linePoint(lambda, phi);
	}

	function boundsRingStart() {
	  areaStream.lineStart();
	}

	function boundsRingEnd() {
	  boundsRingPoint(lambda00$1, phi00$1);
	  areaStream.lineEnd();
	  if (abs(deltaSum) > epsilon) lambda0$1 = -(lambda1 = 180);
	  range$1[0] = lambda0$1, range$1[1] = lambda1;
	  p0 = null;
	}

	// Finds the left-right distance between two longitudes.
	// This is almost the same as (lambda1 - lambda0 + 360°) % 360°, except that we want
	// the distance between ±180° to be 360°.
	function angle(lambda0, lambda1) {
	  return (lambda1 -= lambda0) < 0 ? lambda1 + 360 : lambda1;
	}

	function rangeCompare(a, b) {
	  return a[0] - b[0];
	}

	function rangeContains(range$$1, x) {
	  return range$$1[0] <= range$$1[1] ? range$$1[0] <= x && x <= range$$1[1] : x < range$$1[0] || range$$1[1] < x;
	}

	function bounds(feature) {
	  var i, n, a, b, merged, deltaMax, delta;

	  phi1 = lambda1 = -(lambda0$1 = phi0 = Infinity);
	  ranges = [];
	  geoStream(feature, boundsStream);

	  // First, sort ranges by their minimum longitudes.
	  if (n = ranges.length) {
	    ranges.sort(rangeCompare);

	    // Then, merge any ranges that overlap.
	    for (i = 1, a = ranges[0], merged = [a]; i < n; ++i) {
	      b = ranges[i];
	      if (rangeContains(a, b[0]) || rangeContains(a, b[1])) {
	        if (angle(a[0], b[1]) > angle(a[0], a[1])) a[1] = b[1];
	        if (angle(b[0], a[1]) > angle(a[0], a[1])) a[0] = b[0];
	      } else {
	        merged.push(a = b);
	      }
	    }

	    // Finally, find the largest gap between the merged ranges.
	    // The final bounding box will be the inverse of this gap.
	    for (deltaMax = -Infinity, n = merged.length - 1, i = 0, a = merged[n]; i <= n; a = b, ++i) {
	      b = merged[i];
	      if ((delta = angle(a[1], b[0])) > deltaMax) deltaMax = delta, lambda0$1 = b[0], lambda1 = a[1];
	    }
	  }

	  ranges = range$1 = null;

	  return lambda0$1 === Infinity || phi0 === Infinity
	      ? [[NaN, NaN], [NaN, NaN]]
	      : [[lambda0$1, phi0], [lambda1, phi1]];
	}

	var W0;
	var W1;
	var X0;
	var Y0;
	var Z0;
	var X1;
	var Y1;
	var Z1;
	var X2;
	var Y2;
	var Z2;
	var lambda00$2;
	var phi00$2;
	var x0;
	var y0;
	var z0; // previous point

	var centroidStream = {
	  sphere: noop,
	  point: centroidPoint,
	  lineStart: centroidLineStart,
	  lineEnd: centroidLineEnd,
	  polygonStart: function() {
	    centroidStream.lineStart = centroidRingStart;
	    centroidStream.lineEnd = centroidRingEnd;
	  },
	  polygonEnd: function() {
	    centroidStream.lineStart = centroidLineStart;
	    centroidStream.lineEnd = centroidLineEnd;
	  }
	};

	// Arithmetic mean of Cartesian vectors.
	function centroidPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  centroidPointCartesian(cosPhi * cos(lambda), cosPhi * sin(lambda), sin(phi));
	}

	function centroidPointCartesian(x, y, z) {
	  ++W0;
	  X0 += (x - X0) / W0;
	  Y0 += (y - Y0) / W0;
	  Z0 += (z - Z0) / W0;
	}

	function centroidLineStart() {
	  centroidStream.point = centroidLinePointFirst;
	}

	function centroidLinePointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidStream.point = centroidLinePoint;
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLinePoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      w = atan2(sqrt((w = y0 * z - z0 * y) * w + (w = z0 * x - x0 * z) * w + (w = x0 * y - y0 * x) * w), x0 * x + y0 * y + z0 * z);
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidLineEnd() {
	  centroidStream.point = centroidPoint;
	}

	// See J. E. Brock, The Inertia Tensor for a Spherical Triangle,
	// J. Applied Mechanics 42, 239 (1975).
	function centroidRingStart() {
	  centroidStream.point = centroidRingPointFirst;
	}

	function centroidRingEnd() {
	  centroidRingPoint(lambda00$2, phi00$2);
	  centroidStream.point = centroidPoint;
	}

	function centroidRingPointFirst(lambda, phi) {
	  lambda00$2 = lambda, phi00$2 = phi;
	  lambda *= radians, phi *= radians;
	  centroidStream.point = centroidRingPoint;
	  var cosPhi = cos(phi);
	  x0 = cosPhi * cos(lambda);
	  y0 = cosPhi * sin(lambda);
	  z0 = sin(phi);
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroidRingPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var cosPhi = cos(phi),
	      x = cosPhi * cos(lambda),
	      y = cosPhi * sin(lambda),
	      z = sin(phi),
	      cx = y0 * z - z0 * y,
	      cy = z0 * x - x0 * z,
	      cz = x0 * y - y0 * x,
	      m = sqrt(cx * cx + cy * cy + cz * cz),
	      w = asin(m), // line weight = angle
	      v = m && -w / m; // area weight multiplier
	  X2 += v * cx;
	  Y2 += v * cy;
	  Z2 += v * cz;
	  W1 += w;
	  X1 += w * (x0 + (x0 = x));
	  Y1 += w * (y0 + (y0 = y));
	  Z1 += w * (z0 + (z0 = z));
	  centroidPointCartesian(x0, y0, z0);
	}

	function centroid(object) {
	  W0 = W1 =
	  X0 = Y0 = Z0 =
	  X1 = Y1 = Z1 =
	  X2 = Y2 = Z2 = 0;
	  geoStream(object, centroidStream);

	  var x = X2,
	      y = Y2,
	      z = Z2,
	      m = x * x + y * y + z * z;

	  // If the area-weighted ccentroid is undefined, fall back to length-weighted ccentroid.
	  if (m < epsilon2) {
	    x = X1, y = Y1, z = Z1;
	    // If the feature has zero length, fall back to arithmetic mean of point vectors.
	    if (W1 < epsilon) x = X0, y = Y0, z = Z0;
	    m = x * x + y * y + z * z;
	    // If the feature still has an undefined ccentroid, then return.
	    if (m < epsilon2) return [NaN, NaN];
	  }

	  return [atan2(y, x) * degrees, asin(z / sqrt(m)) * degrees];
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function compose(a, b) {

	  function compose(x, y) {
	    return x = a(x, y), b(x[0], x[1]);
	  }

	  if (a.invert && b.invert) compose.invert = function(x, y) {
	    return x = b.invert(x, y), x && a.invert(x[0], x[1]);
	  };

	  return compose;
	}

	function rotationIdentity(lambda, phi) {
	  return [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	}

	rotationIdentity.invert = rotationIdentity;

	function rotateRadians(deltaLambda, deltaPhi, deltaGamma) {
	  return (deltaLambda %= tau) ? (deltaPhi || deltaGamma ? compose(rotationLambda(deltaLambda), rotationPhiGamma(deltaPhi, deltaGamma))
	    : rotationLambda(deltaLambda))
	    : (deltaPhi || deltaGamma ? rotationPhiGamma(deltaPhi, deltaGamma)
	    : rotationIdentity);
	}

	function forwardRotationLambda(deltaLambda) {
	  return function(lambda, phi) {
	    return lambda += deltaLambda, [lambda > pi ? lambda - tau : lambda < -pi ? lambda + tau : lambda, phi];
	  };
	}

	function rotationLambda(deltaLambda) {
	  var rotation = forwardRotationLambda(deltaLambda);
	  rotation.invert = forwardRotationLambda(-deltaLambda);
	  return rotation;
	}

	function rotationPhiGamma(deltaPhi, deltaGamma) {
	  var cosDeltaPhi = cos(deltaPhi),
	      sinDeltaPhi = sin(deltaPhi),
	      cosDeltaGamma = cos(deltaGamma),
	      sinDeltaGamma = sin(deltaGamma);

	  function rotation(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaPhi + x * sinDeltaPhi;
	    return [
	      atan2(y * cosDeltaGamma - k * sinDeltaGamma, x * cosDeltaPhi - z * sinDeltaPhi),
	      asin(k * cosDeltaGamma + y * sinDeltaGamma)
	    ];
	  }

	  rotation.invert = function(lambda, phi) {
	    var cosPhi = cos(phi),
	        x = cos(lambda) * cosPhi,
	        y = sin(lambda) * cosPhi,
	        z = sin(phi),
	        k = z * cosDeltaGamma - y * sinDeltaGamma;
	    return [
	      atan2(y * cosDeltaGamma + z * sinDeltaGamma, x * cosDeltaPhi + k * sinDeltaPhi),
	      asin(k * cosDeltaPhi - x * sinDeltaPhi)
	    ];
	  };

	  return rotation;
	}

	function rotation(rotate) {
	  rotate = rotateRadians(rotate[0] * radians, rotate[1] * radians, rotate.length > 2 ? rotate[2] * radians : 0);

	  function forward(coordinates) {
	    coordinates = rotate(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  }

	  forward.invert = function(coordinates) {
	    coordinates = rotate.invert(coordinates[0] * radians, coordinates[1] * radians);
	    return coordinates[0] *= degrees, coordinates[1] *= degrees, coordinates;
	  };

	  return forward;
	}

	// Generates a circle centered at [0°, 0°], with a given radius and precision.
	function circleStream(stream, radius, delta, direction, t0, t1) {
	  if (!delta) return;
	  var cosRadius = cos(radius),
	      sinRadius = sin(radius),
	      step = direction * delta;
	  if (t0 == null) {
	    t0 = radius + direction * tau;
	    t1 = radius - step / 2;
	  } else {
	    t0 = circleRadius(cosRadius, t0);
	    t1 = circleRadius(cosRadius, t1);
	    if (direction > 0 ? t0 < t1 : t0 > t1) t0 += direction * tau;
	  }
	  for (var point, t = t0; direction > 0 ? t > t1 : t < t1; t -= step) {
	    point = spherical([cosRadius, -sinRadius * cos(t), -sinRadius * sin(t)]);
	    stream.point(point[0], point[1]);
	  }
	}

	// Returns the signed angle of a cartesian point relative to [cosRadius, 0, 0].
	function circleRadius(cosRadius, point) {
	  point = cartesian(point), point[0] -= cosRadius;
	  cartesianNormalizeInPlace(point);
	  var radius = acos(-point[1]);
	  return ((-point[2] < 0 ? -radius : radius) + tau - epsilon) % tau;
	}

	function circle() {
	  var center = constant([0, 0]),
	      radius = constant(90),
	      precision = constant(6),
	      ring,
	      rotate,
	      stream = {point: point};

	  function point(x, y) {
	    ring.push(x = rotate(x, y));
	    x[0] *= degrees, x[1] *= degrees;
	  }

	  function circle() {
	    var c = center.apply(this, arguments),
	        r = radius.apply(this, arguments) * radians,
	        p = precision.apply(this, arguments) * radians;
	    ring = [];
	    rotate = rotateRadians(-c[0] * radians, -c[1] * radians, 0).invert;
	    circleStream(stream, r, p, 1);
	    c = {type: "Polygon", coordinates: [ring]};
	    ring = rotate = null;
	    return c;
	  }

	  circle.center = function(_) {
	    return arguments.length ? (center = typeof _ === "function" ? _ : constant([+_[0], +_[1]]), circle) : center;
	  };

	  circle.radius = function(_) {
	    return arguments.length ? (radius = typeof _ === "function" ? _ : constant(+_), circle) : radius;
	  };

	  circle.precision = function(_) {
	    return arguments.length ? (precision = typeof _ === "function" ? _ : constant(+_), circle) : precision;
	  };

	  return circle;
	}

	function clipBuffer() {
	  var lines = [],
	      line;
	  return {
	    point: function(x, y) {
	      line.push([x, y]);
	    },
	    lineStart: function() {
	      lines.push(line = []);
	    },
	    lineEnd: noop,
	    rejoin: function() {
	      if (lines.length > 1) lines.push(lines.pop().concat(lines.shift()));
	    },
	    result: function() {
	      var result = lines;
	      lines = [];
	      line = null;
	      return result;
	    }
	  };
	}

	function pointEqual(a, b) {
	  return abs(a[0] - b[0]) < epsilon && abs(a[1] - b[1]) < epsilon;
	}

	function Intersection(point, points, other, entry) {
	  this.x = point;
	  this.z = points;
	  this.o = other; // another intersection
	  this.e = entry; // is an entry?
	  this.v = false; // visited
	  this.n = this.p = null; // next & previous
	}

	// A generalized polygon clipping algorithm: given a polygon that has been cut
	// into its visible line segments, and rejoins the segments by interpolating
	// along the clip edge.
	function clipRejoin(segments, compareIntersection, startInside, interpolate, stream) {
	  var subject = [],
	      clip = [],
	      i,
	      n;

	  segments.forEach(function(segment) {
	    if ((n = segment.length - 1) <= 0) return;
	    var n, p0 = segment[0], p1 = segment[n], x;

	    // If the first and last points of a segment are coincident, then treat as a
	    // closed ring. TODO if all rings are closed, then the winding order of the
	    // exterior ring should be checked.
	    if (pointEqual(p0, p1)) {
	      stream.lineStart();
	      for (i = 0; i < n; ++i) stream.point((p0 = segment[i])[0], p0[1]);
	      stream.lineEnd();
	      return;
	    }

	    subject.push(x = new Intersection(p0, segment, null, true));
	    clip.push(x.o = new Intersection(p0, null, x, false));
	    subject.push(x = new Intersection(p1, segment, null, false));
	    clip.push(x.o = new Intersection(p1, null, x, true));
	  });

	  if (!subject.length) return;

	  clip.sort(compareIntersection);
	  link(subject);
	  link(clip);

	  for (i = 0, n = clip.length; i < n; ++i) {
	    clip[i].e = startInside = !startInside;
	  }

	  var start = subject[0],
	      points,
	      point;

	  while (1) {
	    // Find first unvisited intersection.
	    var current = start,
	        isSubject = true;
	    while (current.v) if ((current = current.n) === start) return;
	    points = current.z;
	    stream.lineStart();
	    do {
	      current.v = current.o.v = true;
	      if (current.e) {
	        if (isSubject) {
	          for (i = 0, n = points.length; i < n; ++i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.n.x, 1, stream);
	        }
	        current = current.n;
	      } else {
	        if (isSubject) {
	          points = current.p.z;
	          for (i = points.length - 1; i >= 0; --i) stream.point((point = points[i])[0], point[1]);
	        } else {
	          interpolate(current.x, current.p.x, -1, stream);
	        }
	        current = current.p;
	      }
	      current = current.o;
	      points = current.z;
	      isSubject = !isSubject;
	    } while (!current.v);
	    stream.lineEnd();
	  }
	}

	function link(array) {
	  if (!(n = array.length)) return;
	  var n,
	      i = 0,
	      a = array[0],
	      b;
	  while (++i < n) {
	    a.n = b = array[i];
	    b.p = a;
	    a = b;
	  }
	  a.n = b = array[0];
	  b.p = a;
	}

	var sum = adder();

	function polygonContains(polygon, point) {
	  var lambda = point[0],
	      phi = point[1],
	      sinPhi = sin(phi),
	      normal = [sin(lambda), -cos(lambda), 0],
	      angle = 0,
	      winding = 0;

	  sum.reset();

	  if (sinPhi === 1) phi = halfPi + epsilon;
	  else if (sinPhi === -1) phi = -halfPi - epsilon;

	  for (var i = 0, n = polygon.length; i < n; ++i) {
	    if (!(m = (ring = polygon[i]).length)) continue;
	    var ring,
	        m,
	        point0 = ring[m - 1],
	        lambda0 = point0[0],
	        phi0 = point0[1] / 2 + quarterPi,
	        sinPhi0 = sin(phi0),
	        cosPhi0 = cos(phi0);

	    for (var j = 0; j < m; ++j, lambda0 = lambda1, sinPhi0 = sinPhi1, cosPhi0 = cosPhi1, point0 = point1) {
	      var point1 = ring[j],
	          lambda1 = point1[0],
	          phi1 = point1[1] / 2 + quarterPi,
	          sinPhi1 = sin(phi1),
	          cosPhi1 = cos(phi1),
	          delta = lambda1 - lambda0,
	          sign$$1 = delta >= 0 ? 1 : -1,
	          absDelta = sign$$1 * delta,
	          antimeridian = absDelta > pi,
	          k = sinPhi0 * sinPhi1;

	      sum.add(atan2(k * sign$$1 * sin(absDelta), cosPhi0 * cosPhi1 + k * cos(absDelta)));
	      angle += antimeridian ? delta + sign$$1 * tau : delta;

	      // Are the longitudes either side of the point’s meridian (lambda),
	      // and are the latitudes smaller than the parallel (phi)?
	      if (antimeridian ^ lambda0 >= lambda ^ lambda1 >= lambda) {
	        var arc = cartesianCross(cartesian(point0), cartesian(point1));
	        cartesianNormalizeInPlace(arc);
	        var intersection = cartesianCross(normal, arc);
	        cartesianNormalizeInPlace(intersection);
	        var phiArc = (antimeridian ^ delta >= 0 ? -1 : 1) * asin(intersection[2]);
	        if (phi > phiArc || phi === phiArc && (arc[0] || arc[1])) {
	          winding += antimeridian ^ delta >= 0 ? 1 : -1;
	        }
	      }
	    }
	  }

	  // First, determine whether the South pole is inside or outside:
	  //
	  // It is inside if:
	  // * the polygon winds around it in a clockwise direction.
	  // * the polygon does not (cumulatively) wind around it, but has a negative
	  //   (counter-clockwise) area.
	  //
	  // Second, count the (signed) number of times a segment crosses a lambda
	  // from the point to the South pole.  If it is zero, then the point is the
	  // same side as the South pole.

	  return (angle < -epsilon || angle < epsilon && sum < -epsilon) ^ (winding & 1);
	}

	function clip(pointVisible, clipLine, interpolate, start) {
	  return function(sink) {
	    var line = clipLine(sink),
	        ringBuffer = clipBuffer(),
	        ringSink = clipLine(ringBuffer),
	        polygonStarted = false,
	        polygon,
	        segments,
	        ring;

	    var clip = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() {
	        clip.point = pointRing;
	        clip.lineStart = ringStart;
	        clip.lineEnd = ringEnd;
	        segments = [];
	        polygon = [];
	      },
	      polygonEnd: function() {
	        clip.point = point;
	        clip.lineStart = lineStart;
	        clip.lineEnd = lineEnd;
	        segments = d3Array.merge(segments);
	        var startInside = polygonContains(polygon, start);
	        if (segments.length) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          clipRejoin(segments, compareIntersection, startInside, interpolate, sink);
	        } else if (startInside) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          interpolate(null, null, 1, sink);
	          sink.lineEnd();
	        }
	        if (polygonStarted) sink.polygonEnd(), polygonStarted = false;
	        segments = polygon = null;
	      },
	      sphere: function() {
	        sink.polygonStart();
	        sink.lineStart();
	        interpolate(null, null, 1, sink);
	        sink.lineEnd();
	        sink.polygonEnd();
	      }
	    };

	    function point(lambda, phi) {
	      if (pointVisible(lambda, phi)) sink.point(lambda, phi);
	    }

	    function pointLine(lambda, phi) {
	      line.point(lambda, phi);
	    }

	    function lineStart() {
	      clip.point = pointLine;
	      line.lineStart();
	    }

	    function lineEnd() {
	      clip.point = point;
	      line.lineEnd();
	    }

	    function pointRing(lambda, phi) {
	      ring.push([lambda, phi]);
	      ringSink.point(lambda, phi);
	    }

	    function ringStart() {
	      ringSink.lineStart();
	      ring = [];
	    }

	    function ringEnd() {
	      pointRing(ring[0][0], ring[0][1]);
	      ringSink.lineEnd();

	      var clean = ringSink.clean(),
	          ringSegments = ringBuffer.result(),
	          i, n = ringSegments.length, m,
	          segment,
	          point;

	      ring.pop();
	      polygon.push(ring);
	      ring = null;

	      if (!n) return;

	      // No intersections.
	      if (clean & 1) {
	        segment = ringSegments[0];
	        if ((m = segment.length - 1) > 0) {
	          if (!polygonStarted) sink.polygonStart(), polygonStarted = true;
	          sink.lineStart();
	          for (i = 0; i < m; ++i) sink.point((point = segment[i])[0], point[1]);
	          sink.lineEnd();
	        }
	        return;
	      }

	      // Rejoin connected segments.
	      // TODO reuse ringBuffer.rejoin()?
	      if (n > 1 && clean & 2) ringSegments.push(ringSegments.pop().concat(ringSegments.shift()));

	      segments.push(ringSegments.filter(validSegment));
	    }

	    return clip;
	  };
	}

	function validSegment(segment) {
	  return segment.length > 1;
	}

	// Intersections are sorted along the clip edge. For both antimeridian cutting
	// and circle clipping, the same comparison is used.
	function compareIntersection(a, b) {
	  return ((a = a.x)[0] < 0 ? a[1] - halfPi - epsilon : halfPi - a[1])
	       - ((b = b.x)[0] < 0 ? b[1] - halfPi - epsilon : halfPi - b[1]);
	}

	var clipAntimeridian = clip(
	  function() { return true; },
	  clipAntimeridianLine,
	  clipAntimeridianInterpolate,
	  [-pi, -halfPi]
	);

	// Takes a line and cuts into visible segments. Return values: 0 - there were
	// intersections or the line was empty; 1 - no intersections; 2 - there were
	// intersections, and the first and last segments should be rejoined.
	function clipAntimeridianLine(stream) {
	  var lambda0 = NaN,
	      phi0 = NaN,
	      sign0 = NaN,
	      clean; // no intersections

	  return {
	    lineStart: function() {
	      stream.lineStart();
	      clean = 1;
	    },
	    point: function(lambda1, phi1) {
	      var sign1 = lambda1 > 0 ? pi : -pi,
	          delta = abs(lambda1 - lambda0);
	      if (abs(delta - pi) < epsilon) { // line crosses a pole
	        stream.point(lambda0, phi0 = (phi0 + phi1) / 2 > 0 ? halfPi : -halfPi);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        stream.point(lambda1, phi0);
	        clean = 0;
	      } else if (sign0 !== sign1 && delta >= pi) { // line crosses antimeridian
	        if (abs(lambda0 - sign0) < epsilon) lambda0 -= sign0 * epsilon; // handle degeneracies
	        if (abs(lambda1 - sign1) < epsilon) lambda1 -= sign1 * epsilon;
	        phi0 = clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1);
	        stream.point(sign0, phi0);
	        stream.lineEnd();
	        stream.lineStart();
	        stream.point(sign1, phi0);
	        clean = 0;
	      }
	      stream.point(lambda0 = lambda1, phi0 = phi1);
	      sign0 = sign1;
	    },
	    lineEnd: function() {
	      stream.lineEnd();
	      lambda0 = phi0 = NaN;
	    },
	    clean: function() {
	      return 2 - clean; // if intersections, rejoin first and last segments
	    }
	  };
	}

	function clipAntimeridianIntersect(lambda0, phi0, lambda1, phi1) {
	  var cosPhi0,
	      cosPhi1,
	      sinLambda0Lambda1 = sin(lambda0 - lambda1);
	  return abs(sinLambda0Lambda1) > epsilon
	      ? atan((sin(phi0) * (cosPhi1 = cos(phi1)) * sin(lambda1)
	          - sin(phi1) * (cosPhi0 = cos(phi0)) * sin(lambda0))
	          / (cosPhi0 * cosPhi1 * sinLambda0Lambda1))
	      : (phi0 + phi1) / 2;
	}

	function clipAntimeridianInterpolate(from, to, direction, stream) {
	  var phi;
	  if (from == null) {
	    phi = direction * halfPi;
	    stream.point(-pi, phi);
	    stream.point(0, phi);
	    stream.point(pi, phi);
	    stream.point(pi, 0);
	    stream.point(pi, -phi);
	    stream.point(0, -phi);
	    stream.point(-pi, -phi);
	    stream.point(-pi, 0);
	    stream.point(-pi, phi);
	  } else if (abs(from[0] - to[0]) > epsilon) {
	    var lambda = from[0] < to[0] ? pi : -pi;
	    phi = direction * lambda / 2;
	    stream.point(-lambda, phi);
	    stream.point(0, phi);
	    stream.point(lambda, phi);
	  } else {
	    stream.point(to[0], to[1]);
	  }
	}

	function clipCircle(radius) {
	  var cr = cos(radius),
	      delta = 6 * radians,
	      smallRadius = cr > 0,
	      notHemisphere = abs(cr) > epsilon; // TODO optimise for this common case

	  function interpolate(from, to, direction, stream) {
	    circleStream(stream, radius, delta, direction, from, to);
	  }

	  function visible(lambda, phi) {
	    return cos(lambda) * cos(phi) > cr;
	  }

	  // Takes a line and cuts into visible segments. Return values used for polygon
	  // clipping: 0 - there were intersections or the line was empty; 1 - no
	  // intersections 2 - there were intersections, and the first and last segments
	  // should be rejoined.
	  function clipLine(stream) {
	    var point0, // previous point
	        c0, // code for previous point
	        v0, // visibility of previous point
	        v00, // visibility of first point
	        clean; // no intersections
	    return {
	      lineStart: function() {
	        v00 = v0 = false;
	        clean = 1;
	      },
	      point: function(lambda, phi) {
	        var point1 = [lambda, phi],
	            point2,
	            v = visible(lambda, phi),
	            c = smallRadius
	              ? v ? 0 : code(lambda, phi)
	              : v ? code(lambda + (lambda < 0 ? pi : -pi), phi) : 0;
	        if (!point0 && (v00 = v0 = v)) stream.lineStart();
	        // Handle degeneracies.
	        // TODO ignore if not clipping polygons.
	        if (v !== v0) {
	          point2 = intersect(point0, point1);
	          if (!point2 || pointEqual(point0, point2) || pointEqual(point1, point2)) {
	            point1[0] += epsilon;
	            point1[1] += epsilon;
	            v = visible(point1[0], point1[1]);
	          }
	        }
	        if (v !== v0) {
	          clean = 0;
	          if (v) {
	            // outside going in
	            stream.lineStart();
	            point2 = intersect(point1, point0);
	            stream.point(point2[0], point2[1]);
	          } else {
	            // inside going out
	            point2 = intersect(point0, point1);
	            stream.point(point2[0], point2[1]);
	            stream.lineEnd();
	          }
	          point0 = point2;
	        } else if (notHemisphere && point0 && smallRadius ^ v) {
	          var t;
	          // If the codes for two points are different, or are both zero,
	          // and there this segment intersects with the small circle.
	          if (!(c & c0) && (t = intersect(point1, point0, true))) {
	            clean = 0;
	            if (smallRadius) {
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	            } else {
	              stream.point(t[1][0], t[1][1]);
	              stream.lineEnd();
	              stream.lineStart();
	              stream.point(t[0][0], t[0][1]);
	            }
	          }
	        }
	        if (v && (!point0 || !pointEqual(point0, point1))) {
	          stream.point(point1[0], point1[1]);
	        }
	        point0 = point1, v0 = v, c0 = c;
	      },
	      lineEnd: function() {
	        if (v0) stream.lineEnd();
	        point0 = null;
	      },
	      // Rejoin first and last segments if there were intersections and the first
	      // and last points were visible.
	      clean: function() {
	        return clean | ((v00 && v0) << 1);
	      }
	    };
	  }

	  // Intersects the great circle between a and b with the clip circle.
	  function intersect(a, b, two) {
	    var pa = cartesian(a),
	        pb = cartesian(b);

	    // We have two planes, n1.p = d1 and n2.p = d2.
	    // Find intersection line p(t) = c1 n1 + c2 n2 + t (n1 ⨯ n2).
	    var n1 = [1, 0, 0], // normal
	        n2 = cartesianCross(pa, pb),
	        n2n2 = cartesianDot(n2, n2),
	        n1n2 = n2[0], // cartesianDot(n1, n2),
	        determinant = n2n2 - n1n2 * n1n2;

	    // Two polar points.
	    if (!determinant) return !two && a;

	    var c1 =  cr * n2n2 / determinant,
	        c2 = -cr * n1n2 / determinant,
	        n1xn2 = cartesianCross(n1, n2),
	        A = cartesianScale(n1, c1),
	        B = cartesianScale(n2, c2);
	    cartesianAddInPlace(A, B);

	    // Solve |p(t)|^2 = 1.
	    var u = n1xn2,
	        w = cartesianDot(A, u),
	        uu = cartesianDot(u, u),
	        t2 = w * w - uu * (cartesianDot(A, A) - 1);

	    if (t2 < 0) return;

	    var t = sqrt(t2),
	        q = cartesianScale(u, (-w - t) / uu);
	    cartesianAddInPlace(q, A);
	    q = spherical(q);

	    if (!two) return q;

	    // Two intersection points.
	    var lambda0 = a[0],
	        lambda1 = b[0],
	        phi0 = a[1],
	        phi1 = b[1],
	        z;

	    if (lambda1 < lambda0) z = lambda0, lambda0 = lambda1, lambda1 = z;

	    var delta = lambda1 - lambda0,
	        polar = abs(delta - pi) < epsilon,
	        meridian = polar || delta < epsilon;

	    if (!polar && phi1 < phi0) z = phi0, phi0 = phi1, phi1 = z;

	    // Check that the first point is between a and b.
	    if (meridian
	        ? polar
	          ? phi0 + phi1 > 0 ^ q[1] < (abs(q[0] - lambda0) < epsilon ? phi0 : phi1)
	          : phi0 <= q[1] && q[1] <= phi1
	        : delta > pi ^ (lambda0 <= q[0] && q[0] <= lambda1)) {
	      var q1 = cartesianScale(u, (-w + t) / uu);
	      cartesianAddInPlace(q1, A);
	      return [q, spherical(q1)];
	    }
	  }

	  // Generates a 4-bit vector representing the location of a point relative to
	  // the small circle's bounding box.
	  function code(lambda, phi) {
	    var r = smallRadius ? radius : pi - radius,
	        code = 0;
	    if (lambda < -r) code |= 1; // left
	    else if (lambda > r) code |= 2; // right
	    if (phi < -r) code |= 4; // below
	    else if (phi > r) code |= 8; // above
	    return code;
	  }

	  return clip(visible, clipLine, interpolate, smallRadius ? [0, -radius] : [-pi, radius - pi]);
	}

	function clipLine(a, b, x0, y0, x1, y1) {
	  var ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (t0 > 0) a[0] = ax + t0 * dx, a[1] = ay + t0 * dy;
	  if (t1 < 1) b[0] = ax + t1 * dx, b[1] = ay + t1 * dy;
	  return true;
	}

	var clipMax = 1e9;
	var clipMin = -clipMax;

	// TODO Use d3-polygon’s polygonContains here for the ring check?
	// TODO Eliminate duplicate buffering in clipBuffer and polygon.push?

	function clipRectangle(x0, y0, x1, y1) {

	  function visible(x, y) {
	    return x0 <= x && x <= x1 && y0 <= y && y <= y1;
	  }

	  function interpolate(from, to, direction, stream) {
	    var a = 0, a1 = 0;
	    if (from == null
	        || (a = corner(from, direction)) !== (a1 = corner(to, direction))
	        || comparePoint(from, to) < 0 ^ direction > 0) {
	      do stream.point(a === 0 || a === 3 ? x0 : x1, a > 1 ? y1 : y0);
	      while ((a = (a + direction + 4) % 4) !== a1);
	    } else {
	      stream.point(to[0], to[1]);
	    }
	  }

	  function corner(p, direction) {
	    return abs(p[0] - x0) < epsilon ? direction > 0 ? 0 : 3
	        : abs(p[0] - x1) < epsilon ? direction > 0 ? 2 : 1
	        : abs(p[1] - y0) < epsilon ? direction > 0 ? 1 : 0
	        : direction > 0 ? 3 : 2; // abs(p[1] - y1) < epsilon
	  }

	  function compareIntersection(a, b) {
	    return comparePoint(a.x, b.x);
	  }

	  function comparePoint(a, b) {
	    var ca = corner(a, 1),
	        cb = corner(b, 1);
	    return ca !== cb ? ca - cb
	        : ca === 0 ? b[1] - a[1]
	        : ca === 1 ? a[0] - b[0]
	        : ca === 2 ? a[1] - b[1]
	        : b[0] - a[0];
	  }

	  return function(stream) {
	    var activeStream = stream,
	        bufferStream = clipBuffer(),
	        segments,
	        polygon,
	        ring,
	        x__, y__, v__, // first point
	        x_, y_, v_, // previous point
	        first,
	        clean;

	    var clipStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: polygonStart,
	      polygonEnd: polygonEnd
	    };

	    function point(x, y) {
	      if (visible(x, y)) activeStream.point(x, y);
	    }

	    function polygonInside() {
	      var winding = 0;

	      for (var i = 0, n = polygon.length; i < n; ++i) {
	        for (var ring = polygon[i], j = 1, m = ring.length, point = ring[0], a0, a1, b0 = point[0], b1 = point[1]; j < m; ++j) {
	          a0 = b0, a1 = b1, point = ring[j], b0 = point[0], b1 = point[1];
	          if (a1 <= y1) { if (b1 > y1 && (b0 - a0) * (y1 - a1) > (b1 - a1) * (x0 - a0)) ++winding; }
	          else { if (b1 <= y1 && (b0 - a0) * (y1 - a1) < (b1 - a1) * (x0 - a0)) --winding; }
	        }
	      }

	      return winding;
	    }

	    // Buffer geometry within a polygon and then clip it en masse.
	    function polygonStart() {
	      activeStream = bufferStream, segments = [], polygon = [], clean = true;
	    }

	    function polygonEnd() {
	      var startInside = polygonInside(),
	          cleanInside = clean && startInside,
	          visible = (segments = d3Array.merge(segments)).length;
	      if (cleanInside || visible) {
	        stream.polygonStart();
	        if (cleanInside) {
	          stream.lineStart();
	          interpolate(null, null, 1, stream);
	          stream.lineEnd();
	        }
	        if (visible) {
	          clipRejoin(segments, compareIntersection, startInside, interpolate, stream);
	        }
	        stream.polygonEnd();
	      }
	      activeStream = stream, segments = polygon = ring = null;
	    }

	    function lineStart() {
	      clipStream.point = linePoint;
	      if (polygon) polygon.push(ring = []);
	      first = true;
	      v_ = false;
	      x_ = y_ = NaN;
	    }

	    // TODO rather than special-case polygons, simply handle them separately.
	    // Ideally, coincident intersection points should be jittered to avoid
	    // clipping issues.
	    function lineEnd() {
	      if (segments) {
	        linePoint(x__, y__);
	        if (v__ && v_) bufferStream.rejoin();
	        segments.push(bufferStream.result());
	      }
	      clipStream.point = point;
	      if (v_) activeStream.lineEnd();
	    }

	    function linePoint(x, y) {
	      var v = visible(x, y);
	      if (polygon) ring.push([x, y]);
	      if (first) {
	        x__ = x, y__ = y, v__ = v;
	        first = false;
	        if (v) {
	          activeStream.lineStart();
	          activeStream.point(x, y);
	        }
	      } else {
	        if (v && v_) activeStream.point(x, y);
	        else {
	          var a = [x_ = Math.max(clipMin, Math.min(clipMax, x_)), y_ = Math.max(clipMin, Math.min(clipMax, y_))],
	              b = [x = Math.max(clipMin, Math.min(clipMax, x)), y = Math.max(clipMin, Math.min(clipMax, y))];
	          if (clipLine(a, b, x0, y0, x1, y1)) {
	            if (!v_) {
	              activeStream.lineStart();
	              activeStream.point(a[0], a[1]);
	            }
	            activeStream.point(b[0], b[1]);
	            if (!v) activeStream.lineEnd();
	            clean = false;
	          } else if (v) {
	            activeStream.lineStart();
	            activeStream.point(x, y);
	            clean = false;
	          }
	        }
	      }
	      x_ = x, y_ = y, v_ = v;
	    }

	    return clipStream;
	  };
	}

	function extent() {
	  var x0 = 0,
	      y0 = 0,
	      x1 = 960,
	      y1 = 500,
	      cache,
	      cacheStream,
	      clip;

	  return clip = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = clipRectangle(x0, y0, x1, y1)(cacheStream = stream);
	    },
	    extent: function(_) {
	      return arguments.length ? (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1], cache = cacheStream = null, clip) : [[x0, y0], [x1, y1]];
	    }
	  };
	}

	var lengthSum = adder();
	var lambda0$2;
	var sinPhi0$1;
	var cosPhi0$1;

	var lengthStream = {
	  sphere: noop,
	  point: noop,
	  lineStart: lengthLineStart,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop
	};

	function lengthLineStart() {
	  lengthStream.point = lengthPointFirst;
	  lengthStream.lineEnd = lengthLineEnd;
	}

	function lengthLineEnd() {
	  lengthStream.point = lengthStream.lineEnd = noop;
	}

	function lengthPointFirst(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  lambda0$2 = lambda, sinPhi0$1 = sin(phi), cosPhi0$1 = cos(phi);
	  lengthStream.point = lengthPoint;
	}

	function lengthPoint(lambda, phi) {
	  lambda *= radians, phi *= radians;
	  var sinPhi = sin(phi),
	      cosPhi = cos(phi),
	      delta = abs(lambda - lambda0$2),
	      cosDelta = cos(delta),
	      sinDelta = sin(delta),
	      x = cosPhi * sinDelta,
	      y = cosPhi0$1 * sinPhi - sinPhi0$1 * cosPhi * cosDelta,
	      z = sinPhi0$1 * sinPhi + cosPhi0$1 * cosPhi * cosDelta;
	  lengthSum.add(atan2(sqrt(x * x + y * y), z));
	  lambda0$2 = lambda, sinPhi0$1 = sinPhi, cosPhi0$1 = cosPhi;
	}

	function length(object) {
	  lengthSum.reset();
	  geoStream(object, lengthStream);
	  return +lengthSum;
	}

	var coordinates = [null, null];
	var object = {type: "LineString", coordinates: coordinates};

	function distance(a, b) {
	  coordinates[0] = a;
	  coordinates[1] = b;
	  return length(object);
	}

	var containsObjectType = {
	  Feature: function(object, point) {
	    return containsGeometry(object.geometry, point);
	  },
	  FeatureCollection: function(object, point) {
	    var features = object.features, i = -1, n = features.length;
	    while (++i < n) if (containsGeometry(features[i].geometry, point)) return true;
	    return false;
	  }
	};

	var containsGeometryType = {
	  Sphere: function() {
	    return true;
	  },
	  Point: function(object, point) {
	    return containsPoint(object.coordinates, point);
	  },
	  MultiPoint: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPoint(coordinates[i], point)) return true;
	    return false;
	  },
	  LineString: function(object, point) {
	    return containsLine(object.coordinates, point);
	  },
	  MultiLineString: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsLine(coordinates[i], point)) return true;
	    return false;
	  },
	  Polygon: function(object, point) {
	    return containsPolygon(object.coordinates, point);
	  },
	  MultiPolygon: function(object, point) {
	    var coordinates = object.coordinates, i = -1, n = coordinates.length;
	    while (++i < n) if (containsPolygon(coordinates[i], point)) return true;
	    return false;
	  },
	  GeometryCollection: function(object, point) {
	    var geometries = object.geometries, i = -1, n = geometries.length;
	    while (++i < n) if (containsGeometry(geometries[i], point)) return true;
	    return false;
	  }
	};

	function containsGeometry(geometry, point) {
	  return geometry && containsGeometryType.hasOwnProperty(geometry.type)
	      ? containsGeometryType[geometry.type](geometry, point)
	      : false;
	}

	function containsPoint(coordinates, point) {
	  return distance(coordinates, point) === 0;
	}

	function containsLine(coordinates, point) {
	  var ab = distance(coordinates[0], coordinates[1]),
	      ao = distance(coordinates[0], point),
	      ob = distance(point, coordinates[1]);
	  return ao + ob <= ab + epsilon;
	}

	function containsPolygon(coordinates, point) {
	  return !!polygonContains(coordinates.map(ringRadians), pointRadians(point));
	}

	function ringRadians(ring) {
	  return ring = ring.map(pointRadians), ring.pop(), ring;
	}

	function pointRadians(point) {
	  return [point[0] * radians, point[1] * radians];
	}

	function contains(object, point) {
	  return (object && containsObjectType.hasOwnProperty(object.type)
	      ? containsObjectType[object.type]
	      : containsGeometry)(object, point);
	}

	function graticuleX(y0, y1, dy) {
	  var y = d3Array.range(y0, y1 - epsilon, dy).concat(y1);
	  return function(x) { return y.map(function(y) { return [x, y]; }); };
	}

	function graticuleY(x0, x1, dx) {
	  var x = d3Array.range(x0, x1 - epsilon, dx).concat(x1);
	  return function(y) { return x.map(function(x) { return [x, y]; }); };
	}

	function graticule() {
	  var x1, x0, X1, X0,
	      y1, y0, Y1, Y0,
	      dx = 10, dy = dx, DX = 90, DY = 360,
	      x, y, X, Y,
	      precision = 2.5;

	  function graticule() {
	    return {type: "MultiLineString", coordinates: lines()};
	  }

	  function lines() {
	    return d3Array.range(ceil(X0 / DX) * DX, X1, DX).map(X)
	        .concat(d3Array.range(ceil(Y0 / DY) * DY, Y1, DY).map(Y))
	        .concat(d3Array.range(ceil(x0 / dx) * dx, x1, dx).filter(function(x) { return abs(x % DX) > epsilon; }).map(x))
	        .concat(d3Array.range(ceil(y0 / dy) * dy, y1, dy).filter(function(y) { return abs(y % DY) > epsilon; }).map(y));
	  }

	  graticule.lines = function() {
	    return lines().map(function(coordinates) { return {type: "LineString", coordinates: coordinates}; });
	  };

	  graticule.outline = function() {
	    return {
	      type: "Polygon",
	      coordinates: [
	        X(X0).concat(
	        Y(Y1).slice(1),
	        X(X1).reverse().slice(1),
	        Y(Y0).reverse().slice(1))
	      ]
	    };
	  };

	  graticule.extent = function(_) {
	    if (!arguments.length) return graticule.extentMinor();
	    return graticule.extentMajor(_).extentMinor(_);
	  };

	  graticule.extentMajor = function(_) {
	    if (!arguments.length) return [[X0, Y0], [X1, Y1]];
	    X0 = +_[0][0], X1 = +_[1][0];
	    Y0 = +_[0][1], Y1 = +_[1][1];
	    if (X0 > X1) _ = X0, X0 = X1, X1 = _;
	    if (Y0 > Y1) _ = Y0, Y0 = Y1, Y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.extentMinor = function(_) {
	    if (!arguments.length) return [[x0, y0], [x1, y1]];
	    x0 = +_[0][0], x1 = +_[1][0];
	    y0 = +_[0][1], y1 = +_[1][1];
	    if (x0 > x1) _ = x0, x0 = x1, x1 = _;
	    if (y0 > y1) _ = y0, y0 = y1, y1 = _;
	    return graticule.precision(precision);
	  };

	  graticule.step = function(_) {
	    if (!arguments.length) return graticule.stepMinor();
	    return graticule.stepMajor(_).stepMinor(_);
	  };

	  graticule.stepMajor = function(_) {
	    if (!arguments.length) return [DX, DY];
	    DX = +_[0], DY = +_[1];
	    return graticule;
	  };

	  graticule.stepMinor = function(_) {
	    if (!arguments.length) return [dx, dy];
	    dx = +_[0], dy = +_[1];
	    return graticule;
	  };

	  graticule.precision = function(_) {
	    if (!arguments.length) return precision;
	    precision = +_;
	    x = graticuleX(y0, y1, 90);
	    y = graticuleY(x0, x1, precision);
	    X = graticuleX(Y0, Y1, 90);
	    Y = graticuleY(X0, X1, precision);
	    return graticule;
	  };

	  return graticule
	      .extentMajor([[-180, -90 + epsilon], [180, 90 - epsilon]])
	      .extentMinor([[-180, -80 - epsilon], [180, 80 + epsilon]]);
	}

	function graticule10() {
	  return graticule()();
	}

	function interpolate(a, b) {
	  var x0 = a[0] * radians,
	      y0 = a[1] * radians,
	      x1 = b[0] * radians,
	      y1 = b[1] * radians,
	      cy0 = cos(y0),
	      sy0 = sin(y0),
	      cy1 = cos(y1),
	      sy1 = sin(y1),
	      kx0 = cy0 * cos(x0),
	      ky0 = cy0 * sin(x0),
	      kx1 = cy1 * cos(x1),
	      ky1 = cy1 * sin(x1),
	      d = 2 * asin(sqrt(haversin(y1 - y0) + cy0 * cy1 * haversin(x1 - x0))),
	      k = sin(d);

	  var interpolate = d ? function(t) {
	    var B = sin(t *= d) / k,
	        A = sin(d - t) / k,
	        x = A * kx0 + B * kx1,
	        y = A * ky0 + B * ky1,
	        z = A * sy0 + B * sy1;
	    return [
	      atan2(y, x) * degrees,
	      atan2(z, sqrt(x * x + y * y)) * degrees
	    ];
	  } : function() {
	    return [x0 * degrees, y0 * degrees];
	  };

	  interpolate.distance = d;

	  return interpolate;
	}

	function identity(x) {
	  return x;
	}

	var areaSum$1 = adder();
	var areaRingSum$1 = adder();
	var x00;
	var y00;
	var x0$1;
	var y0$1;

	var areaStream$1 = {
	  point: noop,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: function() {
	    areaStream$1.lineStart = areaRingStart$1;
	    areaStream$1.lineEnd = areaRingEnd$1;
	  },
	  polygonEnd: function() {
	    areaStream$1.lineStart = areaStream$1.lineEnd = areaStream$1.point = noop;
	    areaSum$1.add(abs(areaRingSum$1));
	    areaRingSum$1.reset();
	  },
	  result: function() {
	    var area = areaSum$1 / 2;
	    areaSum$1.reset();
	    return area;
	  }
	};

	function areaRingStart$1() {
	  areaStream$1.point = areaPointFirst$1;
	}

	function areaPointFirst$1(x, y) {
	  areaStream$1.point = areaPoint$1;
	  x00 = x0$1 = x, y00 = y0$1 = y;
	}

	function areaPoint$1(x, y) {
	  areaRingSum$1.add(y0$1 * x - x0$1 * y);
	  x0$1 = x, y0$1 = y;
	}

	function areaRingEnd$1() {
	  areaPoint$1(x00, y00);
	}

	var x0$2 = Infinity;
	var y0$2 = x0$2;
	var x1 = -x0$2;
	var y1 = x1;

	var boundsStream$1 = {
	  point: boundsPoint$1,
	  lineStart: noop,
	  lineEnd: noop,
	  polygonStart: noop,
	  polygonEnd: noop,
	  result: function() {
	    var bounds = [[x0$2, y0$2], [x1, y1]];
	    x1 = y1 = -(y0$2 = x0$2 = Infinity);
	    return bounds;
	  }
	};

	function boundsPoint$1(x, y) {
	  if (x < x0$2) x0$2 = x;
	  if (x > x1) x1 = x;
	  if (y < y0$2) y0$2 = y;
	  if (y > y1) y1 = y;
	}

	// TODO Enforce positive area for exterior, negative area for interior?

	var X0$1 = 0;
	var Y0$1 = 0;
	var Z0$1 = 0;
	var X1$1 = 0;
	var Y1$1 = 0;
	var Z1$1 = 0;
	var X2$1 = 0;
	var Y2$1 = 0;
	var Z2$1 = 0;
	var x00$1;
	var y00$1;
	var x0$3;
	var y0$3;

	var centroidStream$1 = {
	  point: centroidPoint$1,
	  lineStart: centroidLineStart$1,
	  lineEnd: centroidLineEnd$1,
	  polygonStart: function() {
	    centroidStream$1.lineStart = centroidRingStart$1;
	    centroidStream$1.lineEnd = centroidRingEnd$1;
	  },
	  polygonEnd: function() {
	    centroidStream$1.point = centroidPoint$1;
	    centroidStream$1.lineStart = centroidLineStart$1;
	    centroidStream$1.lineEnd = centroidLineEnd$1;
	  },
	  result: function() {
	    var centroid = Z2$1 ? [X2$1 / Z2$1, Y2$1 / Z2$1]
	        : Z1$1 ? [X1$1 / Z1$1, Y1$1 / Z1$1]
	        : Z0$1 ? [X0$1 / Z0$1, Y0$1 / Z0$1]
	        : [NaN, NaN];
	    X0$1 = Y0$1 = Z0$1 =
	    X1$1 = Y1$1 = Z1$1 =
	    X2$1 = Y2$1 = Z2$1 = 0;
	    return centroid;
	  }
	};

	function centroidPoint$1(x, y) {
	  X0$1 += x;
	  Y0$1 += y;
	  ++Z0$1;
	}

	function centroidLineStart$1() {
	  centroidStream$1.point = centroidPointFirstLine;
	}

	function centroidPointFirstLine(x, y) {
	  centroidStream$1.point = centroidPointLine;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidPointLine(x, y) {
	  var dx = x - x0$3, dy = y - y0$3, z = sqrt(dx * dx + dy * dy);
	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function centroidLineEnd$1() {
	  centroidStream$1.point = centroidPoint$1;
	}

	function centroidRingStart$1() {
	  centroidStream$1.point = centroidPointFirstRing;
	}

	function centroidRingEnd$1() {
	  centroidPointRing(x00$1, y00$1);
	}

	function centroidPointFirstRing(x, y) {
	  centroidStream$1.point = centroidPointRing;
	  centroidPoint$1(x00$1 = x0$3 = x, y00$1 = y0$3 = y);
	}

	function centroidPointRing(x, y) {
	  var dx = x - x0$3,
	      dy = y - y0$3,
	      z = sqrt(dx * dx + dy * dy);

	  X1$1 += z * (x0$3 + x) / 2;
	  Y1$1 += z * (y0$3 + y) / 2;
	  Z1$1 += z;

	  z = y0$3 * x - x0$3 * y;
	  X2$1 += z * (x0$3 + x);
	  Y2$1 += z * (y0$3 + y);
	  Z2$1 += z * 3;
	  centroidPoint$1(x0$3 = x, y0$3 = y);
	}

	function PathContext(context) {
	  this._context = context;
	}

	PathContext.prototype = {
	  _radius: 4.5,
	  pointRadius: function(_) {
	    return this._radius = _, this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._context.closePath();
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._context.moveTo(x, y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._context.lineTo(x, y);
	        break;
	      }
	      default: {
	        this._context.moveTo(x + this._radius, y);
	        this._context.arc(x, y, this._radius, 0, tau);
	        break;
	      }
	    }
	  },
	  result: noop
	};

	var lengthSum$1 = adder();
	var lengthRing;
	var x00$2;
	var y00$2;
	var x0$4;
	var y0$4;

	var lengthStream$1 = {
	  point: noop,
	  lineStart: function() {
	    lengthStream$1.point = lengthPointFirst$1;
	  },
	  lineEnd: function() {
	    if (lengthRing) lengthPoint$1(x00$2, y00$2);
	    lengthStream$1.point = noop;
	  },
	  polygonStart: function() {
	    lengthRing = true;
	  },
	  polygonEnd: function() {
	    lengthRing = null;
	  },
	  result: function() {
	    var length = +lengthSum$1;
	    lengthSum$1.reset();
	    return length;
	  }
	};

	function lengthPointFirst$1(x, y) {
	  lengthStream$1.point = lengthPoint$1;
	  x00$2 = x0$4 = x, y00$2 = y0$4 = y;
	}

	function lengthPoint$1(x, y) {
	  x0$4 -= x, y0$4 -= y;
	  lengthSum$1.add(sqrt(x0$4 * x0$4 + y0$4 * y0$4));
	  x0$4 = x, y0$4 = y;
	}

	function PathString() {
	  this._string = [];
	}

	PathString.prototype = {
	  _radius: 4.5,
	  _circle: circle$1(4.5),
	  pointRadius: function(_) {
	    if ((_ = +_) !== this._radius) this._radius = _, this._circle = null;
	    return this;
	  },
	  polygonStart: function() {
	    this._line = 0;
	  },
	  polygonEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line === 0) this._string.push("Z");
	    this._point = NaN;
	  },
	  point: function(x, y) {
	    switch (this._point) {
	      case 0: {
	        this._string.push("M", x, ",", y);
	        this._point = 1;
	        break;
	      }
	      case 1: {
	        this._string.push("L", x, ",", y);
	        break;
	      }
	      default: {
	        if (this._circle == null) this._circle = circle$1(this._radius);
	        this._string.push("M", x, ",", y, this._circle);
	        break;
	      }
	    }
	  },
	  result: function() {
	    if (this._string.length) {
	      var result = this._string.join("");
	      this._string = [];
	      return result;
	    } else {
	      return null;
	    }
	  }
	};

	function circle$1(radius) {
	  return "m0," + radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + -2 * radius
	      + "a" + radius + "," + radius + " 0 1,1 0," + 2 * radius
	      + "z";
	}

	function index(projection, context) {
	  var pointRadius = 4.5,
	      projectionStream,
	      contextStream;

	  function path(object) {
	    if (object) {
	      if (typeof pointRadius === "function") contextStream.pointRadius(+pointRadius.apply(this, arguments));
	      geoStream(object, projectionStream(contextStream));
	    }
	    return contextStream.result();
	  }

	  path.area = function(object) {
	    geoStream(object, projectionStream(areaStream$1));
	    return areaStream$1.result();
	  };

	  path.measure = function(object) {
	    geoStream(object, projectionStream(lengthStream$1));
	    return lengthStream$1.result();
	  };

	  path.bounds = function(object) {
	    geoStream(object, projectionStream(boundsStream$1));
	    return boundsStream$1.result();
	  };

	  path.centroid = function(object) {
	    geoStream(object, projectionStream(centroidStream$1));
	    return centroidStream$1.result();
	  };

	  path.projection = function(_) {
	    return arguments.length ? (projectionStream = _ == null ? (projection = null, identity) : (projection = _).stream, path) : projection;
	  };

	  path.context = function(_) {
	    if (!arguments.length) return context;
	    contextStream = _ == null ? (context = null, new PathString) : new PathContext(context = _);
	    if (typeof pointRadius !== "function") contextStream.pointRadius(pointRadius);
	    return path;
	  };

	  path.pointRadius = function(_) {
	    if (!arguments.length) return pointRadius;
	    pointRadius = typeof _ === "function" ? _ : (contextStream.pointRadius(+_), +_);
	    return path;
	  };

	  return path.projection(projection).context(context);
	}

	function transform(methods) {
	  return {
	    stream: transformer(methods)
	  };
	}

	function transformer(methods) {
	  return function(stream) {
	    var s = new TransformStream;
	    for (var key in methods) s[key] = methods[key];
	    s.stream = stream;
	    return s;
	  };
	}

	function TransformStream() {}

	TransformStream.prototype = {
	  constructor: TransformStream,
	  point: function(x, y) { this.stream.point(x, y); },
	  sphere: function() { this.stream.sphere(); },
	  lineStart: function() { this.stream.lineStart(); },
	  lineEnd: function() { this.stream.lineEnd(); },
	  polygonStart: function() { this.stream.polygonStart(); },
	  polygonEnd: function() { this.stream.polygonEnd(); }
	};

	function fit(projection, fitBounds, object) {
	  var clip = projection.clipExtent && projection.clipExtent();
	  projection.scale(150).translate([0, 0]);
	  if (clip != null) projection.clipExtent(null);
	  geoStream(object, projection.stream(boundsStream$1));
	  fitBounds(boundsStream$1.result());
	  if (clip != null) projection.clipExtent(clip);
	  return projection;
	}

	function fitExtent(projection, extent, object) {
	  return fit(projection, function(b) {
	    var w = extent[1][0] - extent[0][0],
	        h = extent[1][1] - extent[0][1],
	        k = Math.min(w / (b[1][0] - b[0][0]), h / (b[1][1] - b[0][1])),
	        x = +extent[0][0] + (w - k * (b[1][0] + b[0][0])) / 2,
	        y = +extent[0][1] + (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	function fitSize(projection, size, object) {
	  return fitExtent(projection, [[0, 0], size], object);
	}

	function fitWidth(projection, width, object) {
	  return fit(projection, function(b) {
	    var w = +width,
	        k = w / (b[1][0] - b[0][0]),
	        x = (w - k * (b[1][0] + b[0][0])) / 2,
	        y = -k * b[0][1];
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	function fitHeight(projection, height, object) {
	  return fit(projection, function(b) {
	    var h = +height,
	        k = h / (b[1][1] - b[0][1]),
	        x = -k * b[0][0],
	        y = (h - k * (b[1][1] + b[0][1])) / 2;
	    projection.scale(150 * k).translate([x, y]);
	  }, object);
	}

	var maxDepth = 16;
	var cosMinDistance = cos(30 * radians); // cos(minimum angular distance)

	function resample(project, delta2) {
	  return +delta2 ? resample$1(project, delta2) : resampleNone(project);
	}

	function resampleNone(project) {
	  return transformer({
	    point: function(x, y) {
	      x = project(x, y);
	      this.stream.point(x[0], x[1]);
	    }
	  });
	}

	function resample$1(project, delta2) {

	  function resampleLineTo(x0, y0, lambda0, a0, b0, c0, x1, y1, lambda1, a1, b1, c1, depth, stream) {
	    var dx = x1 - x0,
	        dy = y1 - y0,
	        d2 = dx * dx + dy * dy;
	    if (d2 > 4 * delta2 && depth--) {
	      var a = a0 + a1,
	          b = b0 + b1,
	          c = c0 + c1,
	          m = sqrt(a * a + b * b + c * c),
	          phi2 = asin(c /= m),
	          lambda2 = abs(abs(c) - 1) < epsilon || abs(lambda0 - lambda1) < epsilon ? (lambda0 + lambda1) / 2 : atan2(b, a),
	          p = project(lambda2, phi2),
	          x2 = p[0],
	          y2 = p[1],
	          dx2 = x2 - x0,
	          dy2 = y2 - y0,
	          dz = dy * dx2 - dx * dy2;
	      if (dz * dz / d2 > delta2 // perpendicular projected distance
	          || abs((dx * dx2 + dy * dy2) / d2 - 0.5) > 0.3 // midpoint close to an end
	          || a0 * a1 + b0 * b1 + c0 * c1 < cosMinDistance) { // angular distance
	        resampleLineTo(x0, y0, lambda0, a0, b0, c0, x2, y2, lambda2, a /= m, b /= m, c, depth, stream);
	        stream.point(x2, y2);
	        resampleLineTo(x2, y2, lambda2, a, b, c, x1, y1, lambda1, a1, b1, c1, depth, stream);
	      }
	    }
	  }
	  return function(stream) {
	    var lambda00, x00, y00, a00, b00, c00, // first point
	        lambda0, x0, y0, a0, b0, c0; // previous point

	    var resampleStream = {
	      point: point,
	      lineStart: lineStart,
	      lineEnd: lineEnd,
	      polygonStart: function() { stream.polygonStart(); resampleStream.lineStart = ringStart; },
	      polygonEnd: function() { stream.polygonEnd(); resampleStream.lineStart = lineStart; }
	    };

	    function point(x, y) {
	      x = project(x, y);
	      stream.point(x[0], x[1]);
	    }

	    function lineStart() {
	      x0 = NaN;
	      resampleStream.point = linePoint;
	      stream.lineStart();
	    }

	    function linePoint(lambda, phi) {
	      var c = cartesian([lambda, phi]), p = project(lambda, phi);
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x0 = p[0], y0 = p[1], lambda0 = lambda, a0 = c[0], b0 = c[1], c0 = c[2], maxDepth, stream);
	      stream.point(x0, y0);
	    }

	    function lineEnd() {
	      resampleStream.point = point;
	      stream.lineEnd();
	    }

	    function ringStart() {
	      lineStart();
	      resampleStream.point = ringPoint;
	      resampleStream.lineEnd = ringEnd;
	    }

	    function ringPoint(lambda, phi) {
	      linePoint(lambda00 = lambda, phi), x00 = x0, y00 = y0, a00 = a0, b00 = b0, c00 = c0;
	      resampleStream.point = linePoint;
	    }

	    function ringEnd() {
	      resampleLineTo(x0, y0, lambda0, a0, b0, c0, x00, y00, lambda00, a00, b00, c00, maxDepth, stream);
	      resampleStream.lineEnd = lineEnd;
	      lineEnd();
	    }

	    return resampleStream;
	  };
	}

	var transformRadians = transformer({
	  point: function(x, y) {
	    this.stream.point(x * radians, y * radians);
	  }
	});

	function transformRotate(rotate) {
	  return transformer({
	    point: function(x, y) {
	      var r = rotate(x, y);
	      return this.stream.point(r[0], r[1]);
	    }
	  });
	}

	function scaleTranslate(k, dx, dy) {
	  function transform$$1(x, y) {
	    return [dx + k * x, dy - k * y];
	  }
	  transform$$1.invert = function(x, y) {
	    return [(x - dx) / k, (dy - y) / k];
	  };
	  return transform$$1;
	}

	function scaleTranslateRotate(k, dx, dy, alpha) {
	  var cosAlpha = cos(alpha),
	      sinAlpha = sin(alpha),
	      a = cosAlpha * k,
	      b = sinAlpha * k,
	      ai = cosAlpha / k,
	      bi = sinAlpha / k,
	      ci = (sinAlpha * dy - cosAlpha * dx) / k,
	      fi = (sinAlpha * dx + cosAlpha * dy) / k;
	  function transform$$1(x, y) {
	    return [a * x - b * y + dx, dy - b * x - a * y];
	  }
	  transform$$1.invert = function(x, y) {
	    return [ai * x - bi * y + ci, fi - bi * x - ai * y];
	  };
	  return transform$$1;
	}

	function projection(project) {
	  return projectionMutator(function() { return project; })();
	}

	function projectionMutator(projectAt) {
	  var project,
	      k = 150, // scale
	      x = 480, y = 250, // translate
	      lambda = 0, phi = 0, // center
	      deltaLambda = 0, deltaPhi = 0, deltaGamma = 0, rotate, // pre-rotate
	      alpha = 0, // post-rotate
	      theta = null, preclip = clipAntimeridian, // pre-clip angle
	      x0 = null, y0, x1, y1, postclip = identity, // post-clip extent
	      delta2 = 0.5, // precision
	      projectResample,
	      projectTransform,
	      projectRotateTransform,
	      cache,
	      cacheStream;

	  function projection(point) {
	    return projectRotateTransform(point[0] * radians, point[1] * radians);
	  }

	  function invert(point) {
	    point = projectRotateTransform.invert(point[0], point[1]);
	    return point && [point[0] * degrees, point[1] * degrees];
	  }

	  projection.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = transformRadians(transformRotate(rotate)(preclip(projectResample(postclip(cacheStream = stream)))));
	  };

	  projection.preclip = function(_) {
	    return arguments.length ? (preclip = _, theta = undefined, reset()) : preclip;
	  };

	  projection.postclip = function(_) {
	    return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	  };

	  projection.clipAngle = function(_) {
	    return arguments.length ? (preclip = +_ ? clipCircle(theta = _ * radians) : (theta = null, clipAntimeridian), reset()) : theta * degrees;
	  };

	  projection.clipExtent = function(_) {
	    return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  projection.scale = function(_) {
	    return arguments.length ? (k = +_, recenter()) : k;
	  };

	  projection.translate = function(_) {
	    return arguments.length ? (x = +_[0], y = +_[1], recenter()) : [x, y];
	  };

	  projection.center = function(_) {
	    return arguments.length ? (lambda = _[0] % 360 * radians, phi = _[1] % 360 * radians, recenter()) : [lambda * degrees, phi * degrees];
	  };

	  projection.rotate = function(_) {
	    return arguments.length ? (deltaLambda = _[0] % 360 * radians, deltaPhi = _[1] % 360 * radians, deltaGamma = _.length > 2 ? _[2] % 360 * radians : 0, recenter()) : [deltaLambda * degrees, deltaPhi * degrees, deltaGamma * degrees];
	  };

	  projection.angle = function(_) {
	    return arguments.length ? (alpha = _ % 360 * radians, recenter()) : alpha * degrees;
	  };

	  projection.precision = function(_) {
	    return arguments.length ? (projectResample = resample(projectTransform, delta2 = _ * _), reset()) : sqrt(delta2);
	  };

	  projection.fitExtent = function(extent, object) {
	    return fitExtent(projection, extent, object);
	  };

	  projection.fitSize = function(size, object) {
	    return fitSize(projection, size, object);
	  };

	  projection.fitWidth = function(width, object) {
	    return fitWidth(projection, width, object);
	  };

	  projection.fitHeight = function(height, object) {
	    return fitHeight(projection, height, object);
	  };

	  function recenter() {
	    var center = scaleTranslateRotate(k, 0, 0, alpha).apply(null, project(lambda, phi)),
	        transform$$1 = (alpha ? scaleTranslateRotate : scaleTranslate)(k, x - center[0], y - center[1], alpha);
	    rotate = rotateRadians(deltaLambda, deltaPhi, deltaGamma);
	    projectTransform = compose(project, transform$$1);
	    projectRotateTransform = compose(rotate, projectTransform);
	    projectResample = resample(projectTransform, delta2);
	    return reset();
	  }

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return function() {
	    project = projectAt.apply(this, arguments);
	    projection.invert = project.invert && invert;
	    return recenter();
	  };
	}

	function conicProjection(projectAt) {
	  var phi0 = 0,
	      phi1 = pi / 3,
	      m = projectionMutator(projectAt),
	      p = m(phi0, phi1);

	  p.parallels = function(_) {
	    return arguments.length ? m(phi0 = _[0] * radians, phi1 = _[1] * radians) : [phi0 * degrees, phi1 * degrees];
	  };

	  return p;
	}

	function cylindricalEqualAreaRaw(phi0) {
	  var cosPhi0 = cos(phi0);

	  function forward(lambda, phi) {
	    return [lambda * cosPhi0, sin(phi) / cosPhi0];
	  }

	  forward.invert = function(x, y) {
	    return [x / cosPhi0, asin(y * cosPhi0)];
	  };

	  return forward;
	}

	function conicEqualAreaRaw(y0, y1) {
	  var sy0 = sin(y0), n = (sy0 + sin(y1)) / 2;

	  // Are the parallels symmetrical around the Equator?
	  if (abs(n) < epsilon) return cylindricalEqualAreaRaw(y0);

	  var c = 1 + sy0 * (2 * n - sy0), r0 = sqrt(c) / n;

	  function project(x, y) {
	    var r = sqrt(c - 2 * n * sin(y)) / n;
	    return [r * sin(x *= n), r0 - r * cos(x)];
	  }

	  project.invert = function(x, y) {
	    var r0y = r0 - y;
	    return [atan2(x, abs(r0y)) / n * sign(r0y), asin((c - (x * x + r0y * r0y) * n * n) / (2 * n))];
	  };

	  return project;
	}

	function conicEqualArea() {
	  return conicProjection(conicEqualAreaRaw)
	      .scale(155.424)
	      .center([0, 33.6442]);
	}

	function albers() {
	  return conicEqualArea()
	      .parallels([29.5, 45.5])
	      .scale(1070)
	      .translate([480, 250])
	      .rotate([96, 0])
	      .center([-0.6, 38.7]);
	}

	// The projections must have mutually exclusive clip regions on the sphere,
	// as this will avoid emitting interleaving lines and polygons.
	function multiplex(streams) {
	  var n = streams.length;
	  return {
	    point: function(x, y) { var i = -1; while (++i < n) streams[i].point(x, y); },
	    sphere: function() { var i = -1; while (++i < n) streams[i].sphere(); },
	    lineStart: function() { var i = -1; while (++i < n) streams[i].lineStart(); },
	    lineEnd: function() { var i = -1; while (++i < n) streams[i].lineEnd(); },
	    polygonStart: function() { var i = -1; while (++i < n) streams[i].polygonStart(); },
	    polygonEnd: function() { var i = -1; while (++i < n) streams[i].polygonEnd(); }
	  };
	}

	// A composite projection for the United States, configured by default for
	// 960×500. The projection also works quite well at 960×600 if you change the
	// scale to 1285 and adjust the translate accordingly. The set of standard
	// parallels for each region comes from USGS, which is published here:
	// http://egsc.usgs.gov/isb/pubs/MapProjections/projections.html#albers
	function albersUsa() {
	  var cache,
	      cacheStream,
	      lower48 = albers(), lower48Point,
	      alaska = conicEqualArea().rotate([154, 0]).center([-2, 58.5]).parallels([55, 65]), alaskaPoint, // EPSG:3338
	      hawaii = conicEqualArea().rotate([157, 0]).center([-3, 19.9]).parallels([8, 18]), hawaiiPoint, // ESRI:102007
	      point, pointStream = {point: function(x, y) { point = [x, y]; }};

	  function albersUsa(coordinates) {
	    var x = coordinates[0], y = coordinates[1];
	    return point = null, (lower48Point.point(x, y), point)
	        || (alaskaPoint.point(x, y), point)
	        || (hawaiiPoint.point(x, y), point);
	  }

	  albersUsa.invert = function(coordinates) {
	    var k = lower48.scale(),
	        t = lower48.translate(),
	        x = (coordinates[0] - t[0]) / k,
	        y = (coordinates[1] - t[1]) / k;
	    return (y >= 0.120 && y < 0.234 && x >= -0.425 && x < -0.214 ? alaska
	        : y >= 0.166 && y < 0.234 && x >= -0.214 && x < -0.115 ? hawaii
	        : lower48).invert(coordinates);
	  };

	  albersUsa.stream = function(stream) {
	    return cache && cacheStream === stream ? cache : cache = multiplex([lower48.stream(cacheStream = stream), alaska.stream(stream), hawaii.stream(stream)]);
	  };

	  albersUsa.precision = function(_) {
	    if (!arguments.length) return lower48.precision();
	    lower48.precision(_), alaska.precision(_), hawaii.precision(_);
	    return reset();
	  };

	  albersUsa.scale = function(_) {
	    if (!arguments.length) return lower48.scale();
	    lower48.scale(_), alaska.scale(_ * 0.35), hawaii.scale(_);
	    return albersUsa.translate(lower48.translate());
	  };

	  albersUsa.translate = function(_) {
	    if (!arguments.length) return lower48.translate();
	    var k = lower48.scale(), x = +_[0], y = +_[1];

	    lower48Point = lower48
	        .translate(_)
	        .clipExtent([[x - 0.455 * k, y - 0.238 * k], [x + 0.455 * k, y + 0.238 * k]])
	        .stream(pointStream);

	    alaskaPoint = alaska
	        .translate([x - 0.307 * k, y + 0.201 * k])
	        .clipExtent([[x - 0.425 * k + epsilon, y + 0.120 * k + epsilon], [x - 0.214 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    hawaiiPoint = hawaii
	        .translate([x - 0.205 * k, y + 0.212 * k])
	        .clipExtent([[x - 0.214 * k + epsilon, y + 0.166 * k + epsilon], [x - 0.115 * k - epsilon, y + 0.234 * k - epsilon]])
	        .stream(pointStream);

	    return reset();
	  };

	  albersUsa.fitExtent = function(extent, object) {
	    return fitExtent(albersUsa, extent, object);
	  };

	  albersUsa.fitSize = function(size, object) {
	    return fitSize(albersUsa, size, object);
	  };

	  albersUsa.fitWidth = function(width, object) {
	    return fitWidth(albersUsa, width, object);
	  };

	  albersUsa.fitHeight = function(height, object) {
	    return fitHeight(albersUsa, height, object);
	  };

	  function reset() {
	    cache = cacheStream = null;
	    return albersUsa;
	  }

	  return albersUsa.scale(1070);
	}

	function azimuthalRaw(scale) {
	  return function(x, y) {
	    var cx = cos(x),
	        cy = cos(y),
	        k = scale(cx * cy);
	    return [
	      k * cy * sin(x),
	      k * sin(y)
	    ];
	  }
	}

	function azimuthalInvert(angle) {
	  return function(x, y) {
	    var z = sqrt(x * x + y * y),
	        c = angle(z),
	        sc = sin(c),
	        cc = cos(c);
	    return [
	      atan2(x * sc, z * cc),
	      asin(z && y * sc / z)
	    ];
	  }
	}

	var azimuthalEqualAreaRaw = azimuthalRaw(function(cxcy) {
	  return sqrt(2 / (1 + cxcy));
	});

	azimuthalEqualAreaRaw.invert = azimuthalInvert(function(z) {
	  return 2 * asin(z / 2);
	});

	function azimuthalEqualArea() {
	  return projection(azimuthalEqualAreaRaw)
	      .scale(124.75)
	      .clipAngle(180 - 1e-3);
	}

	var azimuthalEquidistantRaw = azimuthalRaw(function(c) {
	  return (c = acos(c)) && c / sin(c);
	});

	azimuthalEquidistantRaw.invert = azimuthalInvert(function(z) {
	  return z;
	});

	function azimuthalEquidistant() {
	  return projection(azimuthalEquidistantRaw)
	      .scale(79.4188)
	      .clipAngle(180 - 1e-3);
	}

	function mercatorRaw(lambda, phi) {
	  return [lambda, log(tan((halfPi + phi) / 2))];
	}

	mercatorRaw.invert = function(x, y) {
	  return [x, 2 * atan(exp(y)) - halfPi];
	};

	function mercator() {
	  return mercatorProjection(mercatorRaw)
	      .scale(961 / tau);
	}

	function mercatorProjection(project) {
	  var m = projection(project),
	      center = m.center,
	      scale = m.scale,
	      translate = m.translate,
	      clipExtent = m.clipExtent,
	      x0 = null, y0, x1, y1; // clip extent

	  m.scale = function(_) {
	    return arguments.length ? (scale(_), reclip()) : scale();
	  };

	  m.translate = function(_) {
	    return arguments.length ? (translate(_), reclip()) : translate();
	  };

	  m.center = function(_) {
	    return arguments.length ? (center(_), reclip()) : center();
	  };

	  m.clipExtent = function(_) {
	    return arguments.length ? (_ == null ? x0 = y0 = x1 = y1 = null : (x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reclip()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	  };

	  function reclip() {
	    var k = pi * scale(),
	        t = m(rotation(m.rotate()).invert([0, 0]));
	    return clipExtent(x0 == null
	        ? [[t[0] - k, t[1] - k], [t[0] + k, t[1] + k]] : project === mercatorRaw
	        ? [[Math.max(t[0] - k, x0), y0], [Math.min(t[0] + k, x1), y1]]
	        : [[x0, Math.max(t[1] - k, y0)], [x1, Math.min(t[1] + k, y1)]]);
	  }

	  return reclip();
	}

	function tany(y) {
	  return tan((halfPi + y) / 2);
	}

	function conicConformalRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : log(cy0 / cos(y1)) / log(tany(y1) / tany(y0)),
	      f = cy0 * pow(tany(y0), n) / n;

	  if (!n) return mercatorRaw;

	  function project(x, y) {
	    if (f > 0) { if (y < -halfPi + epsilon) y = -halfPi + epsilon; }
	    else { if (y > halfPi - epsilon) y = halfPi - epsilon; }
	    var r = f / pow(tany(y), n);
	    return [r * sin(n * x), f - r * cos(n * x)];
	  }

	  project.invert = function(x, y) {
	    var fy = f - y, r = sign(n) * sqrt(x * x + fy * fy);
	    return [atan2(x, abs(fy)) / n * sign(fy), 2 * atan(pow(f / r, 1 / n)) - halfPi];
	  };

	  return project;
	}

	function conicConformal() {
	  return conicProjection(conicConformalRaw)
	      .scale(109.5)
	      .parallels([30, 30]);
	}

	function equirectangularRaw(lambda, phi) {
	  return [lambda, phi];
	}

	equirectangularRaw.invert = equirectangularRaw;

	function equirectangular() {
	  return projection(equirectangularRaw)
	      .scale(152.63);
	}

	function conicEquidistantRaw(y0, y1) {
	  var cy0 = cos(y0),
	      n = y0 === y1 ? sin(y0) : (cy0 - cos(y1)) / (y1 - y0),
	      g = cy0 / n + y0;

	  if (abs(n) < epsilon) return equirectangularRaw;

	  function project(x, y) {
	    var gy = g - y, nx = n * x;
	    return [gy * sin(nx), g - gy * cos(nx)];
	  }

	  project.invert = function(x, y) {
	    var gy = g - y;
	    return [atan2(x, abs(gy)) / n * sign(gy), g - sign(n) * sqrt(x * x + gy * gy)];
	  };

	  return project;
	}

	function conicEquidistant() {
	  return conicProjection(conicEquidistantRaw)
	      .scale(131.154)
	      .center([0, 13.9389]);
	}

	function gnomonicRaw(x, y) {
	  var cy = cos(y), k = cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	gnomonicRaw.invert = azimuthalInvert(atan);

	function gnomonic() {
	  return projection(gnomonicRaw)
	      .scale(144.049)
	      .clipAngle(60);
	}

	function scaleTranslate$1(kx, ky, tx, ty) {
	  return kx === 1 && ky === 1 && tx === 0 && ty === 0 ? identity : transformer({
	    point: function(x, y) {
	      this.stream.point(x * kx + tx, y * ky + ty);
	    }
	  });
	}

	function identity$1() {
	  var k = 1, tx = 0, ty = 0, sx = 1, sy = 1, transform$$1 = identity, // scale, translate and reflect
	      x0 = null, y0, x1, y1, // clip extent
	      postclip = identity,
	      cache,
	      cacheStream,
	      projection;

	  function reset() {
	    cache = cacheStream = null;
	    return projection;
	  }

	  return projection = {
	    stream: function(stream) {
	      return cache && cacheStream === stream ? cache : cache = transform$$1(postclip(cacheStream = stream));
	    },
	    postclip: function(_) {
	      return arguments.length ? (postclip = _, x0 = y0 = x1 = y1 = null, reset()) : postclip;
	    },
	    clipExtent: function(_) {
	      return arguments.length ? (postclip = _ == null ? (x0 = y0 = x1 = y1 = null, identity) : clipRectangle(x0 = +_[0][0], y0 = +_[0][1], x1 = +_[1][0], y1 = +_[1][1]), reset()) : x0 == null ? null : [[x0, y0], [x1, y1]];
	    },
	    scale: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1((k = +_) * sx, k * sy, tx, ty), reset()) : k;
	    },
	    translate: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * sy, tx = +_[0], ty = +_[1]), reset()) : [tx, ty];
	    },
	    reflectX: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * (sx = _ ? -1 : 1), k * sy, tx, ty), reset()) : sx < 0;
	    },
	    reflectY: function(_) {
	      return arguments.length ? (transform$$1 = scaleTranslate$1(k * sx, k * (sy = _ ? -1 : 1), tx, ty), reset()) : sy < 0;
	    },
	    fitExtent: function(extent, object) {
	      return fitExtent(projection, extent, object);
	    },
	    fitSize: function(size, object) {
	      return fitSize(projection, size, object);
	    },
	    fitWidth: function(width, object) {
	      return fitWidth(projection, width, object);
	    },
	    fitHeight: function(height, object) {
	      return fitHeight(projection, height, object);
	    }
	  };
	}

	function naturalEarth1Raw(lambda, phi) {
	  var phi2 = phi * phi, phi4 = phi2 * phi2;
	  return [
	    lambda * (0.8707 - 0.131979 * phi2 + phi4 * (-0.013791 + phi4 * (0.003971 * phi2 - 0.001529 * phi4))),
	    phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4)))
	  ];
	}

	naturalEarth1Raw.invert = function(x, y) {
	  var phi = y, i = 25, delta;
	  do {
	    var phi2 = phi * phi, phi4 = phi2 * phi2;
	    phi -= delta = (phi * (1.007226 + phi2 * (0.015085 + phi4 * (-0.044475 + 0.028874 * phi2 - 0.005916 * phi4))) - y) /
	        (1.007226 + phi2 * (0.015085 * 3 + phi4 * (-0.044475 * 7 + 0.028874 * 9 * phi2 - 0.005916 * 11 * phi4)));
	  } while (abs(delta) > epsilon && --i > 0);
	  return [
	    x / (0.8707 + (phi2 = phi * phi) * (-0.131979 + phi2 * (-0.013791 + phi2 * phi2 * phi2 * (0.003971 - 0.001529 * phi2)))),
	    phi
	  ];
	};

	function naturalEarth1() {
	  return projection(naturalEarth1Raw)
	      .scale(175.295);
	}

	function orthographicRaw(x, y) {
	  return [cos(y) * sin(x), sin(y)];
	}

	orthographicRaw.invert = azimuthalInvert(asin);

	function orthographic() {
	  return projection(orthographicRaw)
	      .scale(249.5)
	      .clipAngle(90 + epsilon);
	}

	function stereographicRaw(x, y) {
	  var cy = cos(y), k = 1 + cos(x) * cy;
	  return [cy * sin(x) / k, sin(y) / k];
	}

	stereographicRaw.invert = azimuthalInvert(function(z) {
	  return 2 * atan(z);
	});

	function stereographic() {
	  return projection(stereographicRaw)
	      .scale(250)
	      .clipAngle(142);
	}

	function transverseMercatorRaw(lambda, phi) {
	  return [log(tan((halfPi + phi) / 2)), -lambda];
	}

	transverseMercatorRaw.invert = function(x, y) {
	  return [-y, 2 * atan(exp(x)) - halfPi];
	};

	function transverseMercator() {
	  var m = mercatorProjection(transverseMercatorRaw),
	      center = m.center,
	      rotate = m.rotate;

	  m.center = function(_) {
	    return arguments.length ? center([-_[1], _[0]]) : (_ = center(), [_[1], -_[0]]);
	  };

	  m.rotate = function(_) {
	    return arguments.length ? rotate([_[0], _[1], _.length > 2 ? _[2] + 90 : 90]) : (_ = rotate(), [_[0], _[1], _[2] - 90]);
	  };

	  return rotate([0, 0, 90])
	      .scale(159.155);
	}

	exports.geoArea = area;
	exports.geoBounds = bounds;
	exports.geoCentroid = centroid;
	exports.geoCircle = circle;
	exports.geoClipAntimeridian = clipAntimeridian;
	exports.geoClipCircle = clipCircle;
	exports.geoClipExtent = extent;
	exports.geoClipRectangle = clipRectangle;
	exports.geoContains = contains;
	exports.geoDistance = distance;
	exports.geoGraticule = graticule;
	exports.geoGraticule10 = graticule10;
	exports.geoInterpolate = interpolate;
	exports.geoLength = length;
	exports.geoPath = index;
	exports.geoAlbers = albers;
	exports.geoAlbersUsa = albersUsa;
	exports.geoAzimuthalEqualArea = azimuthalEqualArea;
	exports.geoAzimuthalEqualAreaRaw = azimuthalEqualAreaRaw;
	exports.geoAzimuthalEquidistant = azimuthalEquidistant;
	exports.geoAzimuthalEquidistantRaw = azimuthalEquidistantRaw;
	exports.geoConicConformal = conicConformal;
	exports.geoConicConformalRaw = conicConformalRaw;
	exports.geoConicEqualArea = conicEqualArea;
	exports.geoConicEqualAreaRaw = conicEqualAreaRaw;
	exports.geoConicEquidistant = conicEquidistant;
	exports.geoConicEquidistantRaw = conicEquidistantRaw;
	exports.geoEquirectangular = equirectangular;
	exports.geoEquirectangularRaw = equirectangularRaw;
	exports.geoGnomonic = gnomonic;
	exports.geoGnomonicRaw = gnomonicRaw;
	exports.geoIdentity = identity$1;
	exports.geoProjection = projection;
	exports.geoProjectionMutator = projectionMutator;
	exports.geoMercator = mercator;
	exports.geoMercatorRaw = mercatorRaw;
	exports.geoNaturalEarth1 = naturalEarth1;
	exports.geoNaturalEarth1Raw = naturalEarth1Raw;
	exports.geoOrthographic = orthographic;
	exports.geoOrthographicRaw = orthographicRaw;
	exports.geoStereographic = stereographic;
	exports.geoStereographicRaw = stereographicRaw;
	exports.geoTransverseMercator = transverseMercator;
	exports.geoTransverseMercatorRaw = transverseMercatorRaw;
	exports.geoRotation = rotation;
	exports.geoStream = geoStream;
	exports.geoTransform = transform;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 29 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-hierarchy/ Version 1.1.6. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	function defaultSeparation(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	function meanX(children) {
	  return children.reduce(meanXReduce, 0) / children.length;
	}

	function meanXReduce(x, c) {
	  return x + c.x;
	}

	function maxY(children) {
	  return 1 + children.reduce(maxYReduce, 0);
	}

	function maxYReduce(y, c) {
	  return Math.max(y, c.y);
	}

	function leafLeft(node) {
	  var children;
	  while (children = node.children) node = children[0];
	  return node;
	}

	function leafRight(node) {
	  var children;
	  while (children = node.children) node = children[children.length - 1];
	  return node;
	}

	var cluster = function() {
	  var separation = defaultSeparation,
	      dx = 1,
	      dy = 1,
	      nodeSize = false;

	  function cluster(root) {
	    var previousNode,
	        x = 0;

	    // First walk, computing the initial x & y values.
	    root.eachAfter(function(node) {
	      var children = node.children;
	      if (children) {
	        node.x = meanX(children);
	        node.y = maxY(children);
	      } else {
	        node.x = previousNode ? x += separation(node, previousNode) : 0;
	        node.y = 0;
	        previousNode = node;
	      }
	    });

	    var left = leafLeft(root),
	        right = leafRight(root),
	        x0 = left.x - separation(left, right) / 2,
	        x1 = right.x + separation(right, left) / 2;

	    // Second walk, normalizing x & y to the desired size.
	    return root.eachAfter(nodeSize ? function(node) {
	      node.x = (node.x - root.x) * dx;
	      node.y = (root.y - node.y) * dy;
	    } : function(node) {
	      node.x = (node.x - x0) / (x1 - x0) * dx;
	      node.y = (1 - (root.y ? node.y / root.y : 1)) * dy;
	    });
	  }

	  cluster.separation = function(x) {
	    return arguments.length ? (separation = x, cluster) : separation;
	  };

	  cluster.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? null : [dx, dy]);
	  };

	  cluster.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], cluster) : (nodeSize ? [dx, dy] : null);
	  };

	  return cluster;
	};

	function count(node) {
	  var sum = 0,
	      children = node.children,
	      i = children && children.length;
	  if (!i) sum = 1;
	  else while (--i >= 0) sum += children[i].value;
	  node.value = sum;
	}

	var node_count = function() {
	  return this.eachAfter(count);
	};

	var node_each = function(callback) {
	  var node = this, current, next = [node], children, i, n;
	  do {
	    current = next.reverse(), next = [];
	    while (node = current.pop()) {
	      callback(node), children = node.children;
	      if (children) for (i = 0, n = children.length; i < n; ++i) {
	        next.push(children[i]);
	      }
	    }
	  } while (next.length);
	  return this;
	};

	var node_eachBefore = function(callback) {
	  var node = this, nodes = [node], children, i;
	  while (node = nodes.pop()) {
	    callback(node), children = node.children;
	    if (children) for (i = children.length - 1; i >= 0; --i) {
	      nodes.push(children[i]);
	    }
	  }
	  return this;
	};

	var node_eachAfter = function(callback) {
	  var node = this, nodes = [node], next = [], children, i, n;
	  while (node = nodes.pop()) {
	    next.push(node), children = node.children;
	    if (children) for (i = 0, n = children.length; i < n; ++i) {
	      nodes.push(children[i]);
	    }
	  }
	  while (node = next.pop()) {
	    callback(node);
	  }
	  return this;
	};

	var node_sum = function(value) {
	  return this.eachAfter(function(node) {
	    var sum = +value(node.data) || 0,
	        children = node.children,
	        i = children && children.length;
	    while (--i >= 0) sum += children[i].value;
	    node.value = sum;
	  });
	};

	var node_sort = function(compare) {
	  return this.eachBefore(function(node) {
	    if (node.children) {
	      node.children.sort(compare);
	    }
	  });
	};

	var node_path = function(end) {
	  var start = this,
	      ancestor = leastCommonAncestor(start, end),
	      nodes = [start];
	  while (start !== ancestor) {
	    start = start.parent;
	    nodes.push(start);
	  }
	  var k = nodes.length;
	  while (end !== ancestor) {
	    nodes.splice(k, 0, end);
	    end = end.parent;
	  }
	  return nodes;
	};

	function leastCommonAncestor(a, b) {
	  if (a === b) return a;
	  var aNodes = a.ancestors(),
	      bNodes = b.ancestors(),
	      c = null;
	  a = aNodes.pop();
	  b = bNodes.pop();
	  while (a === b) {
	    c = a;
	    a = aNodes.pop();
	    b = bNodes.pop();
	  }
	  return c;
	}

	var node_ancestors = function() {
	  var node = this, nodes = [node];
	  while (node = node.parent) {
	    nodes.push(node);
	  }
	  return nodes;
	};

	var node_descendants = function() {
	  var nodes = [];
	  this.each(function(node) {
	    nodes.push(node);
	  });
	  return nodes;
	};

	var node_leaves = function() {
	  var leaves = [];
	  this.eachBefore(function(node) {
	    if (!node.children) {
	      leaves.push(node);
	    }
	  });
	  return leaves;
	};

	var node_links = function() {
	  var root = this, links = [];
	  root.each(function(node) {
	    if (node !== root) { // Don’t include the root’s parent, if any.
	      links.push({source: node.parent, target: node});
	    }
	  });
	  return links;
	};

	function hierarchy(data, children) {
	  var root = new Node(data),
	      valued = +data.value && (root.value = data.value),
	      node,
	      nodes = [root],
	      child,
	      childs,
	      i,
	      n;

	  if (children == null) children = defaultChildren;

	  while (node = nodes.pop()) {
	    if (valued) node.value = +node.data.value;
	    if ((childs = children(node.data)) && (n = childs.length)) {
	      node.children = new Array(n);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new Node(childs[i]));
	        child.parent = node;
	        child.depth = node.depth + 1;
	      }
	    }
	  }

	  return root.eachBefore(computeHeight);
	}

	function node_copy() {
	  return hierarchy(this).eachBefore(copyData);
	}

	function defaultChildren(d) {
	  return d.children;
	}

	function copyData(node) {
	  node.data = node.data.data;
	}

	function computeHeight(node) {
	  var height = 0;
	  do node.height = height;
	  while ((node = node.parent) && (node.height < ++height));
	}

	function Node(data) {
	  this.data = data;
	  this.depth =
	  this.height = 0;
	  this.parent = null;
	}

	Node.prototype = hierarchy.prototype = {
	  constructor: Node,
	  count: node_count,
	  each: node_each,
	  eachAfter: node_eachAfter,
	  eachBefore: node_eachBefore,
	  sum: node_sum,
	  sort: node_sort,
	  path: node_path,
	  ancestors: node_ancestors,
	  descendants: node_descendants,
	  leaves: node_leaves,
	  links: node_links,
	  copy: node_copy
	};

	var slice = Array.prototype.slice;

	function shuffle(array) {
	  var m = array.length,
	      t,
	      i;

	  while (m) {
	    i = Math.random() * m-- | 0;
	    t = array[m];
	    array[m] = array[i];
	    array[i] = t;
	  }

	  return array;
	}

	var enclose = function(circles) {
	  var i = 0, n = (circles = shuffle(slice.call(circles))).length, B = [], p, e;

	  while (i < n) {
	    p = circles[i];
	    if (e && enclosesWeak(e, p)) ++i;
	    else e = encloseBasis(B = extendBasis(B, p)), i = 0;
	  }

	  return e;
	};

	function extendBasis(B, p) {
	  var i, j;

	  if (enclosesWeakAll(p, B)) return [p];

	  // If we get here then B must have at least one element.
	  for (i = 0; i < B.length; ++i) {
	    if (enclosesNot(p, B[i])
	        && enclosesWeakAll(encloseBasis2(B[i], p), B)) {
	      return [B[i], p];
	    }
	  }

	  // If we get here then B must have at least two elements.
	  for (i = 0; i < B.length - 1; ++i) {
	    for (j = i + 1; j < B.length; ++j) {
	      if (enclosesNot(encloseBasis2(B[i], B[j]), p)
	          && enclosesNot(encloseBasis2(B[i], p), B[j])
	          && enclosesNot(encloseBasis2(B[j], p), B[i])
	          && enclosesWeakAll(encloseBasis3(B[i], B[j], p), B)) {
	        return [B[i], B[j], p];
	      }
	    }
	  }

	  // If we get here then something is very wrong.
	  throw new Error;
	}

	function enclosesNot(a, b) {
	  var dr = a.r - b.r, dx = b.x - a.x, dy = b.y - a.y;
	  return dr < 0 || dr * dr < dx * dx + dy * dy;
	}

	function enclosesWeak(a, b) {
	  var dr = a.r - b.r + 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}

	function enclosesWeakAll(a, B) {
	  for (var i = 0; i < B.length; ++i) {
	    if (!enclosesWeak(a, B[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	function encloseBasis(B) {
	  switch (B.length) {
	    case 1: return encloseBasis1(B[0]);
	    case 2: return encloseBasis2(B[0], B[1]);
	    case 3: return encloseBasis3(B[0], B[1], B[2]);
	  }
	}

	function encloseBasis1(a) {
	  return {
	    x: a.x,
	    y: a.y,
	    r: a.r
	  };
	}

	function encloseBasis2(a, b) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x21 = x2 - x1, y21 = y2 - y1, r21 = r2 - r1,
	      l = Math.sqrt(x21 * x21 + y21 * y21);
	  return {
	    x: (x1 + x2 + x21 / l * r21) / 2,
	    y: (y1 + y2 + y21 / l * r21) / 2,
	    r: (l + r1 + r2) / 2
	  };
	}

	function encloseBasis3(a, b, c) {
	  var x1 = a.x, y1 = a.y, r1 = a.r,
	      x2 = b.x, y2 = b.y, r2 = b.r,
	      x3 = c.x, y3 = c.y, r3 = c.r,
	      a2 = x1 - x2,
	      a3 = x1 - x3,
	      b2 = y1 - y2,
	      b3 = y1 - y3,
	      c2 = r2 - r1,
	      c3 = r3 - r1,
	      d1 = x1 * x1 + y1 * y1 - r1 * r1,
	      d2 = d1 - x2 * x2 - y2 * y2 + r2 * r2,
	      d3 = d1 - x3 * x3 - y3 * y3 + r3 * r3,
	      ab = a3 * b2 - a2 * b3,
	      xa = (b2 * d3 - b3 * d2) / (ab * 2) - x1,
	      xb = (b3 * c2 - b2 * c3) / ab,
	      ya = (a3 * d2 - a2 * d3) / (ab * 2) - y1,
	      yb = (a2 * c3 - a3 * c2) / ab,
	      A = xb * xb + yb * yb - 1,
	      B = 2 * (r1 + xa * xb + ya * yb),
	      C = xa * xa + ya * ya - r1 * r1,
	      r = -(A ? (B + Math.sqrt(B * B - 4 * A * C)) / (2 * A) : C / B);
	  return {
	    x: x1 + xa + xb * r,
	    y: y1 + ya + yb * r,
	    r: r
	  };
	}

	function place(b, a, c) {
	  var dx = b.x - a.x, x, a2,
	      dy = b.y - a.y, y, b2,
	      d2 = dx * dx + dy * dy;
	  if (d2) {
	    a2 = a.r + c.r, a2 *= a2;
	    b2 = b.r + c.r, b2 *= b2;
	    if (a2 > b2) {
	      x = (d2 + b2 - a2) / (2 * d2);
	      y = Math.sqrt(Math.max(0, b2 / d2 - x * x));
	      c.x = b.x - x * dx - y * dy;
	      c.y = b.y - x * dy + y * dx;
	    } else {
	      x = (d2 + a2 - b2) / (2 * d2);
	      y = Math.sqrt(Math.max(0, a2 / d2 - x * x));
	      c.x = a.x + x * dx - y * dy;
	      c.y = a.y + x * dy + y * dx;
	    }
	  } else {
	    c.x = a.x + c.r;
	    c.y = a.y;
	  }
	}

	function intersects(a, b) {
	  var dr = a.r + b.r - 1e-6, dx = b.x - a.x, dy = b.y - a.y;
	  return dr > 0 && dr * dr > dx * dx + dy * dy;
	}

	function score(node) {
	  var a = node._,
	      b = node.next._,
	      ab = a.r + b.r,
	      dx = (a.x * b.r + b.x * a.r) / ab,
	      dy = (a.y * b.r + b.y * a.r) / ab;
	  return dx * dx + dy * dy;
	}

	function Node$1(circle) {
	  this._ = circle;
	  this.next = null;
	  this.previous = null;
	}

	function packEnclose(circles) {
	  if (!(n = circles.length)) return 0;

	  var a, b, c, n, aa, ca, i, j, k, sj, sk;

	  // Place the first circle.
	  a = circles[0], a.x = 0, a.y = 0;
	  if (!(n > 1)) return a.r;

	  // Place the second circle.
	  b = circles[1], a.x = -b.r, b.x = a.r, b.y = 0;
	  if (!(n > 2)) return a.r + b.r;

	  // Place the third circle.
	  place(b, a, c = circles[2]);

	  // Initialize the front-chain using the first three circles a, b and c.
	  a = new Node$1(a), b = new Node$1(b), c = new Node$1(c);
	  a.next = c.previous = b;
	  b.next = a.previous = c;
	  c.next = b.previous = a;

	  // Attempt to place each remaining circle…
	  pack: for (i = 3; i < n; ++i) {
	    place(a._, b._, c = circles[i]), c = new Node$1(c);

	    // Find the closest intersecting circle on the front-chain, if any.
	    // “Closeness” is determined by linear distance along the front-chain.
	    // “Ahead” or “behind” is likewise determined by linear distance.
	    j = b.next, k = a.previous, sj = b._.r, sk = a._.r;
	    do {
	      if (sj <= sk) {
	        if (intersects(j._, c._)) {
	          b = j, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sj += j._.r, j = j.next;
	      } else {
	        if (intersects(k._, c._)) {
	          a = k, a.next = b, b.previous = a, --i;
	          continue pack;
	        }
	        sk += k._.r, k = k.previous;
	      }
	    } while (j !== k.next);

	    // Success! Insert the new circle c between a and b.
	    c.previous = a, c.next = b, a.next = b.previous = b = c;

	    // Compute the new closest circle pair to the centroid.
	    aa = score(a);
	    while ((c = c.next) !== b) {
	      if ((ca = score(c)) < aa) {
	        a = c, aa = ca;
	      }
	    }
	    b = a.next;
	  }

	  // Compute the enclosing circle of the front chain.
	  a = [b._], c = b; while ((c = c.next) !== b) a.push(c._); c = enclose(a);

	  // Translate the circles to put the enclosing circle around the origin.
	  for (i = 0; i < n; ++i) a = circles[i], a.x -= c.x, a.y -= c.y;

	  return c.r;
	}

	var siblings = function(circles) {
	  packEnclose(circles);
	  return circles;
	};

	function optional(f) {
	  return f == null ? null : required(f);
	}

	function required(f) {
	  if (typeof f !== "function") throw new Error;
	  return f;
	}

	function constantZero() {
	  return 0;
	}

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function defaultRadius(d) {
	  return Math.sqrt(d.value);
	}

	var index = function() {
	  var radius = null,
	      dx = 1,
	      dy = 1,
	      padding = constantZero;

	  function pack(root) {
	    root.x = dx / 2, root.y = dy / 2;
	    if (radius) {
	      root.eachBefore(radiusLeaf(radius))
	          .eachAfter(packChildren(padding, 0.5))
	          .eachBefore(translateChild(1));
	    } else {
	      root.eachBefore(radiusLeaf(defaultRadius))
	          .eachAfter(packChildren(constantZero, 1))
	          .eachAfter(packChildren(padding, root.r / Math.min(dx, dy)))
	          .eachBefore(translateChild(Math.min(dx, dy) / (2 * root.r)));
	    }
	    return root;
	  }

	  pack.radius = function(x) {
	    return arguments.length ? (radius = optional(x), pack) : radius;
	  };

	  pack.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], pack) : [dx, dy];
	  };

	  pack.padding = function(x) {
	    return arguments.length ? (padding = typeof x === "function" ? x : constant(+x), pack) : padding;
	  };

	  return pack;
	};

	function radiusLeaf(radius) {
	  return function(node) {
	    if (!node.children) {
	      node.r = Math.max(0, +radius(node) || 0);
	    }
	  };
	}

	function packChildren(padding, k) {
	  return function(node) {
	    if (children = node.children) {
	      var children,
	          i,
	          n = children.length,
	          r = padding(node) * k || 0,
	          e;

	      if (r) for (i = 0; i < n; ++i) children[i].r += r;
	      e = packEnclose(children);
	      if (r) for (i = 0; i < n; ++i) children[i].r -= r;
	      node.r = e + r;
	    }
	  };
	}

	function translateChild(k) {
	  return function(node) {
	    var parent = node.parent;
	    node.r *= k;
	    if (parent) {
	      node.x = parent.x + k * node.x;
	      node.y = parent.y + k * node.y;
	    }
	  };
	}

	var roundNode = function(node) {
	  node.x0 = Math.round(node.x0);
	  node.y0 = Math.round(node.y0);
	  node.x1 = Math.round(node.x1);
	  node.y1 = Math.round(node.y1);
	};

	var treemapDice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (x1 - x0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.y0 = y0, node.y1 = y1;
	    node.x0 = x0, node.x1 = x0 += node.value * k;
	  }
	};

	var partition = function() {
	  var dx = 1,
	      dy = 1,
	      padding = 0,
	      round = false;

	  function partition(root) {
	    var n = root.height + 1;
	    root.x0 =
	    root.y0 = padding;
	    root.x1 = dx;
	    root.y1 = dy / n;
	    root.eachBefore(positionNode(dy, n));
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(dy, n) {
	    return function(node) {
	      if (node.children) {
	        treemapDice(node, node.x0, dy * (node.depth + 1) / n, node.x1, dy * (node.depth + 2) / n);
	      }
	      var x0 = node.x0,
	          y0 = node.y0,
	          x1 = node.x1 - padding,
	          y1 = node.y1 - padding;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      node.x0 = x0;
	      node.y0 = y0;
	      node.x1 = x1;
	      node.y1 = y1;
	    };
	  }

	  partition.round = function(x) {
	    return arguments.length ? (round = !!x, partition) : round;
	  };

	  partition.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], partition) : [dx, dy];
	  };

	  partition.padding = function(x) {
	    return arguments.length ? (padding = +x, partition) : padding;
	  };

	  return partition;
	};

	var keyPrefix = "$";
	var preroot = {depth: -1};
	var ambiguous = {};

	function defaultId(d) {
	  return d.id;
	}

	function defaultParentId(d) {
	  return d.parentId;
	}

	var stratify = function() {
	  var id = defaultId,
	      parentId = defaultParentId;

	  function stratify(data) {
	    var d,
	        i,
	        n = data.length,
	        root,
	        parent,
	        node,
	        nodes = new Array(n),
	        nodeId,
	        nodeKey,
	        nodeByKey = {};

	    for (i = 0; i < n; ++i) {
	      d = data[i], node = nodes[i] = new Node(d);
	      if ((nodeId = id(d, i, data)) != null && (nodeId += "")) {
	        nodeKey = keyPrefix + (node.id = nodeId);
	        nodeByKey[nodeKey] = nodeKey in nodeByKey ? ambiguous : node;
	      }
	    }

	    for (i = 0; i < n; ++i) {
	      node = nodes[i], nodeId = parentId(data[i], i, data);
	      if (nodeId == null || !(nodeId += "")) {
	        if (root) throw new Error("multiple roots");
	        root = node;
	      } else {
	        parent = nodeByKey[keyPrefix + nodeId];
	        if (!parent) throw new Error("missing: " + nodeId);
	        if (parent === ambiguous) throw new Error("ambiguous: " + nodeId);
	        if (parent.children) parent.children.push(node);
	        else parent.children = [node];
	        node.parent = parent;
	      }
	    }

	    if (!root) throw new Error("no root");
	    root.parent = preroot;
	    root.eachBefore(function(node) { node.depth = node.parent.depth + 1; --n; }).eachBefore(computeHeight);
	    root.parent = null;
	    if (n > 0) throw new Error("cycle");

	    return root;
	  }

	  stratify.id = function(x) {
	    return arguments.length ? (id = required(x), stratify) : id;
	  };

	  stratify.parentId = function(x) {
	    return arguments.length ? (parentId = required(x), stratify) : parentId;
	  };

	  return stratify;
	};

	function defaultSeparation$1(a, b) {
	  return a.parent === b.parent ? 1 : 2;
	}

	// function radialSeparation(a, b) {
	//   return (a.parent === b.parent ? 1 : 2) / a.depth;
	// }

	// This function is used to traverse the left contour of a subtree (or
	// subforest). It returns the successor of v on this contour. This successor is
	// either given by the leftmost child of v or by the thread of v. The function
	// returns null if and only if v is on the highest level of its subtree.
	function nextLeft(v) {
	  var children = v.children;
	  return children ? children[0] : v.t;
	}

	// This function works analogously to nextLeft.
	function nextRight(v) {
	  var children = v.children;
	  return children ? children[children.length - 1] : v.t;
	}

	// Shifts the current subtree rooted at w+. This is done by increasing
	// prelim(w+) and mod(w+) by shift.
	function moveSubtree(wm, wp, shift) {
	  var change = shift / (wp.i - wm.i);
	  wp.c -= change;
	  wp.s += shift;
	  wm.c += change;
	  wp.z += shift;
	  wp.m += shift;
	}

	// All other shifts, applied to the smaller subtrees between w- and w+, are
	// performed by this function. To prepare the shifts, we have to adjust
	// change(w+), shift(w+), and change(w-).
	function executeShifts(v) {
	  var shift = 0,
	      change = 0,
	      children = v.children,
	      i = children.length,
	      w;
	  while (--i >= 0) {
	    w = children[i];
	    w.z += shift;
	    w.m += shift;
	    shift += w.s + (change += w.c);
	  }
	}

	// If vi-’s ancestor is a sibling of v, returns vi-’s ancestor. Otherwise,
	// returns the specified (default) ancestor.
	function nextAncestor(vim, v, ancestor) {
	  return vim.a.parent === v.parent ? vim.a : ancestor;
	}

	function TreeNode(node, i) {
	  this._ = node;
	  this.parent = null;
	  this.children = null;
	  this.A = null; // default ancestor
	  this.a = this; // ancestor
	  this.z = 0; // prelim
	  this.m = 0; // mod
	  this.c = 0; // change
	  this.s = 0; // shift
	  this.t = null; // thread
	  this.i = i; // number
	}

	TreeNode.prototype = Object.create(Node.prototype);

	function treeRoot(root) {
	  var tree = new TreeNode(root, 0),
	      node,
	      nodes = [tree],
	      child,
	      children,
	      i,
	      n;

	  while (node = nodes.pop()) {
	    if (children = node._.children) {
	      node.children = new Array(n = children.length);
	      for (i = n - 1; i >= 0; --i) {
	        nodes.push(child = node.children[i] = new TreeNode(children[i], i));
	        child.parent = node;
	      }
	    }
	  }

	  (tree.parent = new TreeNode(null, 0)).children = [tree];
	  return tree;
	}

	// Node-link tree diagram using the Reingold-Tilford "tidy" algorithm
	var tree = function() {
	  var separation = defaultSeparation$1,
	      dx = 1,
	      dy = 1,
	      nodeSize = null;

	  function tree(root) {
	    var t = treeRoot(root);

	    // Compute the layout using Buchheim et al.’s algorithm.
	    t.eachAfter(firstWalk), t.parent.m = -t.z;
	    t.eachBefore(secondWalk);

	    // If a fixed node size is specified, scale x and y.
	    if (nodeSize) root.eachBefore(sizeNode);

	    // If a fixed tree size is specified, scale x and y based on the extent.
	    // Compute the left-most, right-most, and depth-most nodes for extents.
	    else {
	      var left = root,
	          right = root,
	          bottom = root;
	      root.eachBefore(function(node) {
	        if (node.x < left.x) left = node;
	        if (node.x > right.x) right = node;
	        if (node.depth > bottom.depth) bottom = node;
	      });
	      var s = left === right ? 1 : separation(left, right) / 2,
	          tx = s - left.x,
	          kx = dx / (right.x + s + tx),
	          ky = dy / (bottom.depth || 1);
	      root.eachBefore(function(node) {
	        node.x = (node.x + tx) * kx;
	        node.y = node.depth * ky;
	      });
	    }

	    return root;
	  }

	  // Computes a preliminary x-coordinate for v. Before that, FIRST WALK is
	  // applied recursively to the children of v, as well as the function
	  // APPORTION. After spacing out the children by calling EXECUTE SHIFTS, the
	  // node v is placed to the midpoint of its outermost children.
	  function firstWalk(v) {
	    var children = v.children,
	        siblings = v.parent.children,
	        w = v.i ? siblings[v.i - 1] : null;
	    if (children) {
	      executeShifts(v);
	      var midpoint = (children[0].z + children[children.length - 1].z) / 2;
	      if (w) {
	        v.z = w.z + separation(v._, w._);
	        v.m = v.z - midpoint;
	      } else {
	        v.z = midpoint;
	      }
	    } else if (w) {
	      v.z = w.z + separation(v._, w._);
	    }
	    v.parent.A = apportion(v, w, v.parent.A || siblings[0]);
	  }

	  // Computes all real x-coordinates by summing up the modifiers recursively.
	  function secondWalk(v) {
	    v._.x = v.z + v.parent.m;
	    v.m += v.parent.m;
	  }

	  // The core of the algorithm. Here, a new subtree is combined with the
	  // previous subtrees. Threads are used to traverse the inside and outside
	  // contours of the left and right subtree up to the highest common level. The
	  // vertices used for the traversals are vi+, vi-, vo-, and vo+, where the
	  // superscript o means outside and i means inside, the subscript - means left
	  // subtree and + means right subtree. For summing up the modifiers along the
	  // contour, we use respective variables si+, si-, so-, and so+. Whenever two
	  // nodes of the inside contours conflict, we compute the left one of the
	  // greatest uncommon ancestors using the function ANCESTOR and call MOVE
	  // SUBTREE to shift the subtree and prepare the shifts of smaller subtrees.
	  // Finally, we add a new thread (if necessary).
	  function apportion(v, w, ancestor) {
	    if (w) {
	      var vip = v,
	          vop = v,
	          vim = w,
	          vom = vip.parent.children[0],
	          sip = vip.m,
	          sop = vop.m,
	          sim = vim.m,
	          som = vom.m,
	          shift;
	      while (vim = nextRight(vim), vip = nextLeft(vip), vim && vip) {
	        vom = nextLeft(vom);
	        vop = nextRight(vop);
	        vop.a = v;
	        shift = vim.z + sim - vip.z - sip + separation(vim._, vip._);
	        if (shift > 0) {
	          moveSubtree(nextAncestor(vim, v, ancestor), v, shift);
	          sip += shift;
	          sop += shift;
	        }
	        sim += vim.m;
	        sip += vip.m;
	        som += vom.m;
	        sop += vop.m;
	      }
	      if (vim && !nextRight(vop)) {
	        vop.t = vim;
	        vop.m += sim - sop;
	      }
	      if (vip && !nextLeft(vom)) {
	        vom.t = vip;
	        vom.m += sip - som;
	        ancestor = v;
	      }
	    }
	    return ancestor;
	  }

	  function sizeNode(node) {
	    node.x *= dx;
	    node.y = node.depth * dy;
	  }

	  tree.separation = function(x) {
	    return arguments.length ? (separation = x, tree) : separation;
	  };

	  tree.size = function(x) {
	    return arguments.length ? (nodeSize = false, dx = +x[0], dy = +x[1], tree) : (nodeSize ? null : [dx, dy]);
	  };

	  tree.nodeSize = function(x) {
	    return arguments.length ? (nodeSize = true, dx = +x[0], dy = +x[1], tree) : (nodeSize ? [dx, dy] : null);
	  };

	  return tree;
	};

	var treemapSlice = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      node,
	      i = -1,
	      n = nodes.length,
	      k = parent.value && (y1 - y0) / parent.value;

	  while (++i < n) {
	    node = nodes[i], node.x0 = x0, node.x1 = x1;
	    node.y0 = y0, node.y1 = y0 += node.value * k;
	  }
	};

	var phi = (1 + Math.sqrt(5)) / 2;

	function squarifyRatio(ratio, parent, x0, y0, x1, y1) {
	  var rows = [],
	      nodes = parent.children,
	      row,
	      nodeValue,
	      i0 = 0,
	      i1 = 0,
	      n = nodes.length,
	      dx, dy,
	      value = parent.value,
	      sumValue,
	      minValue,
	      maxValue,
	      newRatio,
	      minRatio,
	      alpha,
	      beta;

	  while (i0 < n) {
	    dx = x1 - x0, dy = y1 - y0;

	    // Find the next non-empty node.
	    do sumValue = nodes[i1++].value; while (!sumValue && i1 < n);
	    minValue = maxValue = sumValue;
	    alpha = Math.max(dy / dx, dx / dy) / (value * ratio);
	    beta = sumValue * sumValue * alpha;
	    minRatio = Math.max(maxValue / beta, beta / minValue);

	    // Keep adding nodes while the aspect ratio maintains or improves.
	    for (; i1 < n; ++i1) {
	      sumValue += nodeValue = nodes[i1].value;
	      if (nodeValue < minValue) minValue = nodeValue;
	      if (nodeValue > maxValue) maxValue = nodeValue;
	      beta = sumValue * sumValue * alpha;
	      newRatio = Math.max(maxValue / beta, beta / minValue);
	      if (newRatio > minRatio) { sumValue -= nodeValue; break; }
	      minRatio = newRatio;
	    }

	    // Position and record the row orientation.
	    rows.push(row = {value: sumValue, dice: dx < dy, children: nodes.slice(i0, i1)});
	    if (row.dice) treemapDice(row, x0, y0, x1, value ? y0 += dy * sumValue / value : y1);
	    else treemapSlice(row, x0, y0, value ? x0 += dx * sumValue / value : x1, y1);
	    value -= sumValue, i0 = i1;
	  }

	  return rows;
	}

	var squarify = ((function custom(ratio) {

	  function squarify(parent, x0, y0, x1, y1) {
	    squarifyRatio(ratio, parent, x0, y0, x1, y1);
	  }

	  squarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return squarify;
	}))(phi);

	var index$1 = function() {
	  var tile = squarify,
	      round = false,
	      dx = 1,
	      dy = 1,
	      paddingStack = [0],
	      paddingInner = constantZero,
	      paddingTop = constantZero,
	      paddingRight = constantZero,
	      paddingBottom = constantZero,
	      paddingLeft = constantZero;

	  function treemap(root) {
	    root.x0 =
	    root.y0 = 0;
	    root.x1 = dx;
	    root.y1 = dy;
	    root.eachBefore(positionNode);
	    paddingStack = [0];
	    if (round) root.eachBefore(roundNode);
	    return root;
	  }

	  function positionNode(node) {
	    var p = paddingStack[node.depth],
	        x0 = node.x0 + p,
	        y0 = node.y0 + p,
	        x1 = node.x1 - p,
	        y1 = node.y1 - p;
	    if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	    if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	    node.x0 = x0;
	    node.y0 = y0;
	    node.x1 = x1;
	    node.y1 = y1;
	    if (node.children) {
	      p = paddingStack[node.depth + 1] = paddingInner(node) / 2;
	      x0 += paddingLeft(node) - p;
	      y0 += paddingTop(node) - p;
	      x1 -= paddingRight(node) - p;
	      y1 -= paddingBottom(node) - p;
	      if (x1 < x0) x0 = x1 = (x0 + x1) / 2;
	      if (y1 < y0) y0 = y1 = (y0 + y1) / 2;
	      tile(node, x0, y0, x1, y1);
	    }
	  }

	  treemap.round = function(x) {
	    return arguments.length ? (round = !!x, treemap) : round;
	  };

	  treemap.size = function(x) {
	    return arguments.length ? (dx = +x[0], dy = +x[1], treemap) : [dx, dy];
	  };

	  treemap.tile = function(x) {
	    return arguments.length ? (tile = required(x), treemap) : tile;
	  };

	  treemap.padding = function(x) {
	    return arguments.length ? treemap.paddingInner(x).paddingOuter(x) : treemap.paddingInner();
	  };

	  treemap.paddingInner = function(x) {
	    return arguments.length ? (paddingInner = typeof x === "function" ? x : constant(+x), treemap) : paddingInner;
	  };

	  treemap.paddingOuter = function(x) {
	    return arguments.length ? treemap.paddingTop(x).paddingRight(x).paddingBottom(x).paddingLeft(x) : treemap.paddingTop();
	  };

	  treemap.paddingTop = function(x) {
	    return arguments.length ? (paddingTop = typeof x === "function" ? x : constant(+x), treemap) : paddingTop;
	  };

	  treemap.paddingRight = function(x) {
	    return arguments.length ? (paddingRight = typeof x === "function" ? x : constant(+x), treemap) : paddingRight;
	  };

	  treemap.paddingBottom = function(x) {
	    return arguments.length ? (paddingBottom = typeof x === "function" ? x : constant(+x), treemap) : paddingBottom;
	  };

	  treemap.paddingLeft = function(x) {
	    return arguments.length ? (paddingLeft = typeof x === "function" ? x : constant(+x), treemap) : paddingLeft;
	  };

	  return treemap;
	};

	var binary = function(parent, x0, y0, x1, y1) {
	  var nodes = parent.children,
	      i, n = nodes.length,
	      sum, sums = new Array(n + 1);

	  for (sums[0] = sum = i = 0; i < n; ++i) {
	    sums[i + 1] = sum += nodes[i].value;
	  }

	  partition(0, n, parent.value, x0, y0, x1, y1);

	  function partition(i, j, value, x0, y0, x1, y1) {
	    if (i >= j - 1) {
	      var node = nodes[i];
	      node.x0 = x0, node.y0 = y0;
	      node.x1 = x1, node.y1 = y1;
	      return;
	    }

	    var valueOffset = sums[i],
	        valueTarget = (value / 2) + valueOffset,
	        k = i + 1,
	        hi = j - 1;

	    while (k < hi) {
	      var mid = k + hi >>> 1;
	      if (sums[mid] < valueTarget) k = mid + 1;
	      else hi = mid;
	    }

	    if ((valueTarget - sums[k - 1]) < (sums[k] - valueTarget) && i + 1 < k) --k;

	    var valueLeft = sums[k] - valueOffset,
	        valueRight = value - valueLeft;

	    if ((x1 - x0) > (y1 - y0)) {
	      var xk = (x0 * valueRight + x1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, xk, y1);
	      partition(k, j, valueRight, xk, y0, x1, y1);
	    } else {
	      var yk = (y0 * valueRight + y1 * valueLeft) / value;
	      partition(i, k, valueLeft, x0, y0, x1, yk);
	      partition(k, j, valueRight, x0, yk, x1, y1);
	    }
	  }
	};

	var sliceDice = function(parent, x0, y0, x1, y1) {
	  (parent.depth & 1 ? treemapSlice : treemapDice)(parent, x0, y0, x1, y1);
	};

	var resquarify = ((function custom(ratio) {

	  function resquarify(parent, x0, y0, x1, y1) {
	    if ((rows = parent._squarify) && (rows.ratio === ratio)) {
	      var rows,
	          row,
	          nodes,
	          i,
	          j = -1,
	          n,
	          m = rows.length,
	          value = parent.value;

	      while (++j < m) {
	        row = rows[j], nodes = row.children;
	        for (i = row.value = 0, n = nodes.length; i < n; ++i) row.value += nodes[i].value;
	        if (row.dice) treemapDice(row, x0, y0, x1, y0 += (y1 - y0) * row.value / value);
	        else treemapSlice(row, x0, y0, x0 += (x1 - x0) * row.value / value, y1);
	        value -= row.value;
	      }
	    } else {
	      parent._squarify = rows = squarifyRatio(ratio, parent, x0, y0, x1, y1);
	      rows.ratio = ratio;
	    }
	  }

	  resquarify.ratio = function(x) {
	    return custom((x = +x) > 1 ? x : 1);
	  };

	  return resquarify;
	}))(phi);

	exports.cluster = cluster;
	exports.hierarchy = hierarchy;
	exports.pack = index;
	exports.packSiblings = siblings;
	exports.packEnclose = enclose;
	exports.partition = partition;
	exports.stratify = stratify;
	exports.tree = tree;
	exports.treemap = index$1;
	exports.treemapBinary = binary;
	exports.treemapDice = treemapDice;
	exports.treemapSlice = treemapSlice;
	exports.treemapSliceDice = sliceDice;
	exports.treemapSquarify = squarify;
	exports.treemapResquarify = resquarify;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 30 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-polygon/ Version 1.0.3. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var area = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      a,
	      b = polygon[n - 1],
	      area = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    area += a[1] * b[0] - a[0] * b[1];
	  }

	  return area / 2;
	};

	var centroid = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      x = 0,
	      y = 0,
	      a,
	      b = polygon[n - 1],
	      c,
	      k = 0;

	  while (++i < n) {
	    a = b;
	    b = polygon[i];
	    k += c = a[0] * b[1] - b[0] * a[1];
	    x += (a[0] + b[0]) * c;
	    y += (a[1] + b[1]) * c;
	  }

	  return k *= 3, [x / k, y / k];
	};

	// Returns the 2D cross product of AB and AC vectors, i.e., the z-component of
	// the 3D cross product in a quadrant I Cartesian coordinate system (+x is
	// right, +y is up). Returns a positive value if ABC is counter-clockwise,
	// negative if clockwise, and zero if the points are collinear.
	var cross = function(a, b, c) {
	  return (b[0] - a[0]) * (c[1] - a[1]) - (b[1] - a[1]) * (c[0] - a[0]);
	};

	function lexicographicOrder(a, b) {
	  return a[0] - b[0] || a[1] - b[1];
	}

	// Computes the upper convex hull per the monotone chain algorithm.
	// Assumes points.length >= 3, is sorted by x, unique in y.
	// Returns an array of indices into points in left-to-right order.
	function computeUpperHullIndexes(points) {
	  var n = points.length,
	      indexes = [0, 1],
	      size = 2;

	  for (var i = 2; i < n; ++i) {
	    while (size > 1 && cross(points[indexes[size - 2]], points[indexes[size - 1]], points[i]) <= 0) --size;
	    indexes[size++] = i;
	  }

	  return indexes.slice(0, size); // remove popped points
	}

	var hull = function(points) {
	  if ((n = points.length) < 3) return null;

	  var i,
	      n,
	      sortedPoints = new Array(n),
	      flippedPoints = new Array(n);

	  for (i = 0; i < n; ++i) sortedPoints[i] = [+points[i][0], +points[i][1], i];
	  sortedPoints.sort(lexicographicOrder);
	  for (i = 0; i < n; ++i) flippedPoints[i] = [sortedPoints[i][0], -sortedPoints[i][1]];

	  var upperIndexes = computeUpperHullIndexes(sortedPoints),
	      lowerIndexes = computeUpperHullIndexes(flippedPoints);

	  // Construct the hull polygon, removing possible duplicate endpoints.
	  var skipLeft = lowerIndexes[0] === upperIndexes[0],
	      skipRight = lowerIndexes[lowerIndexes.length - 1] === upperIndexes[upperIndexes.length - 1],
	      hull = [];

	  // Add upper hull in right-to-l order.
	  // Then add lower hull in left-to-right order.
	  for (i = upperIndexes.length - 1; i >= 0; --i) hull.push(points[sortedPoints[upperIndexes[i]][2]]);
	  for (i = +skipLeft; i < lowerIndexes.length - skipRight; ++i) hull.push(points[sortedPoints[lowerIndexes[i]][2]]);

	  return hull;
	};

	var contains = function(polygon, point) {
	  var n = polygon.length,
	      p = polygon[n - 1],
	      x = point[0], y = point[1],
	      x0 = p[0], y0 = p[1],
	      x1, y1,
	      inside = false;

	  for (var i = 0; i < n; ++i) {
	    p = polygon[i], x1 = p[0], y1 = p[1];
	    if (((y1 > y) !== (y0 > y)) && (x < (x0 - x1) * (y - y1) / (y0 - y1) + x1)) inside = !inside;
	    x0 = x1, y0 = y1;
	  }

	  return inside;
	};

	var length = function(polygon) {
	  var i = -1,
	      n = polygon.length,
	      b = polygon[n - 1],
	      xa,
	      ya,
	      xb = b[0],
	      yb = b[1],
	      perimeter = 0;

	  while (++i < n) {
	    xa = xb;
	    ya = yb;
	    b = polygon[i];
	    xb = b[0];
	    yb = b[1];
	    xa -= xb;
	    ya -= yb;
	    perimeter += Math.sqrt(xa * xa + ya * ya);
	  }

	  return perimeter;
	};

	exports.polygonArea = area;
	exports.polygonCentroid = centroid;
	exports.polygonHull = hull;
	exports.polygonContains = contains;
	exports.polygonLength = length;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 31 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-random/ Version 1.1.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var defaultSource = function() {
	  return Math.random();
	};

	var uniform = ((function sourceRandomUniform(source) {
	  function randomUniform(min, max) {
	    min = min == null ? 0 : +min;
	    max = max == null ? 1 : +max;
	    if (arguments.length === 1) max = min, min = 0;
	    else max -= min;
	    return function() {
	      return source() * max + min;
	    };
	  }

	  randomUniform.source = sourceRandomUniform;

	  return randomUniform;
	}))(defaultSource);

	var normal = ((function sourceRandomNormal(source) {
	  function randomNormal(mu, sigma) {
	    var x, r;
	    mu = mu == null ? 0 : +mu;
	    sigma = sigma == null ? 1 : +sigma;
	    return function() {
	      var y;

	      // If available, use the second previously-generated uniform random.
	      if (x != null) y = x, x = null;

	      // Otherwise, generate a new x and y.
	      else do {
	        x = source() * 2 - 1;
	        y = source() * 2 - 1;
	        r = x * x + y * y;
	      } while (!r || r > 1);

	      return mu + sigma * y * Math.sqrt(-2 * Math.log(r) / r);
	    };
	  }

	  randomNormal.source = sourceRandomNormal;

	  return randomNormal;
	}))(defaultSource);

	var logNormal = ((function sourceRandomLogNormal(source) {
	  function randomLogNormal() {
	    var randomNormal = normal.source(source).apply(this, arguments);
	    return function() {
	      return Math.exp(randomNormal());
	    };
	  }

	  randomLogNormal.source = sourceRandomLogNormal;

	  return randomLogNormal;
	}))(defaultSource);

	var irwinHall = ((function sourceRandomIrwinHall(source) {
	  function randomIrwinHall(n) {
	    return function() {
	      for (var sum = 0, i = 0; i < n; ++i) sum += source();
	      return sum;
	    };
	  }

	  randomIrwinHall.source = sourceRandomIrwinHall;

	  return randomIrwinHall;
	}))(defaultSource);

	var bates = ((function sourceRandomBates(source) {
	  function randomBates(n) {
	    var randomIrwinHall = irwinHall.source(source)(n);
	    return function() {
	      return randomIrwinHall() / n;
	    };
	  }

	  randomBates.source = sourceRandomBates;

	  return randomBates;
	}))(defaultSource);

	var exponential = ((function sourceRandomExponential(source) {
	  function randomExponential(lambda) {
	    return function() {
	      return -Math.log(1 - source()) / lambda;
	    };
	  }

	  randomExponential.source = sourceRandomExponential;

	  return randomExponential;
	}))(defaultSource);

	exports.randomUniform = uniform;
	exports.randomNormal = normal;
	exports.randomLogNormal = logNormal;
	exports.randomBates = bates;
	exports.randomIrwinHall = irwinHall;
	exports.randomExponential = exponential;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-scale/ Version 2.1.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(8), __webpack_require__(21), __webpack_require__(14), __webpack_require__(27), __webpack_require__(33), __webpack_require__(34)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-array', 'd3-collection', 'd3-interpolate', 'd3-format', 'd3-time', 'd3-time-format'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Array,d3Collection,d3Interpolate,d3Format,d3Time,d3TimeFormat) { 'use strict';

	var array = Array.prototype;

	var map$1 = array.map;
	var slice = array.slice;

	var implicit = {name: "implicit"};

	function ordinal(range$$1) {
	  var index = d3Collection.map(),
	      domain = [],
	      unknown = implicit;

	  range$$1 = range$$1 == null ? [] : slice.call(range$$1);

	  function scale(d) {
	    var key = d + "", i = index.get(key);
	    if (!i) {
	      if (unknown !== implicit) return unknown;
	      index.set(key, i = domain.push(d));
	    }
	    return range$$1[(i - 1) % range$$1.length];
	  }

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [], index = d3Collection.map();
	    var i = -1, n = _.length, d, key;
	    while (++i < n) if (!index.has(key = (d = _[i]) + "")) index.set(key, domain.push(d));
	    return scale;
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), scale) : range$$1.slice();
	  };

	  scale.unknown = function(_) {
	    return arguments.length ? (unknown = _, scale) : unknown;
	  };

	  scale.copy = function() {
	    return ordinal()
	        .domain(domain)
	        .range(range$$1)
	        .unknown(unknown);
	  };

	  return scale;
	}

	function band() {
	  var scale = ordinal().unknown(undefined),
	      domain = scale.domain,
	      ordinalRange = scale.range,
	      range$$1 = [0, 1],
	      step,
	      bandwidth,
	      round = false,
	      paddingInner = 0,
	      paddingOuter = 0,
	      align = 0.5;

	  delete scale.unknown;

	  function rescale() {
	    var n = domain().length,
	        reverse = range$$1[1] < range$$1[0],
	        start = range$$1[reverse - 0],
	        stop = range$$1[1 - reverse];
	    step = (stop - start) / Math.max(1, n - paddingInner + paddingOuter * 2);
	    if (round) step = Math.floor(step);
	    start += (stop - start - step * (n - paddingInner)) * align;
	    bandwidth = step * (1 - paddingInner);
	    if (round) start = Math.round(start), bandwidth = Math.round(bandwidth);
	    var values = d3Array.range(n).map(function(i) { return start + step * i; });
	    return ordinalRange(reverse ? values.reverse() : values);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = [+_[0], +_[1]], rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = [+_[0], +_[1]], round = true, rescale();
	  };

	  scale.bandwidth = function() {
	    return bandwidth;
	  };

	  scale.step = function() {
	    return step;
	  };

	  scale.round = function(_) {
	    return arguments.length ? (round = !!_, rescale()) : round;
	  };

	  scale.padding = function(_) {
	    return arguments.length ? (paddingInner = paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingInner = function(_) {
	    return arguments.length ? (paddingInner = Math.max(0, Math.min(1, _)), rescale()) : paddingInner;
	  };

	  scale.paddingOuter = function(_) {
	    return arguments.length ? (paddingOuter = Math.max(0, Math.min(1, _)), rescale()) : paddingOuter;
	  };

	  scale.align = function(_) {
	    return arguments.length ? (align = Math.max(0, Math.min(1, _)), rescale()) : align;
	  };

	  scale.copy = function() {
	    return band()
	        .domain(domain())
	        .range(range$$1)
	        .round(round)
	        .paddingInner(paddingInner)
	        .paddingOuter(paddingOuter)
	        .align(align);
	  };

	  return rescale();
	}

	function pointish(scale) {
	  var copy = scale.copy;

	  scale.padding = scale.paddingOuter;
	  delete scale.paddingInner;
	  delete scale.paddingOuter;

	  scale.copy = function() {
	    return pointish(copy());
	  };

	  return scale;
	}

	function point() {
	  return pointish(band().paddingInner(1));
	}

	function constant(x) {
	  return function() {
	    return x;
	  };
	}

	function number(x) {
	  return +x;
	}

	var unit = [0, 1];

	function deinterpolateLinear(a, b) {
	  return (b -= (a = +a))
	      ? function(x) { return (x - a) / b; }
	      : constant(b);
	}

	function deinterpolateClamp(deinterpolate) {
	  return function(a, b) {
	    var d = deinterpolate(a = +a, b = +b);
	    return function(x) { return x <= a ? 0 : x >= b ? 1 : d(x); };
	  };
	}

	function reinterpolateClamp(reinterpolate) {
	  return function(a, b) {
	    var r = reinterpolate(a = +a, b = +b);
	    return function(t) { return t <= 0 ? a : t >= 1 ? b : r(t); };
	  };
	}

	function bimap(domain, range$$1, deinterpolate, reinterpolate) {
	  var d0 = domain[0], d1 = domain[1], r0 = range$$1[0], r1 = range$$1[1];
	  if (d1 < d0) d0 = deinterpolate(d1, d0), r0 = reinterpolate(r1, r0);
	  else d0 = deinterpolate(d0, d1), r0 = reinterpolate(r0, r1);
	  return function(x) { return r0(d0(x)); };
	}

	function polymap(domain, range$$1, deinterpolate, reinterpolate) {
	  var j = Math.min(domain.length, range$$1.length) - 1,
	      d = new Array(j),
	      r = new Array(j),
	      i = -1;

	  // Reverse descending domains.
	  if (domain[j] < domain[0]) {
	    domain = domain.slice().reverse();
	    range$$1 = range$$1.slice().reverse();
	  }

	  while (++i < j) {
	    d[i] = deinterpolate(domain[i], domain[i + 1]);
	    r[i] = reinterpolate(range$$1[i], range$$1[i + 1]);
	  }

	  return function(x) {
	    var i = d3Array.bisect(domain, x, 1, j) - 1;
	    return r[i](d[i](x));
	  };
	}

	function copy(source, target) {
	  return target
	      .domain(source.domain())
	      .range(source.range())
	      .interpolate(source.interpolate())
	      .clamp(source.clamp());
	}

	// deinterpolate(a, b)(x) takes a domain value x in [a,b] and returns the corresponding parameter t in [0,1].
	// reinterpolate(a, b)(t) takes a parameter t in [0,1] and returns the corresponding domain value x in [a,b].
	function continuous(deinterpolate, reinterpolate) {
	  var domain = unit,
	      range$$1 = unit,
	      interpolate$$1 = d3Interpolate.interpolate,
	      clamp = false,
	      piecewise,
	      output,
	      input;

	  function rescale() {
	    piecewise = Math.min(domain.length, range$$1.length) > 2 ? polymap : bimap;
	    output = input = null;
	    return scale;
	  }

	  function scale(x) {
	    return (output || (output = piecewise(domain, range$$1, clamp ? deinterpolateClamp(deinterpolate) : deinterpolate, interpolate$$1)))(+x);
	  }

	  scale.invert = function(y) {
	    return (input || (input = piecewise(range$$1, domain, deinterpolateLinear, clamp ? reinterpolateClamp(reinterpolate) : reinterpolate)))(+y);
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain = map$1.call(_, number), rescale()) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
	  };

	  scale.rangeRound = function(_) {
	    return range$$1 = slice.call(_), interpolate$$1 = d3Interpolate.interpolateRound, rescale();
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, rescale()) : clamp;
	  };

	  scale.interpolate = function(_) {
	    return arguments.length ? (interpolate$$1 = _, rescale()) : interpolate$$1;
	  };

	  return rescale();
	}

	function tickFormat(domain, count, specifier) {
	  var start = domain[0],
	      stop = domain[domain.length - 1],
	      step = d3Array.tickStep(start, stop, count == null ? 10 : count),
	      precision;
	  specifier = d3Format.formatSpecifier(specifier == null ? ",f" : specifier);
	  switch (specifier.type) {
	    case "s": {
	      var value = Math.max(Math.abs(start), Math.abs(stop));
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionPrefix(step, value))) specifier.precision = precision;
	      return d3Format.formatPrefix(specifier, value);
	    }
	    case "":
	    case "e":
	    case "g":
	    case "p":
	    case "r": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionRound(step, Math.max(Math.abs(start), Math.abs(stop))))) specifier.precision = precision - (specifier.type === "e");
	      break;
	    }
	    case "f":
	    case "%": {
	      if (specifier.precision == null && !isNaN(precision = d3Format.precisionFixed(step))) specifier.precision = precision - (specifier.type === "%") * 2;
	      break;
	    }
	  }
	  return d3Format.format(specifier);
	}

	function linearish(scale) {
	  var domain = scale.domain;

	  scale.ticks = function(count) {
	    var d = domain();
	    return d3Array.ticks(d[0], d[d.length - 1], count == null ? 10 : count);
	  };

	  scale.tickFormat = function(count, specifier) {
	    return tickFormat(domain(), count, specifier);
	  };

	  scale.nice = function(count) {
	    if (count == null) count = 10;

	    var d = domain(),
	        i0 = 0,
	        i1 = d.length - 1,
	        start = d[i0],
	        stop = d[i1],
	        step;

	    if (stop < start) {
	      step = start, start = stop, stop = step;
	      step = i0, i0 = i1, i1 = step;
	    }

	    step = d3Array.tickIncrement(start, stop, count);

	    if (step > 0) {
	      start = Math.floor(start / step) * step;
	      stop = Math.ceil(stop / step) * step;
	      step = d3Array.tickIncrement(start, stop, count);
	    } else if (step < 0) {
	      start = Math.ceil(start * step) / step;
	      stop = Math.floor(stop * step) / step;
	      step = d3Array.tickIncrement(start, stop, count);
	    }

	    if (step > 0) {
	      d[i0] = Math.floor(start / step) * step;
	      d[i1] = Math.ceil(stop / step) * step;
	      domain(d);
	    } else if (step < 0) {
	      d[i0] = Math.ceil(start * step) / step;
	      d[i1] = Math.floor(stop * step) / step;
	      domain(d);
	    }

	    return scale;
	  };

	  return scale;
	}

	function linear() {
	  var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber);

	  scale.copy = function() {
	    return copy(scale, linear());
	  };

	  return linearish(scale);
	}

	function identity() {
	  var domain = [0, 1];

	  function scale(x) {
	    return +x;
	  }

	  scale.invert = scale;

	  scale.domain = scale.range = function(_) {
	    return arguments.length ? (domain = map$1.call(_, number), scale) : domain.slice();
	  };

	  scale.copy = function() {
	    return identity().domain(domain);
	  };

	  return linearish(scale);
	}

	function nice(domain, interval) {
	  domain = domain.slice();

	  var i0 = 0,
	      i1 = domain.length - 1,
	      x0 = domain[i0],
	      x1 = domain[i1],
	      t;

	  if (x1 < x0) {
	    t = i0, i0 = i1, i1 = t;
	    t = x0, x0 = x1, x1 = t;
	  }

	  domain[i0] = interval.floor(x0);
	  domain[i1] = interval.ceil(x1);
	  return domain;
	}

	function deinterpolate(a, b) {
	  return (b = Math.log(b / a))
	      ? function(x) { return Math.log(x / a) / b; }
	      : constant(b);
	}

	function reinterpolate(a, b) {
	  return a < 0
	      ? function(t) { return -Math.pow(-b, t) * Math.pow(-a, 1 - t); }
	      : function(t) { return Math.pow(b, t) * Math.pow(a, 1 - t); };
	}

	function pow10(x) {
	  return isFinite(x) ? +("1e" + x) : x < 0 ? 0 : x;
	}

	function powp(base) {
	  return base === 10 ? pow10
	      : base === Math.E ? Math.exp
	      : function(x) { return Math.pow(base, x); };
	}

	function logp(base) {
	  return base === Math.E ? Math.log
	      : base === 10 && Math.log10
	      || base === 2 && Math.log2
	      || (base = Math.log(base), function(x) { return Math.log(x) / base; });
	}

	function reflect(f) {
	  return function(x) {
	    return -f(-x);
	  };
	}

	function log() {
	  var scale = continuous(deinterpolate, reinterpolate).domain([1, 10]),
	      domain = scale.domain,
	      base = 10,
	      logs = logp(10),
	      pows = powp(10);

	  function rescale() {
	    logs = logp(base), pows = powp(base);
	    if (domain()[0] < 0) logs = reflect(logs), pows = reflect(pows);
	    return scale;
	  }

	  scale.base = function(_) {
	    return arguments.length ? (base = +_, rescale()) : base;
	  };

	  scale.domain = function(_) {
	    return arguments.length ? (domain(_), rescale()) : domain();
	  };

	  scale.ticks = function(count) {
	    var d = domain(),
	        u = d[0],
	        v = d[d.length - 1],
	        r;

	    if (r = v < u) i = u, u = v, v = i;

	    var i = logs(u),
	        j = logs(v),
	        p,
	        k,
	        t,
	        n = count == null ? 10 : +count,
	        z = [];

	    if (!(base % 1) && j - i < n) {
	      i = Math.round(i) - 1, j = Math.round(j) + 1;
	      if (u > 0) for (; i < j; ++i) {
	        for (k = 1, p = pows(i); k < base; ++k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      } else for (; i < j; ++i) {
	        for (k = base - 1, p = pows(i); k >= 1; --k) {
	          t = p * k;
	          if (t < u) continue;
	          if (t > v) break;
	          z.push(t);
	        }
	      }
	    } else {
	      z = d3Array.ticks(i, j, Math.min(j - i, n)).map(pows);
	    }

	    return r ? z.reverse() : z;
	  };

	  scale.tickFormat = function(count, specifier) {
	    if (specifier == null) specifier = base === 10 ? ".0e" : ",";
	    if (typeof specifier !== "function") specifier = d3Format.format(specifier);
	    if (count === Infinity) return specifier;
	    if (count == null) count = 10;
	    var k = Math.max(1, base * count / scale.ticks().length); // TODO fast estimate?
	    return function(d) {
	      var i = d / pows(Math.round(logs(d)));
	      if (i * base < base - 0.5) i *= base;
	      return i <= k ? specifier(d) : "";
	    };
	  };

	  scale.nice = function() {
	    return domain(nice(domain(), {
	      floor: function(x) { return pows(Math.floor(logs(x))); },
	      ceil: function(x) { return pows(Math.ceil(logs(x))); }
	    }));
	  };

	  scale.copy = function() {
	    return copy(scale, log().base(base));
	  };

	  return scale;
	}

	function raise(x, exponent) {
	  return x < 0 ? -Math.pow(-x, exponent) : Math.pow(x, exponent);
	}

	function pow() {
	  var exponent = 1,
	      scale = continuous(deinterpolate, reinterpolate),
	      domain = scale.domain;

	  function deinterpolate(a, b) {
	    return (b = raise(b, exponent) - (a = raise(a, exponent)))
	        ? function(x) { return (raise(x, exponent) - a) / b; }
	        : constant(b);
	  }

	  function reinterpolate(a, b) {
	    b = raise(b, exponent) - (a = raise(a, exponent));
	    return function(t) { return raise(a + b * t, 1 / exponent); };
	  }

	  scale.exponent = function(_) {
	    return arguments.length ? (exponent = +_, domain(domain())) : exponent;
	  };

	  scale.copy = function() {
	    return copy(scale, pow().exponent(exponent));
	  };

	  return linearish(scale);
	}

	function sqrt() {
	  return pow().exponent(0.5);
	}

	function quantile$1() {
	  var domain = [],
	      range$$1 = [],
	      thresholds = [];

	  function rescale() {
	    var i = 0, n = Math.max(1, range$$1.length);
	    thresholds = new Array(n - 1);
	    while (++i < n) thresholds[i - 1] = d3Array.quantile(domain, i / n);
	    return scale;
	  }

	  function scale(x) {
	    if (!isNaN(x = +x)) return range$$1[d3Array.bisect(thresholds, x)];
	  }

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN] : [
	      i > 0 ? thresholds[i - 1] : domain[0],
	      i < thresholds.length ? thresholds[i] : domain[domain.length - 1]
	    ];
	  };

	  scale.domain = function(_) {
	    if (!arguments.length) return domain.slice();
	    domain = [];
	    for (var i = 0, n = _.length, d; i < n; ++i) if (d = _[i], d != null && !isNaN(d = +d)) domain.push(d);
	    domain.sort(d3Array.ascending);
	    return rescale();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), rescale()) : range$$1.slice();
	  };

	  scale.quantiles = function() {
	    return thresholds.slice();
	  };

	  scale.copy = function() {
	    return quantile$1()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	function quantize() {
	  var x0 = 0,
	      x1 = 1,
	      n = 1,
	      domain = [0.5],
	      range$$1 = [0, 1];

	  function scale(x) {
	    if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
	  }

	  function rescale() {
	    var i = -1;
	    domain = new Array(n);
	    while (++i < n) domain[i] = ((i + 1) * x1 - (i - n) * x0) / (n + 1);
	    return scale;
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], rescale()) : [x0, x1];
	  };

	  scale.range = function(_) {
	    return arguments.length ? (n = (range$$1 = slice.call(_)).length - 1, rescale()) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return i < 0 ? [NaN, NaN]
	        : i < 1 ? [x0, domain[0]]
	        : i >= n ? [domain[n - 1], x1]
	        : [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return quantize()
	        .domain([x0, x1])
	        .range(range$$1);
	  };

	  return linearish(scale);
	}

	function threshold() {
	  var domain = [0.5],
	      range$$1 = [0, 1],
	      n = 1;

	  function scale(x) {
	    if (x <= x) return range$$1[d3Array.bisect(domain, x, 0, n)];
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (domain = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : domain.slice();
	  };

	  scale.range = function(_) {
	    return arguments.length ? (range$$1 = slice.call(_), n = Math.min(domain.length, range$$1.length - 1), scale) : range$$1.slice();
	  };

	  scale.invertExtent = function(y) {
	    var i = range$$1.indexOf(y);
	    return [domain[i - 1], domain[i]];
	  };

	  scale.copy = function() {
	    return threshold()
	        .domain(domain)
	        .range(range$$1);
	  };

	  return scale;
	}

	var durationSecond = 1000;
	var durationMinute = durationSecond * 60;
	var durationHour = durationMinute * 60;
	var durationDay = durationHour * 24;
	var durationWeek = durationDay * 7;
	var durationMonth = durationDay * 30;
	var durationYear = durationDay * 365;

	function date(t) {
	  return new Date(t);
	}

	function number$1(t) {
	  return t instanceof Date ? +t : +new Date(+t);
	}

	function calendar(year, month, week, day, hour, minute, second, millisecond, format$$1) {
	  var scale = continuous(deinterpolateLinear, d3Interpolate.interpolateNumber),
	      invert = scale.invert,
	      domain = scale.domain;

	  var formatMillisecond = format$$1(".%L"),
	      formatSecond = format$$1(":%S"),
	      formatMinute = format$$1("%I:%M"),
	      formatHour = format$$1("%I %p"),
	      formatDay = format$$1("%a %d"),
	      formatWeek = format$$1("%b %d"),
	      formatMonth = format$$1("%B"),
	      formatYear = format$$1("%Y");

	  var tickIntervals = [
	    [second,  1,      durationSecond],
	    [second,  5,  5 * durationSecond],
	    [second, 15, 15 * durationSecond],
	    [second, 30, 30 * durationSecond],
	    [minute,  1,      durationMinute],
	    [minute,  5,  5 * durationMinute],
	    [minute, 15, 15 * durationMinute],
	    [minute, 30, 30 * durationMinute],
	    [  hour,  1,      durationHour  ],
	    [  hour,  3,  3 * durationHour  ],
	    [  hour,  6,  6 * durationHour  ],
	    [  hour, 12, 12 * durationHour  ],
	    [   day,  1,      durationDay   ],
	    [   day,  2,  2 * durationDay   ],
	    [  week,  1,      durationWeek  ],
	    [ month,  1,      durationMonth ],
	    [ month,  3,  3 * durationMonth ],
	    [  year,  1,      durationYear  ]
	  ];

	  function tickFormat(date) {
	    return (second(date) < date ? formatMillisecond
	        : minute(date) < date ? formatSecond
	        : hour(date) < date ? formatMinute
	        : day(date) < date ? formatHour
	        : month(date) < date ? (week(date) < date ? formatDay : formatWeek)
	        : year(date) < date ? formatMonth
	        : formatYear)(date);
	  }

	  function tickInterval(interval, start, stop, step) {
	    if (interval == null) interval = 10;

	    // If a desired tick count is specified, pick a reasonable tick interval
	    // based on the extent of the domain and a rough estimate of tick size.
	    // Otherwise, assume interval is already a time interval and use it.
	    if (typeof interval === "number") {
	      var target = Math.abs(stop - start) / interval,
	          i = d3Array.bisector(function(i) { return i[2]; }).right(tickIntervals, target);
	      if (i === tickIntervals.length) {
	        step = d3Array.tickStep(start / durationYear, stop / durationYear, interval);
	        interval = year;
	      } else if (i) {
	        i = tickIntervals[target / tickIntervals[i - 1][2] < tickIntervals[i][2] / target ? i - 1 : i];
	        step = i[1];
	        interval = i[0];
	      } else {
	        step = Math.max(d3Array.tickStep(start, stop, interval), 1);
	        interval = millisecond;
	      }
	    }

	    return step == null ? interval : interval.every(step);
	  }

	  scale.invert = function(y) {
	    return new Date(invert(y));
	  };

	  scale.domain = function(_) {
	    return arguments.length ? domain(map$1.call(_, number$1)) : domain().map(date);
	  };

	  scale.ticks = function(interval, step) {
	    var d = domain(),
	        t0 = d[0],
	        t1 = d[d.length - 1],
	        r = t1 < t0,
	        t;
	    if (r) t = t0, t0 = t1, t1 = t;
	    t = tickInterval(interval, t0, t1, step);
	    t = t ? t.range(t0, t1 + 1) : []; // inclusive stop
	    return r ? t.reverse() : t;
	  };

	  scale.tickFormat = function(count, specifier) {
	    return specifier == null ? tickFormat : format$$1(specifier);
	  };

	  scale.nice = function(interval, step) {
	    var d = domain();
	    return (interval = tickInterval(interval, d[0], d[d.length - 1], step))
	        ? domain(nice(d, interval))
	        : scale;
	  };

	  scale.copy = function() {
	    return copy(scale, calendar(year, month, week, day, hour, minute, second, millisecond, format$$1));
	  };

	  return scale;
	}

	function time() {
	  return calendar(d3Time.timeYear, d3Time.timeMonth, d3Time.timeWeek, d3Time.timeDay, d3Time.timeHour, d3Time.timeMinute, d3Time.timeSecond, d3Time.timeMillisecond, d3TimeFormat.timeFormat).domain([new Date(2000, 0, 1), new Date(2000, 0, 2)]);
	}

	function utcTime() {
	  return calendar(d3Time.utcYear, d3Time.utcMonth, d3Time.utcWeek, d3Time.utcDay, d3Time.utcHour, d3Time.utcMinute, d3Time.utcSecond, d3Time.utcMillisecond, d3TimeFormat.utcFormat).domain([Date.UTC(2000, 0, 1), Date.UTC(2000, 0, 2)]);
	}

	function sequential(interpolator) {
	  var x0 = 0,
	      x1 = 1,
	      k10 = 1,
	      clamp = false;

	  function scale(x) {
	    var t = (x - x0) * k10;
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], k10 = x0 === x1 ? 0 : 1 / (x1 - x0), scale) : [x0, x1];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return sequential(interpolator).domain([x0, x1]).clamp(clamp);
	  };

	  return linearish(scale);
	}

	function diverging(interpolator) {
	  var x0 = 0,
	      x1 = 0.5,
	      x2 = 1,
	      k10 = 1,
	      k21 = 1,
	      clamp = false;

	  function scale(x) {
	    var t = 0.5 + ((x = +x) - x1) * (x < x1 ? k10 : k21);
	    return interpolator(clamp ? Math.max(0, Math.min(1, t)) : t);
	  }

	  scale.domain = function(_) {
	    return arguments.length ? (x0 = +_[0], x1 = +_[1], x2 = +_[2], k10 = x0 === x1 ? 0 : 0.5 / (x1 - x0), k21 = x1 === x2 ? 0 : 0.5 / (x2 - x1), scale) : [x0, x1, x2];
	  };

	  scale.clamp = function(_) {
	    return arguments.length ? (clamp = !!_, scale) : clamp;
	  };

	  scale.interpolator = function(_) {
	    return arguments.length ? (interpolator = _, scale) : interpolator;
	  };

	  scale.copy = function() {
	    return diverging(interpolator).domain([x0, x1, x2]).clamp(clamp);
	  };

	  return linearish(scale);
	}

	exports.scaleBand = band;
	exports.scalePoint = point;
	exports.scaleIdentity = identity;
	exports.scaleLinear = linear;
	exports.scaleLog = log;
	exports.scaleOrdinal = ordinal;
	exports.scaleImplicit = implicit;
	exports.scalePow = pow;
	exports.scaleSqrt = sqrt;
	exports.scaleQuantile = quantile$1;
	exports.scaleQuantize = quantize;
	exports.scaleThreshold = threshold;
	exports.scaleTime = time;
	exports.scaleUtc = utcTime;
	exports.scaleSequential = sequential;
	exports.scaleDiverging = diverging;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time/ Version 1.0.8. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var t0 = new Date;
	var t1 = new Date;

	function newInterval(floori, offseti, count, field) {

	  function interval(date) {
	    return floori(date = new Date(+date)), date;
	  }

	  interval.floor = interval;

	  interval.ceil = function(date) {
	    return floori(date = new Date(date - 1)), offseti(date, 1), floori(date), date;
	  };

	  interval.round = function(date) {
	    var d0 = interval(date),
	        d1 = interval.ceil(date);
	    return date - d0 < d1 - date ? d0 : d1;
	  };

	  interval.offset = function(date, step) {
	    return offseti(date = new Date(+date), step == null ? 1 : Math.floor(step)), date;
	  };

	  interval.range = function(start, stop, step) {
	    var range = [], previous;
	    start = interval.ceil(start);
	    step = step == null ? 1 : Math.floor(step);
	    if (!(start < stop) || !(step > 0)) return range; // also handles Invalid Date
	    do range.push(previous = new Date(+start)), offseti(start, step), floori(start);
	    while (previous < start && start < stop);
	    return range;
	  };

	  interval.filter = function(test) {
	    return newInterval(function(date) {
	      if (date >= date) while (floori(date), !test(date)) date.setTime(date - 1);
	    }, function(date, step) {
	      if (date >= date) {
	        if (step < 0) while (++step <= 0) {
	          while (offseti(date, -1), !test(date)) {} // eslint-disable-line no-empty
	        } else while (--step >= 0) {
	          while (offseti(date, +1), !test(date)) {} // eslint-disable-line no-empty
	        }
	      }
	    });
	  };

	  if (count) {
	    interval.count = function(start, end) {
	      t0.setTime(+start), t1.setTime(+end);
	      floori(t0), floori(t1);
	      return Math.floor(count(t0, t1));
	    };

	    interval.every = function(step) {
	      step = Math.floor(step);
	      return !isFinite(step) || !(step > 0) ? null
	          : !(step > 1) ? interval
	          : interval.filter(field
	              ? function(d) { return field(d) % step === 0; }
	              : function(d) { return interval.count(0, d) % step === 0; });
	    };
	  }

	  return interval;
	}

	var millisecond = newInterval(function() {
	  // noop
	}, function(date, step) {
	  date.setTime(+date + step);
	}, function(start, end) {
	  return end - start;
	});

	// An optimized implementation for this simple case.
	millisecond.every = function(k) {
	  k = Math.floor(k);
	  if (!isFinite(k) || !(k > 0)) return null;
	  if (!(k > 1)) return millisecond;
	  return newInterval(function(date) {
	    date.setTime(Math.floor(date / k) * k);
	  }, function(date, step) {
	    date.setTime(+date + step * k);
	  }, function(start, end) {
	    return (end - start) / k;
	  });
	};

	var milliseconds = millisecond.range;

	var durationSecond = 1e3;
	var durationMinute = 6e4;
	var durationHour = 36e5;
	var durationDay = 864e5;
	var durationWeek = 6048e5;

	var second = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationSecond) * durationSecond);
	}, function(date, step) {
	  date.setTime(+date + step * durationSecond);
	}, function(start, end) {
	  return (end - start) / durationSecond;
	}, function(date) {
	  return date.getUTCSeconds();
	});

	var seconds = second.range;

	var minute = newInterval(function(date) {
	  date.setTime(Math.floor(date / durationMinute) * durationMinute);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getMinutes();
	});

	var minutes = minute.range;

	var hour = newInterval(function(date) {
	  var offset = date.getTimezoneOffset() * durationMinute % durationHour;
	  if (offset < 0) offset += durationHour;
	  date.setTime(Math.floor((+date - offset) / durationHour) * durationHour + offset);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getHours();
	});

	var hours = hour.range;

	var day = newInterval(function(date) {
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setDate(date.getDate() + step);
	}, function(start, end) {
	  return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationDay;
	}, function(date) {
	  return date.getDate() - 1;
	});

	var days = day.range;

	function weekday(i) {
	  return newInterval(function(date) {
	    date.setDate(date.getDate() - (date.getDay() + 7 - i) % 7);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setDate(date.getDate() + step * 7);
	  }, function(start, end) {
	    return (end - start - (end.getTimezoneOffset() - start.getTimezoneOffset()) * durationMinute) / durationWeek;
	  });
	}

	var sunday = weekday(0);
	var monday = weekday(1);
	var tuesday = weekday(2);
	var wednesday = weekday(3);
	var thursday = weekday(4);
	var friday = weekday(5);
	var saturday = weekday(6);

	var sundays = sunday.range;
	var mondays = monday.range;
	var tuesdays = tuesday.range;
	var wednesdays = wednesday.range;
	var thursdays = thursday.range;
	var fridays = friday.range;
	var saturdays = saturday.range;

	var month = newInterval(function(date) {
	  date.setDate(1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setMonth(date.getMonth() + step);
	}, function(start, end) {
	  return end.getMonth() - start.getMonth() + (end.getFullYear() - start.getFullYear()) * 12;
	}, function(date) {
	  return date.getMonth();
	});

	var months = month.range;

	var year = newInterval(function(date) {
	  date.setMonth(0, 1);
	  date.setHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setFullYear(date.getFullYear() + step);
	}, function(start, end) {
	  return end.getFullYear() - start.getFullYear();
	}, function(date) {
	  return date.getFullYear();
	});

	// An optimized implementation for this simple case.
	year.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setFullYear(Math.floor(date.getFullYear() / k) * k);
	    date.setMonth(0, 1);
	    date.setHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setFullYear(date.getFullYear() + step * k);
	  });
	};

	var years = year.range;

	var utcMinute = newInterval(function(date) {
	  date.setUTCSeconds(0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationMinute);
	}, function(start, end) {
	  return (end - start) / durationMinute;
	}, function(date) {
	  return date.getUTCMinutes();
	});

	var utcMinutes = utcMinute.range;

	var utcHour = newInterval(function(date) {
	  date.setUTCMinutes(0, 0, 0);
	}, function(date, step) {
	  date.setTime(+date + step * durationHour);
	}, function(start, end) {
	  return (end - start) / durationHour;
	}, function(date) {
	  return date.getUTCHours();
	});

	var utcHours = utcHour.range;

	var utcDay = newInterval(function(date) {
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCDate(date.getUTCDate() + step);
	}, function(start, end) {
	  return (end - start) / durationDay;
	}, function(date) {
	  return date.getUTCDate() - 1;
	});

	var utcDays = utcDay.range;

	function utcWeekday(i) {
	  return newInterval(function(date) {
	    date.setUTCDate(date.getUTCDate() - (date.getUTCDay() + 7 - i) % 7);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCDate(date.getUTCDate() + step * 7);
	  }, function(start, end) {
	    return (end - start) / durationWeek;
	  });
	}

	var utcSunday = utcWeekday(0);
	var utcMonday = utcWeekday(1);
	var utcTuesday = utcWeekday(2);
	var utcWednesday = utcWeekday(3);
	var utcThursday = utcWeekday(4);
	var utcFriday = utcWeekday(5);
	var utcSaturday = utcWeekday(6);

	var utcSundays = utcSunday.range;
	var utcMondays = utcMonday.range;
	var utcTuesdays = utcTuesday.range;
	var utcWednesdays = utcWednesday.range;
	var utcThursdays = utcThursday.range;
	var utcFridays = utcFriday.range;
	var utcSaturdays = utcSaturday.range;

	var utcMonth = newInterval(function(date) {
	  date.setUTCDate(1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCMonth(date.getUTCMonth() + step);
	}, function(start, end) {
	  return end.getUTCMonth() - start.getUTCMonth() + (end.getUTCFullYear() - start.getUTCFullYear()) * 12;
	}, function(date) {
	  return date.getUTCMonth();
	});

	var utcMonths = utcMonth.range;

	var utcYear = newInterval(function(date) {
	  date.setUTCMonth(0, 1);
	  date.setUTCHours(0, 0, 0, 0);
	}, function(date, step) {
	  date.setUTCFullYear(date.getUTCFullYear() + step);
	}, function(start, end) {
	  return end.getUTCFullYear() - start.getUTCFullYear();
	}, function(date) {
	  return date.getUTCFullYear();
	});

	// An optimized implementation for this simple case.
	utcYear.every = function(k) {
	  return !isFinite(k = Math.floor(k)) || !(k > 0) ? null : newInterval(function(date) {
	    date.setUTCFullYear(Math.floor(date.getUTCFullYear() / k) * k);
	    date.setUTCMonth(0, 1);
	    date.setUTCHours(0, 0, 0, 0);
	  }, function(date, step) {
	    date.setUTCFullYear(date.getUTCFullYear() + step * k);
	  });
	};

	var utcYears = utcYear.range;

	exports.timeInterval = newInterval;
	exports.timeMillisecond = millisecond;
	exports.timeMilliseconds = milliseconds;
	exports.utcMillisecond = millisecond;
	exports.utcMilliseconds = milliseconds;
	exports.timeSecond = second;
	exports.timeSeconds = seconds;
	exports.utcSecond = second;
	exports.utcSeconds = seconds;
	exports.timeMinute = minute;
	exports.timeMinutes = minutes;
	exports.timeHour = hour;
	exports.timeHours = hours;
	exports.timeDay = day;
	exports.timeDays = days;
	exports.timeWeek = sunday;
	exports.timeWeeks = sundays;
	exports.timeSunday = sunday;
	exports.timeSundays = sundays;
	exports.timeMonday = monday;
	exports.timeMondays = mondays;
	exports.timeTuesday = tuesday;
	exports.timeTuesdays = tuesdays;
	exports.timeWednesday = wednesday;
	exports.timeWednesdays = wednesdays;
	exports.timeThursday = thursday;
	exports.timeThursdays = thursdays;
	exports.timeFriday = friday;
	exports.timeFridays = fridays;
	exports.timeSaturday = saturday;
	exports.timeSaturdays = saturdays;
	exports.timeMonth = month;
	exports.timeMonths = months;
	exports.timeYear = year;
	exports.timeYears = years;
	exports.utcMinute = utcMinute;
	exports.utcMinutes = utcMinutes;
	exports.utcHour = utcHour;
	exports.utcHours = utcHours;
	exports.utcDay = utcDay;
	exports.utcDays = utcDays;
	exports.utcWeek = utcSunday;
	exports.utcWeeks = utcSundays;
	exports.utcSunday = utcSunday;
	exports.utcSundays = utcSundays;
	exports.utcMonday = utcMonday;
	exports.utcMondays = utcMondays;
	exports.utcTuesday = utcTuesday;
	exports.utcTuesdays = utcTuesdays;
	exports.utcWednesday = utcWednesday;
	exports.utcWednesdays = utcWednesdays;
	exports.utcThursday = utcThursday;
	exports.utcThursdays = utcThursdays;
	exports.utcFriday = utcFriday;
	exports.utcFridays = utcFridays;
	exports.utcSaturday = utcSaturday;
	exports.utcSaturdays = utcSaturdays;
	exports.utcMonth = utcMonth;
	exports.utcMonths = utcMonths;
	exports.utcYear = utcYear;
	exports.utcYears = utcYears;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-time-format/ Version 2.1.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(33)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-time'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Time) { 'use strict';

	function localDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(-1, d.m, d.d, d.H, d.M, d.S, d.L);
	    date.setFullYear(d.y);
	    return date;
	  }
	  return new Date(d.y, d.m, d.d, d.H, d.M, d.S, d.L);
	}

	function utcDate(d) {
	  if (0 <= d.y && d.y < 100) {
	    var date = new Date(Date.UTC(-1, d.m, d.d, d.H, d.M, d.S, d.L));
	    date.setUTCFullYear(d.y);
	    return date;
	  }
	  return new Date(Date.UTC(d.y, d.m, d.d, d.H, d.M, d.S, d.L));
	}

	function newYear(y) {
	  return {y: y, m: 0, d: 1, H: 0, M: 0, S: 0, L: 0};
	}

	function formatLocale(locale) {
	  var locale_dateTime = locale.dateTime,
	      locale_date = locale.date,
	      locale_time = locale.time,
	      locale_periods = locale.periods,
	      locale_weekdays = locale.days,
	      locale_shortWeekdays = locale.shortDays,
	      locale_months = locale.months,
	      locale_shortMonths = locale.shortMonths;

	  var periodRe = formatRe(locale_periods),
	      periodLookup = formatLookup(locale_periods),
	      weekdayRe = formatRe(locale_weekdays),
	      weekdayLookup = formatLookup(locale_weekdays),
	      shortWeekdayRe = formatRe(locale_shortWeekdays),
	      shortWeekdayLookup = formatLookup(locale_shortWeekdays),
	      monthRe = formatRe(locale_months),
	      monthLookup = formatLookup(locale_months),
	      shortMonthRe = formatRe(locale_shortMonths),
	      shortMonthLookup = formatLookup(locale_shortMonths);

	  var formats = {
	    "a": formatShortWeekday,
	    "A": formatWeekday,
	    "b": formatShortMonth,
	    "B": formatMonth,
	    "c": null,
	    "d": formatDayOfMonth,
	    "e": formatDayOfMonth,
	    "f": formatMicroseconds,
	    "H": formatHour24,
	    "I": formatHour12,
	    "j": formatDayOfYear,
	    "L": formatMilliseconds,
	    "m": formatMonthNumber,
	    "M": formatMinutes,
	    "p": formatPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatSeconds,
	    "u": formatWeekdayNumberMonday,
	    "U": formatWeekNumberSunday,
	    "V": formatWeekNumberISO,
	    "w": formatWeekdayNumberSunday,
	    "W": formatWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatYear,
	    "Y": formatFullYear,
	    "Z": formatZone,
	    "%": formatLiteralPercent
	  };

	  var utcFormats = {
	    "a": formatUTCShortWeekday,
	    "A": formatUTCWeekday,
	    "b": formatUTCShortMonth,
	    "B": formatUTCMonth,
	    "c": null,
	    "d": formatUTCDayOfMonth,
	    "e": formatUTCDayOfMonth,
	    "f": formatUTCMicroseconds,
	    "H": formatUTCHour24,
	    "I": formatUTCHour12,
	    "j": formatUTCDayOfYear,
	    "L": formatUTCMilliseconds,
	    "m": formatUTCMonthNumber,
	    "M": formatUTCMinutes,
	    "p": formatUTCPeriod,
	    "Q": formatUnixTimestamp,
	    "s": formatUnixTimestampSeconds,
	    "S": formatUTCSeconds,
	    "u": formatUTCWeekdayNumberMonday,
	    "U": formatUTCWeekNumberSunday,
	    "V": formatUTCWeekNumberISO,
	    "w": formatUTCWeekdayNumberSunday,
	    "W": formatUTCWeekNumberMonday,
	    "x": null,
	    "X": null,
	    "y": formatUTCYear,
	    "Y": formatUTCFullYear,
	    "Z": formatUTCZone,
	    "%": formatLiteralPercent
	  };

	  var parses = {
	    "a": parseShortWeekday,
	    "A": parseWeekday,
	    "b": parseShortMonth,
	    "B": parseMonth,
	    "c": parseLocaleDateTime,
	    "d": parseDayOfMonth,
	    "e": parseDayOfMonth,
	    "f": parseMicroseconds,
	    "H": parseHour24,
	    "I": parseHour24,
	    "j": parseDayOfYear,
	    "L": parseMilliseconds,
	    "m": parseMonthNumber,
	    "M": parseMinutes,
	    "p": parsePeriod,
	    "Q": parseUnixTimestamp,
	    "s": parseUnixTimestampSeconds,
	    "S": parseSeconds,
	    "u": parseWeekdayNumberMonday,
	    "U": parseWeekNumberSunday,
	    "V": parseWeekNumberISO,
	    "w": parseWeekdayNumberSunday,
	    "W": parseWeekNumberMonday,
	    "x": parseLocaleDate,
	    "X": parseLocaleTime,
	    "y": parseYear,
	    "Y": parseFullYear,
	    "Z": parseZone,
	    "%": parseLiteralPercent
	  };

	  // These recursive directive definitions must be deferred.
	  formats.x = newFormat(locale_date, formats);
	  formats.X = newFormat(locale_time, formats);
	  formats.c = newFormat(locale_dateTime, formats);
	  utcFormats.x = newFormat(locale_date, utcFormats);
	  utcFormats.X = newFormat(locale_time, utcFormats);
	  utcFormats.c = newFormat(locale_dateTime, utcFormats);

	  function newFormat(specifier, formats) {
	    return function(date) {
	      var string = [],
	          i = -1,
	          j = 0,
	          n = specifier.length,
	          c,
	          pad,
	          format;

	      if (!(date instanceof Date)) date = new Date(+date);

	      while (++i < n) {
	        if (specifier.charCodeAt(i) === 37) {
	          string.push(specifier.slice(j, i));
	          if ((pad = pads[c = specifier.charAt(++i)]) != null) c = specifier.charAt(++i);
	          else pad = c === "e" ? " " : "0";
	          if (format = formats[c]) c = format(date, pad);
	          string.push(c);
	          j = i + 1;
	        }
	      }

	      string.push(specifier.slice(j, i));
	      return string.join("");
	    };
	  }

	  function newParse(specifier, newDate) {
	    return function(string) {
	      var d = newYear(1900),
	          i = parseSpecifier(d, specifier, string += "", 0),
	          week, day;
	      if (i != string.length) return null;

	      // If a UNIX timestamp is specified, return it.
	      if ("Q" in d) return new Date(d.Q);

	      // The am-pm flag is 0 for AM, and 1 for PM.
	      if ("p" in d) d.H = d.H % 12 + d.p * 12;

	      // Convert day-of-week and week-of-year to day-of-year.
	      if ("V" in d) {
	        if (d.V < 1 || d.V > 53) return null;
	        if (!("w" in d)) d.w = 1;
	        if ("Z" in d) {
	          week = utcDate(newYear(d.y)), day = week.getUTCDay();
	          week = day > 4 || day === 0 ? d3Time.utcMonday.ceil(week) : d3Time.utcMonday(week);
	          week = d3Time.utcDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getUTCFullYear();
	          d.m = week.getUTCMonth();
	          d.d = week.getUTCDate() + (d.w + 6) % 7;
	        } else {
	          week = newDate(newYear(d.y)), day = week.getDay();
	          week = day > 4 || day === 0 ? d3Time.timeMonday.ceil(week) : d3Time.timeMonday(week);
	          week = d3Time.timeDay.offset(week, (d.V - 1) * 7);
	          d.y = week.getFullYear();
	          d.m = week.getMonth();
	          d.d = week.getDate() + (d.w + 6) % 7;
	        }
	      } else if ("W" in d || "U" in d) {
	        if (!("w" in d)) d.w = "u" in d ? d.u % 7 : "W" in d ? 1 : 0;
	        day = "Z" in d ? utcDate(newYear(d.y)).getUTCDay() : newDate(newYear(d.y)).getDay();
	        d.m = 0;
	        d.d = "W" in d ? (d.w + 6) % 7 + d.W * 7 - (day + 5) % 7 : d.w + d.U * 7 - (day + 6) % 7;
	      }

	      // If a time zone is specified, all fields are interpreted as UTC and then
	      // offset according to the specified time zone.
	      if ("Z" in d) {
	        d.H += d.Z / 100 | 0;
	        d.M += d.Z % 100;
	        return utcDate(d);
	      }

	      // Otherwise, all fields are in local time.
	      return newDate(d);
	    };
	  }

	  function parseSpecifier(d, specifier, string, j) {
	    var i = 0,
	        n = specifier.length,
	        m = string.length,
	        c,
	        parse;

	    while (i < n) {
	      if (j >= m) return -1;
	      c = specifier.charCodeAt(i++);
	      if (c === 37) {
	        c = specifier.charAt(i++);
	        parse = parses[c in pads ? specifier.charAt(i++) : c];
	        if (!parse || ((j = parse(d, string, j)) < 0)) return -1;
	      } else if (c != string.charCodeAt(j++)) {
	        return -1;
	      }
	    }

	    return j;
	  }

	  function parsePeriod(d, string, i) {
	    var n = periodRe.exec(string.slice(i));
	    return n ? (d.p = periodLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortWeekday(d, string, i) {
	    var n = shortWeekdayRe.exec(string.slice(i));
	    return n ? (d.w = shortWeekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseWeekday(d, string, i) {
	    var n = weekdayRe.exec(string.slice(i));
	    return n ? (d.w = weekdayLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseShortMonth(d, string, i) {
	    var n = shortMonthRe.exec(string.slice(i));
	    return n ? (d.m = shortMonthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseMonth(d, string, i) {
	    var n = monthRe.exec(string.slice(i));
	    return n ? (d.m = monthLookup[n[0].toLowerCase()], i + n[0].length) : -1;
	  }

	  function parseLocaleDateTime(d, string, i) {
	    return parseSpecifier(d, locale_dateTime, string, i);
	  }

	  function parseLocaleDate(d, string, i) {
	    return parseSpecifier(d, locale_date, string, i);
	  }

	  function parseLocaleTime(d, string, i) {
	    return parseSpecifier(d, locale_time, string, i);
	  }

	  function formatShortWeekday(d) {
	    return locale_shortWeekdays[d.getDay()];
	  }

	  function formatWeekday(d) {
	    return locale_weekdays[d.getDay()];
	  }

	  function formatShortMonth(d) {
	    return locale_shortMonths[d.getMonth()];
	  }

	  function formatMonth(d) {
	    return locale_months[d.getMonth()];
	  }

	  function formatPeriod(d) {
	    return locale_periods[+(d.getHours() >= 12)];
	  }

	  function formatUTCShortWeekday(d) {
	    return locale_shortWeekdays[d.getUTCDay()];
	  }

	  function formatUTCWeekday(d) {
	    return locale_weekdays[d.getUTCDay()];
	  }

	  function formatUTCShortMonth(d) {
	    return locale_shortMonths[d.getUTCMonth()];
	  }

	  function formatUTCMonth(d) {
	    return locale_months[d.getUTCMonth()];
	  }

	  function formatUTCPeriod(d) {
	    return locale_periods[+(d.getUTCHours() >= 12)];
	  }

	  return {
	    format: function(specifier) {
	      var f = newFormat(specifier += "", formats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    parse: function(specifier) {
	      var p = newParse(specifier += "", localDate);
	      p.toString = function() { return specifier; };
	      return p;
	    },
	    utcFormat: function(specifier) {
	      var f = newFormat(specifier += "", utcFormats);
	      f.toString = function() { return specifier; };
	      return f;
	    },
	    utcParse: function(specifier) {
	      var p = newParse(specifier, utcDate);
	      p.toString = function() { return specifier; };
	      return p;
	    }
	  };
	}

	var pads = {"-": "", "_": " ", "0": "0"};
	var numberRe = /^\s*\d+/;
	var percentRe = /^%/;
	var requoteRe = /[\\^$*+?|[\]().{}]/g;

	function pad(value, fill, width) {
	  var sign = value < 0 ? "-" : "",
	      string = (sign ? -value : value) + "",
	      length = string.length;
	  return sign + (length < width ? new Array(width - length + 1).join(fill) + string : string);
	}

	function requote(s) {
	  return s.replace(requoteRe, "\\$&");
	}

	function formatRe(names) {
	  return new RegExp("^(?:" + names.map(requote).join("|") + ")", "i");
	}

	function formatLookup(names) {
	  var map = {}, i = -1, n = names.length;
	  while (++i < n) map[names[i].toLowerCase()] = i;
	  return map;
	}

	function parseWeekdayNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.w = +n[0], i + n[0].length) : -1;
	}

	function parseWeekdayNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 1));
	  return n ? (d.u = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberSunday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.U = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberISO(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.V = +n[0], i + n[0].length) : -1;
	}

	function parseWeekNumberMonday(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.W = +n[0], i + n[0].length) : -1;
	}

	function parseFullYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 4));
	  return n ? (d.y = +n[0], i + n[0].length) : -1;
	}

	function parseYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.y = +n[0] + (+n[0] > 68 ? 1900 : 2000), i + n[0].length) : -1;
	}

	function parseZone(d, string, i) {
	  var n = /^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(string.slice(i, i + 6));
	  return n ? (d.Z = n[1] ? 0 : -(n[2] + (n[3] || "00")), i + n[0].length) : -1;
	}

	function parseMonthNumber(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.m = n[0] - 1, i + n[0].length) : -1;
	}

	function parseDayOfMonth(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.d = +n[0], i + n[0].length) : -1;
	}

	function parseDayOfYear(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.m = 0, d.d = +n[0], i + n[0].length) : -1;
	}

	function parseHour24(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.H = +n[0], i + n[0].length) : -1;
	}

	function parseMinutes(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.M = +n[0], i + n[0].length) : -1;
	}

	function parseSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 2));
	  return n ? (d.S = +n[0], i + n[0].length) : -1;
	}

	function parseMilliseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 3));
	  return n ? (d.L = +n[0], i + n[0].length) : -1;
	}

	function parseMicroseconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i, i + 6));
	  return n ? (d.L = Math.floor(n[0] / 1000), i + n[0].length) : -1;
	}

	function parseLiteralPercent(d, string, i) {
	  var n = percentRe.exec(string.slice(i, i + 1));
	  return n ? i + n[0].length : -1;
	}

	function parseUnixTimestamp(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = +n[0], i + n[0].length) : -1;
	}

	function parseUnixTimestampSeconds(d, string, i) {
	  var n = numberRe.exec(string.slice(i));
	  return n ? (d.Q = (+n[0]) * 1000, i + n[0].length) : -1;
	}

	function formatDayOfMonth(d, p) {
	  return pad(d.getDate(), p, 2);
	}

	function formatHour24(d, p) {
	  return pad(d.getHours(), p, 2);
	}

	function formatHour12(d, p) {
	  return pad(d.getHours() % 12 || 12, p, 2);
	}

	function formatDayOfYear(d, p) {
	  return pad(1 + d3Time.timeDay.count(d3Time.timeYear(d), d), p, 3);
	}

	function formatMilliseconds(d, p) {
	  return pad(d.getMilliseconds(), p, 3);
	}

	function formatMicroseconds(d, p) {
	  return formatMilliseconds(d, p) + "000";
	}

	function formatMonthNumber(d, p) {
	  return pad(d.getMonth() + 1, p, 2);
	}

	function formatMinutes(d, p) {
	  return pad(d.getMinutes(), p, 2);
	}

	function formatSeconds(d, p) {
	  return pad(d.getSeconds(), p, 2);
	}

	function formatWeekdayNumberMonday(d) {
	  var day = d.getDay();
	  return day === 0 ? 7 : day;
	}

	function formatWeekNumberSunday(d, p) {
	  return pad(d3Time.timeSunday.count(d3Time.timeYear(d), d), p, 2);
	}

	function formatWeekNumberISO(d, p) {
	  var day = d.getDay();
	  d = (day >= 4 || day === 0) ? d3Time.timeThursday(d) : d3Time.timeThursday.ceil(d);
	  return pad(d3Time.timeThursday.count(d3Time.timeYear(d), d) + (d3Time.timeYear(d).getDay() === 4), p, 2);
	}

	function formatWeekdayNumberSunday(d) {
	  return d.getDay();
	}

	function formatWeekNumberMonday(d, p) {
	  return pad(d3Time.timeMonday.count(d3Time.timeYear(d), d), p, 2);
	}

	function formatYear(d, p) {
	  return pad(d.getFullYear() % 100, p, 2);
	}

	function formatFullYear(d, p) {
	  return pad(d.getFullYear() % 10000, p, 4);
	}

	function formatZone(d) {
	  var z = d.getTimezoneOffset();
	  return (z > 0 ? "-" : (z *= -1, "+"))
	      + pad(z / 60 | 0, "0", 2)
	      + pad(z % 60, "0", 2);
	}

	function formatUTCDayOfMonth(d, p) {
	  return pad(d.getUTCDate(), p, 2);
	}

	function formatUTCHour24(d, p) {
	  return pad(d.getUTCHours(), p, 2);
	}

	function formatUTCHour12(d, p) {
	  return pad(d.getUTCHours() % 12 || 12, p, 2);
	}

	function formatUTCDayOfYear(d, p) {
	  return pad(1 + d3Time.utcDay.count(d3Time.utcYear(d), d), p, 3);
	}

	function formatUTCMilliseconds(d, p) {
	  return pad(d.getUTCMilliseconds(), p, 3);
	}

	function formatUTCMicroseconds(d, p) {
	  return formatUTCMilliseconds(d, p) + "000";
	}

	function formatUTCMonthNumber(d, p) {
	  return pad(d.getUTCMonth() + 1, p, 2);
	}

	function formatUTCMinutes(d, p) {
	  return pad(d.getUTCMinutes(), p, 2);
	}

	function formatUTCSeconds(d, p) {
	  return pad(d.getUTCSeconds(), p, 2);
	}

	function formatUTCWeekdayNumberMonday(d) {
	  var dow = d.getUTCDay();
	  return dow === 0 ? 7 : dow;
	}

	function formatUTCWeekNumberSunday(d, p) {
	  return pad(d3Time.utcSunday.count(d3Time.utcYear(d), d), p, 2);
	}

	function formatUTCWeekNumberISO(d, p) {
	  var day = d.getUTCDay();
	  d = (day >= 4 || day === 0) ? d3Time.utcThursday(d) : d3Time.utcThursday.ceil(d);
	  return pad(d3Time.utcThursday.count(d3Time.utcYear(d), d) + (d3Time.utcYear(d).getUTCDay() === 4), p, 2);
	}

	function formatUTCWeekdayNumberSunday(d) {
	  return d.getUTCDay();
	}

	function formatUTCWeekNumberMonday(d, p) {
	  return pad(d3Time.utcMonday.count(d3Time.utcYear(d), d), p, 2);
	}

	function formatUTCYear(d, p) {
	  return pad(d.getUTCFullYear() % 100, p, 2);
	}

	function formatUTCFullYear(d, p) {
	  return pad(d.getUTCFullYear() % 10000, p, 4);
	}

	function formatUTCZone() {
	  return "+0000";
	}

	function formatLiteralPercent() {
	  return "%";
	}

	function formatUnixTimestamp(d) {
	  return +d;
	}

	function formatUnixTimestampSeconds(d) {
	  return Math.floor(+d / 1000);
	}

	var locale;





	defaultLocale({
	  dateTime: "%x, %X",
	  date: "%-m/%-d/%Y",
	  time: "%-I:%M:%S %p",
	  periods: ["AM", "PM"],
	  days: ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"],
	  shortDays: ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"],
	  months: ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"],
	  shortMonths: ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]
	});

	function defaultLocale(definition) {
	  locale = formatLocale(definition);
	  exports.timeFormat = locale.format;
	  exports.timeParse = locale.parse;
	  exports.utcFormat = locale.utcFormat;
	  exports.utcParse = locale.utcParse;
	  return locale;
	}

	var isoSpecifier = "%Y-%m-%dT%H:%M:%S.%LZ";

	function formatIsoNative(date) {
	  return date.toISOString();
	}

	var formatIso = Date.prototype.toISOString
	    ? formatIsoNative
	    : exports.utcFormat(isoSpecifier);

	function parseIsoNative(string) {
	  var date = new Date(string);
	  return isNaN(date) ? null : date;
	}

	var parseIso = +new Date("2000-01-01T00:00:00.000Z")
	    ? parseIsoNative
	    : exports.utcParse(isoSpecifier);

	exports.timeFormatDefaultLocale = defaultLocale;
	exports.timeFormatLocale = formatLocale;
	exports.isoFormat = formatIso;
	exports.isoParse = parseIso;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-scale-chromatic/ Version 1.3.0. Copyright 2018 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(14), __webpack_require__(15)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-interpolate', 'd3-color'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3));
	}(this, (function (exports,d3Interpolate,d3Color) { 'use strict';

	function colors(specifier) {
	  var n = specifier.length / 6 | 0, colors = new Array(n), i = 0;
	  while (i < n) colors[i] = "#" + specifier.slice(i * 6, ++i * 6);
	  return colors;
	}

	var category10 = colors("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf");

	var Accent = colors("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666");

	var Dark2 = colors("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666");

	var Paired = colors("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928");

	var Pastel1 = colors("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2");

	var Pastel2 = colors("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc");

	var Set1 = colors("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999");

	var Set2 = colors("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3");

	var Set3 = colors("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f");

	function ramp(scheme) {
	  return d3Interpolate.interpolateRgbBasis(scheme[scheme.length - 1]);
	}

	var scheme = new Array(3).concat(
	  "d8b365f5f5f55ab4ac",
	  "a6611adfc27d80cdc1018571",
	  "a6611adfc27df5f5f580cdc1018571",
	  "8c510ad8b365f6e8c3c7eae55ab4ac01665e",
	  "8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e",
	  "8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e",
	  "8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e",
	  "5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30",
	  "5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30"
	).map(colors);

	var BrBG = ramp(scheme);

	var scheme$1 = new Array(3).concat(
	  "af8dc3f7f7f77fbf7b",
	  "7b3294c2a5cfa6dba0008837",
	  "7b3294c2a5cff7f7f7a6dba0008837",
	  "762a83af8dc3e7d4e8d9f0d37fbf7b1b7837",
	  "762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837",
	  "762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837",
	  "762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837",
	  "40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b",
	  "40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b"
	).map(colors);

	var PRGn = ramp(scheme$1);

	var scheme$2 = new Array(3).concat(
	  "e9a3c9f7f7f7a1d76a",
	  "d01c8bf1b6dab8e1864dac26",
	  "d01c8bf1b6daf7f7f7b8e1864dac26",
	  "c51b7de9a3c9fde0efe6f5d0a1d76a4d9221",
	  "c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221",
	  "c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221",
	  "c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221",
	  "8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419",
	  "8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419"
	).map(colors);

	var PiYG = ramp(scheme$2);

	var scheme$3 = new Array(3).concat(
	  "998ec3f7f7f7f1a340",
	  "5e3c99b2abd2fdb863e66101",
	  "5e3c99b2abd2f7f7f7fdb863e66101",
	  "542788998ec3d8daebfee0b6f1a340b35806",
	  "542788998ec3d8daebf7f7f7fee0b6f1a340b35806",
	  "5427888073acb2abd2d8daebfee0b6fdb863e08214b35806",
	  "5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806",
	  "2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08",
	  "2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08"
	).map(colors);

	var PuOr = ramp(scheme$3);

	var scheme$4 = new Array(3).concat(
	  "ef8a62f7f7f767a9cf",
	  "ca0020f4a58292c5de0571b0",
	  "ca0020f4a582f7f7f792c5de0571b0",
	  "b2182bef8a62fddbc7d1e5f067a9cf2166ac",
	  "b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac",
	  "b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac",
	  "b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac",
	  "67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061",
	  "67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061"
	).map(colors);

	var RdBu = ramp(scheme$4);

	var scheme$5 = new Array(3).concat(
	  "ef8a62ffffff999999",
	  "ca0020f4a582bababa404040",
	  "ca0020f4a582ffffffbababa404040",
	  "b2182bef8a62fddbc7e0e0e09999994d4d4d",
	  "b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d",
	  "b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d",
	  "b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d",
	  "67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a",
	  "67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a"
	).map(colors);

	var RdGy = ramp(scheme$5);

	var scheme$6 = new Array(3).concat(
	  "fc8d59ffffbf91bfdb",
	  "d7191cfdae61abd9e92c7bb6",
	  "d7191cfdae61ffffbfabd9e92c7bb6",
	  "d73027fc8d59fee090e0f3f891bfdb4575b4",
	  "d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4",
	  "d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4",
	  "d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4",
	  "a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695",
	  "a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695"
	).map(colors);

	var RdYlBu = ramp(scheme$6);

	var scheme$7 = new Array(3).concat(
	  "fc8d59ffffbf91cf60",
	  "d7191cfdae61a6d96a1a9641",
	  "d7191cfdae61ffffbfa6d96a1a9641",
	  "d73027fc8d59fee08bd9ef8b91cf601a9850",
	  "d73027fc8d59fee08bffffbfd9ef8b91cf601a9850",
	  "d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850",
	  "d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850",
	  "a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837",
	  "a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837"
	).map(colors);

	var RdYlGn = ramp(scheme$7);

	var scheme$8 = new Array(3).concat(
	  "fc8d59ffffbf99d594",
	  "d7191cfdae61abdda42b83ba",
	  "d7191cfdae61ffffbfabdda42b83ba",
	  "d53e4ffc8d59fee08be6f59899d5943288bd",
	  "d53e4ffc8d59fee08bffffbfe6f59899d5943288bd",
	  "d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd",
	  "d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd",
	  "9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2",
	  "9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2"
	).map(colors);

	var Spectral = ramp(scheme$8);

	var scheme$9 = new Array(3).concat(
	  "e5f5f999d8c92ca25f",
	  "edf8fbb2e2e266c2a4238b45",
	  "edf8fbb2e2e266c2a42ca25f006d2c",
	  "edf8fbccece699d8c966c2a42ca25f006d2c",
	  "edf8fbccece699d8c966c2a441ae76238b45005824",
	  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824",
	  "f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b"
	).map(colors);

	var BuGn = ramp(scheme$9);

	var scheme$10 = new Array(3).concat(
	  "e0ecf49ebcda8856a7",
	  "edf8fbb3cde38c96c688419d",
	  "edf8fbb3cde38c96c68856a7810f7c",
	  "edf8fbbfd3e69ebcda8c96c68856a7810f7c",
	  "edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b",
	  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b",
	  "f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b"
	).map(colors);

	var BuPu = ramp(scheme$10);

	var scheme$11 = new Array(3).concat(
	  "e0f3dba8ddb543a2ca",
	  "f0f9e8bae4bc7bccc42b8cbe",
	  "f0f9e8bae4bc7bccc443a2ca0868ac",
	  "f0f9e8ccebc5a8ddb57bccc443a2ca0868ac",
	  "f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e",
	  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e",
	  "f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081"
	).map(colors);

	var GnBu = ramp(scheme$11);

	var scheme$12 = new Array(3).concat(
	  "fee8c8fdbb84e34a33",
	  "fef0d9fdcc8afc8d59d7301f",
	  "fef0d9fdcc8afc8d59e34a33b30000",
	  "fef0d9fdd49efdbb84fc8d59e34a33b30000",
	  "fef0d9fdd49efdbb84fc8d59ef6548d7301f990000",
	  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000",
	  "fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000"
	).map(colors);

	var OrRd = ramp(scheme$12);

	var scheme$13 = new Array(3).concat(
	  "ece2f0a6bddb1c9099",
	  "f6eff7bdc9e167a9cf02818a",
	  "f6eff7bdc9e167a9cf1c9099016c59",
	  "f6eff7d0d1e6a6bddb67a9cf1c9099016c59",
	  "f6eff7d0d1e6a6bddb67a9cf3690c002818a016450",
	  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450",
	  "fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636"
	).map(colors);

	var PuBuGn = ramp(scheme$13);

	var scheme$14 = new Array(3).concat(
	  "ece7f2a6bddb2b8cbe",
	  "f1eef6bdc9e174a9cf0570b0",
	  "f1eef6bdc9e174a9cf2b8cbe045a8d",
	  "f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d",
	  "f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b",
	  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b",
	  "fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858"
	).map(colors);

	var PuBu = ramp(scheme$14);

	var scheme$15 = new Array(3).concat(
	  "e7e1efc994c7dd1c77",
	  "f1eef6d7b5d8df65b0ce1256",
	  "f1eef6d7b5d8df65b0dd1c77980043",
	  "f1eef6d4b9dac994c7df65b0dd1c77980043",
	  "f1eef6d4b9dac994c7df65b0e7298ace125691003f",
	  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f",
	  "f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f"
	).map(colors);

	var PuRd = ramp(scheme$15);

	var scheme$16 = new Array(3).concat(
	  "fde0ddfa9fb5c51b8a",
	  "feebe2fbb4b9f768a1ae017e",
	  "feebe2fbb4b9f768a1c51b8a7a0177",
	  "feebe2fcc5c0fa9fb5f768a1c51b8a7a0177",
	  "feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177",
	  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177",
	  "fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a"
	).map(colors);

	var RdPu = ramp(scheme$16);

	var scheme$17 = new Array(3).concat(
	  "edf8b17fcdbb2c7fb8",
	  "ffffcca1dab441b6c4225ea8",
	  "ffffcca1dab441b6c42c7fb8253494",
	  "ffffccc7e9b47fcdbb41b6c42c7fb8253494",
	  "ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84",
	  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84",
	  "ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58"
	).map(colors);

	var YlGnBu = ramp(scheme$17);

	var scheme$18 = new Array(3).concat(
	  "f7fcb9addd8e31a354",
	  "ffffccc2e69978c679238443",
	  "ffffccc2e69978c67931a354006837",
	  "ffffccd9f0a3addd8e78c67931a354006837",
	  "ffffccd9f0a3addd8e78c67941ab5d238443005a32",
	  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32",
	  "ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529"
	).map(colors);

	var YlGn = ramp(scheme$18);

	var scheme$19 = new Array(3).concat(
	  "fff7bcfec44fd95f0e",
	  "ffffd4fed98efe9929cc4c02",
	  "ffffd4fed98efe9929d95f0e993404",
	  "ffffd4fee391fec44ffe9929d95f0e993404",
	  "ffffd4fee391fec44ffe9929ec7014cc4c028c2d04",
	  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04",
	  "ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506"
	).map(colors);

	var YlOrBr = ramp(scheme$19);

	var scheme$20 = new Array(3).concat(
	  "ffeda0feb24cf03b20",
	  "ffffb2fecc5cfd8d3ce31a1c",
	  "ffffb2fecc5cfd8d3cf03b20bd0026",
	  "ffffb2fed976feb24cfd8d3cf03b20bd0026",
	  "ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026",
	  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026",
	  "ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026"
	).map(colors);

	var YlOrRd = ramp(scheme$20);

	var scheme$21 = new Array(3).concat(
	  "deebf79ecae13182bd",
	  "eff3ffbdd7e76baed62171b5",
	  "eff3ffbdd7e76baed63182bd08519c",
	  "eff3ffc6dbef9ecae16baed63182bd08519c",
	  "eff3ffc6dbef9ecae16baed64292c62171b5084594",
	  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594",
	  "f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b"
	).map(colors);

	var Blues = ramp(scheme$21);

	var scheme$22 = new Array(3).concat(
	  "e5f5e0a1d99b31a354",
	  "edf8e9bae4b374c476238b45",
	  "edf8e9bae4b374c47631a354006d2c",
	  "edf8e9c7e9c0a1d99b74c47631a354006d2c",
	  "edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32",
	  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32",
	  "f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b"
	).map(colors);

	var Greens = ramp(scheme$22);

	var scheme$23 = new Array(3).concat(
	  "f0f0f0bdbdbd636363",
	  "f7f7f7cccccc969696525252",
	  "f7f7f7cccccc969696636363252525",
	  "f7f7f7d9d9d9bdbdbd969696636363252525",
	  "f7f7f7d9d9d9bdbdbd969696737373525252252525",
	  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525",
	  "fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000"
	).map(colors);

	var Greys = ramp(scheme$23);

	var scheme$24 = new Array(3).concat(
	  "efedf5bcbddc756bb1",
	  "f2f0f7cbc9e29e9ac86a51a3",
	  "f2f0f7cbc9e29e9ac8756bb154278f",
	  "f2f0f7dadaebbcbddc9e9ac8756bb154278f",
	  "f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486",
	  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486",
	  "fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d"
	).map(colors);

	var Purples = ramp(scheme$24);

	var scheme$25 = new Array(3).concat(
	  "fee0d2fc9272de2d26",
	  "fee5d9fcae91fb6a4acb181d",
	  "fee5d9fcae91fb6a4ade2d26a50f15",
	  "fee5d9fcbba1fc9272fb6a4ade2d26a50f15",
	  "fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d",
	  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d",
	  "fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d"
	).map(colors);

	var Reds = ramp(scheme$25);

	var scheme$26 = new Array(3).concat(
	  "fee6cefdae6be6550d",
	  "feeddefdbe85fd8d3cd94701",
	  "feeddefdbe85fd8d3ce6550da63603",
	  "feeddefdd0a2fdae6bfd8d3ce6550da63603",
	  "feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04",
	  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04",
	  "fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704"
	).map(colors);

	var Oranges = ramp(scheme$26);

	var cubehelix$1 = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(300, 0.5, 0.0), d3Color.cubehelix(-240, 0.5, 1.0));

	var warm = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(-100, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

	var cool = d3Interpolate.interpolateCubehelixLong(d3Color.cubehelix(260, 0.75, 0.35), d3Color.cubehelix(80, 1.50, 0.8));

	var c = d3Color.cubehelix();

	function rainbow(t) {
	  if (t < 0 || t > 1) t -= Math.floor(t);
	  var ts = Math.abs(t - 0.5);
	  c.h = 360 * t - 100;
	  c.s = 1.5 - 1.5 * ts;
	  c.l = 0.8 - 0.9 * ts;
	  return c + "";
	}

	var c$1 = d3Color.rgb();
	var pi_1_3 = Math.PI / 3;
	var pi_2_3 = Math.PI * 2 / 3;

	function sinebow(t) {
	  var x;
	  t = (0.5 - t) * Math.PI;
	  c$1.r = 255 * (x = Math.sin(t)) * x;
	  c$1.g = 255 * (x = Math.sin(t + pi_1_3)) * x;
	  c$1.b = 255 * (x = Math.sin(t + pi_2_3)) * x;
	  return c$1 + "";
	}

	function ramp$1(range) {
	  var n = range.length;
	  return function(t) {
	    return range[Math.max(0, Math.min(n - 1, Math.floor(t * n)))];
	  };
	}

	var viridis = ramp$1(colors("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725"));

	var magma = ramp$1(colors("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf"));

	var inferno = ramp$1(colors("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4"));

	var plasma = ramp$1(colors("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));

	exports.schemeCategory10 = category10;
	exports.schemeAccent = Accent;
	exports.schemeDark2 = Dark2;
	exports.schemePaired = Paired;
	exports.schemePastel1 = Pastel1;
	exports.schemePastel2 = Pastel2;
	exports.schemeSet1 = Set1;
	exports.schemeSet2 = Set2;
	exports.schemeSet3 = Set3;
	exports.interpolateBrBG = BrBG;
	exports.schemeBrBG = scheme;
	exports.interpolatePRGn = PRGn;
	exports.schemePRGn = scheme$1;
	exports.interpolatePiYG = PiYG;
	exports.schemePiYG = scheme$2;
	exports.interpolatePuOr = PuOr;
	exports.schemePuOr = scheme$3;
	exports.interpolateRdBu = RdBu;
	exports.schemeRdBu = scheme$4;
	exports.interpolateRdGy = RdGy;
	exports.schemeRdGy = scheme$5;
	exports.interpolateRdYlBu = RdYlBu;
	exports.schemeRdYlBu = scheme$6;
	exports.interpolateRdYlGn = RdYlGn;
	exports.schemeRdYlGn = scheme$7;
	exports.interpolateSpectral = Spectral;
	exports.schemeSpectral = scheme$8;
	exports.interpolateBuGn = BuGn;
	exports.schemeBuGn = scheme$9;
	exports.interpolateBuPu = BuPu;
	exports.schemeBuPu = scheme$10;
	exports.interpolateGnBu = GnBu;
	exports.schemeGnBu = scheme$11;
	exports.interpolateOrRd = OrRd;
	exports.schemeOrRd = scheme$12;
	exports.interpolatePuBuGn = PuBuGn;
	exports.schemePuBuGn = scheme$13;
	exports.interpolatePuBu = PuBu;
	exports.schemePuBu = scheme$14;
	exports.interpolatePuRd = PuRd;
	exports.schemePuRd = scheme$15;
	exports.interpolateRdPu = RdPu;
	exports.schemeRdPu = scheme$16;
	exports.interpolateYlGnBu = YlGnBu;
	exports.schemeYlGnBu = scheme$17;
	exports.interpolateYlGn = YlGn;
	exports.schemeYlGn = scheme$18;
	exports.interpolateYlOrBr = YlOrBr;
	exports.schemeYlOrBr = scheme$19;
	exports.interpolateYlOrRd = YlOrRd;
	exports.schemeYlOrRd = scheme$20;
	exports.interpolateBlues = Blues;
	exports.schemeBlues = scheme$21;
	exports.interpolateGreens = Greens;
	exports.schemeGreens = scheme$22;
	exports.interpolateGreys = Greys;
	exports.schemeGreys = scheme$23;
	exports.interpolatePurples = Purples;
	exports.schemePurples = scheme$24;
	exports.interpolateReds = Reds;
	exports.schemeReds = scheme$25;
	exports.interpolateOranges = Oranges;
	exports.schemeOranges = scheme$26;
	exports.interpolateCubehelixDefault = cubehelix$1;
	exports.interpolateRainbow = rainbow;
	exports.interpolateWarm = warm;
	exports.interpolateCool = cool;
	exports.interpolateSinebow = sinebow;
	exports.interpolateViridis = viridis;
	exports.interpolateMagma = magma;
	exports.interpolateInferno = inferno;
	exports.interpolatePlasma = plasma;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 36 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-shape/ Version 1.2.0. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(20)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-path'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3));
	}(this, (function (exports,d3Path) { 'use strict';

	var constant = function(x) {
	  return function constant() {
	    return x;
	  };
	};

	var abs = Math.abs;
	var atan2 = Math.atan2;
	var cos = Math.cos;
	var max = Math.max;
	var min = Math.min;
	var sin = Math.sin;
	var sqrt = Math.sqrt;

	var epsilon = 1e-12;
	var pi = Math.PI;
	var halfPi = pi / 2;
	var tau = 2 * pi;

	function acos(x) {
	  return x > 1 ? 0 : x < -1 ? pi : Math.acos(x);
	}

	function asin(x) {
	  return x >= 1 ? halfPi : x <= -1 ? -halfPi : Math.asin(x);
	}

	function arcInnerRadius(d) {
	  return d.innerRadius;
	}

	function arcOuterRadius(d) {
	  return d.outerRadius;
	}

	function arcStartAngle(d) {
	  return d.startAngle;
	}

	function arcEndAngle(d) {
	  return d.endAngle;
	}

	function arcPadAngle(d) {
	  return d && d.padAngle; // Note: optional!
	}

	function intersect(x0, y0, x1, y1, x2, y2, x3, y3) {
	  var x10 = x1 - x0, y10 = y1 - y0,
	      x32 = x3 - x2, y32 = y3 - y2,
	      t = (x32 * (y0 - y2) - y32 * (x0 - x2)) / (y32 * x10 - x32 * y10);
	  return [x0 + t * x10, y0 + t * y10];
	}

	// Compute perpendicular offset line of length rc.
	// http://mathworld.wolfram.com/Circle-LineIntersection.html
	function cornerTangents(x0, y0, x1, y1, r1, rc, cw) {
	  var x01 = x0 - x1,
	      y01 = y0 - y1,
	      lo = (cw ? rc : -rc) / sqrt(x01 * x01 + y01 * y01),
	      ox = lo * y01,
	      oy = -lo * x01,
	      x11 = x0 + ox,
	      y11 = y0 + oy,
	      x10 = x1 + ox,
	      y10 = y1 + oy,
	      x00 = (x11 + x10) / 2,
	      y00 = (y11 + y10) / 2,
	      dx = x10 - x11,
	      dy = y10 - y11,
	      d2 = dx * dx + dy * dy,
	      r = r1 - rc,
	      D = x11 * y10 - x10 * y11,
	      d = (dy < 0 ? -1 : 1) * sqrt(max(0, r * r * d2 - D * D)),
	      cx0 = (D * dy - dx * d) / d2,
	      cy0 = (-D * dx - dy * d) / d2,
	      cx1 = (D * dy + dx * d) / d2,
	      cy1 = (-D * dx + dy * d) / d2,
	      dx0 = cx0 - x00,
	      dy0 = cy0 - y00,
	      dx1 = cx1 - x00,
	      dy1 = cy1 - y00;

	  // Pick the closer of the two intersection points.
	  // TODO Is there a faster way to determine which intersection to use?
	  if (dx0 * dx0 + dy0 * dy0 > dx1 * dx1 + dy1 * dy1) cx0 = cx1, cy0 = cy1;

	  return {
	    cx: cx0,
	    cy: cy0,
	    x01: -ox,
	    y01: -oy,
	    x11: cx0 * (r1 / r - 1),
	    y11: cy0 * (r1 / r - 1)
	  };
	}

	var arc = function() {
	  var innerRadius = arcInnerRadius,
	      outerRadius = arcOuterRadius,
	      cornerRadius = constant(0),
	      padRadius = null,
	      startAngle = arcStartAngle,
	      endAngle = arcEndAngle,
	      padAngle = arcPadAngle,
	      context = null;

	  function arc() {
	    var buffer,
	        r,
	        r0 = +innerRadius.apply(this, arguments),
	        r1 = +outerRadius.apply(this, arguments),
	        a0 = startAngle.apply(this, arguments) - halfPi,
	        a1 = endAngle.apply(this, arguments) - halfPi,
	        da = abs(a1 - a0),
	        cw = a1 > a0;

	    if (!context) context = buffer = d3Path.path();

	    // Ensure that the outer radius is always larger than the inner radius.
	    if (r1 < r0) r = r1, r1 = r0, r0 = r;

	    // Is it a point?
	    if (!(r1 > epsilon)) context.moveTo(0, 0);

	    // Or is it a circle or annulus?
	    else if (da > tau - epsilon) {
	      context.moveTo(r1 * cos(a0), r1 * sin(a0));
	      context.arc(0, 0, r1, a0, a1, !cw);
	      if (r0 > epsilon) {
	        context.moveTo(r0 * cos(a1), r0 * sin(a1));
	        context.arc(0, 0, r0, a1, a0, cw);
	      }
	    }

	    // Or is it a circular or annular sector?
	    else {
	      var a01 = a0,
	          a11 = a1,
	          a00 = a0,
	          a10 = a1,
	          da0 = da,
	          da1 = da,
	          ap = padAngle.apply(this, arguments) / 2,
	          rp = (ap > epsilon) && (padRadius ? +padRadius.apply(this, arguments) : sqrt(r0 * r0 + r1 * r1)),
	          rc = min(abs(r1 - r0) / 2, +cornerRadius.apply(this, arguments)),
	          rc0 = rc,
	          rc1 = rc,
	          t0,
	          t1;

	      // Apply padding? Note that since r1 ≥ r0, da1 ≥ da0.
	      if (rp > epsilon) {
	        var p0 = asin(rp / r0 * sin(ap)),
	            p1 = asin(rp / r1 * sin(ap));
	        if ((da0 -= p0 * 2) > epsilon) p0 *= (cw ? 1 : -1), a00 += p0, a10 -= p0;
	        else da0 = 0, a00 = a10 = (a0 + a1) / 2;
	        if ((da1 -= p1 * 2) > epsilon) p1 *= (cw ? 1 : -1), a01 += p1, a11 -= p1;
	        else da1 = 0, a01 = a11 = (a0 + a1) / 2;
	      }

	      var x01 = r1 * cos(a01),
	          y01 = r1 * sin(a01),
	          x10 = r0 * cos(a10),
	          y10 = r0 * sin(a10);

	      // Apply rounded corners?
	      if (rc > epsilon) {
	        var x11 = r1 * cos(a11),
	            y11 = r1 * sin(a11),
	            x00 = r0 * cos(a00),
	            y00 = r0 * sin(a00);

	        // Restrict the corner radius according to the sector angle.
	        if (da < pi) {
	          var oc = da0 > epsilon ? intersect(x01, y01, x00, y00, x11, y11, x10, y10) : [x10, y10],
	              ax = x01 - oc[0],
	              ay = y01 - oc[1],
	              bx = x11 - oc[0],
	              by = y11 - oc[1],
	              kc = 1 / sin(acos((ax * bx + ay * by) / (sqrt(ax * ax + ay * ay) * sqrt(bx * bx + by * by))) / 2),
	              lc = sqrt(oc[0] * oc[0] + oc[1] * oc[1]);
	          rc0 = min(rc, (r0 - lc) / (kc - 1));
	          rc1 = min(rc, (r1 - lc) / (kc + 1));
	        }
	      }

	      // Is the sector collapsed to a line?
	      if (!(da1 > epsilon)) context.moveTo(x01, y01);

	      // Does the sector’s outer ring have rounded corners?
	      else if (rc1 > epsilon) {
	        t0 = cornerTangents(x00, y00, x01, y01, r1, rc1, cw);
	        t1 = cornerTangents(x11, y11, x10, y10, r1, rc1, cw);

	        context.moveTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc1 < rc) context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc1, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r1, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), !cw);
	          context.arc(t1.cx, t1.cy, rc1, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the outer ring just a circular arc?
	      else context.moveTo(x01, y01), context.arc(0, 0, r1, a01, a11, !cw);

	      // Is there no inner ring, and it’s a circular sector?
	      // Or perhaps it’s an annular sector collapsed due to padding?
	      if (!(r0 > epsilon) || !(da0 > epsilon)) context.lineTo(x10, y10);

	      // Does the sector’s inner ring (or point) have rounded corners?
	      else if (rc0 > epsilon) {
	        t0 = cornerTangents(x10, y10, x11, y11, r0, -rc0, cw);
	        t1 = cornerTangents(x01, y01, x00, y00, r0, -rc0, cw);

	        context.lineTo(t0.cx + t0.x01, t0.cy + t0.y01);

	        // Have the corners merged?
	        if (rc0 < rc) context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t1.y01, t1.x01), !cw);

	        // Otherwise, draw the two corners and the ring.
	        else {
	          context.arc(t0.cx, t0.cy, rc0, atan2(t0.y01, t0.x01), atan2(t0.y11, t0.x11), !cw);
	          context.arc(0, 0, r0, atan2(t0.cy + t0.y11, t0.cx + t0.x11), atan2(t1.cy + t1.y11, t1.cx + t1.x11), cw);
	          context.arc(t1.cx, t1.cy, rc0, atan2(t1.y11, t1.x11), atan2(t1.y01, t1.x01), !cw);
	        }
	      }

	      // Or is the inner ring just a circular arc?
	      else context.arc(0, 0, r0, a10, a00, cw);
	    }

	    context.closePath();

	    if (buffer) return context = null, buffer + "" || null;
	  }

	  arc.centroid = function() {
	    var r = (+innerRadius.apply(this, arguments) + +outerRadius.apply(this, arguments)) / 2,
	        a = (+startAngle.apply(this, arguments) + +endAngle.apply(this, arguments)) / 2 - pi / 2;
	    return [cos(a) * r, sin(a) * r];
	  };

	  arc.innerRadius = function(_) {
	    return arguments.length ? (innerRadius = typeof _ === "function" ? _ : constant(+_), arc) : innerRadius;
	  };

	  arc.outerRadius = function(_) {
	    return arguments.length ? (outerRadius = typeof _ === "function" ? _ : constant(+_), arc) : outerRadius;
	  };

	  arc.cornerRadius = function(_) {
	    return arguments.length ? (cornerRadius = typeof _ === "function" ? _ : constant(+_), arc) : cornerRadius;
	  };

	  arc.padRadius = function(_) {
	    return arguments.length ? (padRadius = _ == null ? null : typeof _ === "function" ? _ : constant(+_), arc) : padRadius;
	  };

	  arc.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), arc) : startAngle;
	  };

	  arc.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), arc) : endAngle;
	  };

	  arc.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), arc) : padAngle;
	  };

	  arc.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), arc) : context;
	  };

	  return arc;
	};

	function Linear(context) {
	  this._context = context;
	}

	Linear.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: this._context.lineTo(x, y); break;
	    }
	  }
	};

	var curveLinear = function(context) {
	  return new Linear(context);
	};

	function x(p) {
	  return p[0];
	}

	function y(p) {
	  return p[1];
	}

	var line = function() {
	  var x$$1 = x,
	      y$$1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function line(data) {
	    var i,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer;

	    if (context == null) output = curve(buffer = d3Path.path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) output.lineStart();
	        else output.lineEnd();
	      }
	      if (defined0) output.point(+x$$1(d, i, data), +y$$1(d, i, data));
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  line.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), line) : x$$1;
	  };

	  line.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), line) : y$$1;
	  };

	  line.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), line) : defined;
	  };

	  line.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), line) : curve;
	  };

	  line.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), line) : context;
	  };

	  return line;
	};

	var area = function() {
	  var x0 = x,
	      x1 = null,
	      y0 = constant(0),
	      y1 = y,
	      defined = constant(true),
	      context = null,
	      curve = curveLinear,
	      output = null;

	  function area(data) {
	    var i,
	        j,
	        k,
	        n = data.length,
	        d,
	        defined0 = false,
	        buffer,
	        x0z = new Array(n),
	        y0z = new Array(n);

	    if (context == null) output = curve(buffer = d3Path.path());

	    for (i = 0; i <= n; ++i) {
	      if (!(i < n && defined(d = data[i], i, data)) === defined0) {
	        if (defined0 = !defined0) {
	          j = i;
	          output.areaStart();
	          output.lineStart();
	        } else {
	          output.lineEnd();
	          output.lineStart();
	          for (k = i - 1; k >= j; --k) {
	            output.point(x0z[k], y0z[k]);
	          }
	          output.lineEnd();
	          output.areaEnd();
	        }
	      }
	      if (defined0) {
	        x0z[i] = +x0(d, i, data), y0z[i] = +y0(d, i, data);
	        output.point(x1 ? +x1(d, i, data) : x0z[i], y1 ? +y1(d, i, data) : y0z[i]);
	      }
	    }

	    if (buffer) return output = null, buffer + "" || null;
	  }

	  function arealine() {
	    return line().defined(defined).curve(curve).context(context);
	  }

	  area.x = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), x1 = null, area) : x0;
	  };

	  area.x0 = function(_) {
	    return arguments.length ? (x0 = typeof _ === "function" ? _ : constant(+_), area) : x0;
	  };

	  area.x1 = function(_) {
	    return arguments.length ? (x1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : x1;
	  };

	  area.y = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), y1 = null, area) : y0;
	  };

	  area.y0 = function(_) {
	    return arguments.length ? (y0 = typeof _ === "function" ? _ : constant(+_), area) : y0;
	  };

	  area.y1 = function(_) {
	    return arguments.length ? (y1 = _ == null ? null : typeof _ === "function" ? _ : constant(+_), area) : y1;
	  };

	  area.lineX0 =
	  area.lineY0 = function() {
	    return arealine().x(x0).y(y0);
	  };

	  area.lineY1 = function() {
	    return arealine().x(x0).y(y1);
	  };

	  area.lineX1 = function() {
	    return arealine().x(x1).y(y0);
	  };

	  area.defined = function(_) {
	    return arguments.length ? (defined = typeof _ === "function" ? _ : constant(!!_), area) : defined;
	  };

	  area.curve = function(_) {
	    return arguments.length ? (curve = _, context != null && (output = curve(context)), area) : curve;
	  };

	  area.context = function(_) {
	    return arguments.length ? (_ == null ? context = output = null : output = curve(context = _), area) : context;
	  };

	  return area;
	};

	var descending = function(a, b) {
	  return b < a ? -1 : b > a ? 1 : b >= a ? 0 : NaN;
	};

	var identity = function(d) {
	  return d;
	};

	var pie = function() {
	  var value = identity,
	      sortValues = descending,
	      sort = null,
	      startAngle = constant(0),
	      endAngle = constant(tau),
	      padAngle = constant(0);

	  function pie(data) {
	    var i,
	        n = data.length,
	        j,
	        k,
	        sum = 0,
	        index = new Array(n),
	        arcs = new Array(n),
	        a0 = +startAngle.apply(this, arguments),
	        da = Math.min(tau, Math.max(-tau, endAngle.apply(this, arguments) - a0)),
	        a1,
	        p = Math.min(Math.abs(da) / n, padAngle.apply(this, arguments)),
	        pa = p * (da < 0 ? -1 : 1),
	        v;

	    for (i = 0; i < n; ++i) {
	      if ((v = arcs[index[i] = i] = +value(data[i], i, data)) > 0) {
	        sum += v;
	      }
	    }

	    // Optionally sort the arcs by previously-computed values or by data.
	    if (sortValues != null) index.sort(function(i, j) { return sortValues(arcs[i], arcs[j]); });
	    else if (sort != null) index.sort(function(i, j) { return sort(data[i], data[j]); });

	    // Compute the arcs! They are stored in the original data's order.
	    for (i = 0, k = sum ? (da - n * pa) / sum : 0; i < n; ++i, a0 = a1) {
	      j = index[i], v = arcs[j], a1 = a0 + (v > 0 ? v * k : 0) + pa, arcs[j] = {
	        data: data[j],
	        index: i,
	        value: v,
	        startAngle: a0,
	        endAngle: a1,
	        padAngle: p
	      };
	    }

	    return arcs;
	  }

	  pie.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), pie) : value;
	  };

	  pie.sortValues = function(_) {
	    return arguments.length ? (sortValues = _, sort = null, pie) : sortValues;
	  };

	  pie.sort = function(_) {
	    return arguments.length ? (sort = _, sortValues = null, pie) : sort;
	  };

	  pie.startAngle = function(_) {
	    return arguments.length ? (startAngle = typeof _ === "function" ? _ : constant(+_), pie) : startAngle;
	  };

	  pie.endAngle = function(_) {
	    return arguments.length ? (endAngle = typeof _ === "function" ? _ : constant(+_), pie) : endAngle;
	  };

	  pie.padAngle = function(_) {
	    return arguments.length ? (padAngle = typeof _ === "function" ? _ : constant(+_), pie) : padAngle;
	  };

	  return pie;
	};

	var curveRadialLinear = curveRadial(curveLinear);

	function Radial(curve) {
	  this._curve = curve;
	}

	Radial.prototype = {
	  areaStart: function() {
	    this._curve.areaStart();
	  },
	  areaEnd: function() {
	    this._curve.areaEnd();
	  },
	  lineStart: function() {
	    this._curve.lineStart();
	  },
	  lineEnd: function() {
	    this._curve.lineEnd();
	  },
	  point: function(a, r) {
	    this._curve.point(r * Math.sin(a), r * -Math.cos(a));
	  }
	};

	function curveRadial(curve) {

	  function radial(context) {
	    return new Radial(curve(context));
	  }

	  radial._curve = curve;

	  return radial;
	}

	function lineRadial(l) {
	  var c = l.curve;

	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;

	  l.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return l;
	}

	var lineRadial$1 = function() {
	  return lineRadial(line().curve(curveRadialLinear));
	};

	var areaRadial = function() {
	  var a = area().curve(curveRadialLinear),
	      c = a.curve,
	      x0 = a.lineX0,
	      x1 = a.lineX1,
	      y0 = a.lineY0,
	      y1 = a.lineY1;

	  a.angle = a.x, delete a.x;
	  a.startAngle = a.x0, delete a.x0;
	  a.endAngle = a.x1, delete a.x1;
	  a.radius = a.y, delete a.y;
	  a.innerRadius = a.y0, delete a.y0;
	  a.outerRadius = a.y1, delete a.y1;
	  a.lineStartAngle = function() { return lineRadial(x0()); }, delete a.lineX0;
	  a.lineEndAngle = function() { return lineRadial(x1()); }, delete a.lineX1;
	  a.lineInnerRadius = function() { return lineRadial(y0()); }, delete a.lineY0;
	  a.lineOuterRadius = function() { return lineRadial(y1()); }, delete a.lineY1;

	  a.curve = function(_) {
	    return arguments.length ? c(curveRadial(_)) : c()._curve;
	  };

	  return a;
	};

	var pointRadial = function(x, y) {
	  return [(y = +y) * Math.cos(x -= Math.PI / 2), y * Math.sin(x)];
	};

	var slice = Array.prototype.slice;

	function linkSource(d) {
	  return d.source;
	}

	function linkTarget(d) {
	  return d.target;
	}

	function link(curve) {
	  var source = linkSource,
	      target = linkTarget,
	      x$$1 = x,
	      y$$1 = y,
	      context = null;

	  function link() {
	    var buffer, argv = slice.call(arguments), s = source.apply(this, argv), t = target.apply(this, argv);
	    if (!context) context = buffer = d3Path.path();
	    curve(context, +x$$1.apply(this, (argv[0] = s, argv)), +y$$1.apply(this, argv), +x$$1.apply(this, (argv[0] = t, argv)), +y$$1.apply(this, argv));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  link.source = function(_) {
	    return arguments.length ? (source = _, link) : source;
	  };

	  link.target = function(_) {
	    return arguments.length ? (target = _, link) : target;
	  };

	  link.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), link) : x$$1;
	  };

	  link.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), link) : y$$1;
	  };

	  link.context = function(_) {
	    return arguments.length ? ((context = _ == null ? null : _), link) : context;
	  };

	  return link;
	}

	function curveHorizontal(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0 = (x0 + x1) / 2, y0, x0, y1, x1, y1);
	}

	function curveVertical(context, x0, y0, x1, y1) {
	  context.moveTo(x0, y0);
	  context.bezierCurveTo(x0, y0 = (y0 + y1) / 2, x1, y0, x1, y1);
	}

	function curveRadial$1(context, x0, y0, x1, y1) {
	  var p0 = pointRadial(x0, y0),
	      p1 = pointRadial(x0, y0 = (y0 + y1) / 2),
	      p2 = pointRadial(x1, y0),
	      p3 = pointRadial(x1, y1);
	  context.moveTo(p0[0], p0[1]);
	  context.bezierCurveTo(p1[0], p1[1], p2[0], p2[1], p3[0], p3[1]);
	}

	function linkHorizontal() {
	  return link(curveHorizontal);
	}

	function linkVertical() {
	  return link(curveVertical);
	}

	function linkRadial() {
	  var l = link(curveRadial$1);
	  l.angle = l.x, delete l.x;
	  l.radius = l.y, delete l.y;
	  return l;
	}

	var circle = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / pi);
	    context.moveTo(r, 0);
	    context.arc(0, 0, r, 0, tau);
	  }
	};

	var cross = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / 5) / 2;
	    context.moveTo(-3 * r, -r);
	    context.lineTo(-r, -r);
	    context.lineTo(-r, -3 * r);
	    context.lineTo(r, -3 * r);
	    context.lineTo(r, -r);
	    context.lineTo(3 * r, -r);
	    context.lineTo(3 * r, r);
	    context.lineTo(r, r);
	    context.lineTo(r, 3 * r);
	    context.lineTo(-r, 3 * r);
	    context.lineTo(-r, r);
	    context.lineTo(-3 * r, r);
	    context.closePath();
	  }
	};

	var tan30 = Math.sqrt(1 / 3);
	var tan30_2 = tan30 * 2;

	var diamond = {
	  draw: function(context, size) {
	    var y = Math.sqrt(size / tan30_2),
	        x = y * tan30;
	    context.moveTo(0, -y);
	    context.lineTo(x, 0);
	    context.lineTo(0, y);
	    context.lineTo(-x, 0);
	    context.closePath();
	  }
	};

	var ka = 0.89081309152928522810;
	var kr = Math.sin(pi / 10) / Math.sin(7 * pi / 10);
	var kx = Math.sin(tau / 10) * kr;
	var ky = -Math.cos(tau / 10) * kr;

	var star = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size * ka),
	        x = kx * r,
	        y = ky * r;
	    context.moveTo(0, -r);
	    context.lineTo(x, y);
	    for (var i = 1; i < 5; ++i) {
	      var a = tau * i / 5,
	          c = Math.cos(a),
	          s = Math.sin(a);
	      context.lineTo(s * r, -c * r);
	      context.lineTo(c * x - s * y, s * x + c * y);
	    }
	    context.closePath();
	  }
	};

	var square = {
	  draw: function(context, size) {
	    var w = Math.sqrt(size),
	        x = -w / 2;
	    context.rect(x, x, w, w);
	  }
	};

	var sqrt3 = Math.sqrt(3);

	var triangle = {
	  draw: function(context, size) {
	    var y = -Math.sqrt(size / (sqrt3 * 3));
	    context.moveTo(0, y * 2);
	    context.lineTo(-sqrt3 * y, -y);
	    context.lineTo(sqrt3 * y, -y);
	    context.closePath();
	  }
	};

	var c = -0.5;
	var s = Math.sqrt(3) / 2;
	var k = 1 / Math.sqrt(12);
	var a = (k / 2 + 1) * 3;

	var wye = {
	  draw: function(context, size) {
	    var r = Math.sqrt(size / a),
	        x0 = r / 2,
	        y0 = r * k,
	        x1 = x0,
	        y1 = r * k + r,
	        x2 = -x1,
	        y2 = y1;
	    context.moveTo(x0, y0);
	    context.lineTo(x1, y1);
	    context.lineTo(x2, y2);
	    context.lineTo(c * x0 - s * y0, s * x0 + c * y0);
	    context.lineTo(c * x1 - s * y1, s * x1 + c * y1);
	    context.lineTo(c * x2 - s * y2, s * x2 + c * y2);
	    context.lineTo(c * x0 + s * y0, c * y0 - s * x0);
	    context.lineTo(c * x1 + s * y1, c * y1 - s * x1);
	    context.lineTo(c * x2 + s * y2, c * y2 - s * x2);
	    context.closePath();
	  }
	};

	var symbols = [
	  circle,
	  cross,
	  diamond,
	  square,
	  star,
	  triangle,
	  wye
	];

	var symbol = function() {
	  var type = constant(circle),
	      size = constant(64),
	      context = null;

	  function symbol() {
	    var buffer;
	    if (!context) context = buffer = d3Path.path();
	    type.apply(this, arguments).draw(context, +size.apply(this, arguments));
	    if (buffer) return context = null, buffer + "" || null;
	  }

	  symbol.type = function(_) {
	    return arguments.length ? (type = typeof _ === "function" ? _ : constant(_), symbol) : type;
	  };

	  symbol.size = function(_) {
	    return arguments.length ? (size = typeof _ === "function" ? _ : constant(+_), symbol) : size;
	  };

	  symbol.context = function(_) {
	    return arguments.length ? (context = _ == null ? null : _, symbol) : context;
	  };

	  return symbol;
	};

	var noop = function() {};

	function point(that, x, y) {
	  that._context.bezierCurveTo(
	    (2 * that._x0 + that._x1) / 3,
	    (2 * that._y0 + that._y1) / 3,
	    (that._x0 + 2 * that._x1) / 3,
	    (that._y0 + 2 * that._y1) / 3,
	    (that._x0 + 4 * that._x1 + x) / 6,
	    (that._y0 + 4 * that._y1 + y) / 6
	  );
	}

	function Basis(context) {
	  this._context = context;
	}

	Basis.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 3: point(this, this._x1, this._y1); // proceed
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._context.lineTo((5 * this._x0 + this._x1) / 6, (5 * this._y0 + this._y1) / 6); // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basis = function(context) {
	  return new Basis(context);
	};

	function BasisClosed(context) {
	  this._context = context;
	}

	BasisClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x2, this._y2);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.moveTo((this._x2 + 2 * this._x3) / 3, (this._y2 + 2 * this._y3) / 3);
	        this._context.lineTo((this._x3 + 2 * this._x2) / 3, (this._y3 + 2 * this._y2) / 3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x2, this._y2);
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x2 = x, this._y2 = y; break;
	      case 1: this._point = 2; this._x3 = x, this._y3 = y; break;
	      case 2: this._point = 3; this._x4 = x, this._y4 = y; this._context.moveTo((this._x0 + 4 * this._x1 + x) / 6, (this._y0 + 4 * this._y1 + y) / 6); break;
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisClosed = function(context) {
	  return new BasisClosed(context);
	};

	function BasisOpen(context) {
	  this._context = context;
	}

	BasisOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; var x0 = (this._x0 + 4 * this._x1 + x) / 6, y0 = (this._y0 + 4 * this._y1 + y) / 6; this._line ? this._context.lineTo(x0, y0) : this._context.moveTo(x0, y0); break;
	      case 3: this._point = 4; // proceed
	      default: point(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	  }
	};

	var basisOpen = function(context) {
	  return new BasisOpen(context);
	};

	function Bundle(context, beta) {
	  this._basis = new Basis(context);
	  this._beta = beta;
	}

	Bundle.prototype = {
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	    this._basis.lineStart();
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        j = x.length - 1;

	    if (j > 0) {
	      var x0 = x[0],
	          y0 = y[0],
	          dx = x[j] - x0,
	          dy = y[j] - y0,
	          i = -1,
	          t;

	      while (++i <= j) {
	        t = i / j;
	        this._basis.point(
	          this._beta * x[i] + (1 - this._beta) * (x0 + t * dx),
	          this._beta * y[i] + (1 - this._beta) * (y0 + t * dy)
	        );
	      }
	    }

	    this._x = this._y = null;
	    this._basis.lineEnd();
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	var bundle = ((function custom(beta) {

	  function bundle(context) {
	    return beta === 1 ? new Basis(context) : new Bundle(context, beta);
	  }

	  bundle.beta = function(beta) {
	    return custom(+beta);
	  };

	  return bundle;
	}))(0.85);

	function point$1(that, x, y) {
	  that._context.bezierCurveTo(
	    that._x1 + that._k * (that._x2 - that._x0),
	    that._y1 + that._k * (that._y2 - that._y0),
	    that._x2 + that._k * (that._x1 - x),
	    that._y2 + that._k * (that._y1 - y),
	    that._x2,
	    that._y2
	  );
	}

	function Cardinal(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	Cardinal.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: point$1(this, this._x1, this._y1); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; this._x1 = x, this._y1 = y; break;
	      case 2: this._point = 3; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinal = ((function custom(tension) {

	  function cardinal(context) {
	    return new Cardinal(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalClosed(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalClosed = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalClosed(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function CardinalOpen(context, tension) {
	  this._context = context;
	  this._k = (1 - tension) / 6;
	}

	CardinalOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$1(this, x, y); break;
	    }
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var cardinalOpen = ((function custom(tension) {

	  function cardinal(context) {
	    return new CardinalOpen(context, tension);
	  }

	  cardinal.tension = function(tension) {
	    return custom(+tension);
	  };

	  return cardinal;
	}))(0);

	function point$2(that, x, y) {
	  var x1 = that._x1,
	      y1 = that._y1,
	      x2 = that._x2,
	      y2 = that._y2;

	  if (that._l01_a > epsilon) {
	    var a = 2 * that._l01_2a + 3 * that._l01_a * that._l12_a + that._l12_2a,
	        n = 3 * that._l01_a * (that._l01_a + that._l12_a);
	    x1 = (x1 * a - that._x0 * that._l12_2a + that._x2 * that._l01_2a) / n;
	    y1 = (y1 * a - that._y0 * that._l12_2a + that._y2 * that._l01_2a) / n;
	  }

	  if (that._l23_a > epsilon) {
	    var b = 2 * that._l23_2a + 3 * that._l23_a * that._l12_a + that._l12_2a,
	        m = 3 * that._l23_a * (that._l23_a + that._l12_a);
	    x2 = (x2 * b + that._x1 * that._l23_2a - x * that._l12_2a) / m;
	    y2 = (y2 * b + that._y1 * that._l23_2a - y * that._l12_2a) / m;
	  }

	  that._context.bezierCurveTo(x1, y1, x2, y2, that._x2, that._y2);
	}

	function CatmullRom(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRom.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x2, this._y2); break;
	      case 3: this.point(this._x2, this._y2); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRom = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRom(context, alpha) : new Cardinal(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomClosed(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 = this._x3 = this._x4 = this._x5 =
	    this._y0 = this._y1 = this._y2 = this._y3 = this._y4 = this._y5 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 1: {
	        this._context.moveTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 2: {
	        this._context.lineTo(this._x3, this._y3);
	        this._context.closePath();
	        break;
	      }
	      case 3: {
	        this.point(this._x3, this._y3);
	        this.point(this._x4, this._y4);
	        this.point(this._x5, this._y5);
	        break;
	      }
	    }
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; this._x3 = x, this._y3 = y; break;
	      case 1: this._point = 2; this._context.moveTo(this._x4 = x, this._y4 = y); break;
	      case 2: this._point = 3; this._x5 = x, this._y5 = y; break;
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomClosed = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomClosed(context, alpha) : new CardinalClosed(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function CatmullRomOpen(context, alpha) {
	  this._context = context;
	  this._alpha = alpha;
	}

	CatmullRomOpen.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 = this._x2 =
	    this._y0 = this._y1 = this._y2 = NaN;
	    this._l01_a = this._l12_a = this._l23_a =
	    this._l01_2a = this._l12_2a = this._l23_2a =
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._line || (this._line !== 0 && this._point === 3)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;

	    if (this._point) {
	      var x23 = this._x2 - x,
	          y23 = this._y2 - y;
	      this._l23_a = Math.sqrt(this._l23_2a = Math.pow(x23 * x23 + y23 * y23, this._alpha));
	    }

	    switch (this._point) {
	      case 0: this._point = 1; break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; this._line ? this._context.lineTo(this._x2, this._y2) : this._context.moveTo(this._x2, this._y2); break;
	      case 3: this._point = 4; // proceed
	      default: point$2(this, x, y); break;
	    }

	    this._l01_a = this._l12_a, this._l12_a = this._l23_a;
	    this._l01_2a = this._l12_2a, this._l12_2a = this._l23_2a;
	    this._x0 = this._x1, this._x1 = this._x2, this._x2 = x;
	    this._y0 = this._y1, this._y1 = this._y2, this._y2 = y;
	  }
	};

	var catmullRomOpen = ((function custom(alpha) {

	  function catmullRom(context) {
	    return alpha ? new CatmullRomOpen(context, alpha) : new CardinalOpen(context, 0);
	  }

	  catmullRom.alpha = function(alpha) {
	    return custom(+alpha);
	  };

	  return catmullRom;
	}))(0.5);

	function LinearClosed(context) {
	  this._context = context;
	}

	LinearClosed.prototype = {
	  areaStart: noop,
	  areaEnd: noop,
	  lineStart: function() {
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (this._point) this._context.closePath();
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    if (this._point) this._context.lineTo(x, y);
	    else this._point = 1, this._context.moveTo(x, y);
	  }
	};

	var linearClosed = function(context) {
	  return new LinearClosed(context);
	};

	function sign(x) {
	  return x < 0 ? -1 : 1;
	}

	// Calculate the slopes of the tangents (Hermite-type interpolation) based on
	// the following paper: Steffen, M. 1990. A Simple Method for Monotonic
	// Interpolation in One Dimension. Astronomy and Astrophysics, Vol. 239, NO.
	// NOV(II), P. 443, 1990.
	function slope3(that, x2, y2) {
	  var h0 = that._x1 - that._x0,
	      h1 = x2 - that._x1,
	      s0 = (that._y1 - that._y0) / (h0 || h1 < 0 && -0),
	      s1 = (y2 - that._y1) / (h1 || h0 < 0 && -0),
	      p = (s0 * h1 + s1 * h0) / (h0 + h1);
	  return (sign(s0) + sign(s1)) * Math.min(Math.abs(s0), Math.abs(s1), 0.5 * Math.abs(p)) || 0;
	}

	// Calculate a one-sided slope.
	function slope2(that, t) {
	  var h = that._x1 - that._x0;
	  return h ? (3 * (that._y1 - that._y0) / h - t) / 2 : t;
	}

	// According to https://en.wikipedia.org/wiki/Cubic_Hermite_spline#Representations
	// "you can express cubic Hermite interpolation in terms of cubic Bézier curves
	// with respect to the four values p0, p0 + m0 / 3, p1 - m1 / 3, p1".
	function point$3(that, t0, t1) {
	  var x0 = that._x0,
	      y0 = that._y0,
	      x1 = that._x1,
	      y1 = that._y1,
	      dx = (x1 - x0) / 3;
	  that._context.bezierCurveTo(x0 + dx, y0 + dx * t0, x1 - dx, y1 - dx * t1, x1, y1);
	}

	function MonotoneX(context) {
	  this._context = context;
	}

	MonotoneX.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x0 = this._x1 =
	    this._y0 = this._y1 =
	    this._t0 = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    switch (this._point) {
	      case 2: this._context.lineTo(this._x1, this._y1); break;
	      case 3: point$3(this, this._t0, slope2(this, this._t0)); break;
	    }
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    var t1 = NaN;

	    x = +x, y = +y;
	    if (x === this._x1 && y === this._y1) return; // Ignore coincident points.
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; break;
	      case 2: this._point = 3; point$3(this, slope2(this, t1 = slope3(this, x, y)), t1); break;
	      default: point$3(this, this._t0, t1 = slope3(this, x, y)); break;
	    }

	    this._x0 = this._x1, this._x1 = x;
	    this._y0 = this._y1, this._y1 = y;
	    this._t0 = t1;
	  }
	};

	function MonotoneY(context) {
	  this._context = new ReflectContext(context);
	}

	(MonotoneY.prototype = Object.create(MonotoneX.prototype)).point = function(x, y) {
	  MonotoneX.prototype.point.call(this, y, x);
	};

	function ReflectContext(context) {
	  this._context = context;
	}

	ReflectContext.prototype = {
	  moveTo: function(x, y) { this._context.moveTo(y, x); },
	  closePath: function() { this._context.closePath(); },
	  lineTo: function(x, y) { this._context.lineTo(y, x); },
	  bezierCurveTo: function(x1, y1, x2, y2, x, y) { this._context.bezierCurveTo(y1, x1, y2, x2, y, x); }
	};

	function monotoneX(context) {
	  return new MonotoneX(context);
	}

	function monotoneY(context) {
	  return new MonotoneY(context);
	}

	function Natural(context) {
	  this._context = context;
	}

	Natural.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = [];
	    this._y = [];
	  },
	  lineEnd: function() {
	    var x = this._x,
	        y = this._y,
	        n = x.length;

	    if (n) {
	      this._line ? this._context.lineTo(x[0], y[0]) : this._context.moveTo(x[0], y[0]);
	      if (n === 2) {
	        this._context.lineTo(x[1], y[1]);
	      } else {
	        var px = controlPoints(x),
	            py = controlPoints(y);
	        for (var i0 = 0, i1 = 1; i1 < n; ++i0, ++i1) {
	          this._context.bezierCurveTo(px[0][i0], py[0][i0], px[1][i0], py[1][i0], x[i1], y[i1]);
	        }
	      }
	    }

	    if (this._line || (this._line !== 0 && n === 1)) this._context.closePath();
	    this._line = 1 - this._line;
	    this._x = this._y = null;
	  },
	  point: function(x, y) {
	    this._x.push(+x);
	    this._y.push(+y);
	  }
	};

	// See https://www.particleincell.com/2012/bezier-splines/ for derivation.
	function controlPoints(x) {
	  var i,
	      n = x.length - 1,
	      m,
	      a = new Array(n),
	      b = new Array(n),
	      r = new Array(n);
	  a[0] = 0, b[0] = 2, r[0] = x[0] + 2 * x[1];
	  for (i = 1; i < n - 1; ++i) a[i] = 1, b[i] = 4, r[i] = 4 * x[i] + 2 * x[i + 1];
	  a[n - 1] = 2, b[n - 1] = 7, r[n - 1] = 8 * x[n - 1] + x[n];
	  for (i = 1; i < n; ++i) m = a[i] / b[i - 1], b[i] -= m, r[i] -= m * r[i - 1];
	  a[n - 1] = r[n - 1] / b[n - 1];
	  for (i = n - 2; i >= 0; --i) a[i] = (r[i] - a[i + 1]) / b[i];
	  b[n - 1] = (x[n] + a[n - 1]) / 2;
	  for (i = 0; i < n - 1; ++i) b[i] = 2 * x[i + 1] - a[i + 1];
	  return [a, b];
	}

	var natural = function(context) {
	  return new Natural(context);
	};

	function Step(context, t) {
	  this._context = context;
	  this._t = t;
	}

	Step.prototype = {
	  areaStart: function() {
	    this._line = 0;
	  },
	  areaEnd: function() {
	    this._line = NaN;
	  },
	  lineStart: function() {
	    this._x = this._y = NaN;
	    this._point = 0;
	  },
	  lineEnd: function() {
	    if (0 < this._t && this._t < 1 && this._point === 2) this._context.lineTo(this._x, this._y);
	    if (this._line || (this._line !== 0 && this._point === 1)) this._context.closePath();
	    if (this._line >= 0) this._t = 1 - this._t, this._line = 1 - this._line;
	  },
	  point: function(x, y) {
	    x = +x, y = +y;
	    switch (this._point) {
	      case 0: this._point = 1; this._line ? this._context.lineTo(x, y) : this._context.moveTo(x, y); break;
	      case 1: this._point = 2; // proceed
	      default: {
	        if (this._t <= 0) {
	          this._context.lineTo(this._x, y);
	          this._context.lineTo(x, y);
	        } else {
	          var x1 = this._x * (1 - this._t) + x * this._t;
	          this._context.lineTo(x1, this._y);
	          this._context.lineTo(x1, y);
	        }
	        break;
	      }
	    }
	    this._x = x, this._y = y;
	  }
	};

	var step = function(context) {
	  return new Step(context, 0.5);
	};

	function stepBefore(context) {
	  return new Step(context, 0);
	}

	function stepAfter(context) {
	  return new Step(context, 1);
	}

	var none = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i = 1, j, s0, s1 = series[order[0]], n, m = s1.length; i < n; ++i) {
	    s0 = s1, s1 = series[order[i]];
	    for (j = 0; j < m; ++j) {
	      s1[j][1] += s1[j][0] = isNaN(s0[j][1]) ? s0[j][0] : s0[j][1];
	    }
	  }
	};

	var none$1 = function(series) {
	  var n = series.length, o = new Array(n);
	  while (--n >= 0) o[n] = n;
	  return o;
	};

	function stackValue(d, key) {
	  return d[key];
	}

	var stack = function() {
	  var keys = constant([]),
	      order = none$1,
	      offset = none,
	      value = stackValue;

	  function stack(data) {
	    var kz = keys.apply(this, arguments),
	        i,
	        m = data.length,
	        n = kz.length,
	        sz = new Array(n),
	        oz;

	    for (i = 0; i < n; ++i) {
	      for (var ki = kz[i], si = sz[i] = new Array(m), j = 0, sij; j < m; ++j) {
	        si[j] = sij = [0, +value(data[j], ki, j, data)];
	        sij.data = data[j];
	      }
	      si.key = ki;
	    }

	    for (i = 0, oz = order(sz); i < n; ++i) {
	      sz[oz[i]].index = i;
	    }

	    offset(sz, oz);
	    return sz;
	  }

	  stack.keys = function(_) {
	    return arguments.length ? (keys = typeof _ === "function" ? _ : constant(slice.call(_)), stack) : keys;
	  };

	  stack.value = function(_) {
	    return arguments.length ? (value = typeof _ === "function" ? _ : constant(+_), stack) : value;
	  };

	  stack.order = function(_) {
	    return arguments.length ? (order = _ == null ? none$1 : typeof _ === "function" ? _ : constant(slice.call(_)), stack) : order;
	  };

	  stack.offset = function(_) {
	    return arguments.length ? (offset = _ == null ? none : _, stack) : offset;
	  };

	  return stack;
	};

	var expand = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var i, n, j = 0, m = series[0].length, y; j < m; ++j) {
	    for (y = i = 0; i < n; ++i) y += series[i][j][1] || 0;
	    if (y) for (i = 0; i < n; ++i) series[i][j][1] /= y;
	  }
	  none(series, order);
	};

	var diverging = function(series, order) {
	  if (!((n = series.length) > 1)) return;
	  for (var i, j = 0, d, dy, yp, yn, n, m = series[order[0]].length; j < m; ++j) {
	    for (yp = yn = 0, i = 0; i < n; ++i) {
	      if ((dy = (d = series[order[i]][j])[1] - d[0]) >= 0) {
	        d[0] = yp, d[1] = yp += dy;
	      } else if (dy < 0) {
	        d[1] = yn, d[0] = yn += dy;
	      } else {
	        d[0] = yp;
	      }
	    }
	  }
	};

	var silhouette = function(series, order) {
	  if (!((n = series.length) > 0)) return;
	  for (var j = 0, s0 = series[order[0]], n, m = s0.length; j < m; ++j) {
	    for (var i = 0, y = 0; i < n; ++i) y += series[i][j][1] || 0;
	    s0[j][1] += s0[j][0] = -y / 2;
	  }
	  none(series, order);
	};

	var wiggle = function(series, order) {
	  if (!((n = series.length) > 0) || !((m = (s0 = series[order[0]]).length) > 0)) return;
	  for (var y = 0, j = 1, s0, m, n; j < m; ++j) {
	    for (var i = 0, s1 = 0, s2 = 0; i < n; ++i) {
	      var si = series[order[i]],
	          sij0 = si[j][1] || 0,
	          sij1 = si[j - 1][1] || 0,
	          s3 = (sij0 - sij1) / 2;
	      for (var k = 0; k < i; ++k) {
	        var sk = series[order[k]],
	            skj0 = sk[j][1] || 0,
	            skj1 = sk[j - 1][1] || 0;
	        s3 += skj0 - skj1;
	      }
	      s1 += sij0, s2 += s3 * sij0;
	    }
	    s0[j - 1][1] += s0[j - 1][0] = y;
	    if (s1) y -= s2 / s1;
	  }
	  s0[j - 1][1] += s0[j - 1][0] = y;
	  none(series, order);
	};

	var ascending = function(series) {
	  var sums = series.map(sum);
	  return none$1(series).sort(function(a, b) { return sums[a] - sums[b]; });
	};

	function sum(series) {
	  var s = 0, i = -1, n = series.length, v;
	  while (++i < n) if (v = +series[i][1]) s += v;
	  return s;
	}

	var descending$1 = function(series) {
	  return ascending(series).reverse();
	};

	var insideOut = function(series) {
	  var n = series.length,
	      i,
	      j,
	      sums = series.map(sum),
	      order = none$1(series).sort(function(a, b) { return sums[b] - sums[a]; }),
	      top = 0,
	      bottom = 0,
	      tops = [],
	      bottoms = [];

	  for (i = 0; i < n; ++i) {
	    j = order[i];
	    if (top < bottom) {
	      top += sums[j];
	      tops.push(j);
	    } else {
	      bottom += sums[j];
	      bottoms.push(j);
	    }
	  }

	  return bottoms.reverse().concat(tops);
	};

	var reverse = function(series) {
	  return none$1(series).reverse();
	};

	exports.arc = arc;
	exports.area = area;
	exports.line = line;
	exports.pie = pie;
	exports.areaRadial = areaRadial;
	exports.radialArea = areaRadial;
	exports.lineRadial = lineRadial$1;
	exports.radialLine = lineRadial$1;
	exports.pointRadial = pointRadial;
	exports.linkHorizontal = linkHorizontal;
	exports.linkVertical = linkVertical;
	exports.linkRadial = linkRadial;
	exports.symbol = symbol;
	exports.symbols = symbols;
	exports.symbolCircle = circle;
	exports.symbolCross = cross;
	exports.symbolDiamond = diamond;
	exports.symbolSquare = square;
	exports.symbolStar = star;
	exports.symbolTriangle = triangle;
	exports.symbolWye = wye;
	exports.curveBasisClosed = basisClosed;
	exports.curveBasisOpen = basisOpen;
	exports.curveBasis = basis;
	exports.curveBundle = bundle;
	exports.curveCardinalClosed = cardinalClosed;
	exports.curveCardinalOpen = cardinalOpen;
	exports.curveCardinal = cardinal;
	exports.curveCatmullRomClosed = catmullRomClosed;
	exports.curveCatmullRomOpen = catmullRomOpen;
	exports.curveCatmullRom = catmullRom;
	exports.curveLinearClosed = linearClosed;
	exports.curveLinear = curveLinear;
	exports.curveMonotoneX = monotoneX;
	exports.curveMonotoneY = monotoneY;
	exports.curveNatural = natural;
	exports.curveStep = step;
	exports.curveStepAfter = stepAfter;
	exports.curveStepBefore = stepBefore;
	exports.stack = stack;
	exports.stackOffsetExpand = expand;
	exports.stackOffsetDiverging = diverging;
	exports.stackOffsetNone = none;
	exports.stackOffsetSilhouette = silhouette;
	exports.stackOffsetWiggle = wiggle;
	exports.stackOrderAscending = ascending;
	exports.stackOrderDescending = descending$1;
	exports.stackOrderInsideOut = insideOut;
	exports.stackOrderNone = none$1;
	exports.stackOrderReverse = reverse;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 37 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-voronoi/ Version 1.1.2. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports) :
		typeof define === 'function' && define.amd ? define(['exports'], factory) :
		(factory((global.d3 = global.d3 || {})));
	}(this, (function (exports) { 'use strict';

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function x(d) {
	  return d[0];
	}

	function y(d) {
	  return d[1];
	}

	function RedBlackTree() {
	  this._ = null; // root node
	}

	function RedBlackNode(node) {
	  node.U = // parent node
	  node.C = // color - true for red, false for black
	  node.L = // left node
	  node.R = // right node
	  node.P = // previous node
	  node.N = null; // next node
	}

	RedBlackTree.prototype = {
	  constructor: RedBlackTree,

	  insert: function(after, node) {
	    var parent, grandpa, uncle;

	    if (after) {
	      node.P = after;
	      node.N = after.N;
	      if (after.N) after.N.P = node;
	      after.N = node;
	      if (after.R) {
	        after = after.R;
	        while (after.L) after = after.L;
	        after.L = node;
	      } else {
	        after.R = node;
	      }
	      parent = after;
	    } else if (this._) {
	      after = RedBlackFirst(this._);
	      node.P = null;
	      node.N = after;
	      after.P = after.L = node;
	      parent = after;
	    } else {
	      node.P = node.N = null;
	      this._ = node;
	      parent = null;
	    }
	    node.L = node.R = null;
	    node.U = parent;
	    node.C = true;

	    after = node;
	    while (parent && parent.C) {
	      grandpa = parent.U;
	      if (parent === grandpa.L) {
	        uncle = grandpa.R;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.R) {
	            RedBlackRotateLeft(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateRight(this, grandpa);
	        }
	      } else {
	        uncle = grandpa.L;
	        if (uncle && uncle.C) {
	          parent.C = uncle.C = false;
	          grandpa.C = true;
	          after = grandpa;
	        } else {
	          if (after === parent.L) {
	            RedBlackRotateRight(this, parent);
	            after = parent;
	            parent = after.U;
	          }
	          parent.C = false;
	          grandpa.C = true;
	          RedBlackRotateLeft(this, grandpa);
	        }
	      }
	      parent = after.U;
	    }
	    this._.C = false;
	  },

	  remove: function(node) {
	    if (node.N) node.N.P = node.P;
	    if (node.P) node.P.N = node.N;
	    node.N = node.P = null;

	    var parent = node.U,
	        sibling,
	        left = node.L,
	        right = node.R,
	        next,
	        red;

	    if (!left) next = right;
	    else if (!right) next = left;
	    else next = RedBlackFirst(right);

	    if (parent) {
	      if (parent.L === node) parent.L = next;
	      else parent.R = next;
	    } else {
	      this._ = next;
	    }

	    if (left && right) {
	      red = next.C;
	      next.C = node.C;
	      next.L = left;
	      left.U = next;
	      if (next !== right) {
	        parent = next.U;
	        next.U = node.U;
	        node = next.R;
	        parent.L = node;
	        next.R = right;
	        right.U = next;
	      } else {
	        next.U = parent;
	        parent = next;
	        node = next.R;
	      }
	    } else {
	      red = node.C;
	      node = next;
	    }

	    if (node) node.U = parent;
	    if (red) return;
	    if (node && node.C) { node.C = false; return; }

	    do {
	      if (node === this._) break;
	      if (node === parent.L) {
	        sibling = parent.R;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateLeft(this, parent);
	          sibling = parent.R;
	        }
	        if ((sibling.L && sibling.L.C)
	            || (sibling.R && sibling.R.C)) {
	          if (!sibling.R || !sibling.R.C) {
	            sibling.L.C = false;
	            sibling.C = true;
	            RedBlackRotateRight(this, sibling);
	            sibling = parent.R;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.R.C = false;
	          RedBlackRotateLeft(this, parent);
	          node = this._;
	          break;
	        }
	      } else {
	        sibling = parent.L;
	        if (sibling.C) {
	          sibling.C = false;
	          parent.C = true;
	          RedBlackRotateRight(this, parent);
	          sibling = parent.L;
	        }
	        if ((sibling.L && sibling.L.C)
	          || (sibling.R && sibling.R.C)) {
	          if (!sibling.L || !sibling.L.C) {
	            sibling.R.C = false;
	            sibling.C = true;
	            RedBlackRotateLeft(this, sibling);
	            sibling = parent.L;
	          }
	          sibling.C = parent.C;
	          parent.C = sibling.L.C = false;
	          RedBlackRotateRight(this, parent);
	          node = this._;
	          break;
	        }
	      }
	      sibling.C = true;
	      node = parent;
	      parent = parent.U;
	    } while (!node.C);

	    if (node) node.C = false;
	  }
	};

	function RedBlackRotateLeft(tree, node) {
	  var p = node,
	      q = node.R,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.R = q.L;
	  if (p.R) p.R.U = p;
	  q.L = p;
	}

	function RedBlackRotateRight(tree, node) {
	  var p = node,
	      q = node.L,
	      parent = p.U;

	  if (parent) {
	    if (parent.L === p) parent.L = q;
	    else parent.R = q;
	  } else {
	    tree._ = q;
	  }

	  q.U = parent;
	  p.U = q;
	  p.L = q.R;
	  if (p.L) p.L.U = p;
	  q.R = p;
	}

	function RedBlackFirst(node) {
	  while (node.L) node = node.L;
	  return node;
	}

	function createEdge(left, right, v0, v1) {
	  var edge = [null, null],
	      index = edges.push(edge) - 1;
	  edge.left = left;
	  edge.right = right;
	  if (v0) setEdgeEnd(edge, left, right, v0);
	  if (v1) setEdgeEnd(edge, right, left, v1);
	  cells[left.index].halfedges.push(index);
	  cells[right.index].halfedges.push(index);
	  return edge;
	}

	function createBorderEdge(left, v0, v1) {
	  var edge = [v0, v1];
	  edge.left = left;
	  return edge;
	}

	function setEdgeEnd(edge, left, right, vertex) {
	  if (!edge[0] && !edge[1]) {
	    edge[0] = vertex;
	    edge.left = left;
	    edge.right = right;
	  } else if (edge.left === right) {
	    edge[1] = vertex;
	  } else {
	    edge[0] = vertex;
	  }
	}

	// Liang–Barsky line clipping.
	function clipEdge(edge, x0, y0, x1, y1) {
	  var a = edge[0],
	      b = edge[1],
	      ax = a[0],
	      ay = a[1],
	      bx = b[0],
	      by = b[1],
	      t0 = 0,
	      t1 = 1,
	      dx = bx - ax,
	      dy = by - ay,
	      r;

	  r = x0 - ax;
	  if (!dx && r > 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dx > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = x1 - ax;
	  if (!dx && r < 0) return;
	  r /= dx;
	  if (dx < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dx > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  r = y0 - ay;
	  if (!dy && r > 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  } else if (dy > 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  }

	  r = y1 - ay;
	  if (!dy && r < 0) return;
	  r /= dy;
	  if (dy < 0) {
	    if (r > t1) return;
	    if (r > t0) t0 = r;
	  } else if (dy > 0) {
	    if (r < t0) return;
	    if (r < t1) t1 = r;
	  }

	  if (!(t0 > 0) && !(t1 < 1)) return true; // TODO Better check?

	  if (t0 > 0) edge[0] = [ax + t0 * dx, ay + t0 * dy];
	  if (t1 < 1) edge[1] = [ax + t1 * dx, ay + t1 * dy];
	  return true;
	}

	function connectEdge(edge, x0, y0, x1, y1) {
	  var v1 = edge[1];
	  if (v1) return true;

	  var v0 = edge[0],
	      left = edge.left,
	      right = edge.right,
	      lx = left[0],
	      ly = left[1],
	      rx = right[0],
	      ry = right[1],
	      fx = (lx + rx) / 2,
	      fy = (ly + ry) / 2,
	      fm,
	      fb;

	  if (ry === ly) {
	    if (fx < x0 || fx >= x1) return;
	    if (lx > rx) {
	      if (!v0) v0 = [fx, y0];
	      else if (v0[1] >= y1) return;
	      v1 = [fx, y1];
	    } else {
	      if (!v0) v0 = [fx, y1];
	      else if (v0[1] < y0) return;
	      v1 = [fx, y0];
	    }
	  } else {
	    fm = (lx - rx) / (ry - ly);
	    fb = fy - fm * fx;
	    if (fm < -1 || fm > 1) {
	      if (lx > rx) {
	        if (!v0) v0 = [(y0 - fb) / fm, y0];
	        else if (v0[1] >= y1) return;
	        v1 = [(y1 - fb) / fm, y1];
	      } else {
	        if (!v0) v0 = [(y1 - fb) / fm, y1];
	        else if (v0[1] < y0) return;
	        v1 = [(y0 - fb) / fm, y0];
	      }
	    } else {
	      if (ly < ry) {
	        if (!v0) v0 = [x0, fm * x0 + fb];
	        else if (v0[0] >= x1) return;
	        v1 = [x1, fm * x1 + fb];
	      } else {
	        if (!v0) v0 = [x1, fm * x1 + fb];
	        else if (v0[0] < x0) return;
	        v1 = [x0, fm * x0 + fb];
	      }
	    }
	  }

	  edge[0] = v0;
	  edge[1] = v1;
	  return true;
	}

	function clipEdges(x0, y0, x1, y1) {
	  var i = edges.length,
	      edge;

	  while (i--) {
	    if (!connectEdge(edge = edges[i], x0, y0, x1, y1)
	        || !clipEdge(edge, x0, y0, x1, y1)
	        || !(Math.abs(edge[0][0] - edge[1][0]) > epsilon
	            || Math.abs(edge[0][1] - edge[1][1]) > epsilon)) {
	      delete edges[i];
	    }
	  }
	}

	function createCell(site) {
	  return cells[site.index] = {
	    site: site,
	    halfedges: []
	  };
	}

	function cellHalfedgeAngle(cell, edge) {
	  var site = cell.site,
	      va = edge.left,
	      vb = edge.right;
	  if (site === vb) vb = va, va = site;
	  if (vb) return Math.atan2(vb[1] - va[1], vb[0] - va[0]);
	  if (site === va) va = edge[1], vb = edge[0];
	  else va = edge[0], vb = edge[1];
	  return Math.atan2(va[0] - vb[0], vb[1] - va[1]);
	}

	function cellHalfedgeStart(cell, edge) {
	  return edge[+(edge.left !== cell.site)];
	}

	function cellHalfedgeEnd(cell, edge) {
	  return edge[+(edge.left === cell.site)];
	}

	function sortCellHalfedges() {
	  for (var i = 0, n = cells.length, cell, halfedges, j, m; i < n; ++i) {
	    if ((cell = cells[i]) && (m = (halfedges = cell.halfedges).length)) {
	      var index = new Array(m),
	          array = new Array(m);
	      for (j = 0; j < m; ++j) index[j] = j, array[j] = cellHalfedgeAngle(cell, edges[halfedges[j]]);
	      index.sort(function(i, j) { return array[j] - array[i]; });
	      for (j = 0; j < m; ++j) array[j] = halfedges[index[j]];
	      for (j = 0; j < m; ++j) halfedges[j] = array[j];
	    }
	  }
	}

	function clipCells(x0, y0, x1, y1) {
	  var nCells = cells.length,
	      iCell,
	      cell,
	      site,
	      iHalfedge,
	      halfedges,
	      nHalfedges,
	      start,
	      startX,
	      startY,
	      end,
	      endX,
	      endY,
	      cover = true;

	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      site = cell.site;
	      halfedges = cell.halfedges;
	      iHalfedge = halfedges.length;

	      // Remove any dangling clipped edges.
	      while (iHalfedge--) {
	        if (!edges[halfedges[iHalfedge]]) {
	          halfedges.splice(iHalfedge, 1);
	        }
	      }

	      // Insert any border edges as necessary.
	      iHalfedge = 0, nHalfedges = halfedges.length;
	      while (iHalfedge < nHalfedges) {
	        end = cellHalfedgeEnd(cell, edges[halfedges[iHalfedge]]), endX = end[0], endY = end[1];
	        start = cellHalfedgeStart(cell, edges[halfedges[++iHalfedge % nHalfedges]]), startX = start[0], startY = start[1];
	        if (Math.abs(endX - startX) > epsilon || Math.abs(endY - startY) > epsilon) {
	          halfedges.splice(iHalfedge, 0, edges.push(createBorderEdge(site, end,
	              Math.abs(endX - x0) < epsilon && y1 - endY > epsilon ? [x0, Math.abs(startX - x0) < epsilon ? startY : y1]
	              : Math.abs(endY - y1) < epsilon && x1 - endX > epsilon ? [Math.abs(startY - y1) < epsilon ? startX : x1, y1]
	              : Math.abs(endX - x1) < epsilon && endY - y0 > epsilon ? [x1, Math.abs(startX - x1) < epsilon ? startY : y0]
	              : Math.abs(endY - y0) < epsilon && endX - x0 > epsilon ? [Math.abs(startY - y0) < epsilon ? startX : x0, y0]
	              : null)) - 1);
	          ++nHalfedges;
	        }
	      }

	      if (nHalfedges) cover = false;
	    }
	  }

	  // If there weren’t any edges, have the closest site cover the extent.
	  // It doesn’t matter which corner of the extent we measure!
	  if (cover) {
	    var dx, dy, d2, dc = Infinity;

	    for (iCell = 0, cover = null; iCell < nCells; ++iCell) {
	      if (cell = cells[iCell]) {
	        site = cell.site;
	        dx = site[0] - x0;
	        dy = site[1] - y0;
	        d2 = dx * dx + dy * dy;
	        if (d2 < dc) dc = d2, cover = cell;
	      }
	    }

	    if (cover) {
	      var v00 = [x0, y0], v01 = [x0, y1], v11 = [x1, y1], v10 = [x1, y0];
	      cover.halfedges.push(
	        edges.push(createBorderEdge(site = cover.site, v00, v01)) - 1,
	        edges.push(createBorderEdge(site, v01, v11)) - 1,
	        edges.push(createBorderEdge(site, v11, v10)) - 1,
	        edges.push(createBorderEdge(site, v10, v00)) - 1
	      );
	    }
	  }

	  // Lastly delete any cells with no edges; these were entirely clipped.
	  for (iCell = 0; iCell < nCells; ++iCell) {
	    if (cell = cells[iCell]) {
	      if (!cell.halfedges.length) {
	        delete cells[iCell];
	      }
	    }
	  }
	}

	var circlePool = [];

	var firstCircle;

	function Circle() {
	  RedBlackNode(this);
	  this.x =
	  this.y =
	  this.arc =
	  this.site =
	  this.cy = null;
	}

	function attachCircle(arc) {
	  var lArc = arc.P,
	      rArc = arc.N;

	  if (!lArc || !rArc) return;

	  var lSite = lArc.site,
	      cSite = arc.site,
	      rSite = rArc.site;

	  if (lSite === rSite) return;

	  var bx = cSite[0],
	      by = cSite[1],
	      ax = lSite[0] - bx,
	      ay = lSite[1] - by,
	      cx = rSite[0] - bx,
	      cy = rSite[1] - by;

	  var d = 2 * (ax * cy - ay * cx);
	  if (d >= -epsilon2) return;

	  var ha = ax * ax + ay * ay,
	      hc = cx * cx + cy * cy,
	      x = (cy * ha - ay * hc) / d,
	      y = (ax * hc - cx * ha) / d;

	  var circle = circlePool.pop() || new Circle;
	  circle.arc = arc;
	  circle.site = cSite;
	  circle.x = x + bx;
	  circle.y = (circle.cy = y + by) + Math.sqrt(x * x + y * y); // y bottom

	  arc.circle = circle;

	  var before = null,
	      node = circles._;

	  while (node) {
	    if (circle.y < node.y || (circle.y === node.y && circle.x <= node.x)) {
	      if (node.L) node = node.L;
	      else { before = node.P; break; }
	    } else {
	      if (node.R) node = node.R;
	      else { before = node; break; }
	    }
	  }

	  circles.insert(before, circle);
	  if (!before) firstCircle = circle;
	}

	function detachCircle(arc) {
	  var circle = arc.circle;
	  if (circle) {
	    if (!circle.P) firstCircle = circle.N;
	    circles.remove(circle);
	    circlePool.push(circle);
	    RedBlackNode(circle);
	    arc.circle = null;
	  }
	}

	var beachPool = [];

	function Beach() {
	  RedBlackNode(this);
	  this.edge =
	  this.site =
	  this.circle = null;
	}

	function createBeach(site) {
	  var beach = beachPool.pop() || new Beach;
	  beach.site = site;
	  return beach;
	}

	function detachBeach(beach) {
	  detachCircle(beach);
	  beaches.remove(beach);
	  beachPool.push(beach);
	  RedBlackNode(beach);
	}

	function removeBeach(beach) {
	  var circle = beach.circle,
	      x = circle.x,
	      y = circle.cy,
	      vertex = [x, y],
	      previous = beach.P,
	      next = beach.N,
	      disappearing = [beach];

	  detachBeach(beach);

	  var lArc = previous;
	  while (lArc.circle
	      && Math.abs(x - lArc.circle.x) < epsilon
	      && Math.abs(y - lArc.circle.cy) < epsilon) {
	    previous = lArc.P;
	    disappearing.unshift(lArc);
	    detachBeach(lArc);
	    lArc = previous;
	  }

	  disappearing.unshift(lArc);
	  detachCircle(lArc);

	  var rArc = next;
	  while (rArc.circle
	      && Math.abs(x - rArc.circle.x) < epsilon
	      && Math.abs(y - rArc.circle.cy) < epsilon) {
	    next = rArc.N;
	    disappearing.push(rArc);
	    detachBeach(rArc);
	    rArc = next;
	  }

	  disappearing.push(rArc);
	  detachCircle(rArc);

	  var nArcs = disappearing.length,
	      iArc;
	  for (iArc = 1; iArc < nArcs; ++iArc) {
	    rArc = disappearing[iArc];
	    lArc = disappearing[iArc - 1];
	    setEdgeEnd(rArc.edge, lArc.site, rArc.site, vertex);
	  }

	  lArc = disappearing[0];
	  rArc = disappearing[nArcs - 1];
	  rArc.edge = createEdge(lArc.site, rArc.site, null, vertex);

	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function addBeach(site) {
	  var x = site[0],
	      directrix = site[1],
	      lArc,
	      rArc,
	      dxl,
	      dxr,
	      node = beaches._;

	  while (node) {
	    dxl = leftBreakPoint(node, directrix) - x;
	    if (dxl > epsilon) node = node.L; else {
	      dxr = x - rightBreakPoint(node, directrix);
	      if (dxr > epsilon) {
	        if (!node.R) {
	          lArc = node;
	          break;
	        }
	        node = node.R;
	      } else {
	        if (dxl > -epsilon) {
	          lArc = node.P;
	          rArc = node;
	        } else if (dxr > -epsilon) {
	          lArc = node;
	          rArc = node.N;
	        } else {
	          lArc = rArc = node;
	        }
	        break;
	      }
	    }
	  }

	  createCell(site);
	  var newArc = createBeach(site);
	  beaches.insert(lArc, newArc);

	  if (!lArc && !rArc) return;

	  if (lArc === rArc) {
	    detachCircle(lArc);
	    rArc = createBeach(lArc.site);
	    beaches.insert(newArc, rArc);
	    newArc.edge = rArc.edge = createEdge(lArc.site, newArc.site);
	    attachCircle(lArc);
	    attachCircle(rArc);
	    return;
	  }

	  if (!rArc) { // && lArc
	    newArc.edge = createEdge(lArc.site, newArc.site);
	    return;
	  }

	  // else lArc !== rArc
	  detachCircle(lArc);
	  detachCircle(rArc);

	  var lSite = lArc.site,
	      ax = lSite[0],
	      ay = lSite[1],
	      bx = site[0] - ax,
	      by = site[1] - ay,
	      rSite = rArc.site,
	      cx = rSite[0] - ax,
	      cy = rSite[1] - ay,
	      d = 2 * (bx * cy - by * cx),
	      hb = bx * bx + by * by,
	      hc = cx * cx + cy * cy,
	      vertex = [(cy * hb - by * hc) / d + ax, (bx * hc - cx * hb) / d + ay];

	  setEdgeEnd(rArc.edge, lSite, rSite, vertex);
	  newArc.edge = createEdge(lSite, site, null, vertex);
	  rArc.edge = createEdge(site, rSite, null, vertex);
	  attachCircle(lArc);
	  attachCircle(rArc);
	}

	function leftBreakPoint(arc, directrix) {
	  var site = arc.site,
	      rfocx = site[0],
	      rfocy = site[1],
	      pby2 = rfocy - directrix;

	  if (!pby2) return rfocx;

	  var lArc = arc.P;
	  if (!lArc) return -Infinity;

	  site = lArc.site;
	  var lfocx = site[0],
	      lfocy = site[1],
	      plby2 = lfocy - directrix;

	  if (!plby2) return lfocx;

	  var hl = lfocx - rfocx,
	      aby2 = 1 / pby2 - 1 / plby2,
	      b = hl / plby2;

	  if (aby2) return (-b + Math.sqrt(b * b - 2 * aby2 * (hl * hl / (-2 * plby2) - lfocy + plby2 / 2 + rfocy - pby2 / 2))) / aby2 + rfocx;

	  return (rfocx + lfocx) / 2;
	}

	function rightBreakPoint(arc, directrix) {
	  var rArc = arc.N;
	  if (rArc) return leftBreakPoint(rArc, directrix);
	  var site = arc.site;
	  return site[1] === directrix ? site[0] : Infinity;
	}

	var epsilon = 1e-6;
	var epsilon2 = 1e-12;
	var beaches;
	var cells;
	var circles;
	var edges;

	function triangleArea(a, b, c) {
	  return (a[0] - c[0]) * (b[1] - a[1]) - (a[0] - b[0]) * (c[1] - a[1]);
	}

	function lexicographic(a, b) {
	  return b[1] - a[1]
	      || b[0] - a[0];
	}

	function Diagram(sites, extent) {
	  var site = sites.sort(lexicographic).pop(),
	      x,
	      y,
	      circle;

	  edges = [];
	  cells = new Array(sites.length);
	  beaches = new RedBlackTree;
	  circles = new RedBlackTree;

	  while (true) {
	    circle = firstCircle;
	    if (site && (!circle || site[1] < circle.y || (site[1] === circle.y && site[0] < circle.x))) {
	      if (site[0] !== x || site[1] !== y) {
	        addBeach(site);
	        x = site[0], y = site[1];
	      }
	      site = sites.pop();
	    } else if (circle) {
	      removeBeach(circle.arc);
	    } else {
	      break;
	    }
	  }

	  sortCellHalfedges();

	  if (extent) {
	    var x0 = +extent[0][0],
	        y0 = +extent[0][1],
	        x1 = +extent[1][0],
	        y1 = +extent[1][1];
	    clipEdges(x0, y0, x1, y1);
	    clipCells(x0, y0, x1, y1);
	  }

	  this.edges = edges;
	  this.cells = cells;

	  beaches =
	  circles =
	  edges =
	  cells = null;
	}

	Diagram.prototype = {
	  constructor: Diagram,

	  polygons: function() {
	    var edges = this.edges;

	    return this.cells.map(function(cell) {
	      var polygon = cell.halfedges.map(function(i) { return cellHalfedgeStart(cell, edges[i]); });
	      polygon.data = cell.site.data;
	      return polygon;
	    });
	  },

	  triangles: function() {
	    var triangles = [],
	        edges = this.edges;

	    this.cells.forEach(function(cell, i) {
	      if (!(m = (halfedges = cell.halfedges).length)) return;
	      var site = cell.site,
	          halfedges,
	          j = -1,
	          m,
	          s0,
	          e1 = edges[halfedges[m - 1]],
	          s1 = e1.left === site ? e1.right : e1.left;

	      while (++j < m) {
	        s0 = s1;
	        e1 = edges[halfedges[j]];
	        s1 = e1.left === site ? e1.right : e1.left;
	        if (s0 && s1 && i < s0.index && i < s1.index && triangleArea(site, s0, s1) < 0) {
	          triangles.push([site.data, s0.data, s1.data]);
	        }
	      }
	    });

	    return triangles;
	  },

	  links: function() {
	    return this.edges.filter(function(edge) {
	      return edge.right;
	    }).map(function(edge) {
	      return {
	        source: edge.left.data,
	        target: edge.right.data
	      };
	    });
	  },

	  find: function(x, y, radius) {
	    var that = this, i0, i1 = that._found || 0, n = that.cells.length, cell;

	    // Use the previously-found cell, or start with an arbitrary one.
	    while (!(cell = that.cells[i1])) if (++i1 >= n) return null;
	    var dx = x - cell.site[0], dy = y - cell.site[1], d2 = dx * dx + dy * dy;

	    // Traverse the half-edges to find a closer cell, if any.
	    do {
	      cell = that.cells[i0 = i1], i1 = null;
	      cell.halfedges.forEach(function(e) {
	        var edge = that.edges[e], v = edge.left;
	        if ((v === cell.site || !v) && !(v = edge.right)) return;
	        var vx = x - v[0], vy = y - v[1], v2 = vx * vx + vy * vy;
	        if (v2 < d2) d2 = v2, i1 = v.index;
	      });
	    } while (i1 !== null);

	    that._found = i0;

	    return radius == null || d2 <= radius * radius ? cell.site : null;
	  }
	};

	var voronoi = function() {
	  var x$$1 = x,
	      y$$1 = y,
	      extent = null;

	  function voronoi(data) {
	    return new Diagram(data.map(function(d, i) {
	      var s = [Math.round(x$$1(d, i, data) / epsilon) * epsilon, Math.round(y$$1(d, i, data) / epsilon) * epsilon];
	      s.index = i;
	      s.data = d;
	      return s;
	    }), extent);
	  }

	  voronoi.polygons = function(data) {
	    return voronoi(data).polygons();
	  };

	  voronoi.links = function(data) {
	    return voronoi(data).links();
	  };

	  voronoi.triangles = function(data) {
	    return voronoi(data).triangles();
	  };

	  voronoi.x = function(_) {
	    return arguments.length ? (x$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : x$$1;
	  };

	  voronoi.y = function(_) {
	    return arguments.length ? (y$$1 = typeof _ === "function" ? _ : constant(+_), voronoi) : y$$1;
	  };

	  voronoi.extent = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]], voronoi) : extent && [[extent[0][0], extent[0][1]], [extent[1][0], extent[1][1]]];
	  };

	  voronoi.size = function(_) {
	    return arguments.length ? (extent = _ == null ? null : [[0, 0], [+_[0], +_[1]]], voronoi) : extent && [extent[1][0] - extent[0][0], extent[1][1] - extent[0][1]];
	  };

	  return voronoi;
	};

	exports.voronoi = voronoi;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

	// https://d3js.org/d3-zoom/ Version 1.7.1. Copyright 2017 Mike Bostock.
	(function (global, factory) {
		 true ? factory(exports, __webpack_require__(11), __webpack_require__(12), __webpack_require__(14), __webpack_require__(13), __webpack_require__(16)) :
		typeof define === 'function' && define.amd ? define(['exports', 'd3-dispatch', 'd3-drag', 'd3-interpolate', 'd3-selection', 'd3-transition'], factory) :
		(factory((global.d3 = global.d3 || {}),global.d3,global.d3,global.d3,global.d3,global.d3));
	}(this, (function (exports,d3Dispatch,d3Drag,d3Interpolate,d3Selection,d3Transition) { 'use strict';

	var constant = function(x) {
	  return function() {
	    return x;
	  };
	};

	function ZoomEvent(target, type, transform) {
	  this.target = target;
	  this.type = type;
	  this.transform = transform;
	}

	function Transform(k, x, y) {
	  this.k = k;
	  this.x = x;
	  this.y = y;
	}

	Transform.prototype = {
	  constructor: Transform,
	  scale: function(k) {
	    return k === 1 ? this : new Transform(this.k * k, this.x, this.y);
	  },
	  translate: function(x, y) {
	    return x === 0 & y === 0 ? this : new Transform(this.k, this.x + this.k * x, this.y + this.k * y);
	  },
	  apply: function(point) {
	    return [point[0] * this.k + this.x, point[1] * this.k + this.y];
	  },
	  applyX: function(x) {
	    return x * this.k + this.x;
	  },
	  applyY: function(y) {
	    return y * this.k + this.y;
	  },
	  invert: function(location) {
	    return [(location[0] - this.x) / this.k, (location[1] - this.y) / this.k];
	  },
	  invertX: function(x) {
	    return (x - this.x) / this.k;
	  },
	  invertY: function(y) {
	    return (y - this.y) / this.k;
	  },
	  rescaleX: function(x) {
	    return x.copy().domain(x.range().map(this.invertX, this).map(x.invert, x));
	  },
	  rescaleY: function(y) {
	    return y.copy().domain(y.range().map(this.invertY, this).map(y.invert, y));
	  },
	  toString: function() {
	    return "translate(" + this.x + "," + this.y + ") scale(" + this.k + ")";
	  }
	};

	var identity = new Transform(1, 0, 0);

	transform.prototype = Transform.prototype;

	function transform(node) {
	  return node.__zoom || identity;
	}

	function nopropagation() {
	  d3Selection.event.stopImmediatePropagation();
	}

	var noevent = function() {
	  d3Selection.event.preventDefault();
	  d3Selection.event.stopImmediatePropagation();
	};

	// Ignore right-click, since that should open the context menu.
	function defaultFilter() {
	  return !d3Selection.event.button;
	}

	function defaultExtent() {
	  var e = this, w, h;
	  if (e instanceof SVGElement) {
	    e = e.ownerSVGElement || e;
	    w = e.width.baseVal.value;
	    h = e.height.baseVal.value;
	  } else {
	    w = e.clientWidth;
	    h = e.clientHeight;
	  }
	  return [[0, 0], [w, h]];
	}

	function defaultTransform() {
	  return this.__zoom || identity;
	}

	function defaultWheelDelta() {
	  return -d3Selection.event.deltaY * (d3Selection.event.deltaMode ? 120 : 1) / 500;
	}

	function defaultTouchable() {
	  return "ontouchstart" in this;
	}

	function defaultConstrain(transform$$1, extent, translateExtent) {
	  var dx0 = transform$$1.invertX(extent[0][0]) - translateExtent[0][0],
	      dx1 = transform$$1.invertX(extent[1][0]) - translateExtent[1][0],
	      dy0 = transform$$1.invertY(extent[0][1]) - translateExtent[0][1],
	      dy1 = transform$$1.invertY(extent[1][1]) - translateExtent[1][1];
	  return transform$$1.translate(
	    dx1 > dx0 ? (dx0 + dx1) / 2 : Math.min(0, dx0) || Math.max(0, dx1),
	    dy1 > dy0 ? (dy0 + dy1) / 2 : Math.min(0, dy0) || Math.max(0, dy1)
	  );
	}

	var zoom = function() {
	  var filter = defaultFilter,
	      extent = defaultExtent,
	      constrain = defaultConstrain,
	      wheelDelta = defaultWheelDelta,
	      touchable = defaultTouchable,
	      scaleExtent = [0, Infinity],
	      translateExtent = [[-Infinity, -Infinity], [Infinity, Infinity]],
	      duration = 250,
	      interpolate = d3Interpolate.interpolateZoom,
	      gestures = [],
	      listeners = d3Dispatch.dispatch("start", "zoom", "end"),
	      touchstarting,
	      touchending,
	      touchDelay = 500,
	      wheelDelay = 150,
	      clickDistance2 = 0;

	  function zoom(selection) {
	    selection
	        .property("__zoom", defaultTransform)
	        .on("wheel.zoom", wheeled)
	        .on("mousedown.zoom", mousedowned)
	        .on("dblclick.zoom", dblclicked)
	      .filter(touchable)
	        .on("touchstart.zoom", touchstarted)
	        .on("touchmove.zoom", touchmoved)
	        .on("touchend.zoom touchcancel.zoom", touchended)
	        .style("touch-action", "none")
	        .style("-webkit-tap-highlight-color", "rgba(0,0,0,0)");
	  }

	  zoom.transform = function(collection, transform$$1) {
	    var selection = collection.selection ? collection.selection() : collection;
	    selection.property("__zoom", defaultTransform);
	    if (collection !== selection) {
	      schedule(collection, transform$$1);
	    } else {
	      selection.interrupt().each(function() {
	        gesture(this, arguments)
	            .start()
	            .zoom(null, typeof transform$$1 === "function" ? transform$$1.apply(this, arguments) : transform$$1)
	            .end();
	      });
	    }
	  };

	  zoom.scaleBy = function(selection, k) {
	    zoom.scaleTo(selection, function() {
	      var k0 = this.__zoom.k,
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return k0 * k1;
	    });
	  };

	  zoom.scaleTo = function(selection, k) {
	    zoom.transform(selection, function() {
	      var e = extent.apply(this, arguments),
	          t0 = this.__zoom,
	          p0 = centroid(e),
	          p1 = t0.invert(p0),
	          k1 = typeof k === "function" ? k.apply(this, arguments) : k;
	      return constrain(translate(scale(t0, k1), p0, p1), e, translateExtent);
	    });
	  };

	  zoom.translateBy = function(selection, x, y) {
	    zoom.transform(selection, function() {
	      return constrain(this.__zoom.translate(
	        typeof x === "function" ? x.apply(this, arguments) : x,
	        typeof y === "function" ? y.apply(this, arguments) : y
	      ), extent.apply(this, arguments), translateExtent);
	    });
	  };

	  zoom.translateTo = function(selection, x, y) {
	    zoom.transform(selection, function() {
	      var e = extent.apply(this, arguments),
	          t = this.__zoom,
	          p = centroid(e);
	      return constrain(identity.translate(p[0], p[1]).scale(t.k).translate(
	        typeof x === "function" ? -x.apply(this, arguments) : -x,
	        typeof y === "function" ? -y.apply(this, arguments) : -y
	      ), e, translateExtent);
	    });
	  };

	  function scale(transform$$1, k) {
	    k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], k));
	    return k === transform$$1.k ? transform$$1 : new Transform(k, transform$$1.x, transform$$1.y);
	  }

	  function translate(transform$$1, p0, p1) {
	    var x = p0[0] - p1[0] * transform$$1.k, y = p0[1] - p1[1] * transform$$1.k;
	    return x === transform$$1.x && y === transform$$1.y ? transform$$1 : new Transform(transform$$1.k, x, y);
	  }

	  function centroid(extent) {
	    return [(+extent[0][0] + +extent[1][0]) / 2, (+extent[0][1] + +extent[1][1]) / 2];
	  }

	  function schedule(transition, transform$$1, center) {
	    transition
	        .on("start.zoom", function() { gesture(this, arguments).start(); })
	        .on("interrupt.zoom end.zoom", function() { gesture(this, arguments).end(); })
	        .tween("zoom", function() {
	          var that = this,
	              args = arguments,
	              g = gesture(that, args),
	              e = extent.apply(that, args),
	              p = center || centroid(e),
	              w = Math.max(e[1][0] - e[0][0], e[1][1] - e[0][1]),
	              a = that.__zoom,
	              b = typeof transform$$1 === "function" ? transform$$1.apply(that, args) : transform$$1,
	              i = interpolate(a.invert(p).concat(w / a.k), b.invert(p).concat(w / b.k));
	          return function(t) {
	            if (t === 1) t = b; // Avoid rounding error on end.
	            else { var l = i(t), k = w / l[2]; t = new Transform(k, p[0] - l[0] * k, p[1] - l[1] * k); }
	            g.zoom(null, t);
	          };
	        });
	  }

	  function gesture(that, args) {
	    for (var i = 0, n = gestures.length, g; i < n; ++i) {
	      if ((g = gestures[i]).that === that) {
	        return g;
	      }
	    }
	    return new Gesture(that, args);
	  }

	  function Gesture(that, args) {
	    this.that = that;
	    this.args = args;
	    this.index = -1;
	    this.active = 0;
	    this.extent = extent.apply(that, args);
	  }

	  Gesture.prototype = {
	    start: function() {
	      if (++this.active === 1) {
	        this.index = gestures.push(this) - 1;
	        this.emit("start");
	      }
	      return this;
	    },
	    zoom: function(key, transform$$1) {
	      if (this.mouse && key !== "mouse") this.mouse[1] = transform$$1.invert(this.mouse[0]);
	      if (this.touch0 && key !== "touch") this.touch0[1] = transform$$1.invert(this.touch0[0]);
	      if (this.touch1 && key !== "touch") this.touch1[1] = transform$$1.invert(this.touch1[0]);
	      this.that.__zoom = transform$$1;
	      this.emit("zoom");
	      return this;
	    },
	    end: function() {
	      if (--this.active === 0) {
	        gestures.splice(this.index, 1);
	        this.index = -1;
	        this.emit("end");
	      }
	      return this;
	    },
	    emit: function(type) {
	      d3Selection.customEvent(new ZoomEvent(zoom, type, this.that.__zoom), listeners.apply, listeners, [type, this.that, this.args]);
	    }
	  };

	  function wheeled() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        t = this.__zoom,
	        k = Math.max(scaleExtent[0], Math.min(scaleExtent[1], t.k * Math.pow(2, wheelDelta.apply(this, arguments)))),
	        p = d3Selection.mouse(this);

	    // If the mouse is in the same location as before, reuse it.
	    // If there were recent wheel events, reset the wheel idle timeout.
	    if (g.wheel) {
	      if (g.mouse[0][0] !== p[0] || g.mouse[0][1] !== p[1]) {
	        g.mouse[1] = t.invert(g.mouse[0] = p);
	      }
	      clearTimeout(g.wheel);
	    }

	    // If this wheel event won’t trigger a transform change, ignore it.
	    else if (t.k === k) return;

	    // Otherwise, capture the mouse point and location at the start.
	    else {
	      g.mouse = [p, t.invert(p)];
	      d3Transition.interrupt(this);
	      g.start();
	    }

	    noevent();
	    g.wheel = setTimeout(wheelidled, wheelDelay);
	    g.zoom("mouse", constrain(translate(scale(t, k), g.mouse[0], g.mouse[1]), g.extent, translateExtent));

	    function wheelidled() {
	      g.wheel = null;
	      g.end();
	    }
	  }

	  function mousedowned() {
	    if (touchending || !filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        v = d3Selection.select(d3Selection.event.view).on("mousemove.zoom", mousemoved, true).on("mouseup.zoom", mouseupped, true),
	        p = d3Selection.mouse(this),
	        x0 = d3Selection.event.clientX,
	        y0 = d3Selection.event.clientY;

	    d3Drag.dragDisable(d3Selection.event.view);
	    nopropagation();
	    g.mouse = [p, this.__zoom.invert(p)];
	    d3Transition.interrupt(this);
	    g.start();

	    function mousemoved() {
	      noevent();
	      if (!g.moved) {
	        var dx = d3Selection.event.clientX - x0, dy = d3Selection.event.clientY - y0;
	        g.moved = dx * dx + dy * dy > clickDistance2;
	      }
	      g.zoom("mouse", constrain(translate(g.that.__zoom, g.mouse[0] = d3Selection.mouse(g.that), g.mouse[1]), g.extent, translateExtent));
	    }

	    function mouseupped() {
	      v.on("mousemove.zoom mouseup.zoom", null);
	      d3Drag.dragEnable(d3Selection.event.view, g.moved);
	      noevent();
	      g.end();
	    }
	  }

	  function dblclicked() {
	    if (!filter.apply(this, arguments)) return;
	    var t0 = this.__zoom,
	        p0 = d3Selection.mouse(this),
	        p1 = t0.invert(p0),
	        k1 = t0.k * (d3Selection.event.shiftKey ? 0.5 : 2),
	        t1 = constrain(translate(scale(t0, k1), p0, p1), extent.apply(this, arguments), translateExtent);

	    noevent();
	    if (duration > 0) d3Selection.select(this).transition().duration(duration).call(schedule, t1, p0);
	    else d3Selection.select(this).call(zoom.transform, t1);
	  }

	  function touchstarted() {
	    if (!filter.apply(this, arguments)) return;
	    var g = gesture(this, arguments),
	        touches = d3Selection.event.changedTouches,
	        started,
	        n = touches.length, i, t, p;

	    nopropagation();
	    for (i = 0; i < n; ++i) {
	      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
	      p = [p, this.__zoom.invert(p), t.identifier];
	      if (!g.touch0) g.touch0 = p, started = true;
	      else if (!g.touch1) g.touch1 = p;
	    }

	    // If this is a dbltap, reroute to the (optional) dblclick.zoom handler.
	    if (touchstarting) {
	      touchstarting = clearTimeout(touchstarting);
	      if (!g.touch1) {
	        g.end();
	        p = d3Selection.select(this).on("dblclick.zoom");
	        if (p) p.apply(this, arguments);
	        return;
	      }
	    }

	    if (started) {
	      touchstarting = setTimeout(function() { touchstarting = null; }, touchDelay);
	      d3Transition.interrupt(this);
	      g.start();
	    }
	  }

	  function touchmoved() {
	    var g = gesture(this, arguments),
	        touches = d3Selection.event.changedTouches,
	        n = touches.length, i, t, p, l;

	    noevent();
	    if (touchstarting) touchstarting = clearTimeout(touchstarting);
	    for (i = 0; i < n; ++i) {
	      t = touches[i], p = d3Selection.touch(this, touches, t.identifier);
	      if (g.touch0 && g.touch0[2] === t.identifier) g.touch0[0] = p;
	      else if (g.touch1 && g.touch1[2] === t.identifier) g.touch1[0] = p;
	    }
	    t = g.that.__zoom;
	    if (g.touch1) {
	      var p0 = g.touch0[0], l0 = g.touch0[1],
	          p1 = g.touch1[0], l1 = g.touch1[1],
	          dp = (dp = p1[0] - p0[0]) * dp + (dp = p1[1] - p0[1]) * dp,
	          dl = (dl = l1[0] - l0[0]) * dl + (dl = l1[1] - l0[1]) * dl;
	      t = scale(t, Math.sqrt(dp / dl));
	      p = [(p0[0] + p1[0]) / 2, (p0[1] + p1[1]) / 2];
	      l = [(l0[0] + l1[0]) / 2, (l0[1] + l1[1]) / 2];
	    }
	    else if (g.touch0) p = g.touch0[0], l = g.touch0[1];
	    else return;
	    g.zoom("touch", constrain(translate(t, p, l), g.extent, translateExtent));
	  }

	  function touchended() {
	    var g = gesture(this, arguments),
	        touches = d3Selection.event.changedTouches,
	        n = touches.length, i, t;

	    nopropagation();
	    if (touchending) clearTimeout(touchending);
	    touchending = setTimeout(function() { touchending = null; }, touchDelay);
	    for (i = 0; i < n; ++i) {
	      t = touches[i];
	      if (g.touch0 && g.touch0[2] === t.identifier) delete g.touch0;
	      else if (g.touch1 && g.touch1[2] === t.identifier) delete g.touch1;
	    }
	    if (g.touch1 && !g.touch0) g.touch0 = g.touch1, delete g.touch1;
	    if (g.touch0) g.touch0[1] = this.__zoom.invert(g.touch0[0]);
	    else g.end();
	  }

	  zoom.wheelDelta = function(_) {
	    return arguments.length ? (wheelDelta = typeof _ === "function" ? _ : constant(+_), zoom) : wheelDelta;
	  };

	  zoom.filter = function(_) {
	    return arguments.length ? (filter = typeof _ === "function" ? _ : constant(!!_), zoom) : filter;
	  };

	  zoom.touchable = function(_) {
	    return arguments.length ? (touchable = typeof _ === "function" ? _ : constant(!!_), zoom) : touchable;
	  };

	  zoom.extent = function(_) {
	    return arguments.length ? (extent = typeof _ === "function" ? _ : constant([[+_[0][0], +_[0][1]], [+_[1][0], +_[1][1]]]), zoom) : extent;
	  };

	  zoom.scaleExtent = function(_) {
	    return arguments.length ? (scaleExtent[0] = +_[0], scaleExtent[1] = +_[1], zoom) : [scaleExtent[0], scaleExtent[1]];
	  };

	  zoom.translateExtent = function(_) {
	    return arguments.length ? (translateExtent[0][0] = +_[0][0], translateExtent[1][0] = +_[1][0], translateExtent[0][1] = +_[0][1], translateExtent[1][1] = +_[1][1], zoom) : [[translateExtent[0][0], translateExtent[0][1]], [translateExtent[1][0], translateExtent[1][1]]];
	  };

	  zoom.constrain = function(_) {
	    return arguments.length ? (constrain = _, zoom) : constrain;
	  };

	  zoom.duration = function(_) {
	    return arguments.length ? (duration = +_, zoom) : duration;
	  };

	  zoom.interpolate = function(_) {
	    return arguments.length ? (interpolate = _, zoom) : interpolate;
	  };

	  zoom.on = function() {
	    var value = listeners.on.apply(listeners, arguments);
	    return value === listeners ? zoom : value;
	  };

	  zoom.clickDistance = function(_) {
	    return arguments.length ? (clickDistance2 = (_ = +_) * _, zoom) : Math.sqrt(clickDistance2);
	  };

	  return zoom;
	};

	exports.zoom = zoom;
	exports.zoomTransform = transform;
	exports.zoomIdentity = identity;

	Object.defineProperty(exports, '__esModule', { value: true });

	})));


/***/ }),
/* 39 */
/***/ (function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;var require;var require;/*!
	 * Select2 4.0.6-rc.1
	 * https://select2.github.io
	 *
	 * Released under the MIT license
	 * https://github.com/select2/select2/blob/master/LICENSE.md
	 */
	;(function (factory) {
	  if (true) {
	    // AMD. Register as an anonymous module.
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(1)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory), __WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ? (__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  } else if (typeof module === 'object' && module.exports) {
	    // Node/CommonJS
	    module.exports = function (root, jQuery) {
	      if (jQuery === undefined) {
	        // require('jQuery') returns a factory that requires window to
	        // build a jQuery instance, we normalize how we use modules
	        // that require this pattern but the window provided is a noop
	        // if it's defined (how jquery works)
	        if (typeof window !== 'undefined') {
	          jQuery = require('jquery');
	        }
	        else {
	          jQuery = require('jquery')(root);
	        }
	      }
	      factory(jQuery);
	      return jQuery;
	    };
	  } else {
	    // Browser globals
	    factory(jQuery);
	  }
	} (function (jQuery) {
	  // This is needed so we can catch the AMD loader configuration and use it
	  // The inner file should be wrapped (by `banner.start.js`) in a function that
	  // returns the AMD loader references.
	  var S2 =(function () {
	  // Restore the Select2 AMD loader so it can be used
	  // Needed mostly in the language files, where the loader is not inserted
	  if (jQuery && jQuery.fn && jQuery.fn.select2 && jQuery.fn.select2.amd) {
	    var S2 = jQuery.fn.select2.amd;
	  }
	var S2;(function () { if (!S2 || !S2.requirejs) {
	if (!S2) { S2 = {}; } else { require = S2; }
	/**
	 * @license almond 0.3.3 Copyright jQuery Foundation and other contributors.
	 * Released under MIT license, http://github.com/requirejs/almond/LICENSE
	 */
	//Going sloppy to avoid 'use strict' string cost, but strict practices should
	//be followed.
	/*global setTimeout: false */

	var requirejs, require, define;
	(function (undef) {
	    var main, req, makeMap, handlers,
	        defined = {},
	        waiting = {},
	        config = {},
	        defining = {},
	        hasOwn = Object.prototype.hasOwnProperty,
	        aps = [].slice,
	        jsSuffixRegExp = /\.js$/;

	    function hasProp(obj, prop) {
	        return hasOwn.call(obj, prop);
	    }

	    /**
	     * Given a relative module name, like ./something, normalize it to
	     * a real name that can be mapped to a path.
	     * @param {String} name the relative name
	     * @param {String} baseName a real name that the name arg is relative
	     * to.
	     * @returns {String} normalized name
	     */
	    function normalize(name, baseName) {
	        var nameParts, nameSegment, mapValue, foundMap, lastIndex,
	            foundI, foundStarMap, starI, i, j, part, normalizedBaseParts,
	            baseParts = baseName && baseName.split("/"),
	            map = config.map,
	            starMap = (map && map['*']) || {};

	        //Adjust any relative paths.
	        if (name) {
	            name = name.split('/');
	            lastIndex = name.length - 1;

	            // If wanting node ID compatibility, strip .js from end
	            // of IDs. Have to do this here, and not in nameToUrl
	            // because node allows either .js or non .js to map
	            // to same file.
	            if (config.nodeIdCompat && jsSuffixRegExp.test(name[lastIndex])) {
	                name[lastIndex] = name[lastIndex].replace(jsSuffixRegExp, '');
	            }

	            // Starts with a '.' so need the baseName
	            if (name[0].charAt(0) === '.' && baseParts) {
	                //Convert baseName to array, and lop off the last part,
	                //so that . matches that 'directory' and not name of the baseName's
	                //module. For instance, baseName of 'one/two/three', maps to
	                //'one/two/three.js', but we want the directory, 'one/two' for
	                //this normalization.
	                normalizedBaseParts = baseParts.slice(0, baseParts.length - 1);
	                name = normalizedBaseParts.concat(name);
	            }

	            //start trimDots
	            for (i = 0; i < name.length; i++) {
	                part = name[i];
	                if (part === '.') {
	                    name.splice(i, 1);
	                    i -= 1;
	                } else if (part === '..') {
	                    // If at the start, or previous value is still ..,
	                    // keep them so that when converted to a path it may
	                    // still work when converted to a path, even though
	                    // as an ID it is less than ideal. In larger point
	                    // releases, may be better to just kick out an error.
	                    if (i === 0 || (i === 1 && name[2] === '..') || name[i - 1] === '..') {
	                        continue;
	                    } else if (i > 0) {
	                        name.splice(i - 1, 2);
	                        i -= 2;
	                    }
	                }
	            }
	            //end trimDots

	            name = name.join('/');
	        }

	        //Apply map config if available.
	        if ((baseParts || starMap) && map) {
	            nameParts = name.split('/');

	            for (i = nameParts.length; i > 0; i -= 1) {
	                nameSegment = nameParts.slice(0, i).join("/");

	                if (baseParts) {
	                    //Find the longest baseName segment match in the config.
	                    //So, do joins on the biggest to smallest lengths of baseParts.
	                    for (j = baseParts.length; j > 0; j -= 1) {
	                        mapValue = map[baseParts.slice(0, j).join('/')];

	                        //baseName segment has  config, find if it has one for
	                        //this name.
	                        if (mapValue) {
	                            mapValue = mapValue[nameSegment];
	                            if (mapValue) {
	                                //Match, update name to the new value.
	                                foundMap = mapValue;
	                                foundI = i;
	                                break;
	                            }
	                        }
	                    }
	                }

	                if (foundMap) {
	                    break;
	                }

	                //Check for a star map match, but just hold on to it,
	                //if there is a shorter segment match later in a matching
	                //config, then favor over this star map.
	                if (!foundStarMap && starMap && starMap[nameSegment]) {
	                    foundStarMap = starMap[nameSegment];
	                    starI = i;
	                }
	            }

	            if (!foundMap && foundStarMap) {
	                foundMap = foundStarMap;
	                foundI = starI;
	            }

	            if (foundMap) {
	                nameParts.splice(0, foundI, foundMap);
	                name = nameParts.join('/');
	            }
	        }

	        return name;
	    }

	    function makeRequire(relName, forceSync) {
	        return function () {
	            //A version of a require function that passes a moduleName
	            //value for items that may need to
	            //look up paths relative to the moduleName
	            var args = aps.call(arguments, 0);

	            //If first arg is not require('string'), and there is only
	            //one arg, it is the array form without a callback. Insert
	            //a null so that the following concat is correct.
	            if (typeof args[0] !== 'string' && args.length === 1) {
	                args.push(null);
	            }
	            return req.apply(undef, args.concat([relName, forceSync]));
	        };
	    }

	    function makeNormalize(relName) {
	        return function (name) {
	            return normalize(name, relName);
	        };
	    }

	    function makeLoad(depName) {
	        return function (value) {
	            defined[depName] = value;
	        };
	    }

	    function callDep(name) {
	        if (hasProp(waiting, name)) {
	            var args = waiting[name];
	            delete waiting[name];
	            defining[name] = true;
	            main.apply(undef, args);
	        }

	        if (!hasProp(defined, name) && !hasProp(defining, name)) {
	            throw new Error('No ' + name);
	        }
	        return defined[name];
	    }

	    //Turns a plugin!resource to [plugin, resource]
	    //with the plugin being undefined if the name
	    //did not have a plugin prefix.
	    function splitPrefix(name) {
	        var prefix,
	            index = name ? name.indexOf('!') : -1;
	        if (index > -1) {
	            prefix = name.substring(0, index);
	            name = name.substring(index + 1, name.length);
	        }
	        return [prefix, name];
	    }

	    //Creates a parts array for a relName where first part is plugin ID,
	    //second part is resource ID. Assumes relName has already been normalized.
	    function makeRelParts(relName) {
	        return relName ? splitPrefix(relName) : [];
	    }

	    /**
	     * Makes a name map, normalizing the name, and using a plugin
	     * for normalization if necessary. Grabs a ref to plugin
	     * too, as an optimization.
	     */
	    makeMap = function (name, relParts) {
	        var plugin,
	            parts = splitPrefix(name),
	            prefix = parts[0],
	            relResourceName = relParts[1];

	        name = parts[1];

	        if (prefix) {
	            prefix = normalize(prefix, relResourceName);
	            plugin = callDep(prefix);
	        }

	        //Normalize according
	        if (prefix) {
	            if (plugin && plugin.normalize) {
	                name = plugin.normalize(name, makeNormalize(relResourceName));
	            } else {
	                name = normalize(name, relResourceName);
	            }
	        } else {
	            name = normalize(name, relResourceName);
	            parts = splitPrefix(name);
	            prefix = parts[0];
	            name = parts[1];
	            if (prefix) {
	                plugin = callDep(prefix);
	            }
	        }

	        //Using ridiculous property names for space reasons
	        return {
	            f: prefix ? prefix + '!' + name : name, //fullName
	            n: name,
	            pr: prefix,
	            p: plugin
	        };
	    };

	    function makeConfig(name) {
	        return function () {
	            return (config && config.config && config.config[name]) || {};
	        };
	    }

	    handlers = {
	        require: function (name) {
	            return makeRequire(name);
	        },
	        exports: function (name) {
	            var e = defined[name];
	            if (typeof e !== 'undefined') {
	                return e;
	            } else {
	                return (defined[name] = {});
	            }
	        },
	        module: function (name) {
	            return {
	                id: name,
	                uri: '',
	                exports: defined[name],
	                config: makeConfig(name)
	            };
	        }
	    };

	    main = function (name, deps, callback, relName) {
	        var cjsModule, depName, ret, map, i, relParts,
	            args = [],
	            callbackType = typeof callback,
	            usingExports;

	        //Use name if no relName
	        relName = relName || name;
	        relParts = makeRelParts(relName);

	        //Call the callback to define the module, if necessary.
	        if (callbackType === 'undefined' || callbackType === 'function') {
	            //Pull out the defined dependencies and pass the ordered
	            //values to the callback.
	            //Default to [require, exports, module] if no deps
	            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
	            for (i = 0; i < deps.length; i += 1) {
	                map = makeMap(deps[i], relParts);
	                depName = map.f;

	                //Fast path CommonJS standard dependencies.
	                if (depName === "require") {
	                    args[i] = handlers.require(name);
	                } else if (depName === "exports") {
	                    //CommonJS module spec 1.1
	                    args[i] = handlers.exports(name);
	                    usingExports = true;
	                } else if (depName === "module") {
	                    //CommonJS module spec 1.1
	                    cjsModule = args[i] = handlers.module(name);
	                } else if (hasProp(defined, depName) ||
	                           hasProp(waiting, depName) ||
	                           hasProp(defining, depName)) {
	                    args[i] = callDep(depName);
	                } else if (map.p) {
	                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
	                    args[i] = defined[depName];
	                } else {
	                    throw new Error(name + ' missing ' + depName);
	                }
	            }

	            ret = callback ? callback.apply(defined[name], args) : undefined;

	            if (name) {
	                //If setting exports via "module" is in play,
	                //favor that over return value and exports. After that,
	                //favor a non-undefined return value over exports use.
	                if (cjsModule && cjsModule.exports !== undef &&
	                        cjsModule.exports !== defined[name]) {
	                    defined[name] = cjsModule.exports;
	                } else if (ret !== undef || !usingExports) {
	                    //Use the return value from the function.
	                    defined[name] = ret;
	                }
	            }
	        } else if (name) {
	            //May just be an object definition for the module. Only
	            //worry about defining if have a module name.
	            defined[name] = callback;
	        }
	    };

	    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
	        if (typeof deps === "string") {
	            if (handlers[deps]) {
	                //callback in this case is really relName
	                return handlers[deps](callback);
	            }
	            //Just return the module wanted. In this scenario, the
	            //deps arg is the module name, and second arg (if passed)
	            //is just the relName.
	            //Normalize module name, if it contains . or ..
	            return callDep(makeMap(deps, makeRelParts(callback)).f);
	        } else if (!deps.splice) {
	            //deps is a config object, not an array.
	            config = deps;
	            if (config.deps) {
	                req(config.deps, config.callback);
	            }
	            if (!callback) {
	                return;
	            }

	            if (callback.splice) {
	                //callback is an array, which means it is a dependency list.
	                //Adjust args if there are dependencies
	                deps = callback;
	                callback = relName;
	                relName = null;
	            } else {
	                deps = undef;
	            }
	        }

	        //Support require(['a'])
	        callback = callback || function () {};

	        //If relName is a function, it is an errback handler,
	        //so remove it.
	        if (typeof relName === 'function') {
	            relName = forceSync;
	            forceSync = alt;
	        }

	        //Simulate async callback;
	        if (forceSync) {
	            main(undef, deps, callback, relName);
	        } else {
	            //Using a non-zero value because of concern for what old browsers
	            //do, and latest browsers "upgrade" to 4 if lower value is used:
	            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
	            //If want a value immediately, use require('id') instead -- something
	            //that works in almond on the global level, but not guaranteed and
	            //unlikely to work in other AMD implementations.
	            setTimeout(function () {
	                main(undef, deps, callback, relName);
	            }, 4);
	        }

	        return req;
	    };

	    /**
	     * Just drops the config on the floor, but returns req in case
	     * the config return value is used.
	     */
	    req.config = function (cfg) {
	        return req(cfg);
	    };

	    /**
	     * Expose module registry for debugging and tooling
	     */
	    requirejs._defined = defined;

	    define = function (name, deps, callback) {
	        if (typeof name !== 'string') {
	            throw new Error('See almond README: incorrect module build, no module name');
	        }

	        //This module may not have dependencies
	        if (!deps.splice) {
	            //deps is not an array, so probably means
	            //an object literal or factory function for
	            //the value. Adjust args.
	            callback = deps;
	            deps = [];
	        }

	        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
	            waiting[name] = [name, deps, callback];
	        }
	    };

	    define.amd = {
	        jQuery: true
	    };
	}());

	S2.requirejs = requirejs;S2.require = require;S2.define = define;
	}
	}());
	S2.define("almond", function(){});

	/* global jQuery:false, $:false */
	S2.define('jquery',[],function () {
	  var _$ = jQuery || $;

	  if (_$ == null && console && console.error) {
	    console.error(
	      'Select2: An instance of jQuery or a jQuery-compatible library was not ' +
	      'found. Make sure that you are including jQuery before Select2 on your ' +
	      'web page.'
	    );
	  }

	  return _$;
	});

	S2.define('select2/utils',[
	  'jquery'
	], function ($) {
	  var Utils = {};

	  Utils.Extend = function (ChildClass, SuperClass) {
	    var __hasProp = {}.hasOwnProperty;

	    function BaseConstructor () {
	      this.constructor = ChildClass;
	    }

	    for (var key in SuperClass) {
	      if (__hasProp.call(SuperClass, key)) {
	        ChildClass[key] = SuperClass[key];
	      }
	    }

	    BaseConstructor.prototype = SuperClass.prototype;
	    ChildClass.prototype = new BaseConstructor();
	    ChildClass.__super__ = SuperClass.prototype;

	    return ChildClass;
	  };

	  function getMethods (theClass) {
	    var proto = theClass.prototype;

	    var methods = [];

	    for (var methodName in proto) {
	      var m = proto[methodName];

	      if (typeof m !== 'function') {
	        continue;
	      }

	      if (methodName === 'constructor') {
	        continue;
	      }

	      methods.push(methodName);
	    }

	    return methods;
	  }

	  Utils.Decorate = function (SuperClass, DecoratorClass) {
	    var decoratedMethods = getMethods(DecoratorClass);
	    var superMethods = getMethods(SuperClass);

	    function DecoratedClass () {
	      var unshift = Array.prototype.unshift;

	      var argCount = DecoratorClass.prototype.constructor.length;

	      var calledConstructor = SuperClass.prototype.constructor;

	      if (argCount > 0) {
	        unshift.call(arguments, SuperClass.prototype.constructor);

	        calledConstructor = DecoratorClass.prototype.constructor;
	      }

	      calledConstructor.apply(this, arguments);
	    }

	    DecoratorClass.displayName = SuperClass.displayName;

	    function ctr () {
	      this.constructor = DecoratedClass;
	    }

	    DecoratedClass.prototype = new ctr();

	    for (var m = 0; m < superMethods.length; m++) {
	      var superMethod = superMethods[m];

	      DecoratedClass.prototype[superMethod] =
	        SuperClass.prototype[superMethod];
	    }

	    var calledMethod = function (methodName) {
	      // Stub out the original method if it's not decorating an actual method
	      var originalMethod = function () {};

	      if (methodName in DecoratedClass.prototype) {
	        originalMethod = DecoratedClass.prototype[methodName];
	      }

	      var decoratedMethod = DecoratorClass.prototype[methodName];

	      return function () {
	        var unshift = Array.prototype.unshift;

	        unshift.call(arguments, originalMethod);

	        return decoratedMethod.apply(this, arguments);
	      };
	    };

	    for (var d = 0; d < decoratedMethods.length; d++) {
	      var decoratedMethod = decoratedMethods[d];

	      DecoratedClass.prototype[decoratedMethod] = calledMethod(decoratedMethod);
	    }

	    return DecoratedClass;
	  };

	  var Observable = function () {
	    this.listeners = {};
	  };

	  Observable.prototype.on = function (event, callback) {
	    this.listeners = this.listeners || {};

	    if (event in this.listeners) {
	      this.listeners[event].push(callback);
	    } else {
	      this.listeners[event] = [callback];
	    }
	  };

	  Observable.prototype.trigger = function (event) {
	    var slice = Array.prototype.slice;
	    var params = slice.call(arguments, 1);

	    this.listeners = this.listeners || {};

	    // Params should always come in as an array
	    if (params == null) {
	      params = [];
	    }

	    // If there are no arguments to the event, use a temporary object
	    if (params.length === 0) {
	      params.push({});
	    }

	    // Set the `_type` of the first object to the event
	    params[0]._type = event;

	    if (event in this.listeners) {
	      this.invoke(this.listeners[event], slice.call(arguments, 1));
	    }

	    if ('*' in this.listeners) {
	      this.invoke(this.listeners['*'], arguments);
	    }
	  };

	  Observable.prototype.invoke = function (listeners, params) {
	    for (var i = 0, len = listeners.length; i < len; i++) {
	      listeners[i].apply(this, params);
	    }
	  };

	  Utils.Observable = Observable;

	  Utils.generateChars = function (length) {
	    var chars = '';

	    for (var i = 0; i < length; i++) {
	      var randomChar = Math.floor(Math.random() * 36);
	      chars += randomChar.toString(36);
	    }

	    return chars;
	  };

	  Utils.bind = function (func, context) {
	    return function () {
	      func.apply(context, arguments);
	    };
	  };

	  Utils._convertData = function (data) {
	    for (var originalKey in data) {
	      var keys = originalKey.split('-');

	      var dataLevel = data;

	      if (keys.length === 1) {
	        continue;
	      }

	      for (var k = 0; k < keys.length; k++) {
	        var key = keys[k];

	        // Lowercase the first letter
	        // By default, dash-separated becomes camelCase
	        key = key.substring(0, 1).toLowerCase() + key.substring(1);

	        if (!(key in dataLevel)) {
	          dataLevel[key] = {};
	        }

	        if (k == keys.length - 1) {
	          dataLevel[key] = data[originalKey];
	        }

	        dataLevel = dataLevel[key];
	      }

	      delete data[originalKey];
	    }

	    return data;
	  };

	  Utils.hasScroll = function (index, el) {
	    // Adapted from the function created by @ShadowScripter
	    // and adapted by @BillBarry on the Stack Exchange Code Review website.
	    // The original code can be found at
	    // http://codereview.stackexchange.com/q/13338
	    // and was designed to be used with the Sizzle selector engine.

	    var $el = $(el);
	    var overflowX = el.style.overflowX;
	    var overflowY = el.style.overflowY;

	    //Check both x and y declarations
	    if (overflowX === overflowY &&
	        (overflowY === 'hidden' || overflowY === 'visible')) {
	      return false;
	    }

	    if (overflowX === 'scroll' || overflowY === 'scroll') {
	      return true;
	    }

	    return ($el.innerHeight() < el.scrollHeight ||
	      $el.innerWidth() < el.scrollWidth);
	  };

	  Utils.escapeMarkup = function (markup) {
	    var replaceMap = {
	      '\\': '&#92;',
	      '&': '&amp;',
	      '<': '&lt;',
	      '>': '&gt;',
	      '"': '&quot;',
	      '\'': '&#39;',
	      '/': '&#47;'
	    };

	    // Do not try to escape the markup if it's not a string
	    if (typeof markup !== 'string') {
	      return markup;
	    }

	    return String(markup).replace(/[&<>"'\/\\]/g, function (match) {
	      return replaceMap[match];
	    });
	  };

	  // Append an array of jQuery nodes to a given element.
	  Utils.appendMany = function ($element, $nodes) {
	    // jQuery 1.7.x does not support $.fn.append() with an array
	    // Fall back to a jQuery object collection using $.fn.add()
	    if ($.fn.jquery.substr(0, 3) === '1.7') {
	      var $jqNodes = $();

	      $.map($nodes, function (node) {
	        $jqNodes = $jqNodes.add(node);
	      });

	      $nodes = $jqNodes;
	    }

	    $element.append($nodes);
	  };

	  // Cache objects in Utils.__cache instead of $.data (see #4346)
	  Utils.__cache = {};

	  var id = 0;
	  Utils.GetUniqueElementId = function (element) {
	    // Get a unique element Id. If element has no id, 
	    // creates a new unique number, stores it in the id 
	    // attribute and returns the new id. 
	    // If an id already exists, it simply returns it.

	    var select2Id = element.getAttribute('data-select2-id');
	    if (select2Id == null) {
	      // If element has id, use it.
	      if (element.id) {
	        select2Id = element.id;
	        element.setAttribute('data-select2-id', select2Id);
	      } else {
	        element.setAttribute('data-select2-id', ++id);
	        select2Id = id.toString();
	      }
	    }
	    return select2Id;
	  };

	  Utils.StoreData = function (element, name, value) {
	    // Stores an item in the cache for a specified element.
	    // name is the cache key.    
	    var id = Utils.GetUniqueElementId(element);
	    if (!Utils.__cache[id]) {
	      Utils.__cache[id] = {};
	    }

	    Utils.__cache[id][name] = value;
	  };

	  Utils.GetData = function (element, name) {
	    // Retrieves a value from the cache by its key (name)
	    // name is optional. If no name specified, return 
	    // all cache items for the specified element.
	    // and for a specified element.
	    var id = Utils.GetUniqueElementId(element);
	    if (name) {
	      if (Utils.__cache[id]) {
	        return Utils.__cache[id][name] != null ? 
		      Utils.__cache[id][name]:
		      $(element).data(name); // Fallback to HTML5 data attribs.
	      }
	      return $(element).data(name); // Fallback to HTML5 data attribs.
	    } else {
	      return Utils.__cache[id];			   
	    }
	  };

	  Utils.RemoveData = function (element) {
	    // Removes all cached items for a specified element.
	    var id = Utils.GetUniqueElementId(element);
	    if (Utils.__cache[id] != null) {
	      delete Utils.__cache[id];
	    }
	  };

	  return Utils;
	});

	S2.define('select2/results',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Results ($element, options, dataAdapter) {
	    this.$element = $element;
	    this.data = dataAdapter;
	    this.options = options;

	    Results.__super__.constructor.call(this);
	  }

	  Utils.Extend(Results, Utils.Observable);

	  Results.prototype.render = function () {
	    var $results = $(
	      '<ul class="select2-results__options" role="tree"></ul>'
	    );

	    if (this.options.get('multiple')) {
	      $results.attr('aria-multiselectable', 'true');
	    }

	    this.$results = $results;

	    return $results;
	  };

	  Results.prototype.clear = function () {
	    this.$results.empty();
	  };

	  Results.prototype.displayMessage = function (params) {
	    var escapeMarkup = this.options.get('escapeMarkup');

	    this.clear();
	    this.hideLoading();

	    var $message = $(
	      '<li role="treeitem" aria-live="assertive"' +
	      ' class="select2-results__option"></li>'
	    );

	    var message = this.options.get('translations').get(params.message);

	    $message.append(
	      escapeMarkup(
	        message(params.args)
	      )
	    );

	    $message[0].className += ' select2-results__message';

	    this.$results.append($message);
	  };

	  Results.prototype.hideMessages = function () {
	    this.$results.find('.select2-results__message').remove();
	  };

	  Results.prototype.append = function (data) {
	    this.hideLoading();

	    var $options = [];

	    if (data.results == null || data.results.length === 0) {
	      if (this.$results.children().length === 0) {
	        this.trigger('results:message', {
	          message: 'noResults'
	        });
	      }

	      return;
	    }

	    data.results = this.sort(data.results);

	    for (var d = 0; d < data.results.length; d++) {
	      var item = data.results[d];

	      var $option = this.option(item);

	      $options.push($option);
	    }

	    this.$results.append($options);
	  };

	  Results.prototype.position = function ($results, $dropdown) {
	    var $resultsContainer = $dropdown.find('.select2-results');
	    $resultsContainer.append($results);
	  };

	  Results.prototype.sort = function (data) {
	    var sorter = this.options.get('sorter');

	    return sorter(data);
	  };

	  Results.prototype.highlightFirstItem = function () {
	    var $options = this.$results
	      .find('.select2-results__option[aria-selected]');

	    var $selected = $options.filter('[aria-selected=true]');

	    // Check if there are any selected options
	    if ($selected.length > 0) {
	      // If there are selected options, highlight the first
	      $selected.first().trigger('mouseenter');
	    } else {
	      // If there are no selected options, highlight the first option
	      // in the dropdown
	      $options.first().trigger('mouseenter');
	    }

	    this.ensureHighlightVisible();
	  };

	  Results.prototype.setClasses = function () {
	    var self = this;

	    this.data.current(function (selected) {
	      var selectedIds = $.map(selected, function (s) {
	        return s.id.toString();
	      });

	      var $options = self.$results
	        .find('.select2-results__option[aria-selected]');

	      $options.each(function () {
	        var $option = $(this);

	        var item = Utils.GetData(this, 'data');

	        // id needs to be converted to a string when comparing
	        var id = '' + item.id;

	        if ((item.element != null && item.element.selected) ||
	            (item.element == null && $.inArray(id, selectedIds) > -1)) {
	          $option.attr('aria-selected', 'true');
	        } else {
	          $option.attr('aria-selected', 'false');
	        }
	      });

	    });
	  };

	  Results.prototype.showLoading = function (params) {
	    this.hideLoading();

	    var loadingMore = this.options.get('translations').get('searching');

	    var loading = {
	      disabled: true,
	      loading: true,
	      text: loadingMore(params)
	    };
	    var $loading = this.option(loading);
	    $loading.className += ' loading-results';

	    this.$results.prepend($loading);
	  };

	  Results.prototype.hideLoading = function () {
	    this.$results.find('.loading-results').remove();
	  };

	  Results.prototype.option = function (data) {
	    var option = document.createElement('li');
	    option.className = 'select2-results__option';

	    var attrs = {
	      'role': 'treeitem',
	      'aria-selected': 'false'
	    };

	    if (data.disabled) {
	      delete attrs['aria-selected'];
	      attrs['aria-disabled'] = 'true';
	    }

	    if (data.id == null) {
	      delete attrs['aria-selected'];
	    }

	    if (data._resultId != null) {
	      option.id = data._resultId;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    if (data.children) {
	      attrs.role = 'group';
	      attrs['aria-label'] = data.text;
	      delete attrs['aria-selected'];
	    }

	    for (var attr in attrs) {
	      var val = attrs[attr];

	      option.setAttribute(attr, val);
	    }

	    if (data.children) {
	      var $option = $(option);

	      var label = document.createElement('strong');
	      label.className = 'select2-results__group';

	      var $label = $(label);
	      this.template(data, label);

	      var $children = [];

	      for (var c = 0; c < data.children.length; c++) {
	        var child = data.children[c];

	        var $child = this.option(child);

	        $children.push($child);
	      }

	      var $childrenContainer = $('<ul></ul>', {
	        'class': 'select2-results__options select2-results__options--nested'
	      });

	      $childrenContainer.append($children);

	      $option.append(label);
	      $option.append($childrenContainer);
	    } else {
	      this.template(data, option);
	    }

	    Utils.StoreData(option, 'data', data);

	    return option;
	  };

	  Results.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-results';

	    this.$results.attr('id', id);

	    container.on('results:all', function (params) {
	      self.clear();
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	        self.highlightFirstItem();
	      }
	    });

	    container.on('results:append', function (params) {
	      self.append(params.data);

	      if (container.isOpen()) {
	        self.setClasses();
	      }
	    });

	    container.on('query', function (params) {
	      self.hideMessages();
	      self.showLoading(params);
	    });

	    container.on('select', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('unselect', function () {
	      if (!container.isOpen()) {
	        return;
	      }

	      self.setClasses();
	      self.highlightFirstItem();
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expended="true"
	      self.$results.attr('aria-expanded', 'true');
	      self.$results.attr('aria-hidden', 'false');

	      self.setClasses();
	      self.ensureHighlightVisible();
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expended="false"
	      self.$results.attr('aria-expanded', 'false');
	      self.$results.attr('aria-hidden', 'true');
	      self.$results.removeAttr('aria-activedescendant');
	    });

	    container.on('results:toggle', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      $highlighted.trigger('mouseup');
	    });

	    container.on('results:select', function () {
	      var $highlighted = self.getHighlightedResults();

	      if ($highlighted.length === 0) {
	        return;
	      }

	      var data = Utils.GetData($highlighted[0], 'data');

	      if ($highlighted.attr('aria-selected') == 'true') {
	        self.trigger('close', {});
	      } else {
	        self.trigger('select', {
	          data: data
	        });
	      }
	    });

	    container.on('results:previous', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      // If we are already at te top, don't move further
	      // If no options, currentIndex will be -1
	      if (currentIndex <= 0) {
	        return;
	      }

	      var nextIndex = currentIndex - 1;

	      // If none are highlighted, highlight the first
	      if ($highlighted.length === 0) {
	        nextIndex = 0;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top;
	      var nextTop = $next.offset().top;
	      var nextOffset = self.$results.scrollTop() + (nextTop - currentOffset);

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextTop - currentOffset < 0) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:next', function () {
	      var $highlighted = self.getHighlightedResults();

	      var $options = self.$results.find('[aria-selected]');

	      var currentIndex = $options.index($highlighted);

	      var nextIndex = currentIndex + 1;

	      // If we are at the last option, stay there
	      if (nextIndex >= $options.length) {
	        return;
	      }

	      var $next = $options.eq(nextIndex);

	      $next.trigger('mouseenter');

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var nextBottom = $next.offset().top + $next.outerHeight(false);
	      var nextOffset = self.$results.scrollTop() + nextBottom - currentOffset;

	      if (nextIndex === 0) {
	        self.$results.scrollTop(0);
	      } else if (nextBottom > currentOffset) {
	        self.$results.scrollTop(nextOffset);
	      }
	    });

	    container.on('results:focus', function (params) {
	      params.element.addClass('select2-results__option--highlighted');
	    });

	    container.on('results:message', function (params) {
	      self.displayMessage(params);
	    });

	    if ($.fn.mousewheel) {
	      this.$results.on('mousewheel', function (e) {
	        var top = self.$results.scrollTop();

	        var bottom = self.$results.get(0).scrollHeight - top + e.deltaY;

	        var isAtTop = e.deltaY > 0 && top - e.deltaY <= 0;
	        var isAtBottom = e.deltaY < 0 && bottom <= self.$results.height();

	        if (isAtTop) {
	          self.$results.scrollTop(0);

	          e.preventDefault();
	          e.stopPropagation();
	        } else if (isAtBottom) {
	          self.$results.scrollTop(
	            self.$results.get(0).scrollHeight - self.$results.height()
	          );

	          e.preventDefault();
	          e.stopPropagation();
	        }
	      });
	    }

	    this.$results.on('mouseup', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var $this = $(this);

	      var data = Utils.GetData(this, 'data');

	      if ($this.attr('aria-selected') === 'true') {
	        if (self.options.get('multiple')) {
	          self.trigger('unselect', {
	            originalEvent: evt,
	            data: data
	          });
	        } else {
	          self.trigger('close', {});
	        }

	        return;
	      }

	      self.trigger('select', {
	        originalEvent: evt,
	        data: data
	      });
	    });

	    this.$results.on('mouseenter', '.select2-results__option[aria-selected]',
	      function (evt) {
	      var data = Utils.GetData(this, 'data');

	      self.getHighlightedResults()
	          .removeClass('select2-results__option--highlighted');

	      self.trigger('results:focus', {
	        data: data,
	        element: $(this)
	      });
	    });
	  };

	  Results.prototype.getHighlightedResults = function () {
	    var $highlighted = this.$results
	    .find('.select2-results__option--highlighted');

	    return $highlighted;
	  };

	  Results.prototype.destroy = function () {
	    this.$results.remove();
	  };

	  Results.prototype.ensureHighlightVisible = function () {
	    var $highlighted = this.getHighlightedResults();

	    if ($highlighted.length === 0) {
	      return;
	    }

	    var $options = this.$results.find('[aria-selected]');

	    var currentIndex = $options.index($highlighted);

	    var currentOffset = this.$results.offset().top;
	    var nextTop = $highlighted.offset().top;
	    var nextOffset = this.$results.scrollTop() + (nextTop - currentOffset);

	    var offsetDelta = nextTop - currentOffset;
	    nextOffset -= $highlighted.outerHeight(false) * 2;

	    if (currentIndex <= 2) {
	      this.$results.scrollTop(0);
	    } else if (offsetDelta > this.$results.outerHeight() || offsetDelta < 0) {
	      this.$results.scrollTop(nextOffset);
	    }
	  };

	  Results.prototype.template = function (result, container) {
	    var template = this.options.get('templateResult');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    var content = template(result, container);

	    if (content == null) {
	      container.style.display = 'none';
	    } else if (typeof content === 'string') {
	      container.innerHTML = escapeMarkup(content);
	    } else {
	      $(container).append(content);
	    }
	  };

	  return Results;
	});

	S2.define('select2/keys',[

	], function () {
	  var KEYS = {
	    BACKSPACE: 8,
	    TAB: 9,
	    ENTER: 13,
	    SHIFT: 16,
	    CTRL: 17,
	    ALT: 18,
	    ESC: 27,
	    SPACE: 32,
	    PAGE_UP: 33,
	    PAGE_DOWN: 34,
	    END: 35,
	    HOME: 36,
	    LEFT: 37,
	    UP: 38,
	    RIGHT: 39,
	    DOWN: 40,
	    DELETE: 46
	  };

	  return KEYS;
	});

	S2.define('select2/selection/base',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function BaseSelection ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    BaseSelection.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseSelection, Utils.Observable);

	  BaseSelection.prototype.render = function () {
	    var $selection = $(
	      '<span class="select2-selection" role="combobox" ' +
	      ' aria-haspopup="true" aria-expanded="false">' +
	      '</span>'
	    );

	    this._tabindex = 0;

	    if (Utils.GetData(this.$element[0], 'old-tabindex') != null) {
	      this._tabindex = Utils.GetData(this.$element[0], 'old-tabindex');
	    } else if (this.$element.attr('tabindex') != null) {
	      this._tabindex = this.$element.attr('tabindex');
	    }

	    $selection.attr('title', this.$element.attr('title'));
	    $selection.attr('tabindex', this._tabindex);

	    this.$selection = $selection;

	    return $selection;
	  };

	  BaseSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    var id = container.id + '-container';
	    var resultsId = container.id + '-results';

	    this.container = container;

	    this.$selection.on('focus', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('blur', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      if (evt.which === KEYS.SPACE) {
	        evt.preventDefault();
	      }
	    });

	    container.on('results:focus', function (params) {
	      self.$selection.attr('aria-activedescendant', params.data._resultId);
	    });

	    container.on('selection:update', function (params) {
	      self.update(params.data);
	    });

	    container.on('open', function () {
	      // When the dropdown is open, aria-expanded="true"
	      self.$selection.attr('aria-expanded', 'true');
	      self.$selection.attr('aria-owns', resultsId);

	      self._attachCloseHandler(container);
	    });

	    container.on('close', function () {
	      // When the dropdown is closed, aria-expanded="false"
	      self.$selection.attr('aria-expanded', 'false');
	      self.$selection.removeAttr('aria-activedescendant');
	      self.$selection.removeAttr('aria-owns');

	      self.$selection.focus();
	      window.setTimeout(function () {
	        self.$selection.focus();
	      }, 0);

	      self._detachCloseHandler(container);
	    });

	    container.on('enable', function () {
	      self.$selection.attr('tabindex', self._tabindex);
	    });

	    container.on('disable', function () {
	      self.$selection.attr('tabindex', '-1');
	    });
	  };

	  BaseSelection.prototype._handleBlur = function (evt) {
	    var self = this;

	    // This needs to be delayed as the active element is the body when the tab
	    // key is pressed, possibly along with others.
	    window.setTimeout(function () {
	      // Don't trigger `blur` if the focus is still in the selection
	      if (
	        (document.activeElement == self.$selection[0]) ||
	        ($.contains(self.$selection[0], document.activeElement))
	      ) {
	        return;
	      }

	      self.trigger('blur', evt);
	    }, 1);
	  };

	  BaseSelection.prototype._attachCloseHandler = function (container) {
	    var self = this;

	    $(document.body).on('mousedown.select2.' + container.id, function (e) {
	      var $target = $(e.target);

	      var $select = $target.closest('.select2');

	      var $all = $('.select2.select2-container--open');

	      $all.each(function () {
	        var $this = $(this);

	        if (this == $select[0]) {
	          return;
	        }

	        var $element = Utils.GetData(this, 'element');

	        $element.select2('close');
	      });
	    });
	  };

	  BaseSelection.prototype._detachCloseHandler = function (container) {
	    $(document.body).off('mousedown.select2.' + container.id);
	  };

	  BaseSelection.prototype.position = function ($selection, $container) {
	    var $selectionContainer = $container.find('.selection');
	    $selectionContainer.append($selection);
	  };

	  BaseSelection.prototype.destroy = function () {
	    this._detachCloseHandler(this.container);
	  };

	  BaseSelection.prototype.update = function (data) {
	    throw new Error('The `update` method must be defined in child classes.');
	  };

	  return BaseSelection;
	});

	S2.define('select2/selection/single',[
	  'jquery',
	  './base',
	  '../utils',
	  '../keys'
	], function ($, BaseSelection, Utils, KEYS) {
	  function SingleSelection () {
	    SingleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(SingleSelection, BaseSelection);

	  SingleSelection.prototype.render = function () {
	    var $selection = SingleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--single');

	    $selection.html(
	      '<span class="select2-selection__rendered"></span>' +
	      '<span class="select2-selection__arrow" role="presentation">' +
	        '<b role="presentation"></b>' +
	      '</span>'
	    );

	    return $selection;
	  };

	  SingleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    SingleSelection.__super__.bind.apply(this, arguments);

	    var id = container.id + '-container';

	    this.$selection.find('.select2-selection__rendered')
	      .attr('id', id)
	      .attr('role', 'textbox')
	      .attr('aria-readonly', 'true');
	    this.$selection.attr('aria-labelledby', id);

	    this.$selection.on('mousedown', function (evt) {
	      // Only respond to left clicks
	      if (evt.which !== 1) {
	        return;
	      }

	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on('focus', function (evt) {
	      // User focuses on the container
	    });

	    this.$selection.on('blur', function (evt) {
	      // User exits the container
	    });

	    container.on('focus', function (evt) {
	      if (!container.isOpen()) {
	        self.$selection.focus();
	      }
	    });
	  };

	  SingleSelection.prototype.clear = function () {
	    var $rendered = this.$selection.find('.select2-selection__rendered');
	    $rendered.empty();
	    $rendered.removeAttr('title'); // clear tooltip on empty
	  };

	  SingleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  SingleSelection.prototype.selectionContainer = function () {
	    return $('<span></span>');
	  };

	  SingleSelection.prototype.update = function (data) {
	    if (data.length === 0) {
	      this.clear();
	      return;
	    }

	    var selection = data[0];

	    var $rendered = this.$selection.find('.select2-selection__rendered');
	    var formatted = this.display(selection, $rendered);

	    $rendered.empty().append(formatted);
	    $rendered.attr('title', selection.title || selection.text);
	  };

	  return SingleSelection;
	});

	S2.define('select2/selection/multiple',[
	  'jquery',
	  './base',
	  '../utils'
	], function ($, BaseSelection, Utils) {
	  function MultipleSelection ($element, options) {
	    MultipleSelection.__super__.constructor.apply(this, arguments);
	  }

	  Utils.Extend(MultipleSelection, BaseSelection);

	  MultipleSelection.prototype.render = function () {
	    var $selection = MultipleSelection.__super__.render.call(this);

	    $selection.addClass('select2-selection--multiple');

	    $selection.html(
	      '<ul class="select2-selection__rendered"></ul>'
	    );

	    return $selection;
	  };

	  MultipleSelection.prototype.bind = function (container, $container) {
	    var self = this;

	    MultipleSelection.__super__.bind.apply(this, arguments);

	    this.$selection.on('click', function (evt) {
	      self.trigger('toggle', {
	        originalEvent: evt
	      });
	    });

	    this.$selection.on(
	      'click',
	      '.select2-selection__choice__remove',
	      function (evt) {
	        // Ignore the event if it is disabled
	        if (self.options.get('disabled')) {
	          return;
	        }

	        var $remove = $(this);
	        var $selection = $remove.parent();

	        var data = Utils.GetData($selection[0], 'data');

	        self.trigger('unselect', {
	          originalEvent: evt,
	          data: data
	        });
	      }
	    );
	  };

	  MultipleSelection.prototype.clear = function () {
	    var $rendered = this.$selection.find('.select2-selection__rendered');
	    $rendered.empty();
	    $rendered.removeAttr('title');
	  };

	  MultipleSelection.prototype.display = function (data, container) {
	    var template = this.options.get('templateSelection');
	    var escapeMarkup = this.options.get('escapeMarkup');

	    return escapeMarkup(template(data, container));
	  };

	  MultipleSelection.prototype.selectionContainer = function () {
	    var $container = $(
	      '<li class="select2-selection__choice">' +
	        '<span class="select2-selection__choice__remove" role="presentation">' +
	          '&times;' +
	        '</span>' +
	      '</li>'
	    );

	    return $container;
	  };

	  MultipleSelection.prototype.update = function (data) {
	    this.clear();

	    if (data.length === 0) {
	      return;
	    }

	    var $selections = [];

	    for (var d = 0; d < data.length; d++) {
	      var selection = data[d];

	      var $selection = this.selectionContainer();
	      var formatted = this.display(selection, $selection);

	      $selection.append(formatted);
	      $selection.attr('title', selection.title || selection.text);

	      Utils.StoreData($selection[0], 'data', selection);

	      $selections.push($selection);
	    }

	    var $rendered = this.$selection.find('.select2-selection__rendered');

	    Utils.appendMany($rendered, $selections);
	  };

	  return MultipleSelection;
	});

	S2.define('select2/selection/placeholder',[
	  '../utils'
	], function (Utils) {
	  function Placeholder (decorated, $element, options) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options);
	  }

	  Placeholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  Placeholder.prototype.createPlaceholder = function (decorated, placeholder) {
	    var $placeholder = this.selectionContainer();

	    $placeholder.html(this.display(placeholder));
	    $placeholder.addClass('select2-selection__placeholder')
	                .removeClass('select2-selection__choice');

	    return $placeholder;
	  };

	  Placeholder.prototype.update = function (decorated, data) {
	    var singlePlaceholder = (
	      data.length == 1 && data[0].id != this.placeholder.id
	    );
	    var multipleSelections = data.length > 1;

	    if (multipleSelections || singlePlaceholder) {
	      return decorated.call(this, data);
	    }

	    this.clear();

	    var $placeholder = this.createPlaceholder(this.placeholder);

	    this.$selection.find('.select2-selection__rendered').append($placeholder);
	  };

	  return Placeholder;
	});

	S2.define('select2/selection/allowClear',[
	  'jquery',
	  '../keys',
	  '../utils'
	], function ($, KEYS, Utils) {
	  function AllowClear () { }

	  AllowClear.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    if (this.placeholder == null) {
	      if (this.options.get('debug') && window.console && console.error) {
	        console.error(
	          'Select2: The `allowClear` option should be used in combination ' +
	          'with the `placeholder` option.'
	        );
	      }
	    }

	    this.$selection.on('mousedown', '.select2-selection__clear',
	      function (evt) {
	        self._handleClear(evt);
	    });

	    container.on('keypress', function (evt) {
	      self._handleKeyboardClear(evt, container);
	    });
	  };

	  AllowClear.prototype._handleClear = function (_, evt) {
	    // Ignore the event if it is disabled
	    if (this.options.get('disabled')) {
	      return;
	    }

	    var $clear = this.$selection.find('.select2-selection__clear');

	    // Ignore the event if nothing has been selected
	    if ($clear.length === 0) {
	      return;
	    }

	    evt.stopPropagation();

	    var data = Utils.GetData($clear[0], 'data');

	    var previousVal = this.$element.val();
	    this.$element.val(this.placeholder.id);

	    var unselectData = {
	      data: data
	    };
	    this.trigger('clear', unselectData);
	    if (unselectData.prevented) {
	      this.$element.val(previousVal);
	      return;
	    }

	    for (var d = 0; d < data.length; d++) {
	      unselectData = {
	        data: data[d]
	      };

	      // Trigger the `unselect` event, so people can prevent it from being
	      // cleared.
	      this.trigger('unselect', unselectData);

	      // If the event was prevented, don't clear it out.
	      if (unselectData.prevented) {
	        this.$element.val(previousVal);
	        return;
	      }
	    }

	    this.$element.trigger('change');

	    this.trigger('toggle', {});
	  };

	  AllowClear.prototype._handleKeyboardClear = function (_, evt, container) {
	    if (container.isOpen()) {
	      return;
	    }

	    if (evt.which == KEYS.DELETE || evt.which == KEYS.BACKSPACE) {
	      this._handleClear(evt);
	    }
	  };

	  AllowClear.prototype.update = function (decorated, data) {
	    decorated.call(this, data);

	    if (this.$selection.find('.select2-selection__placeholder').length > 0 ||
	        data.length === 0) {
	      return;
	    }

	    var $remove = $(
	      '<span class="select2-selection__clear">' +
	        '&times;' +
	      '</span>'
	    );
	    Utils.StoreData($remove[0], 'data', data);

	    this.$selection.find('.select2-selection__rendered').prepend($remove);
	  };

	  return AllowClear;
	});

	S2.define('select2/selection/search',[
	  'jquery',
	  '../utils',
	  '../keys'
	], function ($, Utils, KEYS) {
	  function Search (decorated, $element, options) {
	    decorated.call(this, $element, options);
	  }

	  Search.prototype.render = function (decorated) {
	    var $search = $(
	      '<li class="select2-search select2-search--inline">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
	        ' spellcheck="false" role="textbox" aria-autocomplete="list" />' +
	      '</li>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    var $rendered = decorated.call(this);

	    this._transferTabIndex();

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self.$search.trigger('focus');
	    });

	    container.on('close', function () {
	      self.$search.val('');
	      self.$search.removeAttr('aria-activedescendant');
	      self.$search.trigger('focus');
	    });

	    container.on('enable', function () {
	      self.$search.prop('disabled', false);

	      self._transferTabIndex();
	    });

	    container.on('disable', function () {
	      self.$search.prop('disabled', true);
	    });

	    container.on('focus', function (evt) {
	      self.$search.trigger('focus');
	    });

	    container.on('results:focus', function (params) {
	      self.$search.attr('aria-activedescendant', params.id);
	    });

	    this.$selection.on('focusin', '.select2-search--inline', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this.$selection.on('focusout', '.select2-search--inline', function (evt) {
	      self._handleBlur(evt);
	    });

	    this.$selection.on('keydown', '.select2-search--inline', function (evt) {
	      evt.stopPropagation();

	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();

	      var key = evt.which;

	      if (key === KEYS.BACKSPACE && self.$search.val() === '') {
	        var $previousChoice = self.$searchContainer
	          .prev('.select2-selection__choice');

	        if ($previousChoice.length > 0) {
	          var item = Utils.GetData($previousChoice[0], 'data');

	          self.searchRemoveChoice(item);

	          evt.preventDefault();
	        }
	      }
	    });

	    // Try to detect the IE version should the `documentMode` property that
	    // is stored on the document. This is only implemented in IE and is
	    // slightly cleaner than doing a user agent check.
	    // This property is not available in Edge, but Edge also doesn't have
	    // this bug.
	    var msie = document.documentMode;
	    var disableInputEvents = msie && msie <= 11;

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$selection.on(
	      'input.searchcheck',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents) {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        // Unbind the duplicated `keyup` event
	        self.$selection.off('keyup.search');
	      }
	    );

	    this.$selection.on(
	      'keyup.search input.search',
	      '.select2-search--inline',
	      function (evt) {
	        // IE will trigger the `input` event when a placeholder is used on a
	        // search box. To get around this issue, we are forced to ignore all
	        // `input` events in IE and keep using `keyup`.
	        if (disableInputEvents && evt.type === 'input') {
	          self.$selection.off('input.search input.searchcheck');
	          return;
	        }

	        var key = evt.which;

	        // We can freely ignore events from modifier keys
	        if (key == KEYS.SHIFT || key == KEYS.CTRL || key == KEYS.ALT) {
	          return;
	        }

	        // Tabbing will be handled during the `keydown` phase
	        if (key == KEYS.TAB) {
	          return;
	        }

	        self.handleSearch(evt);
	      }
	    );
	  };

	  /**
	   * This method will transfer the tabindex attribute from the rendered
	   * selection to the search box. This allows for the search box to be used as
	   * the primary focus instead of the selection container.
	   *
	   * @private
	   */
	  Search.prototype._transferTabIndex = function (decorated) {
	    this.$search.attr('tabindex', this.$selection.attr('tabindex'));
	    this.$selection.attr('tabindex', '-1');
	  };

	  Search.prototype.createPlaceholder = function (decorated, placeholder) {
	    this.$search.attr('placeholder', placeholder.text);
	  };

	  Search.prototype.update = function (decorated, data) {
	    var searchHadFocus = this.$search[0] == document.activeElement;

	    this.$search.attr('placeholder', '');

	    decorated.call(this, data);

	    this.$selection.find('.select2-selection__rendered')
	                   .append(this.$searchContainer);

	    this.resizeSearch();
	    if (searchHadFocus) {
	      var isTagInput = this.$element.find('[data-select2-tag]').length;
	      if (isTagInput) {
	        // fix IE11 bug where tag input lost focus
	        this.$element.focus();
	      } else {
	        this.$search.focus();
	      }
	    }
	  };

	  Search.prototype.handleSearch = function () {
	    this.resizeSearch();

	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.searchRemoveChoice = function (decorated, item) {
	    this.trigger('unselect', {
	      data: item
	    });

	    this.$search.val(item.text);
	    this.handleSearch();
	  };

	  Search.prototype.resizeSearch = function () {
	    this.$search.css('width', '25px');

	    var width = '';

	    if (this.$search.attr('placeholder') !== '') {
	      width = this.$selection.find('.select2-selection__rendered').innerWidth();
	    } else {
	      var minimumWidth = this.$search.val().length + 1;

	      width = (minimumWidth * 0.75) + 'em';
	    }

	    this.$search.css('width', width);
	  };

	  return Search;
	});

	S2.define('select2/selection/eventRelay',[
	  'jquery'
	], function ($) {
	  function EventRelay () { }

	  EventRelay.prototype.bind = function (decorated, container, $container) {
	    var self = this;
	    var relayEvents = [
	      'open', 'opening',
	      'close', 'closing',
	      'select', 'selecting',
	      'unselect', 'unselecting',
	      'clear', 'clearing'
	    ];

	    var preventableEvents = [
	      'opening', 'closing', 'selecting', 'unselecting', 'clearing'
	    ];

	    decorated.call(this, container, $container);

	    container.on('*', function (name, params) {
	      // Ignore events that should not be relayed
	      if ($.inArray(name, relayEvents) === -1) {
	        return;
	      }

	      // The parameters should always be an object
	      params = params || {};

	      // Generate the jQuery event for the Select2 event
	      var evt = $.Event('select2:' + name, {
	        params: params
	      });

	      self.$element.trigger(evt);

	      // Only handle preventable events if it was one
	      if ($.inArray(name, preventableEvents) === -1) {
	        return;
	      }

	      params.prevented = evt.isDefaultPrevented();
	    });
	  };

	  return EventRelay;
	});

	S2.define('select2/translation',[
	  'jquery',
	  'require'
	], function ($, require) {
	  function Translation (dict) {
	    this.dict = dict || {};
	  }

	  Translation.prototype.all = function () {
	    return this.dict;
	  };

	  Translation.prototype.get = function (key) {
	    return this.dict[key];
	  };

	  Translation.prototype.extend = function (translation) {
	    this.dict = $.extend({}, translation.all(), this.dict);
	  };

	  // Static functions

	  Translation._cache = {};

	  Translation.loadPath = function (path) {
	    if (!(path in Translation._cache)) {
	      var translations = require(path);

	      Translation._cache[path] = translations;
	    }

	    return new Translation(Translation._cache[path]);
	  };

	  return Translation;
	});

	S2.define('select2/diacritics',[

	], function () {
	  var diacritics = {
	    '\u24B6': 'A',
	    '\uFF21': 'A',
	    '\u00C0': 'A',
	    '\u00C1': 'A',
	    '\u00C2': 'A',
	    '\u1EA6': 'A',
	    '\u1EA4': 'A',
	    '\u1EAA': 'A',
	    '\u1EA8': 'A',
	    '\u00C3': 'A',
	    '\u0100': 'A',
	    '\u0102': 'A',
	    '\u1EB0': 'A',
	    '\u1EAE': 'A',
	    '\u1EB4': 'A',
	    '\u1EB2': 'A',
	    '\u0226': 'A',
	    '\u01E0': 'A',
	    '\u00C4': 'A',
	    '\u01DE': 'A',
	    '\u1EA2': 'A',
	    '\u00C5': 'A',
	    '\u01FA': 'A',
	    '\u01CD': 'A',
	    '\u0200': 'A',
	    '\u0202': 'A',
	    '\u1EA0': 'A',
	    '\u1EAC': 'A',
	    '\u1EB6': 'A',
	    '\u1E00': 'A',
	    '\u0104': 'A',
	    '\u023A': 'A',
	    '\u2C6F': 'A',
	    '\uA732': 'AA',
	    '\u00C6': 'AE',
	    '\u01FC': 'AE',
	    '\u01E2': 'AE',
	    '\uA734': 'AO',
	    '\uA736': 'AU',
	    '\uA738': 'AV',
	    '\uA73A': 'AV',
	    '\uA73C': 'AY',
	    '\u24B7': 'B',
	    '\uFF22': 'B',
	    '\u1E02': 'B',
	    '\u1E04': 'B',
	    '\u1E06': 'B',
	    '\u0243': 'B',
	    '\u0182': 'B',
	    '\u0181': 'B',
	    '\u24B8': 'C',
	    '\uFF23': 'C',
	    '\u0106': 'C',
	    '\u0108': 'C',
	    '\u010A': 'C',
	    '\u010C': 'C',
	    '\u00C7': 'C',
	    '\u1E08': 'C',
	    '\u0187': 'C',
	    '\u023B': 'C',
	    '\uA73E': 'C',
	    '\u24B9': 'D',
	    '\uFF24': 'D',
	    '\u1E0A': 'D',
	    '\u010E': 'D',
	    '\u1E0C': 'D',
	    '\u1E10': 'D',
	    '\u1E12': 'D',
	    '\u1E0E': 'D',
	    '\u0110': 'D',
	    '\u018B': 'D',
	    '\u018A': 'D',
	    '\u0189': 'D',
	    '\uA779': 'D',
	    '\u01F1': 'DZ',
	    '\u01C4': 'DZ',
	    '\u01F2': 'Dz',
	    '\u01C5': 'Dz',
	    '\u24BA': 'E',
	    '\uFF25': 'E',
	    '\u00C8': 'E',
	    '\u00C9': 'E',
	    '\u00CA': 'E',
	    '\u1EC0': 'E',
	    '\u1EBE': 'E',
	    '\u1EC4': 'E',
	    '\u1EC2': 'E',
	    '\u1EBC': 'E',
	    '\u0112': 'E',
	    '\u1E14': 'E',
	    '\u1E16': 'E',
	    '\u0114': 'E',
	    '\u0116': 'E',
	    '\u00CB': 'E',
	    '\u1EBA': 'E',
	    '\u011A': 'E',
	    '\u0204': 'E',
	    '\u0206': 'E',
	    '\u1EB8': 'E',
	    '\u1EC6': 'E',
	    '\u0228': 'E',
	    '\u1E1C': 'E',
	    '\u0118': 'E',
	    '\u1E18': 'E',
	    '\u1E1A': 'E',
	    '\u0190': 'E',
	    '\u018E': 'E',
	    '\u24BB': 'F',
	    '\uFF26': 'F',
	    '\u1E1E': 'F',
	    '\u0191': 'F',
	    '\uA77B': 'F',
	    '\u24BC': 'G',
	    '\uFF27': 'G',
	    '\u01F4': 'G',
	    '\u011C': 'G',
	    '\u1E20': 'G',
	    '\u011E': 'G',
	    '\u0120': 'G',
	    '\u01E6': 'G',
	    '\u0122': 'G',
	    '\u01E4': 'G',
	    '\u0193': 'G',
	    '\uA7A0': 'G',
	    '\uA77D': 'G',
	    '\uA77E': 'G',
	    '\u24BD': 'H',
	    '\uFF28': 'H',
	    '\u0124': 'H',
	    '\u1E22': 'H',
	    '\u1E26': 'H',
	    '\u021E': 'H',
	    '\u1E24': 'H',
	    '\u1E28': 'H',
	    '\u1E2A': 'H',
	    '\u0126': 'H',
	    '\u2C67': 'H',
	    '\u2C75': 'H',
	    '\uA78D': 'H',
	    '\u24BE': 'I',
	    '\uFF29': 'I',
	    '\u00CC': 'I',
	    '\u00CD': 'I',
	    '\u00CE': 'I',
	    '\u0128': 'I',
	    '\u012A': 'I',
	    '\u012C': 'I',
	    '\u0130': 'I',
	    '\u00CF': 'I',
	    '\u1E2E': 'I',
	    '\u1EC8': 'I',
	    '\u01CF': 'I',
	    '\u0208': 'I',
	    '\u020A': 'I',
	    '\u1ECA': 'I',
	    '\u012E': 'I',
	    '\u1E2C': 'I',
	    '\u0197': 'I',
	    '\u24BF': 'J',
	    '\uFF2A': 'J',
	    '\u0134': 'J',
	    '\u0248': 'J',
	    '\u24C0': 'K',
	    '\uFF2B': 'K',
	    '\u1E30': 'K',
	    '\u01E8': 'K',
	    '\u1E32': 'K',
	    '\u0136': 'K',
	    '\u1E34': 'K',
	    '\u0198': 'K',
	    '\u2C69': 'K',
	    '\uA740': 'K',
	    '\uA742': 'K',
	    '\uA744': 'K',
	    '\uA7A2': 'K',
	    '\u24C1': 'L',
	    '\uFF2C': 'L',
	    '\u013F': 'L',
	    '\u0139': 'L',
	    '\u013D': 'L',
	    '\u1E36': 'L',
	    '\u1E38': 'L',
	    '\u013B': 'L',
	    '\u1E3C': 'L',
	    '\u1E3A': 'L',
	    '\u0141': 'L',
	    '\u023D': 'L',
	    '\u2C62': 'L',
	    '\u2C60': 'L',
	    '\uA748': 'L',
	    '\uA746': 'L',
	    '\uA780': 'L',
	    '\u01C7': 'LJ',
	    '\u01C8': 'Lj',
	    '\u24C2': 'M',
	    '\uFF2D': 'M',
	    '\u1E3E': 'M',
	    '\u1E40': 'M',
	    '\u1E42': 'M',
	    '\u2C6E': 'M',
	    '\u019C': 'M',
	    '\u24C3': 'N',
	    '\uFF2E': 'N',
	    '\u01F8': 'N',
	    '\u0143': 'N',
	    '\u00D1': 'N',
	    '\u1E44': 'N',
	    '\u0147': 'N',
	    '\u1E46': 'N',
	    '\u0145': 'N',
	    '\u1E4A': 'N',
	    '\u1E48': 'N',
	    '\u0220': 'N',
	    '\u019D': 'N',
	    '\uA790': 'N',
	    '\uA7A4': 'N',
	    '\u01CA': 'NJ',
	    '\u01CB': 'Nj',
	    '\u24C4': 'O',
	    '\uFF2F': 'O',
	    '\u00D2': 'O',
	    '\u00D3': 'O',
	    '\u00D4': 'O',
	    '\u1ED2': 'O',
	    '\u1ED0': 'O',
	    '\u1ED6': 'O',
	    '\u1ED4': 'O',
	    '\u00D5': 'O',
	    '\u1E4C': 'O',
	    '\u022C': 'O',
	    '\u1E4E': 'O',
	    '\u014C': 'O',
	    '\u1E50': 'O',
	    '\u1E52': 'O',
	    '\u014E': 'O',
	    '\u022E': 'O',
	    '\u0230': 'O',
	    '\u00D6': 'O',
	    '\u022A': 'O',
	    '\u1ECE': 'O',
	    '\u0150': 'O',
	    '\u01D1': 'O',
	    '\u020C': 'O',
	    '\u020E': 'O',
	    '\u01A0': 'O',
	    '\u1EDC': 'O',
	    '\u1EDA': 'O',
	    '\u1EE0': 'O',
	    '\u1EDE': 'O',
	    '\u1EE2': 'O',
	    '\u1ECC': 'O',
	    '\u1ED8': 'O',
	    '\u01EA': 'O',
	    '\u01EC': 'O',
	    '\u00D8': 'O',
	    '\u01FE': 'O',
	    '\u0186': 'O',
	    '\u019F': 'O',
	    '\uA74A': 'O',
	    '\uA74C': 'O',
	    '\u01A2': 'OI',
	    '\uA74E': 'OO',
	    '\u0222': 'OU',
	    '\u24C5': 'P',
	    '\uFF30': 'P',
	    '\u1E54': 'P',
	    '\u1E56': 'P',
	    '\u01A4': 'P',
	    '\u2C63': 'P',
	    '\uA750': 'P',
	    '\uA752': 'P',
	    '\uA754': 'P',
	    '\u24C6': 'Q',
	    '\uFF31': 'Q',
	    '\uA756': 'Q',
	    '\uA758': 'Q',
	    '\u024A': 'Q',
	    '\u24C7': 'R',
	    '\uFF32': 'R',
	    '\u0154': 'R',
	    '\u1E58': 'R',
	    '\u0158': 'R',
	    '\u0210': 'R',
	    '\u0212': 'R',
	    '\u1E5A': 'R',
	    '\u1E5C': 'R',
	    '\u0156': 'R',
	    '\u1E5E': 'R',
	    '\u024C': 'R',
	    '\u2C64': 'R',
	    '\uA75A': 'R',
	    '\uA7A6': 'R',
	    '\uA782': 'R',
	    '\u24C8': 'S',
	    '\uFF33': 'S',
	    '\u1E9E': 'S',
	    '\u015A': 'S',
	    '\u1E64': 'S',
	    '\u015C': 'S',
	    '\u1E60': 'S',
	    '\u0160': 'S',
	    '\u1E66': 'S',
	    '\u1E62': 'S',
	    '\u1E68': 'S',
	    '\u0218': 'S',
	    '\u015E': 'S',
	    '\u2C7E': 'S',
	    '\uA7A8': 'S',
	    '\uA784': 'S',
	    '\u24C9': 'T',
	    '\uFF34': 'T',
	    '\u1E6A': 'T',
	    '\u0164': 'T',
	    '\u1E6C': 'T',
	    '\u021A': 'T',
	    '\u0162': 'T',
	    '\u1E70': 'T',
	    '\u1E6E': 'T',
	    '\u0166': 'T',
	    '\u01AC': 'T',
	    '\u01AE': 'T',
	    '\u023E': 'T',
	    '\uA786': 'T',
	    '\uA728': 'TZ',
	    '\u24CA': 'U',
	    '\uFF35': 'U',
	    '\u00D9': 'U',
	    '\u00DA': 'U',
	    '\u00DB': 'U',
	    '\u0168': 'U',
	    '\u1E78': 'U',
	    '\u016A': 'U',
	    '\u1E7A': 'U',
	    '\u016C': 'U',
	    '\u00DC': 'U',
	    '\u01DB': 'U',
	    '\u01D7': 'U',
	    '\u01D5': 'U',
	    '\u01D9': 'U',
	    '\u1EE6': 'U',
	    '\u016E': 'U',
	    '\u0170': 'U',
	    '\u01D3': 'U',
	    '\u0214': 'U',
	    '\u0216': 'U',
	    '\u01AF': 'U',
	    '\u1EEA': 'U',
	    '\u1EE8': 'U',
	    '\u1EEE': 'U',
	    '\u1EEC': 'U',
	    '\u1EF0': 'U',
	    '\u1EE4': 'U',
	    '\u1E72': 'U',
	    '\u0172': 'U',
	    '\u1E76': 'U',
	    '\u1E74': 'U',
	    '\u0244': 'U',
	    '\u24CB': 'V',
	    '\uFF36': 'V',
	    '\u1E7C': 'V',
	    '\u1E7E': 'V',
	    '\u01B2': 'V',
	    '\uA75E': 'V',
	    '\u0245': 'V',
	    '\uA760': 'VY',
	    '\u24CC': 'W',
	    '\uFF37': 'W',
	    '\u1E80': 'W',
	    '\u1E82': 'W',
	    '\u0174': 'W',
	    '\u1E86': 'W',
	    '\u1E84': 'W',
	    '\u1E88': 'W',
	    '\u2C72': 'W',
	    '\u24CD': 'X',
	    '\uFF38': 'X',
	    '\u1E8A': 'X',
	    '\u1E8C': 'X',
	    '\u24CE': 'Y',
	    '\uFF39': 'Y',
	    '\u1EF2': 'Y',
	    '\u00DD': 'Y',
	    '\u0176': 'Y',
	    '\u1EF8': 'Y',
	    '\u0232': 'Y',
	    '\u1E8E': 'Y',
	    '\u0178': 'Y',
	    '\u1EF6': 'Y',
	    '\u1EF4': 'Y',
	    '\u01B3': 'Y',
	    '\u024E': 'Y',
	    '\u1EFE': 'Y',
	    '\u24CF': 'Z',
	    '\uFF3A': 'Z',
	    '\u0179': 'Z',
	    '\u1E90': 'Z',
	    '\u017B': 'Z',
	    '\u017D': 'Z',
	    '\u1E92': 'Z',
	    '\u1E94': 'Z',
	    '\u01B5': 'Z',
	    '\u0224': 'Z',
	    '\u2C7F': 'Z',
	    '\u2C6B': 'Z',
	    '\uA762': 'Z',
	    '\u24D0': 'a',
	    '\uFF41': 'a',
	    '\u1E9A': 'a',
	    '\u00E0': 'a',
	    '\u00E1': 'a',
	    '\u00E2': 'a',
	    '\u1EA7': 'a',
	    '\u1EA5': 'a',
	    '\u1EAB': 'a',
	    '\u1EA9': 'a',
	    '\u00E3': 'a',
	    '\u0101': 'a',
	    '\u0103': 'a',
	    '\u1EB1': 'a',
	    '\u1EAF': 'a',
	    '\u1EB5': 'a',
	    '\u1EB3': 'a',
	    '\u0227': 'a',
	    '\u01E1': 'a',
	    '\u00E4': 'a',
	    '\u01DF': 'a',
	    '\u1EA3': 'a',
	    '\u00E5': 'a',
	    '\u01FB': 'a',
	    '\u01CE': 'a',
	    '\u0201': 'a',
	    '\u0203': 'a',
	    '\u1EA1': 'a',
	    '\u1EAD': 'a',
	    '\u1EB7': 'a',
	    '\u1E01': 'a',
	    '\u0105': 'a',
	    '\u2C65': 'a',
	    '\u0250': 'a',
	    '\uA733': 'aa',
	    '\u00E6': 'ae',
	    '\u01FD': 'ae',
	    '\u01E3': 'ae',
	    '\uA735': 'ao',
	    '\uA737': 'au',
	    '\uA739': 'av',
	    '\uA73B': 'av',
	    '\uA73D': 'ay',
	    '\u24D1': 'b',
	    '\uFF42': 'b',
	    '\u1E03': 'b',
	    '\u1E05': 'b',
	    '\u1E07': 'b',
	    '\u0180': 'b',
	    '\u0183': 'b',
	    '\u0253': 'b',
	    '\u24D2': 'c',
	    '\uFF43': 'c',
	    '\u0107': 'c',
	    '\u0109': 'c',
	    '\u010B': 'c',
	    '\u010D': 'c',
	    '\u00E7': 'c',
	    '\u1E09': 'c',
	    '\u0188': 'c',
	    '\u023C': 'c',
	    '\uA73F': 'c',
	    '\u2184': 'c',
	    '\u24D3': 'd',
	    '\uFF44': 'd',
	    '\u1E0B': 'd',
	    '\u010F': 'd',
	    '\u1E0D': 'd',
	    '\u1E11': 'd',
	    '\u1E13': 'd',
	    '\u1E0F': 'd',
	    '\u0111': 'd',
	    '\u018C': 'd',
	    '\u0256': 'd',
	    '\u0257': 'd',
	    '\uA77A': 'd',
	    '\u01F3': 'dz',
	    '\u01C6': 'dz',
	    '\u24D4': 'e',
	    '\uFF45': 'e',
	    '\u00E8': 'e',
	    '\u00E9': 'e',
	    '\u00EA': 'e',
	    '\u1EC1': 'e',
	    '\u1EBF': 'e',
	    '\u1EC5': 'e',
	    '\u1EC3': 'e',
	    '\u1EBD': 'e',
	    '\u0113': 'e',
	    '\u1E15': 'e',
	    '\u1E17': 'e',
	    '\u0115': 'e',
	    '\u0117': 'e',
	    '\u00EB': 'e',
	    '\u1EBB': 'e',
	    '\u011B': 'e',
	    '\u0205': 'e',
	    '\u0207': 'e',
	    '\u1EB9': 'e',
	    '\u1EC7': 'e',
	    '\u0229': 'e',
	    '\u1E1D': 'e',
	    '\u0119': 'e',
	    '\u1E19': 'e',
	    '\u1E1B': 'e',
	    '\u0247': 'e',
	    '\u025B': 'e',
	    '\u01DD': 'e',
	    '\u24D5': 'f',
	    '\uFF46': 'f',
	    '\u1E1F': 'f',
	    '\u0192': 'f',
	    '\uA77C': 'f',
	    '\u24D6': 'g',
	    '\uFF47': 'g',
	    '\u01F5': 'g',
	    '\u011D': 'g',
	    '\u1E21': 'g',
	    '\u011F': 'g',
	    '\u0121': 'g',
	    '\u01E7': 'g',
	    '\u0123': 'g',
	    '\u01E5': 'g',
	    '\u0260': 'g',
	    '\uA7A1': 'g',
	    '\u1D79': 'g',
	    '\uA77F': 'g',
	    '\u24D7': 'h',
	    '\uFF48': 'h',
	    '\u0125': 'h',
	    '\u1E23': 'h',
	    '\u1E27': 'h',
	    '\u021F': 'h',
	    '\u1E25': 'h',
	    '\u1E29': 'h',
	    '\u1E2B': 'h',
	    '\u1E96': 'h',
	    '\u0127': 'h',
	    '\u2C68': 'h',
	    '\u2C76': 'h',
	    '\u0265': 'h',
	    '\u0195': 'hv',
	    '\u24D8': 'i',
	    '\uFF49': 'i',
	    '\u00EC': 'i',
	    '\u00ED': 'i',
	    '\u00EE': 'i',
	    '\u0129': 'i',
	    '\u012B': 'i',
	    '\u012D': 'i',
	    '\u00EF': 'i',
	    '\u1E2F': 'i',
	    '\u1EC9': 'i',
	    '\u01D0': 'i',
	    '\u0209': 'i',
	    '\u020B': 'i',
	    '\u1ECB': 'i',
	    '\u012F': 'i',
	    '\u1E2D': 'i',
	    '\u0268': 'i',
	    '\u0131': 'i',
	    '\u24D9': 'j',
	    '\uFF4A': 'j',
	    '\u0135': 'j',
	    '\u01F0': 'j',
	    '\u0249': 'j',
	    '\u24DA': 'k',
	    '\uFF4B': 'k',
	    '\u1E31': 'k',
	    '\u01E9': 'k',
	    '\u1E33': 'k',
	    '\u0137': 'k',
	    '\u1E35': 'k',
	    '\u0199': 'k',
	    '\u2C6A': 'k',
	    '\uA741': 'k',
	    '\uA743': 'k',
	    '\uA745': 'k',
	    '\uA7A3': 'k',
	    '\u24DB': 'l',
	    '\uFF4C': 'l',
	    '\u0140': 'l',
	    '\u013A': 'l',
	    '\u013E': 'l',
	    '\u1E37': 'l',
	    '\u1E39': 'l',
	    '\u013C': 'l',
	    '\u1E3D': 'l',
	    '\u1E3B': 'l',
	    '\u017F': 'l',
	    '\u0142': 'l',
	    '\u019A': 'l',
	    '\u026B': 'l',
	    '\u2C61': 'l',
	    '\uA749': 'l',
	    '\uA781': 'l',
	    '\uA747': 'l',
	    '\u01C9': 'lj',
	    '\u24DC': 'm',
	    '\uFF4D': 'm',
	    '\u1E3F': 'm',
	    '\u1E41': 'm',
	    '\u1E43': 'm',
	    '\u0271': 'm',
	    '\u026F': 'm',
	    '\u24DD': 'n',
	    '\uFF4E': 'n',
	    '\u01F9': 'n',
	    '\u0144': 'n',
	    '\u00F1': 'n',
	    '\u1E45': 'n',
	    '\u0148': 'n',
	    '\u1E47': 'n',
	    '\u0146': 'n',
	    '\u1E4B': 'n',
	    '\u1E49': 'n',
	    '\u019E': 'n',
	    '\u0272': 'n',
	    '\u0149': 'n',
	    '\uA791': 'n',
	    '\uA7A5': 'n',
	    '\u01CC': 'nj',
	    '\u24DE': 'o',
	    '\uFF4F': 'o',
	    '\u00F2': 'o',
	    '\u00F3': 'o',
	    '\u00F4': 'o',
	    '\u1ED3': 'o',
	    '\u1ED1': 'o',
	    '\u1ED7': 'o',
	    '\u1ED5': 'o',
	    '\u00F5': 'o',
	    '\u1E4D': 'o',
	    '\u022D': 'o',
	    '\u1E4F': 'o',
	    '\u014D': 'o',
	    '\u1E51': 'o',
	    '\u1E53': 'o',
	    '\u014F': 'o',
	    '\u022F': 'o',
	    '\u0231': 'o',
	    '\u00F6': 'o',
	    '\u022B': 'o',
	    '\u1ECF': 'o',
	    '\u0151': 'o',
	    '\u01D2': 'o',
	    '\u020D': 'o',
	    '\u020F': 'o',
	    '\u01A1': 'o',
	    '\u1EDD': 'o',
	    '\u1EDB': 'o',
	    '\u1EE1': 'o',
	    '\u1EDF': 'o',
	    '\u1EE3': 'o',
	    '\u1ECD': 'o',
	    '\u1ED9': 'o',
	    '\u01EB': 'o',
	    '\u01ED': 'o',
	    '\u00F8': 'o',
	    '\u01FF': 'o',
	    '\u0254': 'o',
	    '\uA74B': 'o',
	    '\uA74D': 'o',
	    '\u0275': 'o',
	    '\u01A3': 'oi',
	    '\u0223': 'ou',
	    '\uA74F': 'oo',
	    '\u24DF': 'p',
	    '\uFF50': 'p',
	    '\u1E55': 'p',
	    '\u1E57': 'p',
	    '\u01A5': 'p',
	    '\u1D7D': 'p',
	    '\uA751': 'p',
	    '\uA753': 'p',
	    '\uA755': 'p',
	    '\u24E0': 'q',
	    '\uFF51': 'q',
	    '\u024B': 'q',
	    '\uA757': 'q',
	    '\uA759': 'q',
	    '\u24E1': 'r',
	    '\uFF52': 'r',
	    '\u0155': 'r',
	    '\u1E59': 'r',
	    '\u0159': 'r',
	    '\u0211': 'r',
	    '\u0213': 'r',
	    '\u1E5B': 'r',
	    '\u1E5D': 'r',
	    '\u0157': 'r',
	    '\u1E5F': 'r',
	    '\u024D': 'r',
	    '\u027D': 'r',
	    '\uA75B': 'r',
	    '\uA7A7': 'r',
	    '\uA783': 'r',
	    '\u24E2': 's',
	    '\uFF53': 's',
	    '\u00DF': 's',
	    '\u015B': 's',
	    '\u1E65': 's',
	    '\u015D': 's',
	    '\u1E61': 's',
	    '\u0161': 's',
	    '\u1E67': 's',
	    '\u1E63': 's',
	    '\u1E69': 's',
	    '\u0219': 's',
	    '\u015F': 's',
	    '\u023F': 's',
	    '\uA7A9': 's',
	    '\uA785': 's',
	    '\u1E9B': 's',
	    '\u24E3': 't',
	    '\uFF54': 't',
	    '\u1E6B': 't',
	    '\u1E97': 't',
	    '\u0165': 't',
	    '\u1E6D': 't',
	    '\u021B': 't',
	    '\u0163': 't',
	    '\u1E71': 't',
	    '\u1E6F': 't',
	    '\u0167': 't',
	    '\u01AD': 't',
	    '\u0288': 't',
	    '\u2C66': 't',
	    '\uA787': 't',
	    '\uA729': 'tz',
	    '\u24E4': 'u',
	    '\uFF55': 'u',
	    '\u00F9': 'u',
	    '\u00FA': 'u',
	    '\u00FB': 'u',
	    '\u0169': 'u',
	    '\u1E79': 'u',
	    '\u016B': 'u',
	    '\u1E7B': 'u',
	    '\u016D': 'u',
	    '\u00FC': 'u',
	    '\u01DC': 'u',
	    '\u01D8': 'u',
	    '\u01D6': 'u',
	    '\u01DA': 'u',
	    '\u1EE7': 'u',
	    '\u016F': 'u',
	    '\u0171': 'u',
	    '\u01D4': 'u',
	    '\u0215': 'u',
	    '\u0217': 'u',
	    '\u01B0': 'u',
	    '\u1EEB': 'u',
	    '\u1EE9': 'u',
	    '\u1EEF': 'u',
	    '\u1EED': 'u',
	    '\u1EF1': 'u',
	    '\u1EE5': 'u',
	    '\u1E73': 'u',
	    '\u0173': 'u',
	    '\u1E77': 'u',
	    '\u1E75': 'u',
	    '\u0289': 'u',
	    '\u24E5': 'v',
	    '\uFF56': 'v',
	    '\u1E7D': 'v',
	    '\u1E7F': 'v',
	    '\u028B': 'v',
	    '\uA75F': 'v',
	    '\u028C': 'v',
	    '\uA761': 'vy',
	    '\u24E6': 'w',
	    '\uFF57': 'w',
	    '\u1E81': 'w',
	    '\u1E83': 'w',
	    '\u0175': 'w',
	    '\u1E87': 'w',
	    '\u1E85': 'w',
	    '\u1E98': 'w',
	    '\u1E89': 'w',
	    '\u2C73': 'w',
	    '\u24E7': 'x',
	    '\uFF58': 'x',
	    '\u1E8B': 'x',
	    '\u1E8D': 'x',
	    '\u24E8': 'y',
	    '\uFF59': 'y',
	    '\u1EF3': 'y',
	    '\u00FD': 'y',
	    '\u0177': 'y',
	    '\u1EF9': 'y',
	    '\u0233': 'y',
	    '\u1E8F': 'y',
	    '\u00FF': 'y',
	    '\u1EF7': 'y',
	    '\u1E99': 'y',
	    '\u1EF5': 'y',
	    '\u01B4': 'y',
	    '\u024F': 'y',
	    '\u1EFF': 'y',
	    '\u24E9': 'z',
	    '\uFF5A': 'z',
	    '\u017A': 'z',
	    '\u1E91': 'z',
	    '\u017C': 'z',
	    '\u017E': 'z',
	    '\u1E93': 'z',
	    '\u1E95': 'z',
	    '\u01B6': 'z',
	    '\u0225': 'z',
	    '\u0240': 'z',
	    '\u2C6C': 'z',
	    '\uA763': 'z',
	    '\u0386': '\u0391',
	    '\u0388': '\u0395',
	    '\u0389': '\u0397',
	    '\u038A': '\u0399',
	    '\u03AA': '\u0399',
	    '\u038C': '\u039F',
	    '\u038E': '\u03A5',
	    '\u03AB': '\u03A5',
	    '\u038F': '\u03A9',
	    '\u03AC': '\u03B1',
	    '\u03AD': '\u03B5',
	    '\u03AE': '\u03B7',
	    '\u03AF': '\u03B9',
	    '\u03CA': '\u03B9',
	    '\u0390': '\u03B9',
	    '\u03CC': '\u03BF',
	    '\u03CD': '\u03C5',
	    '\u03CB': '\u03C5',
	    '\u03B0': '\u03C5',
	    '\u03C9': '\u03C9',
	    '\u03C2': '\u03C3'
	  };

	  return diacritics;
	});

	S2.define('select2/data/base',[
	  '../utils'
	], function (Utils) {
	  function BaseAdapter ($element, options) {
	    BaseAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(BaseAdapter, Utils.Observable);

	  BaseAdapter.prototype.current = function (callback) {
	    throw new Error('The `current` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.query = function (params, callback) {
	    throw new Error('The `query` method must be defined in child classes.');
	  };

	  BaseAdapter.prototype.bind = function (container, $container) {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.destroy = function () {
	    // Can be implemented in subclasses
	  };

	  BaseAdapter.prototype.generateResultId = function (container, data) {
	    var id = container.id + '-result-';

	    id += Utils.generateChars(4);

	    if (data.id != null) {
	      id += '-' + data.id.toString();
	    } else {
	      id += '-' + Utils.generateChars(4);
	    }
	    return id;
	  };

	  return BaseAdapter;
	});

	S2.define('select2/data/select',[
	  './base',
	  '../utils',
	  'jquery'
	], function (BaseAdapter, Utils, $) {
	  function SelectAdapter ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    SelectAdapter.__super__.constructor.call(this);
	  }

	  Utils.Extend(SelectAdapter, BaseAdapter);

	  SelectAdapter.prototype.current = function (callback) {
	    var data = [];
	    var self = this;

	    this.$element.find(':selected').each(function () {
	      var $option = $(this);

	      var option = self.item($option);

	      data.push(option);
	    });

	    callback(data);
	  };

	  SelectAdapter.prototype.select = function (data) {
	    var self = this;

	    data.selected = true;

	    // If data.element is a DOM node, use it instead
	    if ($(data.element).is('option')) {
	      data.element.selected = true;

	      this.$element.trigger('change');

	      return;
	    }

	    if (this.$element.prop('multiple')) {
	      this.current(function (currentData) {
	        var val = [];

	        data = [data];
	        data.push.apply(data, currentData);

	        for (var d = 0; d < data.length; d++) {
	          var id = data[d].id;

	          if ($.inArray(id, val) === -1) {
	            val.push(id);
	          }
	        }

	        self.$element.val(val);
	        self.$element.trigger('change');
	      });
	    } else {
	      var val = data.id;

	      this.$element.val(val);
	      this.$element.trigger('change');
	    }
	  };

	  SelectAdapter.prototype.unselect = function (data) {
	    var self = this;

	    if (!this.$element.prop('multiple')) {
	      return;
	    }

	    data.selected = false;

	    if ($(data.element).is('option')) {
	      data.element.selected = false;

	      this.$element.trigger('change');

	      return;
	    }

	    this.current(function (currentData) {
	      var val = [];

	      for (var d = 0; d < currentData.length; d++) {
	        var id = currentData[d].id;

	        if (id !== data.id && $.inArray(id, val) === -1) {
	          val.push(id);
	        }
	      }

	      self.$element.val(val);

	      self.$element.trigger('change');
	    });
	  };

	  SelectAdapter.prototype.bind = function (container, $container) {
	    var self = this;

	    this.container = container;

	    container.on('select', function (params) {
	      self.select(params.data);
	    });

	    container.on('unselect', function (params) {
	      self.unselect(params.data);
	    });
	  };

	  SelectAdapter.prototype.destroy = function () {
	    // Remove anything added to child elements
	    this.$element.find('*').each(function () {
	      // Remove any custom data set by Select2
	      Utils.RemoveData(this);
	    });
	  };

	  SelectAdapter.prototype.query = function (params, callback) {
	    var data = [];
	    var self = this;

	    var $options = this.$element.children();

	    $options.each(function () {
	      var $option = $(this);

	      if (!$option.is('option') && !$option.is('optgroup')) {
	        return;
	      }

	      var option = self.item($option);

	      var matches = self.matches(params, option);

	      if (matches !== null) {
	        data.push(matches);
	      }
	    });

	    callback({
	      results: data
	    });
	  };

	  SelectAdapter.prototype.addOptions = function ($options) {
	    Utils.appendMany(this.$element, $options);
	  };

	  SelectAdapter.prototype.option = function (data) {
	    var option;

	    if (data.children) {
	      option = document.createElement('optgroup');
	      option.label = data.text;
	    } else {
	      option = document.createElement('option');

	      if (option.textContent !== undefined) {
	        option.textContent = data.text;
	      } else {
	        option.innerText = data.text;
	      }
	    }

	    if (data.id !== undefined) {
	      option.value = data.id;
	    }

	    if (data.disabled) {
	      option.disabled = true;
	    }

	    if (data.selected) {
	      option.selected = true;
	    }

	    if (data.title) {
	      option.title = data.title;
	    }

	    var $option = $(option);

	    var normalizedData = this._normalizeItem(data);
	    normalizedData.element = option;

	    // Override the option's data with the combined data
	    Utils.StoreData(option, 'data', normalizedData);

	    return $option;
	  };

	  SelectAdapter.prototype.item = function ($option) {
	    var data = {};

	    data = Utils.GetData($option[0], 'data');

	    if (data != null) {
	      return data;
	    }

	    if ($option.is('option')) {
	      data = {
	        id: $option.val(),
	        text: $option.text(),
	        disabled: $option.prop('disabled'),
	        selected: $option.prop('selected'),
	        title: $option.prop('title')
	      };
	    } else if ($option.is('optgroup')) {
	      data = {
	        text: $option.prop('label'),
	        children: [],
	        title: $option.prop('title')
	      };

	      var $children = $option.children('option');
	      var children = [];

	      for (var c = 0; c < $children.length; c++) {
	        var $child = $($children[c]);

	        var child = this.item($child);

	        children.push(child);
	      }

	      data.children = children;
	    }

	    data = this._normalizeItem(data);
	    data.element = $option[0];

	    Utils.StoreData($option[0], 'data', data);

	    return data;
	  };

	  SelectAdapter.prototype._normalizeItem = function (item) {
	    if (item !== Object(item)) {
	      item = {
	        id: item,
	        text: item
	      };
	    }

	    item = $.extend({}, {
	      text: ''
	    }, item);

	    var defaults = {
	      selected: false,
	      disabled: false
	    };

	    if (item.id != null) {
	      item.id = item.id.toString();
	    }

	    if (item.text != null) {
	      item.text = item.text.toString();
	    }

	    if (item._resultId == null && item.id && this.container != null) {
	      item._resultId = this.generateResultId(this.container, item);
	    }

	    return $.extend({}, defaults, item);
	  };

	  SelectAdapter.prototype.matches = function (params, data) {
	    var matcher = this.options.get('matcher');

	    return matcher(params, data);
	  };

	  return SelectAdapter;
	});

	S2.define('select2/data/array',[
	  './select',
	  '../utils',
	  'jquery'
	], function (SelectAdapter, Utils, $) {
	  function ArrayAdapter ($element, options) {
	    var data = options.get('data') || [];

	    ArrayAdapter.__super__.constructor.call(this, $element, options);

	    this.addOptions(this.convertToOptions(data));
	  }

	  Utils.Extend(ArrayAdapter, SelectAdapter);

	  ArrayAdapter.prototype.select = function (data) {
	    var $option = this.$element.find('option').filter(function (i, elm) {
	      return elm.value == data.id.toString();
	    });

	    if ($option.length === 0) {
	      $option = this.option(data);

	      this.addOptions($option);
	    }

	    ArrayAdapter.__super__.select.call(this, data);
	  };

	  ArrayAdapter.prototype.convertToOptions = function (data) {
	    var self = this;

	    var $existing = this.$element.find('option');
	    var existingIds = $existing.map(function () {
	      return self.item($(this)).id;
	    }).get();

	    var $options = [];

	    // Filter out all items except for the one passed in the argument
	    function onlyItem (item) {
	      return function () {
	        return $(this).val() == item.id;
	      };
	    }

	    for (var d = 0; d < data.length; d++) {
	      var item = this._normalizeItem(data[d]);

	      // Skip items which were pre-loaded, only merge the data
	      if ($.inArray(item.id, existingIds) >= 0) {
	        var $existingOption = $existing.filter(onlyItem(item));

	        var existingData = this.item($existingOption);
	        var newData = $.extend(true, {}, item, existingData);

	        var $newOption = this.option(newData);

	        $existingOption.replaceWith($newOption);

	        continue;
	      }

	      var $option = this.option(item);

	      if (item.children) {
	        var $children = this.convertToOptions(item.children);

	        Utils.appendMany($option, $children);
	      }

	      $options.push($option);
	    }

	    return $options;
	  };

	  return ArrayAdapter;
	});

	S2.define('select2/data/ajax',[
	  './array',
	  '../utils',
	  'jquery'
	], function (ArrayAdapter, Utils, $) {
	  function AjaxAdapter ($element, options) {
	    this.ajaxOptions = this._applyDefaults(options.get('ajax'));

	    if (this.ajaxOptions.processResults != null) {
	      this.processResults = this.ajaxOptions.processResults;
	    }

	    AjaxAdapter.__super__.constructor.call(this, $element, options);
	  }

	  Utils.Extend(AjaxAdapter, ArrayAdapter);

	  AjaxAdapter.prototype._applyDefaults = function (options) {
	    var defaults = {
	      data: function (params) {
	        return $.extend({}, params, {
	          q: params.term
	        });
	      },
	      transport: function (params, success, failure) {
	        var $request = $.ajax(params);

	        $request.then(success);
	        $request.fail(failure);

	        return $request;
	      }
	    };

	    return $.extend({}, defaults, options, true);
	  };

	  AjaxAdapter.prototype.processResults = function (results) {
	    return results;
	  };

	  AjaxAdapter.prototype.query = function (params, callback) {
	    var matches = [];
	    var self = this;

	    if (this._request != null) {
	      // JSONP requests cannot always be aborted
	      if ($.isFunction(this._request.abort)) {
	        this._request.abort();
	      }

	      this._request = null;
	    }

	    var options = $.extend({
	      type: 'GET'
	    }, this.ajaxOptions);

	    if (typeof options.url === 'function') {
	      options.url = options.url.call(this.$element, params);
	    }

	    if (typeof options.data === 'function') {
	      options.data = options.data.call(this.$element, params);
	    }

	    function request () {
	      var $request = options.transport(options, function (data) {
	        var results = self.processResults(data, params);

	        if (self.options.get('debug') && window.console && console.error) {
	          // Check to make sure that the response included a `results` key.
	          if (!results || !results.results || !$.isArray(results.results)) {
	            console.error(
	              'Select2: The AJAX results did not return an array in the ' +
	              '`results` key of the response.'
	            );
	          }
	        }

	        callback(results);
	      }, function () {
	        // Attempt to detect if a request was aborted
	        // Only works if the transport exposes a status property
	        if ('status' in $request &&
	            ($request.status === 0 || $request.status === '0')) {
	          return;
	        }

	        self.trigger('results:message', {
	          message: 'errorLoading'
	        });
	      });

	      self._request = $request;
	    }

	    if (this.ajaxOptions.delay && params.term != null) {
	      if (this._queryTimeout) {
	        window.clearTimeout(this._queryTimeout);
	      }

	      this._queryTimeout = window.setTimeout(request, this.ajaxOptions.delay);
	    } else {
	      request();
	    }
	  };

	  return AjaxAdapter;
	});

	S2.define('select2/data/tags',[
	  'jquery'
	], function ($) {
	  function Tags (decorated, $element, options) {
	    var tags = options.get('tags');

	    var createTag = options.get('createTag');

	    if (createTag !== undefined) {
	      this.createTag = createTag;
	    }

	    var insertTag = options.get('insertTag');

	    if (insertTag !== undefined) {
	        this.insertTag = insertTag;
	    }

	    decorated.call(this, $element, options);

	    if ($.isArray(tags)) {
	      for (var t = 0; t < tags.length; t++) {
	        var tag = tags[t];
	        var item = this._normalizeItem(tag);

	        var $option = this.option(item);

	        this.$element.append($option);
	      }
	    }
	  }

	  Tags.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    this._removeOldTags();

	    if (params.term == null || params.page != null) {
	      decorated.call(this, params, callback);
	      return;
	    }

	    function wrapper (obj, child) {
	      var data = obj.results;

	      for (var i = 0; i < data.length; i++) {
	        var option = data[i];

	        var checkChildren = (
	          option.children != null &&
	          !wrapper({
	            results: option.children
	          }, true)
	        );

	        var optionText = (option.text || '').toUpperCase();
	        var paramsTerm = (params.term || '').toUpperCase();

	        var checkText = optionText === paramsTerm;

	        if (checkText || checkChildren) {
	          if (child) {
	            return false;
	          }

	          obj.data = data;
	          callback(obj);

	          return;
	        }
	      }

	      if (child) {
	        return true;
	      }

	      var tag = self.createTag(params);

	      if (tag != null) {
	        var $option = self.option(tag);
	        $option.attr('data-select2-tag', true);

	        self.addOptions([$option]);

	        self.insertTag(data, tag);
	      }

	      obj.results = data;

	      callback(obj);
	    }

	    decorated.call(this, params, wrapper);
	  };

	  Tags.prototype.createTag = function (decorated, params) {
	    var term = $.trim(params.term);

	    if (term === '') {
	      return null;
	    }

	    return {
	      id: term,
	      text: term
	    };
	  };

	  Tags.prototype.insertTag = function (_, data, tag) {
	    data.unshift(tag);
	  };

	  Tags.prototype._removeOldTags = function (_) {
	    var tag = this._lastTag;

	    var $options = this.$element.find('option[data-select2-tag]');

	    $options.each(function () {
	      if (this.selected) {
	        return;
	      }

	      $(this).remove();
	    });
	  };

	  return Tags;
	});

	S2.define('select2/data/tokenizer',[
	  'jquery'
	], function ($) {
	  function Tokenizer (decorated, $element, options) {
	    var tokenizer = options.get('tokenizer');

	    if (tokenizer !== undefined) {
	      this.tokenizer = tokenizer;
	    }

	    decorated.call(this, $element, options);
	  }

	  Tokenizer.prototype.bind = function (decorated, container, $container) {
	    decorated.call(this, container, $container);

	    this.$search =  container.dropdown.$search || container.selection.$search ||
	      $container.find('.select2-search__field');
	  };

	  Tokenizer.prototype.query = function (decorated, params, callback) {
	    var self = this;

	    function createAndSelect (data) {
	      // Normalize the data object so we can use it for checks
	      var item = self._normalizeItem(data);

	      // Check if the data object already exists as a tag
	      // Select it if it doesn't
	      var $existingOptions = self.$element.find('option').filter(function () {
	        return $(this).val() === item.id;
	      });

	      // If an existing option wasn't found for it, create the option
	      if (!$existingOptions.length) {
	        var $option = self.option(item);
	        $option.attr('data-select2-tag', true);

	        self._removeOldTags();
	        self.addOptions([$option]);
	      }

	      // Select the item, now that we know there is an option for it
	      select(item);
	    }

	    function select (data) {
	      self.trigger('select', {
	        data: data
	      });
	    }

	    params.term = params.term || '';

	    var tokenData = this.tokenizer(params, this.options, createAndSelect);

	    if (tokenData.term !== params.term) {
	      // Replace the search term if we have the search box
	      if (this.$search.length) {
	        this.$search.val(tokenData.term);
	        this.$search.focus();
	      }

	      params.term = tokenData.term;
	    }

	    decorated.call(this, params, callback);
	  };

	  Tokenizer.prototype.tokenizer = function (_, params, options, callback) {
	    var separators = options.get('tokenSeparators') || [];
	    var term = params.term;
	    var i = 0;

	    var createTag = this.createTag || function (params) {
	      return {
	        id: params.term,
	        text: params.term
	      };
	    };

	    while (i < term.length) {
	      var termChar = term[i];

	      if ($.inArray(termChar, separators) === -1) {
	        i++;

	        continue;
	      }

	      var part = term.substr(0, i);
	      var partParams = $.extend({}, params, {
	        term: part
	      });

	      var data = createTag(partParams);

	      if (data == null) {
	        i++;
	        continue;
	      }

	      callback(data);

	      // Reset the term to not include the tokenized portion
	      term = term.substr(i + 1) || '';
	      i = 0;
	    }

	    return {
	      term: term
	    };
	  };

	  return Tokenizer;
	});

	S2.define('select2/data/minimumInputLength',[

	], function () {
	  function MinimumInputLength (decorated, $e, options) {
	    this.minimumInputLength = options.get('minimumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MinimumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (params.term.length < this.minimumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooShort',
	        args: {
	          minimum: this.minimumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MinimumInputLength;
	});

	S2.define('select2/data/maximumInputLength',[

	], function () {
	  function MaximumInputLength (decorated, $e, options) {
	    this.maximumInputLength = options.get('maximumInputLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumInputLength.prototype.query = function (decorated, params, callback) {
	    params.term = params.term || '';

	    if (this.maximumInputLength > 0 &&
	        params.term.length > this.maximumInputLength) {
	      this.trigger('results:message', {
	        message: 'inputTooLong',
	        args: {
	          maximum: this.maximumInputLength,
	          input: params.term,
	          params: params
	        }
	      });

	      return;
	    }

	    decorated.call(this, params, callback);
	  };

	  return MaximumInputLength;
	});

	S2.define('select2/data/maximumSelectionLength',[

	], function (){
	  function MaximumSelectionLength (decorated, $e, options) {
	    this.maximumSelectionLength = options.get('maximumSelectionLength');

	    decorated.call(this, $e, options);
	  }

	  MaximumSelectionLength.prototype.query =
	    function (decorated, params, callback) {
	      var self = this;

	      this.current(function (currentData) {
	        var count = currentData != null ? currentData.length : 0;
	        if (self.maximumSelectionLength > 0 &&
	          count >= self.maximumSelectionLength) {
	          self.trigger('results:message', {
	            message: 'maximumSelected',
	            args: {
	              maximum: self.maximumSelectionLength
	            }
	          });
	          return;
	        }
	        decorated.call(self, params, callback);
	      });
	  };

	  return MaximumSelectionLength;
	});

	S2.define('select2/dropdown',[
	  'jquery',
	  './utils'
	], function ($, Utils) {
	  function Dropdown ($element, options) {
	    this.$element = $element;
	    this.options = options;

	    Dropdown.__super__.constructor.call(this);
	  }

	  Utils.Extend(Dropdown, Utils.Observable);

	  Dropdown.prototype.render = function () {
	    var $dropdown = $(
	      '<span class="select2-dropdown">' +
	        '<span class="select2-results"></span>' +
	      '</span>'
	    );

	    $dropdown.attr('dir', this.options.get('dir'));

	    this.$dropdown = $dropdown;

	    return $dropdown;
	  };

	  Dropdown.prototype.bind = function () {
	    // Should be implemented in subclasses
	  };

	  Dropdown.prototype.position = function ($dropdown, $container) {
	    // Should be implmented in subclasses
	  };

	  Dropdown.prototype.destroy = function () {
	    // Remove the dropdown from the DOM
	    this.$dropdown.remove();
	  };

	  return Dropdown;
	});

	S2.define('select2/dropdown/search',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function Search () { }

	  Search.prototype.render = function (decorated) {
	    var $rendered = decorated.call(this);

	    var $search = $(
	      '<span class="select2-search select2-search--dropdown">' +
	        '<input class="select2-search__field" type="search" tabindex="-1"' +
	        ' autocomplete="off" autocorrect="off" autocapitalize="none"' +
	        ' spellcheck="false" role="textbox" />' +
	      '</span>'
	    );

	    this.$searchContainer = $search;
	    this.$search = $search.find('input');

	    $rendered.prepend($search);

	    return $rendered;
	  };

	  Search.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    this.$search.on('keydown', function (evt) {
	      self.trigger('keypress', evt);

	      self._keyUpPrevented = evt.isDefaultPrevented();
	    });

	    // Workaround for browsers which do not support the `input` event
	    // This will prevent double-triggering of events for browsers which support
	    // both the `keyup` and `input` events.
	    this.$search.on('input', function (evt) {
	      // Unbind the duplicated `keyup` event
	      $(this).off('keyup');
	    });

	    this.$search.on('keyup input', function (evt) {
	      self.handleSearch(evt);
	    });

	    container.on('open', function () {
	      self.$search.attr('tabindex', 0);

	      self.$search.focus();

	      window.setTimeout(function () {
	        self.$search.focus();
	      }, 0);
	    });

	    container.on('close', function () {
	      self.$search.attr('tabindex', -1);

	      self.$search.val('');
	      self.$search.blur();
	    });

	    container.on('focus', function () {
	      if (!container.isOpen()) {
	        self.$search.focus();
	      }
	    });

	    container.on('results:all', function (params) {
	      if (params.query.term == null || params.query.term === '') {
	        var showSearch = self.showSearch(params);

	        if (showSearch) {
	          self.$searchContainer.removeClass('select2-search--hide');
	        } else {
	          self.$searchContainer.addClass('select2-search--hide');
	        }
	      }
	    });
	  };

	  Search.prototype.handleSearch = function (evt) {
	    if (!this._keyUpPrevented) {
	      var input = this.$search.val();

	      this.trigger('query', {
	        term: input
	      });
	    }

	    this._keyUpPrevented = false;
	  };

	  Search.prototype.showSearch = function (_, params) {
	    return true;
	  };

	  return Search;
	});

	S2.define('select2/dropdown/hidePlaceholder',[

	], function () {
	  function HidePlaceholder (decorated, $element, options, dataAdapter) {
	    this.placeholder = this.normalizePlaceholder(options.get('placeholder'));

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  HidePlaceholder.prototype.append = function (decorated, data) {
	    data.results = this.removePlaceholder(data.results);

	    decorated.call(this, data);
	  };

	  HidePlaceholder.prototype.normalizePlaceholder = function (_, placeholder) {
	    if (typeof placeholder === 'string') {
	      placeholder = {
	        id: '',
	        text: placeholder
	      };
	    }

	    return placeholder;
	  };

	  HidePlaceholder.prototype.removePlaceholder = function (_, data) {
	    var modifiedData = data.slice(0);

	    for (var d = data.length - 1; d >= 0; d--) {
	      var item = data[d];

	      if (this.placeholder.id === item.id) {
	        modifiedData.splice(d, 1);
	      }
	    }

	    return modifiedData;
	  };

	  return HidePlaceholder;
	});

	S2.define('select2/dropdown/infiniteScroll',[
	  'jquery'
	], function ($) {
	  function InfiniteScroll (decorated, $element, options, dataAdapter) {
	    this.lastParams = {};

	    decorated.call(this, $element, options, dataAdapter);

	    this.$loadingMore = this.createLoadingMore();
	    this.loading = false;
	  }

	  InfiniteScroll.prototype.append = function (decorated, data) {
	    this.$loadingMore.remove();
	    this.loading = false;

	    decorated.call(this, data);

	    if (this.showLoadingMore(data)) {
	      this.$results.append(this.$loadingMore);
	    }
	  };

	  InfiniteScroll.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('query', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    container.on('query:append', function (params) {
	      self.lastParams = params;
	      self.loading = true;
	    });

	    this.$results.on('scroll', function () {
	      var isLoadMoreVisible = $.contains(
	        document.documentElement,
	        self.$loadingMore[0]
	      );

	      if (self.loading || !isLoadMoreVisible) {
	        return;
	      }

	      var currentOffset = self.$results.offset().top +
	        self.$results.outerHeight(false);
	      var loadingMoreOffset = self.$loadingMore.offset().top +
	        self.$loadingMore.outerHeight(false);

	      if (currentOffset + 50 >= loadingMoreOffset) {
	        self.loadMore();
	      }
	    });
	  };

	  InfiniteScroll.prototype.loadMore = function () {
	    this.loading = true;

	    var params = $.extend({}, {page: 1}, this.lastParams);

	    params.page++;

	    this.trigger('query:append', params);
	  };

	  InfiniteScroll.prototype.showLoadingMore = function (_, data) {
	    return data.pagination && data.pagination.more;
	  };

	  InfiniteScroll.prototype.createLoadingMore = function () {
	    var $option = $(
	      '<li ' +
	      'class="select2-results__option select2-results__option--load-more"' +
	      'role="treeitem" aria-disabled="true"></li>'
	    );

	    var message = this.options.get('translations').get('loadingMore');

	    $option.html(message(this.lastParams));

	    return $option;
	  };

	  return InfiniteScroll;
	});

	S2.define('select2/dropdown/attachBody',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function AttachBody (decorated, $element, options) {
	    this.$dropdownParent = options.get('dropdownParent') || $(document.body);

	    decorated.call(this, $element, options);
	  }

	  AttachBody.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    var setupResultsEvents = false;

	    decorated.call(this, container, $container);

	    container.on('open', function () {
	      self._showDropdown();
	      self._attachPositioningHandler(container);

	      if (!setupResultsEvents) {
	        setupResultsEvents = true;

	        container.on('results:all', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });

	        container.on('results:append', function () {
	          self._positionDropdown();
	          self._resizeDropdown();
	        });
	      }
	    });

	    container.on('close', function () {
	      self._hideDropdown();
	      self._detachPositioningHandler(container);
	    });

	    this.$dropdownContainer.on('mousedown', function (evt) {
	      evt.stopPropagation();
	    });
	  };

	  AttachBody.prototype.destroy = function (decorated) {
	    decorated.call(this);

	    this.$dropdownContainer.remove();
	  };

	  AttachBody.prototype.position = function (decorated, $dropdown, $container) {
	    // Clone all of the container classes
	    $dropdown.attr('class', $container.attr('class'));

	    $dropdown.removeClass('select2');
	    $dropdown.addClass('select2-container--open');

	    $dropdown.css({
	      position: 'absolute',
	      top: -999999
	    });

	    this.$container = $container;
	  };

	  AttachBody.prototype.render = function (decorated) {
	    var $container = $('<span></span>');

	    var $dropdown = decorated.call(this);
	    $container.append($dropdown);

	    this.$dropdownContainer = $container;

	    return $container;
	  };

	  AttachBody.prototype._hideDropdown = function (decorated) {
	    this.$dropdownContainer.detach();
	  };

	  AttachBody.prototype._attachPositioningHandler =
	      function (decorated, container) {
	    var self = this;

	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.each(function () {
	      Utils.StoreData(this, 'select2-scroll-position', {
	        x: $(this).scrollLeft(),
	        y: $(this).scrollTop()
	      });
	    });

	    $watchers.on(scrollEvent, function (ev) {
	      var position = Utils.GetData(this, 'select2-scroll-position');
	      $(this).scrollTop(position.y);
	    });

	    $(window).on(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent,
	      function (e) {
	      self._positionDropdown();
	      self._resizeDropdown();
	    });
	  };

	  AttachBody.prototype._detachPositioningHandler =
	      function (decorated, container) {
	    var scrollEvent = 'scroll.select2.' + container.id;
	    var resizeEvent = 'resize.select2.' + container.id;
	    var orientationEvent = 'orientationchange.select2.' + container.id;

	    var $watchers = this.$container.parents().filter(Utils.hasScroll);
	    $watchers.off(scrollEvent);

	    $(window).off(scrollEvent + ' ' + resizeEvent + ' ' + orientationEvent);
	  };

	  AttachBody.prototype._positionDropdown = function () {
	    var $window = $(window);

	    var isCurrentlyAbove = this.$dropdown.hasClass('select2-dropdown--above');
	    var isCurrentlyBelow = this.$dropdown.hasClass('select2-dropdown--below');

	    var newDirection = null;

	    var offset = this.$container.offset();

	    offset.bottom = offset.top + this.$container.outerHeight(false);

	    var container = {
	      height: this.$container.outerHeight(false)
	    };

	    container.top = offset.top;
	    container.bottom = offset.top + container.height;

	    var dropdown = {
	      height: this.$dropdown.outerHeight(false)
	    };

	    var viewport = {
	      top: $window.scrollTop(),
	      bottom: $window.scrollTop() + $window.height()
	    };

	    var enoughRoomAbove = viewport.top < (offset.top - dropdown.height);
	    var enoughRoomBelow = viewport.bottom > (offset.bottom + dropdown.height);

	    var css = {
	      left: offset.left,
	      top: container.bottom
	    };

	    // Determine what the parent element is to use for calciulating the offset
	    var $offsetParent = this.$dropdownParent;

	    // For statically positoned elements, we need to get the element
	    // that is determining the offset
	    if ($offsetParent.css('position') === 'static') {
	      $offsetParent = $offsetParent.offsetParent();
	    }

	    var parentOffset = $offsetParent.offset();

	    css.top -= parentOffset.top;
	    css.left -= parentOffset.left;

	    if (!isCurrentlyAbove && !isCurrentlyBelow) {
	      newDirection = 'below';
	    }

	    if (!enoughRoomBelow && enoughRoomAbove && !isCurrentlyAbove) {
	      newDirection = 'above';
	    } else if (!enoughRoomAbove && enoughRoomBelow && isCurrentlyAbove) {
	      newDirection = 'below';
	    }

	    if (newDirection == 'above' ||
	      (isCurrentlyAbove && newDirection !== 'below')) {
	      css.top = container.top - parentOffset.top - dropdown.height;
	    }

	    if (newDirection != null) {
	      this.$dropdown
	        .removeClass('select2-dropdown--below select2-dropdown--above')
	        .addClass('select2-dropdown--' + newDirection);
	      this.$container
	        .removeClass('select2-container--below select2-container--above')
	        .addClass('select2-container--' + newDirection);
	    }

	    this.$dropdownContainer.css(css);
	  };

	  AttachBody.prototype._resizeDropdown = function () {
	    var css = {
	      width: this.$container.outerWidth(false) + 'px'
	    };

	    if (this.options.get('dropdownAutoWidth')) {
	      css.minWidth = css.width;
	      css.position = 'relative';
	      css.width = 'auto';
	    }

	    this.$dropdown.css(css);
	  };

	  AttachBody.prototype._showDropdown = function (decorated) {
	    this.$dropdownContainer.appendTo(this.$dropdownParent);

	    this._positionDropdown();
	    this._resizeDropdown();
	  };

	  return AttachBody;
	});

	S2.define('select2/dropdown/minimumResultsForSearch',[

	], function () {
	  function countResults (data) {
	    var count = 0;

	    for (var d = 0; d < data.length; d++) {
	      var item = data[d];

	      if (item.children) {
	        count += countResults(item.children);
	      } else {
	        count++;
	      }
	    }

	    return count;
	  }

	  function MinimumResultsForSearch (decorated, $element, options, dataAdapter) {
	    this.minimumResultsForSearch = options.get('minimumResultsForSearch');

	    if (this.minimumResultsForSearch < 0) {
	      this.minimumResultsForSearch = Infinity;
	    }

	    decorated.call(this, $element, options, dataAdapter);
	  }

	  MinimumResultsForSearch.prototype.showSearch = function (decorated, params) {
	    if (countResults(params.data.results) < this.minimumResultsForSearch) {
	      return false;
	    }

	    return decorated.call(this, params);
	  };

	  return MinimumResultsForSearch;
	});

	S2.define('select2/dropdown/selectOnClose',[
	  '../utils'
	], function (Utils) {
	  function SelectOnClose () { }

	  SelectOnClose.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('close', function (params) {
	      self._handleSelectOnClose(params);
	    });
	  };

	  SelectOnClose.prototype._handleSelectOnClose = function (_, params) {
	    if (params && params.originalSelect2Event != null) {
	      var event = params.originalSelect2Event;

	      // Don't select an item if the close event was triggered from a select or
	      // unselect event
	      if (event._type === 'select' || event._type === 'unselect') {
	        return;
	      }
	    }

	    var $highlightedResults = this.getHighlightedResults();

	    // Only select highlighted results
	    if ($highlightedResults.length < 1) {
	      return;
	    }

	    var data = Utils.GetData($highlightedResults[0], 'data');

	    // Don't re-select already selected resulte
	    if (
	      (data.element != null && data.element.selected) ||
	      (data.element == null && data.selected)
	    ) {
	      return;
	    }

	    this.trigger('select', {
	        data: data
	    });
	  };

	  return SelectOnClose;
	});

	S2.define('select2/dropdown/closeOnSelect',[

	], function () {
	  function CloseOnSelect () { }

	  CloseOnSelect.prototype.bind = function (decorated, container, $container) {
	    var self = this;

	    decorated.call(this, container, $container);

	    container.on('select', function (evt) {
	      self._selectTriggered(evt);
	    });

	    container.on('unselect', function (evt) {
	      self._selectTriggered(evt);
	    });
	  };

	  CloseOnSelect.prototype._selectTriggered = function (_, evt) {
	    var originalEvent = evt.originalEvent;

	    // Don't close if the control key is being held
	    if (originalEvent && originalEvent.ctrlKey) {
	      return;
	    }

	    this.trigger('close', {
	      originalEvent: originalEvent,
	      originalSelect2Event: evt
	    });
	  };

	  return CloseOnSelect;
	});

	S2.define('select2/i18n/en',[],function () {
	  // English
	  return {
	    errorLoading: function () {
	      return 'The results could not be loaded.';
	    },
	    inputTooLong: function (args) {
	      var overChars = args.input.length - args.maximum;

	      var message = 'Please delete ' + overChars + ' character';

	      if (overChars != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    inputTooShort: function (args) {
	      var remainingChars = args.minimum - args.input.length;

	      var message = 'Please enter ' + remainingChars + ' or more characters';

	      return message;
	    },
	    loadingMore: function () {
	      return 'Loading more results…';
	    },
	    maximumSelected: function (args) {
	      var message = 'You can only select ' + args.maximum + ' item';

	      if (args.maximum != 1) {
	        message += 's';
	      }

	      return message;
	    },
	    noResults: function () {
	      return 'No results found';
	    },
	    searching: function () {
	      return 'Searching…';
	    }
	  };
	});

	S2.define('select2/defaults',[
	  'jquery',
	  'require',

	  './results',

	  './selection/single',
	  './selection/multiple',
	  './selection/placeholder',
	  './selection/allowClear',
	  './selection/search',
	  './selection/eventRelay',

	  './utils',
	  './translation',
	  './diacritics',

	  './data/select',
	  './data/array',
	  './data/ajax',
	  './data/tags',
	  './data/tokenizer',
	  './data/minimumInputLength',
	  './data/maximumInputLength',
	  './data/maximumSelectionLength',

	  './dropdown',
	  './dropdown/search',
	  './dropdown/hidePlaceholder',
	  './dropdown/infiniteScroll',
	  './dropdown/attachBody',
	  './dropdown/minimumResultsForSearch',
	  './dropdown/selectOnClose',
	  './dropdown/closeOnSelect',

	  './i18n/en'
	], function ($, require,

	             ResultsList,

	             SingleSelection, MultipleSelection, Placeholder, AllowClear,
	             SelectionSearch, EventRelay,

	             Utils, Translation, DIACRITICS,

	             SelectData, ArrayData, AjaxData, Tags, Tokenizer,
	             MinimumInputLength, MaximumInputLength, MaximumSelectionLength,

	             Dropdown, DropdownSearch, HidePlaceholder, InfiniteScroll,
	             AttachBody, MinimumResultsForSearch, SelectOnClose, CloseOnSelect,

	             EnglishTranslation) {
	  function Defaults () {
	    this.reset();
	  }

	  Defaults.prototype.apply = function (options) {
	    options = $.extend(true, {}, this.defaults, options);

	    if (options.dataAdapter == null) {
	      if (options.ajax != null) {
	        options.dataAdapter = AjaxData;
	      } else if (options.data != null) {
	        options.dataAdapter = ArrayData;
	      } else {
	        options.dataAdapter = SelectData;
	      }

	      if (options.minimumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MinimumInputLength
	        );
	      }

	      if (options.maximumInputLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumInputLength
	        );
	      }

	      if (options.maximumSelectionLength > 0) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          MaximumSelectionLength
	        );
	      }

	      if (options.tags) {
	        options.dataAdapter = Utils.Decorate(options.dataAdapter, Tags);
	      }

	      if (options.tokenSeparators != null || options.tokenizer != null) {
	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Tokenizer
	        );
	      }

	      if (options.query != null) {
	        var Query = require(options.amdBase + 'compat/query');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          Query
	        );
	      }

	      if (options.initSelection != null) {
	        var InitSelection = require(options.amdBase + 'compat/initSelection');

	        options.dataAdapter = Utils.Decorate(
	          options.dataAdapter,
	          InitSelection
	        );
	      }
	    }

	    if (options.resultsAdapter == null) {
	      options.resultsAdapter = ResultsList;

	      if (options.ajax != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          InfiniteScroll
	        );
	      }

	      if (options.placeholder != null) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          HidePlaceholder
	        );
	      }

	      if (options.selectOnClose) {
	        options.resultsAdapter = Utils.Decorate(
	          options.resultsAdapter,
	          SelectOnClose
	        );
	      }
	    }

	    if (options.dropdownAdapter == null) {
	      if (options.multiple) {
	        options.dropdownAdapter = Dropdown;
	      } else {
	        var SearchableDropdown = Utils.Decorate(Dropdown, DropdownSearch);

	        options.dropdownAdapter = SearchableDropdown;
	      }

	      if (options.minimumResultsForSearch !== 0) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          MinimumResultsForSearch
	        );
	      }

	      if (options.closeOnSelect) {
	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          CloseOnSelect
	        );
	      }

	      if (
	        options.dropdownCssClass != null ||
	        options.dropdownCss != null ||
	        options.adaptDropdownCssClass != null
	      ) {
	        var DropdownCSS = require(options.amdBase + 'compat/dropdownCss');

	        options.dropdownAdapter = Utils.Decorate(
	          options.dropdownAdapter,
	          DropdownCSS
	        );
	      }

	      options.dropdownAdapter = Utils.Decorate(
	        options.dropdownAdapter,
	        AttachBody
	      );
	    }

	    if (options.selectionAdapter == null) {
	      if (options.multiple) {
	        options.selectionAdapter = MultipleSelection;
	      } else {
	        options.selectionAdapter = SingleSelection;
	      }

	      // Add the placeholder mixin if a placeholder was specified
	      if (options.placeholder != null) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          Placeholder
	        );
	      }

	      if (options.allowClear) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          AllowClear
	        );
	      }

	      if (options.multiple) {
	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          SelectionSearch
	        );
	      }

	      if (
	        options.containerCssClass != null ||
	        options.containerCss != null ||
	        options.adaptContainerCssClass != null
	      ) {
	        var ContainerCSS = require(options.amdBase + 'compat/containerCss');

	        options.selectionAdapter = Utils.Decorate(
	          options.selectionAdapter,
	          ContainerCSS
	        );
	      }

	      options.selectionAdapter = Utils.Decorate(
	        options.selectionAdapter,
	        EventRelay
	      );
	    }

	    if (typeof options.language === 'string') {
	      // Check if the language is specified with a region
	      if (options.language.indexOf('-') > 0) {
	        // Extract the region information if it is included
	        var languageParts = options.language.split('-');
	        var baseLanguage = languageParts[0];

	        options.language = [options.language, baseLanguage];
	      } else {
	        options.language = [options.language];
	      }
	    }

	    if ($.isArray(options.language)) {
	      var languages = new Translation();
	      options.language.push('en');

	      var languageNames = options.language;

	      for (var l = 0; l < languageNames.length; l++) {
	        var name = languageNames[l];
	        var language = {};

	        try {
	          // Try to load it with the original name
	          language = Translation.loadPath(name);
	        } catch (e) {
	          try {
	            // If we couldn't load it, check if it wasn't the full path
	            name = this.defaults.amdLanguageBase + name;
	            language = Translation.loadPath(name);
	          } catch (ex) {
	            // The translation could not be loaded at all. Sometimes this is
	            // because of a configuration problem, other times this can be
	            // because of how Select2 helps load all possible translation files.
	            if (options.debug && window.console && console.warn) {
	              console.warn(
	                'Select2: The language file for "' + name + '" could not be ' +
	                'automatically loaded. A fallback will be used instead.'
	              );
	            }

	            continue;
	          }
	        }

	        languages.extend(language);
	      }

	      options.translations = languages;
	    } else {
	      var baseTranslation = Translation.loadPath(
	        this.defaults.amdLanguageBase + 'en'
	      );
	      var customTranslation = new Translation(options.language);

	      customTranslation.extend(baseTranslation);

	      options.translations = customTranslation;
	    }

	    return options;
	  };

	  Defaults.prototype.reset = function () {
	    function stripDiacritics (text) {
	      // Used 'uni range + named function' from http://jsperf.com/diacritics/18
	      function match(a) {
	        return DIACRITICS[a] || a;
	      }

	      return text.replace(/[^\u0000-\u007E]/g, match);
	    }

	    function matcher (params, data) {
	      // Always return the object if there is nothing to compare
	      if ($.trim(params.term) === '') {
	        return data;
	      }

	      // Do a recursive check for options with children
	      if (data.children && data.children.length > 0) {
	        // Clone the data object if there are children
	        // This is required as we modify the object to remove any non-matches
	        var match = $.extend(true, {}, data);

	        // Check each child of the option
	        for (var c = data.children.length - 1; c >= 0; c--) {
	          var child = data.children[c];

	          var matches = matcher(params, child);

	          // If there wasn't a match, remove the object in the array
	          if (matches == null) {
	            match.children.splice(c, 1);
	          }
	        }

	        // If any children matched, return the new object
	        if (match.children.length > 0) {
	          return match;
	        }

	        // If there were no matching children, check just the plain object
	        return matcher(params, match);
	      }

	      var original = stripDiacritics(data.text).toUpperCase();
	      var term = stripDiacritics(params.term).toUpperCase();

	      // Check if the text contains the term
	      if (original.indexOf(term) > -1) {
	        return data;
	      }

	      // If it doesn't contain the term, don't return anything
	      return null;
	    }

	    this.defaults = {
	      amdBase: './',
	      amdLanguageBase: './i18n/',
	      closeOnSelect: true,
	      debug: false,
	      dropdownAutoWidth: false,
	      escapeMarkup: Utils.escapeMarkup,
	      language: EnglishTranslation,
	      matcher: matcher,
	      minimumInputLength: 0,
	      maximumInputLength: 0,
	      maximumSelectionLength: 0,
	      minimumResultsForSearch: 0,
	      selectOnClose: false,
	      sorter: function (data) {
	        return data;
	      },
	      templateResult: function (result) {
	        return result.text;
	      },
	      templateSelection: function (selection) {
	        return selection.text;
	      },
	      theme: 'default',
	      width: 'resolve'
	    };
	  };

	  Defaults.prototype.set = function (key, value) {
	    var camelKey = $.camelCase(key);

	    var data = {};
	    data[camelKey] = value;

	    var convertedData = Utils._convertData(data);

	    $.extend(true, this.defaults, convertedData);
	  };

	  var defaults = new Defaults();

	  return defaults;
	});

	S2.define('select2/options',[
	  'require',
	  'jquery',
	  './defaults',
	  './utils'
	], function (require, $, Defaults, Utils) {
	  function Options (options, $element) {
	    this.options = options;

	    if ($element != null) {
	      this.fromElement($element);
	    }

	    this.options = Defaults.apply(this.options);

	    if ($element && $element.is('input')) {
	      var InputCompat = require(this.get('amdBase') + 'compat/inputData');

	      this.options.dataAdapter = Utils.Decorate(
	        this.options.dataAdapter,
	        InputCompat
	      );
	    }
	  }

	  Options.prototype.fromElement = function ($e) {
	    var excludedData = ['select2'];

	    if (this.options.multiple == null) {
	      this.options.multiple = $e.prop('multiple');
	    }

	    if (this.options.disabled == null) {
	      this.options.disabled = $e.prop('disabled');
	    }

	    if (this.options.language == null) {
	      if ($e.prop('lang')) {
	        this.options.language = $e.prop('lang').toLowerCase();
	      } else if ($e.closest('[lang]').prop('lang')) {
	        this.options.language = $e.closest('[lang]').prop('lang');
	      }
	    }

	    if (this.options.dir == null) {
	      if ($e.prop('dir')) {
	        this.options.dir = $e.prop('dir');
	      } else if ($e.closest('[dir]').prop('dir')) {
	        this.options.dir = $e.closest('[dir]').prop('dir');
	      } else {
	        this.options.dir = 'ltr';
	      }
	    }

	    $e.prop('disabled', this.options.disabled);
	    $e.prop('multiple', this.options.multiple);

	    if (Utils.GetData($e[0], 'select2Tags')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-select2-tags` attribute has been changed to ' +
	          'use the `data-data` and `data-tags="true"` attributes and will be ' +
	          'removed in future versions of Select2.'
	        );
	      }

	      Utils.StoreData($e[0], 'data', Utils.GetData($e[0], 'select2Tags'));
	      Utils.StoreData($e[0], 'tags', true);
	    }

	    if (Utils.GetData($e[0], 'ajaxUrl')) {
	      if (this.options.debug && window.console && console.warn) {
	        console.warn(
	          'Select2: The `data-ajax-url` attribute has been changed to ' +
	          '`data-ajax--url` and support for the old attribute will be removed' +
	          ' in future versions of Select2.'
	        );
	      }

	      $e.attr('ajax--url', Utils.GetData($e[0], 'ajaxUrl'));
	      Utils.StoreData($e[0], 'ajax-Url', Utils.GetData($e[0], 'ajaxUrl'));
		  
	    }

	    var dataset = {};

	    // Prefer the element's `dataset` attribute if it exists
	    // jQuery 1.x does not correctly handle data attributes with multiple dashes
	    if ($.fn.jquery && $.fn.jquery.substr(0, 2) == '1.' && $e[0].dataset) {
	      dataset = $.extend(true, {}, $e[0].dataset, Utils.GetData($e[0]));
	    } else {
	      dataset = Utils.GetData($e[0]);
	    }

	    var data = $.extend(true, {}, dataset);

	    data = Utils._convertData(data);

	    for (var key in data) {
	      if ($.inArray(key, excludedData) > -1) {
	        continue;
	      }

	      if ($.isPlainObject(this.options[key])) {
	        $.extend(this.options[key], data[key]);
	      } else {
	        this.options[key] = data[key];
	      }
	    }

	    return this;
	  };

	  Options.prototype.get = function (key) {
	    return this.options[key];
	  };

	  Options.prototype.set = function (key, val) {
	    this.options[key] = val;
	  };

	  return Options;
	});

	S2.define('select2/core',[
	  'jquery',
	  './options',
	  './utils',
	  './keys'
	], function ($, Options, Utils, KEYS) {
	  var Select2 = function ($element, options) {
	    if (Utils.GetData($element[0], 'select2') != null) {
	      Utils.GetData($element[0], 'select2').destroy();
	    }

	    this.$element = $element;

	    this.id = this._generateId($element);

	    options = options || {};

	    this.options = new Options(options, $element);

	    Select2.__super__.constructor.call(this);

	    // Set up the tabindex

	    var tabindex = $element.attr('tabindex') || 0;
	    Utils.StoreData($element[0], 'old-tabindex', tabindex);
	    $element.attr('tabindex', '-1');

	    // Set up containers and adapters

	    var DataAdapter = this.options.get('dataAdapter');
	    this.dataAdapter = new DataAdapter($element, this.options);

	    var $container = this.render();

	    this._placeContainer($container);

	    var SelectionAdapter = this.options.get('selectionAdapter');
	    this.selection = new SelectionAdapter($element, this.options);
	    this.$selection = this.selection.render();

	    this.selection.position(this.$selection, $container);

	    var DropdownAdapter = this.options.get('dropdownAdapter');
	    this.dropdown = new DropdownAdapter($element, this.options);
	    this.$dropdown = this.dropdown.render();

	    this.dropdown.position(this.$dropdown, $container);

	    var ResultsAdapter = this.options.get('resultsAdapter');
	    this.results = new ResultsAdapter($element, this.options, this.dataAdapter);
	    this.$results = this.results.render();

	    this.results.position(this.$results, this.$dropdown);

	    // Bind events

	    var self = this;

	    // Bind the container to all of the adapters
	    this._bindAdapters();

	    // Register any DOM event handlers
	    this._registerDomEvents();

	    // Register any internal event handlers
	    this._registerDataEvents();
	    this._registerSelectionEvents();
	    this._registerDropdownEvents();
	    this._registerResultsEvents();
	    this._registerEvents();

	    // Set the initial state
	    this.dataAdapter.current(function (initialData) {
	      self.trigger('selection:update', {
	        data: initialData
	      });
	    });

	    // Hide the original select
	    $element.addClass('select2-hidden-accessible');
	    $element.attr('aria-hidden', 'true');

	    // Synchronize any monitored attributes
	    this._syncAttributes();

	    Utils.StoreData($element[0], 'select2', this);

	    // Ensure backwards compatibility with $element.data('select2').
	    $element.data('select2', this);
	  };

	  Utils.Extend(Select2, Utils.Observable);

	  Select2.prototype._generateId = function ($element) {
	    var id = '';

	    if ($element.attr('id') != null) {
	      id = $element.attr('id');
	    } else if ($element.attr('name') != null) {
	      id = $element.attr('name') + '-' + Utils.generateChars(2);
	    } else {
	      id = Utils.generateChars(4);
	    }

	    id = id.replace(/(:|\.|\[|\]|,)/g, '');
	    id = 'select2-' + id;

	    return id;
	  };

	  Select2.prototype._placeContainer = function ($container) {
	    $container.insertAfter(this.$element);

	    var width = this._resolveWidth(this.$element, this.options.get('width'));

	    if (width != null) {
	      $container.css('width', width);
	    }
	  };

	  Select2.prototype._resolveWidth = function ($element, method) {
	    var WIDTH = /^width:(([-+]?([0-9]*\.)?[0-9]+)(px|em|ex|%|in|cm|mm|pt|pc))/i;

	    if (method == 'resolve') {
	      var styleWidth = this._resolveWidth($element, 'style');

	      if (styleWidth != null) {
	        return styleWidth;
	      }

	      return this._resolveWidth($element, 'element');
	    }

	    if (method == 'element') {
	      var elementWidth = $element.outerWidth(false);

	      if (elementWidth <= 0) {
	        return 'auto';
	      }

	      return elementWidth + 'px';
	    }

	    if (method == 'style') {
	      var style = $element.attr('style');

	      if (typeof(style) !== 'string') {
	        return null;
	      }

	      var attrs = style.split(';');

	      for (var i = 0, l = attrs.length; i < l; i = i + 1) {
	        var attr = attrs[i].replace(/\s/g, '');
	        var matches = attr.match(WIDTH);

	        if (matches !== null && matches.length >= 1) {
	          return matches[1];
	        }
	      }

	      return null;
	    }

	    return method;
	  };

	  Select2.prototype._bindAdapters = function () {
	    this.dataAdapter.bind(this, this.$container);
	    this.selection.bind(this, this.$container);

	    this.dropdown.bind(this, this.$container);
	    this.results.bind(this, this.$container);
	  };

	  Select2.prototype._registerDomEvents = function () {
	    var self = this;

	    this.$element.on('change.select2', function () {
	      self.dataAdapter.current(function (data) {
	        self.trigger('selection:update', {
	          data: data
	        });
	      });
	    });

	    this.$element.on('focus.select2', function (evt) {
	      self.trigger('focus', evt);
	    });

	    this._syncA = Utils.bind(this._syncAttributes, this);
	    this._syncS = Utils.bind(this._syncSubtree, this);

	    if (this.$element[0].attachEvent) {
	      this.$element[0].attachEvent('onpropertychange', this._syncA);
	    }

	    var observer = window.MutationObserver ||
	      window.WebKitMutationObserver ||
	      window.MozMutationObserver
	    ;

	    if (observer != null) {
	      this._observer = new observer(function (mutations) {
	        $.each(mutations, self._syncA);
	        $.each(mutations, self._syncS);
	      });
	      this._observer.observe(this.$element[0], {
	        attributes: true,
	        childList: true,
	        subtree: false
	      });
	    } else if (this.$element[0].addEventListener) {
	      this.$element[0].addEventListener(
	        'DOMAttrModified',
	        self._syncA,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeInserted',
	        self._syncS,
	        false
	      );
	      this.$element[0].addEventListener(
	        'DOMNodeRemoved',
	        self._syncS,
	        false
	      );
	    }
	  };

	  Select2.prototype._registerDataEvents = function () {
	    var self = this;

	    this.dataAdapter.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerSelectionEvents = function () {
	    var self = this;
	    var nonRelayEvents = ['toggle', 'focus'];

	    this.selection.on('toggle', function () {
	      self.toggleDropdown();
	    });

	    this.selection.on('focus', function (params) {
	      self.focus(params);
	    });

	    this.selection.on('*', function (name, params) {
	      if ($.inArray(name, nonRelayEvents) !== -1) {
	        return;
	      }

	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerDropdownEvents = function () {
	    var self = this;

	    this.dropdown.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerResultsEvents = function () {
	    var self = this;

	    this.results.on('*', function (name, params) {
	      self.trigger(name, params);
	    });
	  };

	  Select2.prototype._registerEvents = function () {
	    var self = this;

	    this.on('open', function () {
	      self.$container.addClass('select2-container--open');
	    });

	    this.on('close', function () {
	      self.$container.removeClass('select2-container--open');
	    });

	    this.on('enable', function () {
	      self.$container.removeClass('select2-container--disabled');
	    });

	    this.on('disable', function () {
	      self.$container.addClass('select2-container--disabled');
	    });

	    this.on('blur', function () {
	      self.$container.removeClass('select2-container--focus');
	    });

	    this.on('query', function (params) {
	      if (!self.isOpen()) {
	        self.trigger('open', {});
	      }

	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:all', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('query:append', function (params) {
	      this.dataAdapter.query(params, function (data) {
	        self.trigger('results:append', {
	          data: data,
	          query: params
	        });
	      });
	    });

	    this.on('keypress', function (evt) {
	      var key = evt.which;

	      if (self.isOpen()) {
	        if (key === KEYS.ESC || key === KEYS.TAB ||
	            (key === KEYS.UP && evt.altKey)) {
	          self.close();

	          evt.preventDefault();
	        } else if (key === KEYS.ENTER) {
	          self.trigger('results:select', {});

	          evt.preventDefault();
	        } else if ((key === KEYS.SPACE && evt.ctrlKey)) {
	          self.trigger('results:toggle', {});

	          evt.preventDefault();
	        } else if (key === KEYS.UP) {
	          self.trigger('results:previous', {});

	          evt.preventDefault();
	        } else if (key === KEYS.DOWN) {
	          self.trigger('results:next', {});

	          evt.preventDefault();
	        }
	      } else {
	        if (key === KEYS.ENTER || key === KEYS.SPACE ||
	            (key === KEYS.DOWN && evt.altKey)) {
	          self.open();

	          evt.preventDefault();
	        }
	      }
	    });
	  };

	  Select2.prototype._syncAttributes = function () {
	    this.options.set('disabled', this.$element.prop('disabled'));

	    if (this.options.get('disabled')) {
	      if (this.isOpen()) {
	        this.close();
	      }

	      this.trigger('disable', {});
	    } else {
	      this.trigger('enable', {});
	    }
	  };

	  Select2.prototype._syncSubtree = function (evt, mutations) {
	    var changed = false;
	    var self = this;

	    // Ignore any mutation events raised for elements that aren't options or
	    // optgroups. This handles the case when the select element is destroyed
	    if (
	      evt && evt.target && (
	        evt.target.nodeName !== 'OPTION' && evt.target.nodeName !== 'OPTGROUP'
	      )
	    ) {
	      return;
	    }

	    if (!mutations) {
	      // If mutation events aren't supported, then we can only assume that the
	      // change affected the selections
	      changed = true;
	    } else if (mutations.addedNodes && mutations.addedNodes.length > 0) {
	      for (var n = 0; n < mutations.addedNodes.length; n++) {
	        var node = mutations.addedNodes[n];

	        if (node.selected) {
	          changed = true;
	        }
	      }
	    } else if (mutations.removedNodes && mutations.removedNodes.length > 0) {
	      changed = true;
	    }

	    // Only re-pull the data if we think there is a change
	    if (changed) {
	      this.dataAdapter.current(function (currentData) {
	        self.trigger('selection:update', {
	          data: currentData
	        });
	      });
	    }
	  };

	  /**
	   * Override the trigger method to automatically trigger pre-events when
	   * there are events that can be prevented.
	   */
	  Select2.prototype.trigger = function (name, args) {
	    var actualTrigger = Select2.__super__.trigger;
	    var preTriggerMap = {
	      'open': 'opening',
	      'close': 'closing',
	      'select': 'selecting',
	      'unselect': 'unselecting',
	      'clear': 'clearing'
	    };

	    if (args === undefined) {
	      args = {};
	    }

	    if (name in preTriggerMap) {
	      var preTriggerName = preTriggerMap[name];
	      var preTriggerArgs = {
	        prevented: false,
	        name: name,
	        args: args
	      };

	      actualTrigger.call(this, preTriggerName, preTriggerArgs);

	      if (preTriggerArgs.prevented) {
	        args.prevented = true;

	        return;
	      }
	    }

	    actualTrigger.call(this, name, args);
	  };

	  Select2.prototype.toggleDropdown = function () {
	    if (this.options.get('disabled')) {
	      return;
	    }

	    if (this.isOpen()) {
	      this.close();
	    } else {
	      this.open();
	    }
	  };

	  Select2.prototype.open = function () {
	    if (this.isOpen()) {
	      return;
	    }

	    this.trigger('query', {});
	  };

	  Select2.prototype.close = function () {
	    if (!this.isOpen()) {
	      return;
	    }

	    this.trigger('close', {});
	  };

	  Select2.prototype.isOpen = function () {
	    return this.$container.hasClass('select2-container--open');
	  };

	  Select2.prototype.hasFocus = function () {
	    return this.$container.hasClass('select2-container--focus');
	  };

	  Select2.prototype.focus = function (data) {
	    // No need to re-trigger focus events if we are already focused
	    if (this.hasFocus()) {
	      return;
	    }

	    this.$container.addClass('select2-container--focus');
	    this.trigger('focus', {});
	  };

	  Select2.prototype.enable = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("enable")` method has been deprecated and will' +
	        ' be removed in later Select2 versions. Use $element.prop("disabled")' +
	        ' instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      args = [true];
	    }

	    var disabled = !args[0];

	    this.$element.prop('disabled', disabled);
	  };

	  Select2.prototype.data = function () {
	    if (this.options.get('debug') &&
	        arguments.length > 0 && window.console && console.warn) {
	      console.warn(
	        'Select2: Data can no longer be set using `select2("data")`. You ' +
	        'should consider setting the value instead using `$element.val()`.'
	      );
	    }

	    var data = [];

	    this.dataAdapter.current(function (currentData) {
	      data = currentData;
	    });

	    return data;
	  };

	  Select2.prototype.val = function (args) {
	    if (this.options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `select2("val")` method has been deprecated and will be' +
	        ' removed in later Select2 versions. Use $element.val() instead.'
	      );
	    }

	    if (args == null || args.length === 0) {
	      return this.$element.val();
	    }

	    var newVal = args[0];

	    if ($.isArray(newVal)) {
	      newVal = $.map(newVal, function (obj) {
	        return obj.toString();
	      });
	    }

	    this.$element.val(newVal).trigger('change');
	  };

	  Select2.prototype.destroy = function () {
	    this.$container.remove();

	    if (this.$element[0].detachEvent) {
	      this.$element[0].detachEvent('onpropertychange', this._syncA);
	    }

	    if (this._observer != null) {
	      this._observer.disconnect();
	      this._observer = null;
	    } else if (this.$element[0].removeEventListener) {
	      this.$element[0]
	        .removeEventListener('DOMAttrModified', this._syncA, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeInserted', this._syncS, false);
	      this.$element[0]
	        .removeEventListener('DOMNodeRemoved', this._syncS, false);
	    }

	    this._syncA = null;
	    this._syncS = null;

	    this.$element.off('.select2');
	    this.$element.attr('tabindex',
	    Utils.GetData(this.$element[0], 'old-tabindex'));

	    this.$element.removeClass('select2-hidden-accessible');
	    this.$element.attr('aria-hidden', 'false');
	    Utils.RemoveData(this.$element[0]);
	    this.$element.removeData('select2');

	    this.dataAdapter.destroy();
	    this.selection.destroy();
	    this.dropdown.destroy();
	    this.results.destroy();

	    this.dataAdapter = null;
	    this.selection = null;
	    this.dropdown = null;
	    this.results = null;
	  };

	  Select2.prototype.render = function () {
	    var $container = $(
	      '<span class="select2 select2-container">' +
	        '<span class="selection"></span>' +
	        '<span class="dropdown-wrapper" aria-hidden="true"></span>' +
	      '</span>'
	    );

	    $container.attr('dir', this.options.get('dir'));

	    this.$container = $container;

	    this.$container.addClass('select2-container--' + this.options.get('theme'));

	    Utils.StoreData($container[0], 'element', this.$element);

	    return $container;
	  };

	  return Select2;
	});

	S2.define('select2/compat/utils',[
	  'jquery'
	], function ($) {
	  function syncCssClasses ($dest, $src, adapter) {
	    var classes, replacements = [], adapted;

	    classes = $.trim($dest.attr('class'));

	    if (classes) {
	      classes = '' + classes; // for IE which returns object

	      $(classes.split(/\s+/)).each(function () {
	        // Save all Select2 classes
	        if (this.indexOf('select2-') === 0) {
	          replacements.push(this);
	        }
	      });
	    }

	    classes = $.trim($src.attr('class'));

	    if (classes) {
	      classes = '' + classes; // for IE which returns object

	      $(classes.split(/\s+/)).each(function () {
	        // Only adapt non-Select2 classes
	        if (this.indexOf('select2-') !== 0) {
	          adapted = adapter(this);

	          if (adapted != null) {
	            replacements.push(adapted);
	          }
	        }
	      });
	    }

	    $dest.attr('class', replacements.join(' '));
	  }

	  return {
	    syncCssClasses: syncCssClasses
	  };
	});

	S2.define('select2/compat/containerCss',[
	  'jquery',
	  './utils'
	], function ($, CompatUtils) {
	  // No-op CSS adapter that discards all classes by default
	  function _containerAdapter (clazz) {
	    return null;
	  }

	  function ContainerCSS () { }

	  ContainerCSS.prototype.render = function (decorated) {
	    var $container = decorated.call(this);

	    var containerCssClass = this.options.get('containerCssClass') || '';

	    if ($.isFunction(containerCssClass)) {
	      containerCssClass = containerCssClass(this.$element);
	    }

	    var containerCssAdapter = this.options.get('adaptContainerCssClass');
	    containerCssAdapter = containerCssAdapter || _containerAdapter;

	    if (containerCssClass.indexOf(':all:') !== -1) {
	      containerCssClass = containerCssClass.replace(':all:', '');

	      var _cssAdapter = containerCssAdapter;

	      containerCssAdapter = function (clazz) {
	        var adapted = _cssAdapter(clazz);

	        if (adapted != null) {
	          // Append the old one along with the adapted one
	          return adapted + ' ' + clazz;
	        }

	        return clazz;
	      };
	    }

	    var containerCss = this.options.get('containerCss') || {};

	    if ($.isFunction(containerCss)) {
	      containerCss = containerCss(this.$element);
	    }

	    CompatUtils.syncCssClasses($container, this.$element, containerCssAdapter);

	    $container.css(containerCss);
	    $container.addClass(containerCssClass);

	    return $container;
	  };

	  return ContainerCSS;
	});

	S2.define('select2/compat/dropdownCss',[
	  'jquery',
	  './utils'
	], function ($, CompatUtils) {
	  // No-op CSS adapter that discards all classes by default
	  function _dropdownAdapter (clazz) {
	    return null;
	  }

	  function DropdownCSS () { }

	  DropdownCSS.prototype.render = function (decorated) {
	    var $dropdown = decorated.call(this);

	    var dropdownCssClass = this.options.get('dropdownCssClass') || '';

	    if ($.isFunction(dropdownCssClass)) {
	      dropdownCssClass = dropdownCssClass(this.$element);
	    }

	    var dropdownCssAdapter = this.options.get('adaptDropdownCssClass');
	    dropdownCssAdapter = dropdownCssAdapter || _dropdownAdapter;

	    if (dropdownCssClass.indexOf(':all:') !== -1) {
	      dropdownCssClass = dropdownCssClass.replace(':all:', '');

	      var _cssAdapter = dropdownCssAdapter;

	      dropdownCssAdapter = function (clazz) {
	        var adapted = _cssAdapter(clazz);

	        if (adapted != null) {
	          // Append the old one along with the adapted one
	          return adapted + ' ' + clazz;
	        }

	        return clazz;
	      };
	    }

	    var dropdownCss = this.options.get('dropdownCss') || {};

	    if ($.isFunction(dropdownCss)) {
	      dropdownCss = dropdownCss(this.$element);
	    }

	    CompatUtils.syncCssClasses($dropdown, this.$element, dropdownCssAdapter);

	    $dropdown.css(dropdownCss);
	    $dropdown.addClass(dropdownCssClass);

	    return $dropdown;
	  };

	  return DropdownCSS;
	});

	S2.define('select2/compat/initSelection',[
	  'jquery'
	], function ($) {
	  function InitSelection (decorated, $element, options) {
	    if (options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `initSelection` option has been deprecated in favor' +
	        ' of a custom data adapter that overrides the `current` method. ' +
	        'This method is now called multiple times instead of a single ' +
	        'time when the instance is initialized. Support will be removed ' +
	        'for the `initSelection` option in future versions of Select2'
	      );
	    }

	    this.initSelection = options.get('initSelection');
	    this._isInitialized = false;

	    decorated.call(this, $element, options);
	  }

	  InitSelection.prototype.current = function (decorated, callback) {
	    var self = this;

	    if (this._isInitialized) {
	      decorated.call(this, callback);

	      return;
	    }

	    this.initSelection.call(null, this.$element, function (data) {
	      self._isInitialized = true;

	      if (!$.isArray(data)) {
	        data = [data];
	      }

	      callback(data);
	    });
	  };

	  return InitSelection;
	});

	S2.define('select2/compat/inputData',[
	  'jquery',
	  '../utils'
	], function ($, Utils) {
	  function InputData (decorated, $element, options) {
	    this._currentData = [];
	    this._valueSeparator = options.get('valueSeparator') || ',';

	    if ($element.prop('type') === 'hidden') {
	      if (options.get('debug') && console && console.warn) {
	        console.warn(
	          'Select2: Using a hidden input with Select2 is no longer ' +
	          'supported and may stop working in the future. It is recommended ' +
	          'to use a `<select>` element instead.'
	        );
	      }
	    }

	    decorated.call(this, $element, options);
	  }

	  InputData.prototype.current = function (_, callback) {
	    function getSelected (data, selectedIds) {
	      var selected = [];

	      if (data.selected || $.inArray(data.id, selectedIds) !== -1) {
	        data.selected = true;
	        selected.push(data);
	      } else {
	        data.selected = false;
	      }

	      if (data.children) {
	        selected.push.apply(selected, getSelected(data.children, selectedIds));
	      }

	      return selected;
	    }

	    var selected = [];

	    for (var d = 0; d < this._currentData.length; d++) {
	      var data = this._currentData[d];

	      selected.push.apply(
	        selected,
	        getSelected(
	          data,
	          this.$element.val().split(
	            this._valueSeparator
	          )
	        )
	      );
	    }

	    callback(selected);
	  };

	  InputData.prototype.select = function (_, data) {
	    if (!this.options.get('multiple')) {
	      this.current(function (allData) {
	        $.map(allData, function (data) {
	          data.selected = false;
	        });
	      });

	      this.$element.val(data.id);
	      this.$element.trigger('change');
	    } else {
	      var value = this.$element.val();
	      value += this._valueSeparator + data.id;

	      this.$element.val(value);
	      this.$element.trigger('change');
	    }
	  };

	  InputData.prototype.unselect = function (_, data) {
	    var self = this;

	    data.selected = false;

	    this.current(function (allData) {
	      var values = [];

	      for (var d = 0; d < allData.length; d++) {
	        var item = allData[d];

	        if (data.id == item.id) {
	          continue;
	        }

	        values.push(item.id);
	      }

	      self.$element.val(values.join(self._valueSeparator));
	      self.$element.trigger('change');
	    });
	  };

	  InputData.prototype.query = function (_, params, callback) {
	    var results = [];

	    for (var d = 0; d < this._currentData.length; d++) {
	      var data = this._currentData[d];

	      var matches = this.matches(params, data);

	      if (matches !== null) {
	        results.push(matches);
	      }
	    }

	    callback({
	      results: results
	    });
	  };

	  InputData.prototype.addOptions = function (_, $options) {
	    var options = $.map($options, function ($option) {
	      return Utils.GetData($option[0], 'data');
	    });

	    this._currentData.push.apply(this._currentData, options);
	  };

	  return InputData;
	});

	S2.define('select2/compat/matcher',[
	  'jquery'
	], function ($) {
	  function oldMatcher (matcher) {
	    function wrappedMatcher (params, data) {
	      var match = $.extend(true, {}, data);

	      if (params.term == null || $.trim(params.term) === '') {
	        return match;
	      }

	      if (data.children) {
	        for (var c = data.children.length - 1; c >= 0; c--) {
	          var child = data.children[c];

	          // Check if the child object matches
	          // The old matcher returned a boolean true or false
	          var doesMatch = matcher(params.term, child.text, child);

	          // If the child didn't match, pop it off
	          if (!doesMatch) {
	            match.children.splice(c, 1);
	          }
	        }

	        if (match.children.length > 0) {
	          return match;
	        }
	      }

	      if (matcher(params.term, data.text, data)) {
	        return match;
	      }

	      return null;
	    }

	    return wrappedMatcher;
	  }

	  return oldMatcher;
	});

	S2.define('select2/compat/query',[

	], function () {
	  function Query (decorated, $element, options) {
	    if (options.get('debug') && window.console && console.warn) {
	      console.warn(
	        'Select2: The `query` option has been deprecated in favor of a ' +
	        'custom data adapter that overrides the `query` method. Support ' +
	        'will be removed for the `query` option in future versions of ' +
	        'Select2.'
	      );
	    }

	    decorated.call(this, $element, options);
	  }

	  Query.prototype.query = function (_, params, callback) {
	    params.callback = callback;

	    var query = this.options.get('query');

	    query.call(null, params);
	  };

	  return Query;
	});

	S2.define('select2/dropdown/attachContainer',[

	], function () {
	  function AttachContainer (decorated, $element, options) {
	    decorated.call(this, $element, options);
	  }

	  AttachContainer.prototype.position =
	    function (decorated, $dropdown, $container) {
	    var $dropdownContainer = $container.find('.dropdown-wrapper');
	    $dropdownContainer.append($dropdown);

	    $dropdown.addClass('select2-dropdown--below');
	    $container.addClass('select2-container--below');
	  };

	  return AttachContainer;
	});

	S2.define('select2/dropdown/stopPropagation',[

	], function () {
	  function StopPropagation () { }

	  StopPropagation.prototype.bind = function (decorated, container, $container) {
	    decorated.call(this, container, $container);

	    var stoppedEvents = [
	    'blur',
	    'change',
	    'click',
	    'dblclick',
	    'focus',
	    'focusin',
	    'focusout',
	    'input',
	    'keydown',
	    'keyup',
	    'keypress',
	    'mousedown',
	    'mouseenter',
	    'mouseleave',
	    'mousemove',
	    'mouseover',
	    'mouseup',
	    'search',
	    'touchend',
	    'touchstart'
	    ];

	    this.$dropdown.on(stoppedEvents.join(' '), function (evt) {
	      evt.stopPropagation();
	    });
	  };

	  return StopPropagation;
	});

	S2.define('select2/selection/stopPropagation',[

	], function () {
	  function StopPropagation () { }

	  StopPropagation.prototype.bind = function (decorated, container, $container) {
	    decorated.call(this, container, $container);

	    var stoppedEvents = [
	      'blur',
	      'change',
	      'click',
	      'dblclick',
	      'focus',
	      'focusin',
	      'focusout',
	      'input',
	      'keydown',
	      'keyup',
	      'keypress',
	      'mousedown',
	      'mouseenter',
	      'mouseleave',
	      'mousemove',
	      'mouseover',
	      'mouseup',
	      'search',
	      'touchend',
	      'touchstart'
	    ];

	    this.$selection.on(stoppedEvents.join(' '), function (evt) {
	      evt.stopPropagation();
	    });
	  };

	  return StopPropagation;
	});

	/*!
	 * jQuery Mousewheel 3.1.13
	 *
	 * Copyright jQuery Foundation and other contributors
	 * Released under the MIT license
	 * http://jquery.org/license
	 */

	(function (factory) {
	    if ( typeof S2.define === 'function' && S2.define.amd ) {
	        // AMD. Register as an anonymous module.
	        S2.define('jquery-mousewheel',['jquery'], factory);
	    } else if (true) {
	        // Node/CommonJS style for Browserify
	        module.exports = factory;
	    } else {
	        // Browser globals
	        factory(jQuery);
	    }
	}(function ($) {

	    var toFix  = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'],
	        toBind = ( 'onwheel' in document || document.documentMode >= 9 ) ?
	                    ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
	        slice  = Array.prototype.slice,
	        nullLowestDeltaTimeout, lowestDelta;

	    if ( $.event.fixHooks ) {
	        for ( var i = toFix.length; i; ) {
	            $.event.fixHooks[ toFix[--i] ] = $.event.mouseHooks;
	        }
	    }

	    var special = $.event.special.mousewheel = {
	        version: '3.1.12',

	        setup: function() {
	            if ( this.addEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.addEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = handler;
	            }
	            // Store the line height and page height for this particular element
	            $.data(this, 'mousewheel-line-height', special.getLineHeight(this));
	            $.data(this, 'mousewheel-page-height', special.getPageHeight(this));
	        },

	        teardown: function() {
	            if ( this.removeEventListener ) {
	                for ( var i = toBind.length; i; ) {
	                    this.removeEventListener( toBind[--i], handler, false );
	                }
	            } else {
	                this.onmousewheel = null;
	            }
	            // Clean up the data we added to the element
	            $.removeData(this, 'mousewheel-line-height');
	            $.removeData(this, 'mousewheel-page-height');
	        },

	        getLineHeight: function(elem) {
	            var $elem = $(elem),
	                $parent = $elem['offsetParent' in $.fn ? 'offsetParent' : 'parent']();
	            if (!$parent.length) {
	                $parent = $('body');
	            }
	            return parseInt($parent.css('fontSize'), 10) || parseInt($elem.css('fontSize'), 10) || 16;
	        },

	        getPageHeight: function(elem) {
	            return $(elem).height();
	        },

	        settings: {
	            adjustOldDeltas: true, // see shouldAdjustOldDeltas() below
	            normalizeOffset: true  // calls getBoundingClientRect for each event
	        }
	    };

	    $.fn.extend({
	        mousewheel: function(fn) {
	            return fn ? this.bind('mousewheel', fn) : this.trigger('mousewheel');
	        },

	        unmousewheel: function(fn) {
	            return this.unbind('mousewheel', fn);
	        }
	    });


	    function handler(event) {
	        var orgEvent   = event || window.event,
	            args       = slice.call(arguments, 1),
	            delta      = 0,
	            deltaX     = 0,
	            deltaY     = 0,
	            absDelta   = 0,
	            offsetX    = 0,
	            offsetY    = 0;
	        event = $.event.fix(orgEvent);
	        event.type = 'mousewheel';

	        // Old school scrollwheel delta
	        if ( 'detail'      in orgEvent ) { deltaY = orgEvent.detail * -1;      }
	        if ( 'wheelDelta'  in orgEvent ) { deltaY = orgEvent.wheelDelta;       }
	        if ( 'wheelDeltaY' in orgEvent ) { deltaY = orgEvent.wheelDeltaY;      }
	        if ( 'wheelDeltaX' in orgEvent ) { deltaX = orgEvent.wheelDeltaX * -1; }

	        // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
	        if ( 'axis' in orgEvent && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
	            deltaX = deltaY * -1;
	            deltaY = 0;
	        }

	        // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
	        delta = deltaY === 0 ? deltaX : deltaY;

	        // New school wheel delta (wheel event)
	        if ( 'deltaY' in orgEvent ) {
	            deltaY = orgEvent.deltaY * -1;
	            delta  = deltaY;
	        }
	        if ( 'deltaX' in orgEvent ) {
	            deltaX = orgEvent.deltaX;
	            if ( deltaY === 0 ) { delta  = deltaX * -1; }
	        }

	        // No change actually happened, no reason to go any further
	        if ( deltaY === 0 && deltaX === 0 ) { return; }

	        // Need to convert lines and pages to pixels if we aren't already in pixels
	        // There are three delta modes:
	        //   * deltaMode 0 is by pixels, nothing to do
	        //   * deltaMode 1 is by lines
	        //   * deltaMode 2 is by pages
	        if ( orgEvent.deltaMode === 1 ) {
	            var lineHeight = $.data(this, 'mousewheel-line-height');
	            delta  *= lineHeight;
	            deltaY *= lineHeight;
	            deltaX *= lineHeight;
	        } else if ( orgEvent.deltaMode === 2 ) {
	            var pageHeight = $.data(this, 'mousewheel-page-height');
	            delta  *= pageHeight;
	            deltaY *= pageHeight;
	            deltaX *= pageHeight;
	        }

	        // Store lowest absolute delta to normalize the delta values
	        absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

	        if ( !lowestDelta || absDelta < lowestDelta ) {
	            lowestDelta = absDelta;

	            // Adjust older deltas if necessary
	            if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	                lowestDelta /= 40;
	            }
	        }

	        // Adjust older deltas if necessary
	        if ( shouldAdjustOldDeltas(orgEvent, absDelta) ) {
	            // Divide all the things by 40!
	            delta  /= 40;
	            deltaX /= 40;
	            deltaY /= 40;
	        }

	        // Get a whole, normalized value for the deltas
	        delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
	        deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
	        deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

	        // Normalise offsetX and offsetY properties
	        if ( special.settings.normalizeOffset && this.getBoundingClientRect ) {
	            var boundingRect = this.getBoundingClientRect();
	            offsetX = event.clientX - boundingRect.left;
	            offsetY = event.clientY - boundingRect.top;
	        }

	        // Add information to the event object
	        event.deltaX = deltaX;
	        event.deltaY = deltaY;
	        event.deltaFactor = lowestDelta;
	        event.offsetX = offsetX;
	        event.offsetY = offsetY;
	        // Go ahead and set deltaMode to 0 since we converted to pixels
	        // Although this is a little odd since we overwrite the deltaX/Y
	        // properties with normalized deltas.
	        event.deltaMode = 0;

	        // Add event and delta to the front of the arguments
	        args.unshift(event, delta, deltaX, deltaY);

	        // Clearout lowestDelta after sometime to better
	        // handle multiple device types that give different
	        // a different lowestDelta
	        // Ex: trackpad = 3 and mouse wheel = 120
	        if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
	        nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

	        return ($.event.dispatch || $.event.handle).apply(this, args);
	    }

	    function nullLowestDelta() {
	        lowestDelta = null;
	    }

	    function shouldAdjustOldDeltas(orgEvent, absDelta) {
	        // If this is an older event and the delta is divisable by 120,
	        // then we are assuming that the browser is treating this as an
	        // older mouse wheel event and that we should divide the deltas
	        // by 40 to try and get a more usable deltaFactor.
	        // Side note, this actually impacts the reported scroll distance
	        // in older browsers and can cause scrolling to be slower than native.
	        // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
	        return special.settings.adjustOldDeltas && orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
	    }

	}));

	S2.define('jquery.select2',[
	  'jquery',
	  'jquery-mousewheel',

	  './select2/core',
	  './select2/defaults',
	  './select2/utils'
	], function ($, _, Select2, Defaults, Utils) {
	  if ($.fn.select2 == null) {
	    // All methods that should return the element
	    var thisMethods = ['open', 'close', 'destroy'];

	    $.fn.select2 = function (options) {
	      options = options || {};

	      if (typeof options === 'object') {
	        this.each(function () {
	          var instanceOptions = $.extend(true, {}, options);

	          var instance = new Select2($(this), instanceOptions);
	        });

	        return this;
	      } else if (typeof options === 'string') {
	        var ret;
	        var args = Array.prototype.slice.call(arguments, 1);

	        this.each(function () {
	          var instance = Utils.GetData(this, 'select2');

	          if (instance == null && window.console && console.error) {
	            console.error(
	              'The select2(\'' + options + '\') method was called on an ' +
	              'element that is not using Select2.'
	            );
	          }

	          ret = instance[options].apply(instance, args);
	        });

	        // Check if we should be returning `this`
	        if ($.inArray(options, thisMethods) > -1) {
	          return this;
	        }

	        return ret;
	      } else {
	        throw new Error('Invalid arguments for Select2: ' + options);
	      }
	    };
	  }

	  if ($.fn.select2.defaults == null) {
	    $.fn.select2.defaults = Defaults;
	  }

	  return Select2;
	});

	  // Return the AMD loader configuration so it can be used outside of this file
	  return {
	    define: S2.define,
	    require: S2.require
	  };
	}());

	  // Autoload the jQuery bindings
	  // We know that all of the modules exist above this, so we're safe
	  var select2 = S2.require('jquery.select2');

	  // Hold the AMD module references on the jQuery function that was just loaded
	  // This allows Select2 to use the internal loader outside of this file, such
	  // as in the language files.
	  jQuery.fn.select2.amd = S2;

	  // Return the Select2 instance for anyone who is importing it.
	  return select2;
	}));


/***/ })
/******/ ])});;